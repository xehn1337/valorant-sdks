// Class ShooterGame.BaseGameDataEventReceiver
// Size: 0x30 (Inherited: 0x30)
struct UBaseGameDataEventReceiver : UObject {
};

// Class ShooterGame.AbilityRechargeComponent
// Size: 0x108 (Inherited: 0xe8)
struct UAbilityRechargeComponent : UActorComponent {
	int32_t MaxCharges; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FMulticastInlineDelegate AuthOnAbilityRecharged; // 0xf0(0x10)
	int32_t CurrentCharges; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void OnRep_CurrentCharges(); // Function ShooterGame.AbilityRechargeComponent.OnRep_CurrentCharges // (Final|Native|Private) // @ game+0x2ca57a0
	int32_t GetCurrentCharges(); // Function ShooterGame.AbilityRechargeComponent.GetCurrentCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4630
	void AuthSetMaxCharges(int32_t NumMaxCharges); // Function ShooterGame.AbilityRechargeComponent.AuthSetMaxCharges // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void AuthResetCharges(); // Function ShooterGame.AbilityRechargeComponent.AuthResetCharges // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3cf0
};

// Class ShooterGame.ResourceComponent
// Size: 0x118 (Inherited: 0xe8)
struct UResourceComponent : UActorComponent {
	struct FMulticastInlineDelegate OnResourceChanged; // 0xe8(0x10)
	char pad_F8[0x4]; // 0xf8(0x04)
	int32_t PredictedResourceAmount; // 0xfc(0x04)
	int32_t AuthResourceAmount; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x108(0x08)
	struct UValueDisagreementTimer* CurrentStateDisagreementTimerClassOverride; // 0x110(0x08)

	int32_t Replenish(int32_t Units); // Function ShooterGame.ResourceComponent.Replenish // (Native|Public|BlueprintCallable) // @ game+0x3019000
	void OnRep_AuthResourceAmount(); // Function ShooterGame.ResourceComponent.OnRep_AuthResourceAmount // (Final|Native|Private) // @ game+0x3018d20
	void NotifyResourceChanged(); // Function ShooterGame.ResourceComponent.NotifyResourceChanged // (Native|Public|BlueprintCallable) // @ game+0x2dd6d90
	bool IsEmpty(); // Function ShooterGame.ResourceComponent.IsEmpty // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddf790
	int32_t GetMaxUnitsConsumable(); // Function ShooterGame.ResourceComponent.GetMaxUnitsConsumable // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3018690
	bool Consume(int32_t Units); // Function ShooterGame.ResourceComponent.Consume // (Native|Public|BlueprintCallable) // @ game+0x30184c0
	bool CanConsume(int32_t Units); // Function ShooterGame.ResourceComponent.CanConsume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30182d0
};

// Class ShooterGame.AbilityResourceComponent
// Size: 0x138 (Inherited: 0x118)
struct UAbilityResourceComponent : UResourceComponent {
	struct UPurchasedItemComponent* PurchasedItemComponent; // 0x118(0x08)
	struct UTexture* ShopImage; // 0x120(0x08)
	int32_t PipCost; // 0x128(0x04)
	int32_t ChargesToGrantOnPipCast; // 0x12c(0x04)
	char pad_130[0x8]; // 0x130(0x08)

	bool UsePipCasting(); // Function ShooterGame.AbilityResourceComponent.UsePipCasting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca5ec0
	bool HasPipsToCast(); // Function ShooterGame.AbilityResourceComponent.HasPipsToCast // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca5680
	void HandlePipResourceChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.AbilityResourceComponent.HandlePipResourceChanged // (Final|Native|Protected) // @ game+0x2ca54b0
	void HandlePipCastingGameRuleChanged(enum class EGameRuleBoolName GameRule, bool Enabled); // Function ShooterGame.AbilityResourceComponent.HandlePipCastingGameRuleChanged // (Final|Native|Protected) // @ game+0x2ca53e0
	void HandleOwningShooterPlayerStateChanged(struct AShooterPlayerState* NewValue); // Function ShooterGame.AbilityResourceComponent.HandleOwningShooterPlayerStateChanged // (Final|Native|Protected) // @ game+0x2ca5350
	void HandleOwningShooterCharacterChanged(struct AAresItem* item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AbilityResourceComponent.HandleOwningShooterCharacterChanged // (Final|Native|Protected) // @ game+0x2ca5240
	void HandleOwningEquippableOwnerChanged(struct AAresItem* item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AbilityResourceComponent.HandleOwningEquippableOwnerChanged // (Native|Protected) // @ game+0x2ca5130
	int32_t GetPipCost(); // Function ShooterGame.AbilityResourceComponent.GetPipCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4d70
	int32_t GetMaxUnitsConsumableWithResource(); // Function ShooterGame.AbilityResourceComponent.GetMaxUnitsConsumableWithResource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4d40
	int32_t GetMaxUnitsConsumableWithPips(); // Function ShooterGame.AbilityResourceComponent.GetMaxUnitsConsumableWithPips // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4d10
	int32_t GetChargesToGrantOnPipCast(); // Function ShooterGame.AbilityResourceComponent.GetChargesToGrantOnPipCast // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4380
	bool ConsumeWithResource(int32_t Units); // Function ShooterGame.AbilityResourceComponent.ConsumeWithResource // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3f90
	bool ConsumeWithPips(int32_t Units); // Function ShooterGame.AbilityResourceComponent.ConsumeWithPips // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3ef0
	bool CanConsumeWithResource(int32_t Units); // Function ShooterGame.AbilityResourceComponent.CanConsumeWithResource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca3e50
	bool CanConsumeWithPips(int32_t Units); // Function ShooterGame.AbilityResourceComponent.CanConsumeWithPips // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca3db0
};

// Class ShooterGame.AbilityStatisticsDelegateComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UAbilityStatisticsDelegateComponent : UActorComponent {
	int32_t AuthCastIndex; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct UGameStatisticsComponent* AuthGameStatisticsComponent; // 0xf0(0x08)

	struct UGameStatisticsComponent* LocateGameStatisticsComponent(struct AActor* CauserActor); // Function ShooterGame.AbilityStatisticsDelegateComponent.LocateGameStatisticsComponent // (Final|Native|Static|Private) // @ game+0x2ca5710
	struct UGameStatisticsComponent* GetGameStatisticsComponentForCauser(struct AActor* CauserActor, int32_t& CastIndex); // Function ShooterGame.AbilityStatisticsDelegateComponent.GetGameStatisticsComponentForCauser // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2ca4860
	void AuthHandleSubActorBegunPlay(struct AActor* Actor); // Function ShooterGame.AbilityStatisticsDelegateComponent.AuthHandleSubActorBegunPlay // (Final|Native|Private) // @ game+0x2ca3c60
	struct UGameStatisticsComponent* AuthCastAbilityForCauser(struct AActor* CauserActor, struct FVector AbilityLocation, int32_t& CastIndex); // Function ShooterGame.AbilityStatisticsDelegateComponent.AuthCastAbilityForCauser // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2ca3a20
};

// Class ShooterGame.AbilityTrackingComponent
// Size: 0x138 (Inherited: 0xe8)
struct UAbilityTrackingComponent : UActorComponent {
	struct TSet<struct AActor*> TrackedSubobjects; // 0xe8(0x50)

	struct TSet<struct AActor*> GetTrackedSubobjects(); // Function ShooterGame.AbilityTrackingComponent.GetTrackedSubobjects // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca4e50
};

// Class ShooterGame.AbilityTrackingDelegateComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UAbilityTrackingDelegateComponent : UActorComponent {
	struct UAbilityTrackingComponent* AbilityTrackingComponent; // 0xe8(0x08)
};

// Class ShooterGame.AbilityUpgradeComponent
// Size: 0x120 (Inherited: 0xe8)
struct UAbilityUpgradeComponent : UActorComponent {
	struct TArray<int32_t> RankCost; // 0xe8(0x10)
	enum class EUpgradeCostType CostType; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct UTexture* ShopImage; // 0x100(0x08)
	struct FMulticastInlineDelegate OnRankChanged; // 0x108(0x10)
	int32_t CurrentRank; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)

	void OnRep_CurrentRank(); // Function ShooterGame.AbilityUpgradeComponent.OnRep_CurrentRank // (Final|Native|Protected) // @ game+0x2ca57c0
	int32_t GetMaxRank(); // Function ShooterGame.AbilityUpgradeComponent.GetMaxRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4ce0
	int32_t GetCurrentRank(); // Function ShooterGame.AbilityUpgradeComponent.GetCurrentRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4660
	void CheckUltimateHighWaterMark(int32_t TotalAcquiredUltPoints); // Function ShooterGame.AbilityUpgradeComponent.CheckUltimateHighWaterMark // (Final|Native|Private) // @ game+0x2ca3d20
	void AuthEquippableOwnerChanged(struct AAresItem* item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AbilityUpgradeComponent.AuthEquippableOwnerChanged // (Final|Native|Private) // @ game+0x2ca3b50
};

// Class ShooterGame.InitSystem
// Size: 0x80 (Inherited: 0x30)
struct UInitSystem : UObject {
	struct TSet<struct UInitSystem*> Dependencies; // 0x30(0x50)
};

// Class ShooterGame.AccountXPManager
// Size: 0x108 (Inherited: 0x80)
struct UAccountXPManager : UInitSystem {
	struct FMulticastInlineDelegate OnAccountXPPlayerUpdated; // 0x80(0x10)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct UContentIndex* ContentIndex; // 0xa0(0x08)
	struct URMSManager* RMSManager; // 0xa8(0x08)
	struct UAccountXPService* AccountXPService; // 0xb0(0x08)
	struct UAccountXPViewModel* ViewModel; // 0xb8(0x08)
	int32_t LevelCheatOverride; // 0xc0(0x04)
	char pad_C4[0x44]; // 0xc4(0x44)

	void TriggerRefreshPlayer(); // Function ShooterGame.AccountXPManager.TriggerRefreshPlayer // (Final|Native|Private|BlueprintCallable) // @ game+0x2ca5a50
	void SetAccountLevelCheat(int32_t Level); // Function ShooterGame.AccountXPManager.SetAccountLevelCheat // (Final|Native|Public) // @ game+0x2ca3d20
	bool IsEnabled(); // Function ShooterGame.AccountXPManager.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca56e0
	int32_t GetWinOfTheDayAP(); // Function ShooterGame.AccountXPManager.GetWinOfTheDayAP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ca4f50
	struct UAccountXPViewModel* GetViewModel(); // Function ShooterGame.AccountXPManager.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4f30
	struct UAccountXPManager* Get(struct UWorld* FromWorld); // Function ShooterGame.AccountXPManager.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ca4260
};

// Class ShooterGame.AccountXPService
// Size: 0x38 (Inherited: 0x30)
struct UAccountXPService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.AccountXPViewModel
// Size: 0x90 (Inherited: 0x30)
struct UAccountXPViewModel : UObject {
	struct FMulticastInlineDelegate OnAccountXPLevelChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnAccountXPXPChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnNextTimeFirstWinAvailableChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnHistoryChanged; // 0x60(0x10)
	int32_t Level; // 0x70(0x04)
	int32_t XP; // 0x74(0x04)
	struct FDateTime NextTimeFirstWinAvailable; // 0x78(0x08)
	struct TArray<struct FAccountXPMatch> History; // 0x80(0x10)

	int32_t GetXP(); // Function ShooterGame.AccountXPViewModel.GetXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4f80
	enum class EAccountXPXPSourceID GetSourceEnum(struct FString StringSource); // Function ShooterGame.AccountXPViewModel.GetSourceEnum // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4d90
	struct FAccountXPMatch GetMatch(struct FGuid MatchID); // Function ShooterGame.AccountXPViewModel.GetMatch // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2ca4ac0
	int32_t GetLevel(); // Function ShooterGame.AccountXPViewModel.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2301af0
	float GetCollectiveMultiplier(struct TArray<struct FAccountXPXPMultiplier> Multipliers); // Function ShooterGame.AccountXPViewModel.GetCollectiveMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca43a0
	void AddMatch(struct FAccountXPMatch& Match); // Function ShooterGame.AccountXPViewModel.AddMatch // (Final|Native|Public|HasOutParms) // @ game+0x2ca3770
};

// Class ShooterGame.GamepadPresetDataAsset
// Size: 0xc8 (Inherited: 0x38)
struct UGamepadPresetDataAsset : UDataAsset {
	struct FText PresetMapName; // 0x38(0x18)
	struct FText PresetMapDescription; // 0x50(0x18)
	struct TArray<struct FGamepadInputActionPreset> KeyMappings; // 0x68(0x10)
	struct TMap<struct FName, struct FGamepadAlternateActionMappingList> AlternateActionMappings; // 0x78(0x50)
};

// Class ShooterGame.GamepadPresetListAsset
// Size: 0x48 (Inherited: 0x38)
struct UGamepadPresetListAsset : UDataAsset {
	struct TArray<struct UGamepadPresetDataAsset*> KeyMappings; // 0x38(0x10)
};

// Class ShooterGame.ActionBindingsManager
// Size: 0x390 (Inherited: 0x80)
struct UActionBindingsManager : UInitSystem {
	struct FMulticastInlineDelegate ActionBindingChanged; // 0x80(0x10)
	char pad_90[0x90]; // 0x90(0x90)
	struct FMulticastInlineDelegate AttemptAlternateBoundAction; // 0x120(0x10)
	char pad_130[0xf0]; // 0x130(0xf0)
	struct TMap<struct FActionBindSetIdentifier, struct UActionBindSet*> actions; // 0x220(0x50)
	struct UActionTraitsManager* ActionTraitsManager; // 0x270(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0x278(0x08)
	struct UContentIndex* ContentIndex; // 0x280(0x08)
	char pad_288[0x58]; // 0x288(0x58)
	struct FMulticastInlineDelegate OnConflictStatesUpdated; // 0x2e0(0x10)
	char pad_2F0[0xa0]; // 0x2f0(0xa0)

	void UpdateContextConflictStates(enum class EActionSettingsContext Context, struct FName Character); // Function ShooterGame.ActionBindingsManager.UpdateContextConflictStates // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca5dd0
	void UpdateAllConflictStates(); // Function ShooterGame.ActionBindingsManager.UpdateAllConflictStates // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca5db0
	struct UActionBindSet* TryGetActionBindSet(struct FName ActionName, enum class EActionBindSetAxisDirection AxisDirection); // Function ShooterGame.ActionBindingsManager.TryGetActionBindSet // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca5a70
	bool TryGetActionBinding(struct FName ActionName, enum class EActionBindSetAxisDirection AxisDirection, int32_t BindIndex, struct FInputChord& OutInput, bool bFallbackToNextBindIndex); // Function ShooterGame.ActionBindingsManager.TryGetActionBinding // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2ca5b70
	void ResetCustomBaseLayer(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindingsManager.ResetCustomBaseLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca59d0
	void ResetAllCharacterSpecificBindings(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindingsManager.ResetAllCharacterSpecificBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca5950
	void ResetAllBindingsForCharacter(struct FName CharacterName, enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindingsManager.ResetAllBindingsForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca5860
	void ResetAllBindings(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindingsManager.ResetAllBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca57e0
	bool IsCharacterLayerAllowed(); // Function ShooterGame.ActionBindingsManager.IsCharacterLayerAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca56b0
	bool HasPendingCustomBaseBindings(); // Function ShooterGame.ActionBindingsManager.HasPendingCustomBaseBindings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca5650
	bool HasPendingBindingsForCharacter(struct FName Character); // Function ShooterGame.ActionBindingsManager.HasPendingBindingsForCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca55a0
	bool HasPendingBindingsForAnyCharacter(); // Function ShooterGame.ActionBindingsManager.HasPendingBindingsForAnyCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca5570
	bool HasAnyPendingBindings(); // Function ShooterGame.ActionBindingsManager.HasAnyPendingBindings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca5540
	void HandleActionBindingChanged(struct UActionBindSet* ActionBindSet, int32_t BindIndex, enum class EActionBindChangeSource ChangeSource, struct FName Character); // Function ShooterGame.ActionBindingsManager.HandleActionBindingChanged // (Final|Native|Protected) // @ game+0x2ca4fb0
	bool GetGamepadBinding(struct FName ActionName, struct FInputChord& OutInputChord); // Function ShooterGame.ActionBindingsManager.GetGamepadBinding // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2ca4940
	void GetDefaultGamepadBindings(struct TArray<struct FGamepadInputActionPreset>& PrimaryBindings, struct TArray<struct FGamepadInputActionPreset>& AlternateBindings); // Function ShooterGame.ActionBindingsManager.GetDefaultGamepadBindings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2ca4690
	void GetConflictsForCharacter(struct FName Character, struct TArray<struct FConflictList>& OutConflicts); // Function ShooterGame.ActionBindingsManager.GetConflictsForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca44f0
	struct UActionBindingsManager* GetActionBindingsManager(struct UObject* WorldContextObject); // Function ShooterGame.ActionBindingsManager.GetActionBindingsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ca42f0
	bool DoesCharacterProfileExist(struct FName Character); // Function ShooterGame.ActionBindingsManager.DoesCharacterProfileExist // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca41b0
	void DeleteCharacterProfile(struct FName Character); // Function ShooterGame.ActionBindingsManager.DeleteCharacterProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca4110
	void DeleteAllCharacterProfiles(); // Function ShooterGame.ActionBindingsManager.DeleteAllCharacterProfiles // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca40f0
	void CopyCustomBaseToCharacterProfile(struct FName Character); // Function ShooterGame.ActionBindingsManager.CopyCustomBaseToCharacterProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca4050
	void CopyCustomBaseToAllCharacterProfiles(); // Function ShooterGame.ActionBindingsManager.CopyCustomBaseToAllCharacterProfiles // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca4030
	void ApplyPendingCustomBaseBindings(); // Function ShooterGame.ActionBindingsManager.ApplyPendingCustomBaseBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3a00
	void ApplyPendingBindingsForCharacter(struct FName Character); // Function ShooterGame.ActionBindingsManager.ApplyPendingBindingsForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3960
	void ApplyGamepadPreset(struct UGamepadPresetDataAsset* Data); // Function ShooterGame.ActionBindingsManager.ApplyGamepadPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca38d0
	void ApplyAllPendingCharacterBindings(); // Function ShooterGame.ActionBindingsManager.ApplyAllPendingCharacterBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca38b0
	void ApplyAllPendingBindings(); // Function ShooterGame.ActionBindingsManager.ApplyAllPendingBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3890
	void AddCharacterProfile(struct FName Character, bool bCopyFromCustomBase); // Function ShooterGame.ActionBindingsManager.AddCharacterProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3680
};

// Class ShooterGame.ActionBindSet
// Size: 0x198 (Inherited: 0x30)
struct UActionBindSet : UObject {
	struct FMulticastInlineDelegate ActionBindingChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate ActionBindConflictStateUpdated; // 0x40(0x10)
	char pad_50[0x10]; // 0x50(0x10)
	struct UActionTraits* Traits; // 0x60(0x08)
	struct UActionBindingsManager* ActionBindingsManager; // 0x68(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0x70(0x08)
	char pad_78[0x120]; // 0x78(0x120)

	void SetBindingAtDefaultLayer(int32_t BindIndex, struct FInputChord& Key); // Function ShooterGame.ActionBindSet.SetBindingAtDefaultLayer // (Final|Native|Public|HasOutParms) // @ game+0x2cae620
	void SetBindingAtCustomBaseLayer(int32_t BindIndex, struct FInputChord& Key, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.SetBindingAtCustomBaseLayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cae440
	void SetBindingAtCharacterLayer(int32_t BindIndex, struct FInputChord& Key, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.SetBindingAtCharacterLayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cae200
	void ResetCustomBaseLayer(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindSet.ResetCustomBaseLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2cae180
	void ResetBinding(enum class EActionBindSetUserLayer LayerID, int32_t BindIndex, enum class EActionBindPendingMode PendingMode, struct FName CharacterPage); // Function ShooterGame.ActionBindSet.ResetBinding // (Final|Native|Protected|BlueprintCallable) // @ game+0x2cae000
	void ResetAllCharacterSpecificBindings(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindSet.ResetAllCharacterSpecificBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2cadf80
	void ResetAllBindingsForCharacter(struct FName CharacterName, enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindSet.ResetAllBindingsForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2cade90
	void ResetAllBindings(enum class EActionBindResetType ResetType); // Function ShooterGame.ActionBindSet.ResetAllBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2cade10
	void RemoveBindingAtCustomBaseLayer(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.RemoveBindingAtCustomBaseLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2cadd00
	void RemoveBindingAtCharacterLayer(int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindChangeSource ChangeSource); // Function ShooterGame.ActionBindSet.RemoveBindingAtCharacterLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2cadb80
	bool IsAxisAction(); // Function ShooterGame.ActionBindSet.IsAxisAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad9c0
	bool HasPendingCustomBaseBindingsAtIndex(int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasPendingCustomBaseBindingsAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad920
	bool HasPendingCustomBaseBindings(); // Function ShooterGame.ActionBindSet.HasPendingCustomBaseBindings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad8f0
	bool HasPendingBindingsForCharacterAtIndex(int32_t BindIndex, struct FName Character); // Function ShooterGame.ActionBindSet.HasPendingBindingsForCharacterAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad800
	bool HasPendingBindingsForCharacter(struct FName Character); // Function ShooterGame.ActionBindSet.HasPendingBindingsForCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad750
	bool HasPendingBindingsForAnyCharacterAtIndex(int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasPendingBindingsForAnyCharacterAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad6b0
	bool HasPendingBindingsForAnyCharacter(); // Function ShooterGame.ActionBindSet.HasPendingBindingsForAnyCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad680
	bool HasConflictForAnyCharacter(int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasConflictForAnyCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad5e0
	bool HasConflict(struct FName Character, int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasConflict // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad4f0
	bool HasAnyPendingBindingsAtIndex(int32_t BindIndex); // Function ShooterGame.ActionBindSet.HasAnyPendingBindingsAtIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad450
	bool HasAnyPendingBindings(); // Function ShooterGame.ActionBindSet.HasAnyPendingBindings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad420
	bool HasAnyBindingsOnLayer(enum class EActionBindSetUserLayer LayerID, enum class EActionBindPendingMode PendingMode, struct FName CharacterName); // Function ShooterGame.ActionBindSet.HasAnyBindingsOnLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2cad2f0
	struct FInputChord GetFunctionalBinding(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetFunctionalBinding // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad0e0
	struct FInputChord GetBindingForCharacter(int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingForCharacter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cacec0
	struct FInputChord GetBindingAtLayer(enum class EActionBindSetUserLayer StartLayer, int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingModey, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtLayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cacc70
	struct FInputChord GetBindingAtDefaultLayer(int32_t BindIndex); // Function ShooterGame.ActionBindSet.GetBindingAtDefaultLayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cacb40
	struct FInputChord GetBindingAtCustomBaseLayer(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtCustomBaseLayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cac960
	struct FInputChord GetBindingAtCharacterLayer(int32_t BindIndex, struct FName Character, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer); // Function ShooterGame.ActionBindSet.GetBindingAtCharacterLayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cac760
	struct FInputChord GetBinding(int32_t BindIndex, enum class EActionBindPendingMode PendingMode, enum class EActionBindSetUserLayer& OutFoundLayer, bool bTryGetLocalCharacterBinding); // Function ShooterGame.ActionBindSet.GetBinding // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cac540
	enum class EActionBindSetAxisDirection GetAxisDirection(); // Function ShooterGame.ActionBindSet.GetAxisDirection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cac510
	struct FName GetActionName(); // Function ShooterGame.ActionBindSet.GetActionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cac420
	bool AreBindRestrictionsMetAtCustomBaseLayer(); // Function ShooterGame.ActionBindSet.AreBindRestrictionsMetAtCustomBaseLayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cac3d0
	void ApplyPendingCustomBaseBindings(); // Function ShooterGame.ActionBindSet.ApplyPendingCustomBaseBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2cac3b0
	void ApplyPendingBindingsForCharacter(struct FName Character); // Function ShooterGame.ActionBindSet.ApplyPendingBindingsForCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2cac310
	void ApplyAllPendingCharacterBindings(); // Function ShooterGame.ActionBindSet.ApplyAllPendingCharacterBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2cac2f0
	void ApplyAllPendingBindings(); // Function ShooterGame.ActionBindSet.ApplyAllPendingBindings // (Final|Native|Public|BlueprintCallable) // @ game+0x2cac2d0
};

// Class ShooterGame.ActionTraits
// Size: 0x50 (Inherited: 0x30)
struct UActionTraits : UObject {
	struct FName ActionName; // 0x30(0x0c)
	enum class EActionSettingsContext SettingsContext; // 0x3c(0x01)
	enum class EActionBindRestrictions BindRestriction; // 0x3d(0x01)
	char pad_3E[0x2]; // 0x3e(0x02)
	struct TArray<struct FName> SharedInputCategories; // 0x40(0x10)
};

// Class ShooterGame.ActionTraitsManager
// Size: 0x90 (Inherited: 0x30)
struct UActionTraitsManager : UObject {
	struct TArray<struct UActionTraits*> ActionTraitClasses; // 0x30(0x10)
	char pad_40[0x50]; // 0x40(0x50)

	struct UActionTraits* TryGetActionTraits(struct FName ActionName); // Function ShooterGame.ActionTraitsManager.TryGetActionTraits // (Final|Native|Public|BlueprintCallable) // @ game+0x2cae8e0
};

// Class ShooterGame.StateComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UStateComponent : UActorComponent {
	bool bAutoAddToStateMachine; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct UStateMachineComponent* OwningStateMachineComponent; // 0xf0(0x08)

	bool IsCurrentState(); // Function ShooterGame.StateComponent.IsCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132890
	void CheckStateMachine(struct AActor* Owner); // Function ShooterGame.StateComponent.CheckStateMachine // (Final|Native|Private) // @ game+0x2cb4be0
};

// Class ShooterGame.EquippableStateComponent
// Size: 0x1e0 (Inherited: 0xf8)
struct UEquippableStateComponent : UStateComponent {
	bool bEquippableUsedState; // 0xf8(0x01)
	bool bRequiresTick; // 0xf9(0x01)
	bool bRequiresReplication; // 0xfa(0x01)
	char pad_FB[0x5]; // 0xfb(0x05)
	struct FItemSlotBlocking EquipBlocking; // 0x100(0x18)
	struct FItemSlotBlocking ActivationInputBlocking; // 0x118(0x18)
	enum class EStateBehaviorOnUnequip UnequipBehavior; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimerClassOverride; // 0x138(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x140(0x08)
	bool bOverrideFogOfWarWhileInState; // 0x148(0x01)
	char pad_149[0x3]; // 0x149(0x03)
	float FogOfWarAudibleDistance; // 0x14c(0x04)
	float FogOfWarOutroTime; // 0x150(0x04)
	float FogOfWarMaxStateDuration; // 0x154(0x04)
	char pad_158[0x88]; // 0x158(0x88)

	enum class EReplacementStateType ShouldUseReplacementState(); // Function ShooterGame.EquippableStateComponent.ShouldUseReplacementState // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2e9bb00
	bool ShouldUseFirstPersonPerspective(); // Function ShooterGame.EquippableStateComponent.ShouldUseFirstPersonPerspective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9bad0
	void SetReplacementState(struct UScriptStateComponent* ReplacementState, enum class EReplacementStateType ReplacementCondition); // Function ShooterGame.EquippableStateComponent.SetReplacementState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e9ba00
	struct UScriptStateComponent* GetReplacementState(enum class EReplacementStateType ReplacementType); // Function ShooterGame.EquippableStateComponent.GetReplacementState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b490
	struct AShooterPlayerController* GetOwningShooterPlayerController(); // Function ShooterGame.EquippableStateComponent.GetOwningShooterPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b460
	struct AShooterCharacter* GetOwningShooterCharacter(); // Function ShooterGame.EquippableStateComponent.GetOwningShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b430
	struct UEquippableStateMachineComponent* GetOwningEquippableStateMachineComponent(); // Function ShooterGame.EquippableStateComponent.GetOwningEquippableStateMachineComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b400
	struct AAresEquippable* GetOwningEquippable(); // Function ShooterGame.EquippableStateComponent.GetOwningEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b3d0
	struct ACharacter* GetOwningCharacter(); // Function ShooterGame.EquippableStateComponent.GetOwningCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b3a0
	struct AAresPlayerController* GetOwningAresPlayerController(); // Function ShooterGame.EquippableStateComponent.GetOwningAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b370
	void AuthSetOverrideFogOfWarWhileInState(bool bNewOverrideFogOfWarWhileInState); // Function ShooterGame.EquippableStateComponent.AuthSetOverrideFogOfWarWhileInState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
};

// Class ShooterGame.ScriptStateComponent
// Size: 0x2c8 (Inherited: 0x1e0)
struct UScriptStateComponent : UEquippableStateComponent {
	char pad_1E0[0x8]; // 0x1e0(0x08)
	struct TArray<struct FEquippableStateBuffInfo> StateBuffs; // 0x1e8(0x10)
	struct FMulticastInlineDelegate OnStateEnter; // 0x1f8(0x10)
	struct FMulticastInlineDelegate OnStateExit; // 0x208(0x10)
	struct FMulticastInlineDelegate OnStateTick; // 0x218(0x10)
	struct TArray<struct FScriptStateEffectInfo> StateEffects; // 0x228(0x10)
	struct UStateComponent* ScriptNextState; // 0x238(0x08)
	struct UStateComponent* ScriptSuppressedState; // 0x240(0x08)
	char pad_248[0x4]; // 0x248(0x04)
	struct TWeakObjectPtr<struct UObject> CustomContext; // 0x24c(0x08)
	char pad_254[0x4]; // 0x254(0x04)
	struct TArray<struct FActiveScriptStateEffect> ActiveStateEffects; // 0x258(0x10)
	struct TArray<struct FActiveScriptStateEffect> InterruptableStateEffects; // 0x268(0x10)
	struct FQueuedStateTransition QueuedStateTransition; // 0x278(0x38)
	struct FMulticastInlineDelegate OnStateHandleInputAction; // 0x2b0(0x10)
	struct UStateTransitionContext* CurrentContext; // 0x2c0(0x08)

	void SetSuppressedState(struct UStateComponent* State); // Function ShooterGame.ScriptStateComponent.SetSuppressedState // (Final|Native|Public|BlueprintCallable) // @ game+0x304f870
	struct UStateTransitionContext* SetNewContext(struct UStateTransitionContext* ContextType); // Function ShooterGame.ScriptStateComponent.SetNewContext // (Final|Native|Public|BlueprintCallable) // @ game+0x304f7d0
	void SetDefaultNextState(struct UStateComponent* State); // Function ShooterGame.ScriptStateComponent.SetDefaultNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60cd0
	void SetCustomContext(struct UObject* NewContext); // Function ShooterGame.ScriptStateComponent.SetCustomContext // (Final|Native|Public|BlueprintCallable) // @ game+0x304f740
	void SetCurrentContext(struct UStateTransitionContext* NewContext); // Function ShooterGame.ScriptStateComponent.SetCurrentContext // (Final|Native|Public|BlueprintCallable) // @ game+0x304f6b0
	void OnSyncToAuthValues(); // Function ShooterGame.ScriptStateComponent.OnSyncToAuthValues // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void InterruptStateEffects(); // Function ShooterGame.ScriptStateComponent.InterruptStateEffects // (Final|Native|Public|BlueprintCallable) // @ game+0x304f540
	void GoToStateWithContext(struct UStateComponent* NewState, struct UStateTransitionContext* Context, float TimeUntilTransition); // Function ShooterGame.ScriptStateComponent.GoToStateWithContext // (Final|Native|Public|BlueprintCallable) // @ game+0x304f3c0
	void GoToState(struct UStateComponent* NewState, float TimeUntilTransition); // Function ShooterGame.ScriptStateComponent.GoToState // (Final|Native|Public|BlueprintCallable) // @ game+0x304f2f0
	void GoToNextState(float TimeUntilTransition); // Function ShooterGame.ScriptStateComponent.GoToNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x304f270
	struct UStateComponent* GetSuppressedState(); // Function ShooterGame.ScriptStateComponent.GetSuppressedState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec4c0
	struct UStateComponent* GetDefaultNextState(); // Function ShooterGame.ScriptStateComponent.GetDefaultNextState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304ed70
	struct UStateTransitionContext* GetCurrentContext(); // Function ShooterGame.ScriptStateComponent.GetCurrentContext // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced3c0
};

// Class ShooterGame.RespondToEventStateComponent
// Size: 0x368 (Inherited: 0x2c8)
struct URespondToEventStateComponent : UScriptStateComponent {
	struct FMulticastInlineDelegate OnIgnoredResponseOutOfGameplay; // 0x2c8(0x10)
	struct TArray<struct FStateChangeInputResponse> StateChangeInputs; // 0x2d8(0x10)
	struct TArray<struct FTriggerEventInputResponse> TriggerEventInputs; // 0x2e8(0x10)
	struct FActorContextResponse StateChangeActorEvent; // 0x2f8(0x30)
	struct TArray<struct FEquippableInventoryEventResponse> StateChangesInventoryEvent; // 0x328(0x10)
	struct FEquippableResourceResponse StateChangeResourceAvailable; // 0x338(0x10)
	char pad_348[0x20]; // 0x348(0x20)

	void UnsubscribeFromInventoryEvents(struct UAresInventory* Inventory); // Function ShooterGame.RespondToEventStateComponent.UnsubscribeFromInventoryEvents // (Final|Native|Private) // @ game+0x3019560
	void SubscribeToInventoryEvents(struct UAresInventory* Inventory); // Function ShooterGame.RespondToEventStateComponent.SubscribeToInventoryEvents // (Final|Native|Private) // @ game+0x30194d0
	void ServerAcknowledgeResyncTimePassed(struct FNetworkedMovementTimestamp PassedResyncStateStartTimestamp); // Function ShooterGame.RespondToEventStateComponent.ServerAcknowledgeResyncTimePassed // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3019200
	bool RespondsToInput(enum class EAresEquippableInput InputEvent); // Function ShooterGame.RespondToEventStateComponent.RespondsToInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3019170
	void ResourceChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.RespondToEventStateComponent.ResourceChanged // (Final|Native|Private) // @ game+0x30190e0
	bool ProcessInventoryEventResponse(struct UAresInventory* Inventory, struct FEquippableInventoryEventResponse& Response); // Function ShooterGame.RespondToEventStateComponent.ProcessInventoryEventResponse // (Final|Native|Private|HasOutParms) // @ game+0x3018ea0
	void MulticastSetStateStartTimestamp(struct FNetworkedMovementTimestamp NewResyncStateStartTimestamp); // Function ShooterGame.RespondToEventStateComponent.MulticastSetStateStartTimestamp // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3018b50
	void MulticastForceRespondToActorEvent(); // Function ShooterGame.RespondToEventStateComponent.MulticastForceRespondToActorEvent // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3018b20
	void HandleOwnerSet(struct AAresItem* item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.RespondToEventStateComponent.HandleOwnerSet // (Final|Native|Private) // @ game+0x3018910
	void HandleInventoryEvent(struct AAresEquippable* Equippable); // Function ShooterGame.RespondToEventStateComponent.HandleInventoryEvent // (Final|Native|Private) // @ game+0x3018880
	float GetStateElapsedTime(); // Function ShooterGame.RespondToEventStateComponent.GetStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30187c0
	struct UAresInventory* GetOwningInventory(); // Function ShooterGame.RespondToEventStateComponent.GetOwningInventory // (Final|Native|Private|Const) // @ game+0x30186d0
	void ClearInputResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, enum class EAresActivationInputType ActivationType); // Function ShooterGame.RespondToEventStateComponent.ClearInputResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3018390
	void ClearAllInputResponses(); // Function ShooterGame.RespondToEventStateComponent.ClearAllInputResponses // (Final|Native|Public|BlueprintCallable) // @ game+0x3018370
	bool BP_RespondToInput(struct FTriggerInput InputResponse, bool bForceRespond); // Function ShooterGame.RespondToEventStateComponent.BP_RespondToInput // (Native|Event|Protected|BlueprintEvent) // @ game+0x30181f0
	void BP_ActorEventTriggered(enum class EActorEvent Event); // Function ShooterGame.RespondToEventStateComponent.BP_ActorEventTriggered // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void AddResponseToAnyEquipped(struct UStateComponent* ChangeToState, struct TArray<struct AAresEquippable*>& Equippables); // Function ShooterGame.RespondToEventStateComponent.AddResponseToAnyEquipped // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x30180b0
	void AddResponseToAllUnequipped(struct UStateComponent* ChangeToState, struct TArray<struct AAresEquippable*>& Equippables); // Function ShooterGame.RespondToEventStateComponent.AddResponseToAllUnequipped // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3017fb0
	void AddResourceAvailableResponse(struct UResourceComponent* Resource, struct UStateComponent* ChangeToState); // Function ShooterGame.RespondToEventStateComponent.AddResourceAvailableResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3017ee0
	void AddNewInputTriggeredEvent(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct FDelegate Event, float ResponseDelay, bool bCanRespondOutOfGameplay); // Function ShooterGame.RespondToEventStateComponent.AddNewInputTriggeredEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3017d20
	void AddNewInputResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed, enum class EAresActivationInputType ActivationType); // Function ShooterGame.RespondToEventStateComponent.AddNewInputResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x3017af0
	void AddEquipResponse_Internal(enum class EEquipType EquipType, struct UStateComponent* ChangeToState, struct TArray<struct AAresEquippable*>& Equippables); // Function ShooterGame.RespondToEventStateComponent.AddEquipResponse_Internal // (Final|Native|Public|HasOutParms) // @ game+0x30179b0
	void AddEquipResponse(enum class EEquipType EquipType, struct UStateComponent* ChangeToState); // Function ShooterGame.RespondToEventStateComponent.AddEquipResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x30178e0
	void AddActorContextResponse(enum class EActorEvent ActorEvent, enum class EActorCombination Combination, struct UStateComponent* ChangeToState); // Function ShooterGame.RespondToEventStateComponent.AddActorContextResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x30177d0
	void ActorKilled(struct UDamageResponse* DamageResponse); // Function ShooterGame.RespondToEventStateComponent.ActorKilled // (Final|Native|Private) // @ game+0x3017740
	void ActorDestroyed(struct AActor* Actor); // Function ShooterGame.RespondToEventStateComponent.ActorDestroyed // (Final|Native|Private) // @ game+0x30176b0
};

// Class ShooterGame.ActorLockonStateComponent
// Size: 0x398 (Inherited: 0x368)
struct UActorLockonStateComponent : URespondToEventStateComponent {
	float Radius; // 0x368(0x04)
	float ConeAngle; // 0x36c(0x04)
	float ConePullBack; // 0x370(0x04)
	bool bTwoDimensionalCone; // 0x374(0x01)
	bool bCheckLineOfSight; // 0x375(0x01)
	enum class ECollisionChannel LineOfSightCollision; // 0x376(0x01)
	char pad_377[0x1]; // 0x377(0x01)
	float LockGracePeriod; // 0x378(0x04)
	char pad_37C[0x4]; // 0x37c(0x04)
	struct AActor* LockedOnTarget; // 0x380(0x08)
	struct UScriptStateComponent* LockLostState; // 0x388(0x08)
	char pad_390[0x8]; // 0x390(0x08)

	void SetLockLostState(struct UScriptStateComponent* NewLockLostState); // Function ShooterGame.ActorLockonStateComponent.SetLockLostState // (Final|Native|Public|BlueprintCallable) // @ game+0x2cae780
	void MulticastLockLost(); // Function ShooterGame.ActorLockonStateComponent.MulticastLockLost // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2cad9f0
	struct AActor* GetLockOnTarget(); // Function ShooterGame.ActorLockonStateComponent.GetLockOnTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad2c0
	void BreakLockOnTarget(); // Function ShooterGame.ActorLockonStateComponent.BreakLockOnTarget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cac400
};

// Class ShooterGame.MinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UMinimapDisplayComponentDeprecated : USceneComponent {
};

// Class ShooterGame.ActorMinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UActorMinimapDisplayComponentDeprecated : UMinimapDisplayComponentDeprecated {
};

// Class ShooterGame.ActorTargetingStateComponent
// Size: 0x430 (Inherited: 0x368)
struct UActorTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnActorSelected; // 0x368(0x10)
	struct FMulticastInlineDelegate OnInvalidActor; // 0x378(0x10)
	struct FMulticastInlineDelegate OnActorTargetedLocally; // 0x388(0x10)
	struct FClassInclusionExclusionFilter ActorFilter; // 0x398(0x50)
	enum class EAresTeamTargeting TeamFilter; // 0x3e8(0x01)
	bool bPawnsOnly; // 0x3e9(0x01)
	char pad_3EA[0x2]; // 0x3ea(0x02)
	float Radius; // 0x3ec(0x04)
	float ConfirmationGraceAmount; // 0x3f0(0x04)
	enum class ECollisionChannel SearchCollision; // 0x3f4(0x01)
	char pad_3F5[0x3]; // 0x3f5(0x03)
	float ConeAngle; // 0x3f8(0x04)
	float ConeYawAngle; // 0x3fc(0x04)
	float ConePitchAngle; // 0x400(0x04)
	float ConePullBack; // 0x404(0x04)
	bool bTwoDimensionalCone; // 0x408(0x01)
	bool bCheckLineOfSight; // 0x409(0x01)
	enum class ECollisionChannel LineOfSightCollision; // 0x40a(0x01)
	bool bTargetOnRemoteClients; // 0x40b(0x01)
	char pad_40C[0x4]; // 0x40c(0x04)
	struct AActor* CurrentActorTarget; // 0x410(0x08)
	bool bDrawDebugTargeting; // 0x418(0x01)
	char pad_419[0x17]; // 0x419(0x17)

	struct AActor* GetCurrentTarget(); // Function ShooterGame.ActorTargetingStateComponent.GetCurrentTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad0c0
	float GetActorScore(struct AActor* Actor); // Function ShooterGame.ActorTargetingStateComponent.GetActorScore // (Native|Event|Public|BlueprintEvent) // @ game+0x2cac460
	void AddCancelTargetingResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed); // Function ShooterGame.ActorTargetingStateComponent.AddCancelTargetingResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x2cac0e0
	bool ActorIsValid(struct AActor* Actor); // Function ShooterGame.ActorTargetingStateComponent.ActorIsValid // (Native|Event|Public|BlueprintEvent) // @ game+0x2cac030
};

// Class ShooterGame.VisibilityComponent
// Size: 0x180 (Inherited: 0xe8)
struct UVisibilityComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnOwnerEnteredTeamSight; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnOwnerExitedTeamSight; // 0x100(0x10)
	bool bSeenByResult; // 0x110(0x01)
	enum class EEnemyVisibilityOption EnemyVisibility; // 0x111(0x01)
	char pad_112[0x6]; // 0x112(0x06)
	struct FMulticastInlineDelegate CanBeSeenByCharacterOverride; // 0x118(0x10)
	char pad_128[0x20]; // 0x128(0x20)
	float VisibilityLostTime; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct TArray<struct AShooterCharacter*> CharactersWithVisibility; // 0x150(0x10)
	struct FTimerHandle ExitVisibilityTimerHandle; // 0x160(0x08)
	char pad_168[0x18]; // 0x168(0x18)

	bool HasTeamSight(struct AActor* TargetActor); // Function ShooterGame.VisibilityComponent.HasTeamSight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317d130
	bool HasAllianceSight(enum class EAresAlliance Alliance); // Function ShooterGame.VisibilityComponent.HasAllianceSight // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317d090
	float GetVisibilityLostTime(); // Function ShooterGame.VisibilityComponent.GetVisibilityLostTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cf00
	bool GetUseTeamVisibilityData(); // Function ShooterGame.VisibilityComponent.GetUseTeamVisibilityData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317ce50
	float GetLastTimeVisibleToEnemy(); // Function ShooterGame.VisibilityComponent.GetLastTimeVisibleToEnemy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cb90
	struct FVector GetLastLocationVisibleToEnemy(); // Function ShooterGame.VisibilityComponent.GetLastLocationVisibleToEnemy // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cb60
	struct FVector GetLastFacingVisibleToEnemy(); // Function ShooterGame.VisibilityComponent.GetLastFacingVisibleToEnemy // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cb30
	bool CanBeSeenByCharacterDefault(struct AShooterCharacter* Character); // Function ShooterGame.VisibilityComponent.CanBeSeenByCharacterDefault // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddf0c0
	bool CanBeSeenByCharacter(struct AShooterCharacter* Character); // Function ShooterGame.VisibilityComponent.CanBeSeenByCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x317c890
	void AuthUnregisterForUpdate(); // Function ShooterGame.VisibilityComponent.AuthUnregisterForUpdate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthRegisterForUpdate(); // Function ShooterGame.VisibilityComponent.AuthRegisterForUpdate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
};

// Class ShooterGame.ActorVisibilityComponent
// Size: 0x180 (Inherited: 0x180)
struct UActorVisibilityComponent : UVisibilityComponent {
};

// Class ShooterGame.ActorVisualizationComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UActorVisualizationComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bPawnsOnly; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct FClassInclusionExclusionFilter ActorFilter; // 0xf8(0x50)
	enum class EAresTeamTargeting TeamFilter; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct FEmbeddedEffectInfo VisualizationEffect; // 0x150(0x30)
	bool bVisualizationActiveInitially; // 0x180(0x01)
	char pad_181[0x17]; // 0x181(0x17)
	struct TArray<struct AActor*> PendingVisualizedActors; // 0x198(0x10)

	void StopVisualization(); // Function ShooterGame.ActorVisualizationComponent.StopVisualization // (Final|Native|Public|BlueprintCallable) // @ game+0x2cae8c0
	void StartVisualization(); // Function ShooterGame.ActorVisualizationComponent.StartVisualization // (Final|Native|Public|BlueprintCallable) // @ game+0x2cae8a0
	void SetVisualization(bool bVisualization); // Function ShooterGame.ActorVisualizationComponent.SetVisualization // (Final|Native|Public|BlueprintCallable) // @ game+0x2cae810
	void OnPlayerSpawn(struct AShooterPlayerState* PlayerState, struct APawn* Pawn); // Function ShooterGame.ActorVisualizationComponent.OnPlayerSpawn // (Final|Native|Private) // @ game+0x2cadab0
	void OnActorSpawned(struct AActor* NewActor); // Function ShooterGame.ActorVisualizationComponent.OnActorSpawned // (Final|Native|Private) // @ game+0x2cada20
};

// Class ShooterGame.AresBasePrimaryDataAsset
// Size: 0x50 (Inherited: 0x38)
struct UAresBasePrimaryDataAsset : UPrimaryDataAsset {
	struct FGuid UUID; // 0x38(0x10)
	bool bHideIfNotOwned; // 0x48(0x01)
	bool bBaseContent; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)

	enum class EAresContentType GetContentType(); // Function ShooterGame.AresBasePrimaryDataAsset.GetContentType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0b720
};

// Class ShooterGame.ActRankBorderDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UActRankBorderDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.BaseContentUIData
// Size: 0x90 (Inherited: 0x30)
struct UBaseContentUIData : UObject {
	struct FText DisplayName; // 0x30(0x18)
	struct FText DisplayNameAllCaps; // 0x48(0x18)
	struct UTexture* DisplayIcon; // 0x60(0x08)
	struct FWidgetTransform IconTransform; // 0x68(0x1c)
	struct TWeakObjectPtr<struct UObject> WorldContext; // 0x84(0x08)
	char pad_8C[0x4]; // 0x8c(0x04)

	void SetDisplayName(struct FText NewName); // Function ShooterGame.BaseContentUIData.SetDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x2e35440
	void SetDisplayIcon(struct UTexture* NewIcon); // Function ShooterGame.BaseContentUIData.SetDisplayIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x2e353b0
	struct UUserWidget* MakeNewDetailedInfoWidget(); // Function ShooterGame.BaseContentUIData.MakeNewDetailedInfoWidget // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	struct FText GetDisplayNameAllCaps(); // Function ShooterGame.BaseContentUIData.GetDisplayNameAllCaps // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e344c0
	struct UUserWidget* GetDetailedInfoWidget(struct UObject* WorldContextObject); // Function ShooterGame.BaseContentUIData.GetDetailedInfoWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2e34420
	struct FText GetDescription(); // Function ShooterGame.BaseContentUIData.GetDescription // (Native|Public|Const) // @ game+0x2e343e0
};

// Class ShooterGame.ActRankBorderUIData
// Size: 0x98 (Inherited: 0x90)
struct UActRankBorderUIData : UBaseContentUIData {
	struct UTexture* SmallIcon; // 0x90(0x08)
};

// Class ShooterGame.AFKDetectionComponent
// Size: 0x160 (Inherited: 0xe8)
struct UAFKDetectionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAFKStatusChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnAwayPenaltyStateChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnDidLeaveSpawnChanged; // 0x108(0x10)
	struct FShooterGameTimeMarker AuthLastPlayerInputTimestamp; // 0x118(0x0c)
	struct FShooterGameTimeMarker AuthDisconnectedSinceTimestamp; // 0x124(0x0c)
	struct FShooterGameTimeMarker AuthLastPlayerChangedRegionTimestamp; // 0x130(0x0c)
	bool bIsPenalizedForBeingAway; // 0x13c(0x01)
	bool bIsAFK; // 0x13d(0x01)
	bool bDidLeaveSpawn; // 0x13e(0x01)
	char pad_13F[0x1]; // 0x13f(0x01)
	struct AShooterPlayerState* OwningShooterPlayer; // 0x140(0x08)
	struct AShooterGameState* GameState; // 0x148(0x08)
	char pad_150[0x10]; // 0x150(0x10)

	void ServerHandleClientInputHeartbeat(); // Function ShooterGame.AFKDetectionComponent.ServerHandleClientInputHeartbeat // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2ca3cf0
	void OnRep_IsPenalizedForBeingAway(); // Function ShooterGame.AFKDetectionComponent.OnRep_IsPenalizedForBeingAway // (Final|Native|Protected) // @ game+0x2cb54c0
	bool GetIsPenalizedForBeingAway(); // Function ShooterGame.AFKDetectionComponent.GetIsPenalizedForBeingAway // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb5330
	bool GetIsAFK(); // Function ShooterGame.AFKDetectionComponent.GetIsAFK // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb5310
	bool GetDidLeaveSpawn(); // Function ShooterGame.AFKDetectionComponent.GetDidLeaveSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb52f0
	void AuthSimulatePlayerInputReceived(); // Function ShooterGame.AFKDetectionComponent.AuthSimulatePlayerInputReceived // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	bool AuthShouldEndGameEarlyForDisconnects(struct UObject* WorldContextObject); // Function ShooterGame.AFKDetectionComponent.AuthShouldEndGameEarlyForDisconnects // (Final|BlueprintAuthorityOnly|Native|Static|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2cb4d80
	void AuthHandleSpawnedCharacterChanged(struct AShooterCharacter* NewCharacter); // Function ShooterGame.AFKDetectionComponent.AuthHandleSpawnedCharacterChanged // (Final|Native|Protected) // @ game+0x2cb4be0
	void AuthHandlePlayerInputReceived(); // Function ShooterGame.AFKDetectionComponent.AuthHandlePlayerInputReceived // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthHandleConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AFKDetectionComponent.AuthHandleConnectionStatusChanged // (Final|Native|Protected) // @ game+0x2cb4c70
	void AuthHandleCalloutRegionChanged(struct AAresCalloutRegion* NewRegion); // Function ShooterGame.AFKDetectionComponent.AuthHandleCalloutRegionChanged // (Final|Native|Protected) // @ game+0x2cb4be0
};

// Class ShooterGame.IdleTimeAFKDetectionComponent
// Size: 0x168 (Inherited: 0x160)
struct UIdleTimeAFKDetectionComponent : UAFKDetectionComponent {
	float PlayerAFKInactivityThreshold; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)

	float GetPlayerAFKInactivityThreshold(); // Function ShooterGame.IdleTimeAFKDetectionComponent.GetPlayerAFKInactivityThreshold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb5380
};

// Class ShooterGame.RoundBasedAFKDetectionComponent
// Size: 0x178 (Inherited: 0x160)
struct URoundBasedAFKDetectionComponent : UAFKDetectionComponent {
	int32_t RoundsAFKThreshold; // 0x160(0x04)
	char pad_164[0x14]; // 0x164(0x14)
};

// Class ShooterGame.EquippableListAsset
// Size: 0x48 (Inherited: 0x38)
struct UEquippableListAsset : UDataAsset {
	struct TArray<struct TSoftClassPtr<UObject>> Equippables; // 0x38(0x10)
};

// Class ShooterGame.AimToolsTuningComponent
// Size: 0x1b8 (Inherited: 0xe8)
struct UAimToolsTuningComponent : UActorComponent {
	struct UCurveFloat* MagnetDistanceCurve; // 0xe8(0x08)
	struct UCurveFloat* MagnetVelocityCurve; // 0xf0(0x08)
	struct UCurveFloat* MagnetRampUpCurve; // 0xf8(0x08)
	struct UCurveFloat* SnapDistanceCurveHorizontal; // 0x100(0x08)
	struct UCurveFloat* SnapDistanceCurveVertical; // 0x108(0x08)
	struct UCurveFloat* SnapAngleCurveHorizontal; // 0x110(0x08)
	struct UCurveFloat* SnapAngleCurveVertical; // 0x118(0x08)
	struct UCurveFloat* HeadshotSnapDistanceCurve; // 0x120(0x08)
	struct UCurveFloat* HeadshotSnapAngleCurve; // 0x128(0x08)
	struct UEquippableListAsset* MagnetizedAbilities; // 0x130(0x08)
	struct UEquippableListAsset* AimSnapExcludedWeapons; // 0x138(0x08)
	struct UEquippableListAsset* AimSnapExcludedWhileZoomedWeapons; // 0x140(0x08)
	struct UEquippableListAsset* AimSnapIncludedAbilities; // 0x148(0x08)
	struct UCurveFloat* DeployablesSnapAngleScaleCurve; // 0x150(0x08)
	struct TMap<struct TSoftClassPtr<UObject>, struct FSnapTargetTypeTunables> TargetTypeMap; // 0x158(0x50)
	struct TArray<struct TSoftClassPtr<UObject>> BaseScalingClasses; // 0x1a8(0x10)

	bool IsAimTouchActive(); // Function ShooterGame.AimToolsTuningComponent.IsAimTouchActive // (Native|Public|BlueprintCallable) // @ game+0x2cb53d0
};

// Class ShooterGame.AITargetData
// Size: 0xf0 (Inherited: 0xe8)
struct UAITargetData : UActorComponent {
	bool bIsPriorityTarget; // 0xe8(0x01)
	bool bIsShootableFlash; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)
};

// Class ShooterGame.AllPawnsTargetingStateComponent
// Size: 0x2c8 (Inherited: 0x2c8)
struct UAllPawnsTargetingStateComponent : UScriptStateComponent {
};

// Class ShooterGame.DesignableUserWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UDesignableUserWidget : UUserWidget {

	void SynchronizeWidget(struct UWidget* Widget); // Function ShooterGame.DesignableUserWidget.SynchronizeWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e75f60
	void OnSynchronizeProperties(); // Function ShooterGame.DesignableUserWidget.OnSynchronizeProperties // (Native|Event|Public|BlueprintEvent) // @ game+0x2dc3390
};

// Class ShooterGame.CoordinatedHUDElement
// Size: 0x2d8 (Inherited: 0x2c8)
struct UCoordinatedHUDElement : UDesignableUserWidget {
	bool bShowMouseWhenVisible; // 0x2c8(0x01)
	bool bCaptureMouseWhenVisible; // 0x2c9(0x01)
	char pad_2CA[0x2]; // 0x2ca(0x02)
	int32_t AllowedGameInputWhileVisible; // 0x2cc(0x04)
	int32_t AllowedGameInputWhileShowingMouse; // 0x2d0(0x04)
	bool bNeedsFocus; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)

	void SetHUDModel(struct UCoordinatedHUDModel* HUDModel); // Function ShooterGame.CoordinatedHUDElement.SetHUDModel // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2cb57d0
	void SetCoordinatedShooterUIModel(struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel); // Function ShooterGame.CoordinatedHUDElement.SetCoordinatedShooterUIModel // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AllyEdgeIndicatorHUD
// Size: 0x348 (Inherited: 0x2d8)
struct UAllyEdgeIndicatorHUD : UCoordinatedHUDElement {
	char pad_2D8[0x18]; // 0x2d8(0x18)
	struct FMulticastInlineDelegate OnAllyEnterRange; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnAllyExitRange; // 0x300(0x10)
	struct FMulticastInlineDelegate OnAllyDeath; // 0x310(0x10)
	float RelevantRangeModifier; // 0x320(0x04)
	char pad_324[0x4]; // 0x324(0x04)
	struct TArray<struct UHUDPlayerModel*> TrackedHUDPlayerModelsList; // 0x328(0x10)
	struct UCoordinatedHUDModel* HUDModel; // 0x338(0x08)
	struct APlayerState* CurrentlyTrackedPlayerState; // 0x340(0x08)

	void SetHUDModel_Implementation(struct UCoordinatedHUDModel* InHUDModel); // Function ShooterGame.AllyEdgeIndicatorHUD.SetHUDModel_Implementation // (Final|Native|Private) // @ game+0x2cb57d0
	void RemoveTrackedPlayer(struct UHUDPlayerModel* PlayerHUDModel, bool Died); // Function ShooterGame.AllyEdgeIndicatorHUD.RemoveTrackedPlayer // (Final|Native|Private) // @ game+0x2cb5590
	void OnPlayerDeath(struct UDamageResponse* Response); // Function ShooterGame.AllyEdgeIndicatorHUD.OnPlayerDeath // (Final|Native|Private) // @ game+0x2cb5430
	void OnHUDPlayerModelListUpdated(); // Function ShooterGame.AllyEdgeIndicatorHUD.OnHUDPlayerModelListUpdated // (Final|Native|Private) // @ game+0x2cb5410
	void OnHUDModelSet(struct UCoordinatedHUDModel* InHUDModel); // Function ShooterGame.AllyEdgeIndicatorHUD.OnHUDModelSet // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	struct TArray<struct UHUDPlayerModel*> GetAllAlliesInRange(); // Function ShooterGame.AllyEdgeIndicatorHUD.GetAllAlliesInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb5260
	void CheckForAndHandleTrackedPlayerChange(struct AAresPlayerStateBase* PlayerState); // Function ShooterGame.AllyEdgeIndicatorHUD.CheckForAndHandleTrackedPlayerChange // (Final|Native|Private) // @ game+0x2cb5120
	void AddTrackedPlayer(struct UHUDPlayerModel* PlayerHUDModel); // Function ShooterGame.AllyEdgeIndicatorHUD.AddTrackedPlayer // (Final|Native|Private) // @ game+0x2cb4b50
};

// Class ShooterGame.AmmoComponent
// Size: 0x138 (Inherited: 0x118)
struct UAmmoComponent : UResourceComponent {
	bool bInfiniteReserveAmmo; // 0x118(0x01)
	char pad_119[0x3]; // 0x119(0x03)
	int32_t Ammo; // 0x11c(0x04)
	int32_t MaxAmmo; // 0x120(0x04)
	char pad_124[0x4]; // 0x124(0x04)
	struct UAmmoComponent* ReserveComponent; // 0x128(0x08)
	bool bInBeginPlay; // 0x130(0x01)
	char pad_131[0x7]; // 0x131(0x07)

	void UpdateMaxAmmo(int32_t NewMax); // Function ShooterGame.AmmoComponent.UpdateMaxAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb5a20
	void SetReserveComponent(struct UAmmoComponent* AmmoComponent); // Function ShooterGame.AmmoComponent.SetReserveComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb5930
	void SetMaxReserveAmmo(bool bInfiniteReserve, int32_t NewMax); // Function ShooterGame.AmmoComponent.SetMaxReserveAmmo // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb5860
	void Reload(int32_t ReloadAmount); // Function ShooterGame.AmmoComponent.Reload // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb5500
	void OnRep_MaxAmmoValue(); // Function ShooterGame.AmmoComponent.OnRep_MaxAmmoValue // (Final|Native|Private) // @ game+0x2cb54e0
	void OnRep_bInfiniteReserveAmmoValue(); // Function ShooterGame.AmmoComponent.OnRep_bInfiniteReserveAmmoValue // (Final|Native|Private) // @ game+0x2cb54e0
	struct UAmmoComponent* GetReserveComponent(); // Function ShooterGame.AmmoComponent.GetReserveComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb53a0
	int32_t GetMaxAmmo(); // Function ShooterGame.AmmoComponent.GetMaxAmmo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb5350
	int32_t GetAmmo(); // Function ShooterGame.AmmoComponent.GetAmmo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4d40
	void FullReload(); // Function ShooterGame.AmmoComponent.FullReload // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb5240
	bool CanReload(); // Function ShooterGame.AmmoComponent.CanReload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb50f0
};

// Class ShooterGame.AnimatableUserWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAnimatableUserWidget : UDesignableUserWidget {
	char pad_2C8[0x8]; // 0x2c8(0x08)
	struct FMulticastInlineDelegate OnScopedCueEvent; // 0x2d0(0x10)

	void BroadcastCueEvent(struct FScopedAnimationCueSource_ScopedCueEventData& EventData); // Function ShooterGame.AnimatableUserWidget.BroadcastCueEvent // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2cb5050
	void BP_BroadcastNewCueEvent(struct FName CueName, struct FName ScopeName); // Function ShooterGame.AnimatableUserWidget.BP_BroadcastNewCueEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x2cb4eb0
};

// Class ShooterGame.ZoomComponent
// Size: 0x528 (Inherited: 0xe8)
struct UZoomComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnZoomInStarted; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnZoomInCompleted; // 0x100(0x10)
	struct FMulticastInlineDelegate OnUnZoomStarted; // 0x110(0x10)
	struct FMulticastInlineDelegate OnUnZoomCompleted; // 0x120(0x10)
	struct FMulticastInlineDelegate OnZoomTransitionStatusChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnCosmeticZoomInPercent; // 0x140(0x10)
	struct FMulticastInlineDelegate OnZoomCooldownCompleted; // 0x150(0x10)
	struct FZoomTransitionSettings ZoomTransitionSettings; // 0x160(0x14)
	char pad_174[0x4]; // 0x174(0x04)
	struct UCurveFloat* ZoomInCurve; // 0x178(0x08)
	struct UCurveFloat* ZoomOutCurve; // 0x180(0x08)
	struct FRuntimeFloatCurve FoVInitialZoomInCurve; // 0x188(0x88)
	struct FRuntimeFloatCurve FoVSubsequentZoomInCurve; // 0x210(0x88)
	struct FRuntimeFloatCurve FoVZoomOutCurve; // 0x298(0x88)
	struct FRuntimeFloatCurve FoV1PInitialZoomInCurve; // 0x320(0x88)
	struct FRuntimeFloatCurve FoV1PSubsequentZoomInCurve; // 0x3a8(0x88)
	struct FRuntimeFloatCurve FoV1PZoomOutCurve; // 0x430(0x88)
	struct TArray<struct FZoomLevelInfo> ZoomLevelInfo; // 0x4b8(0x10)
	struct FZoomTransition AuthZoomTransition; // 0x4c8(0x24)
	struct FZoomTransition ClientPredictedZoomTransition; // 0x4ec(0x24)
	struct FTimerHandle ZoomTimer[0x3]; // 0x510(0x18)

	void SetZoomMultiplierForIndex(int32_t ZoomIndex, float NewMultiplier); // Function ShooterGame.ZoomComponent.SetZoomMultiplierForIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3196250
	void SetZoomFovForIndex(int32_t ZoomIndex, float NewFov); // Function ShooterGame.ZoomComponent.SetZoomFovForIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x3196180
	void SetTransitionSettings(struct FZoomTransitionSettings& InTransitionSettings); // Function ShooterGame.ZoomComponent.SetTransitionSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3196060
	void OnZoomTransitionTimerCompleted(); // Function ShooterGame.ZoomComponent.OnZoomTransitionTimerCompleted // (Final|Native|Private) // @ game+0x3195a20
	void OnZoomCooldownTimerCompleted(); // Function ShooterGame.ZoomComponent.OnZoomCooldownTimerCompleted // (Final|Native|Private) // @ game+0x3195a00
	void OnRep_ZoomTransition(); // Function ShooterGame.ZoomComponent.OnRep_ZoomTransition // (Final|Native|Private) // @ game+0x31959e0
	void OnCosmeticZoomInPercentTriggerTimerCompleted(); // Function ShooterGame.ZoomComponent.OnCosmeticZoomInPercentTriggerTimerCompleted // (Final|Native|Private) // @ game+0x31959c0
	bool IsZoomTransitioning(); // Function ShooterGame.ZoomComponent.IsZoomTransitioning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3195780
	bool IsZoomOnCooldown(); // Function ShooterGame.ZoomComponent.IsZoomOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3195750
	bool IsZoomingOut(); // Function ShooterGame.ZoomComponent.IsZoomingOut // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3195840
	bool IsZoomingIn(); // Function ShooterGame.ZoomComponent.IsZoomingIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3195810
	bool IsZoomedOut(); // Function ShooterGame.ZoomComponent.IsZoomedOut // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31957e0
	bool IsZoomed(); // Function ShooterGame.ZoomComponent.IsZoomed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31957b0
	int32_t GetTargetZoomLevel(); // Function ShooterGame.ZoomComponent.GetTargetZoomLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31954a0
	int32_t GetNumZoomLevels(); // Function ShooterGame.ZoomComponent.GetNumZoomLevels // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0e80
	int32_t GetCurrentZoomLevel(); // Function ShooterGame.ZoomComponent.GetCurrentZoomLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3195400
};

// Class ShooterGame.AnimatedZoomComponent
// Size: 0x538 (Inherited: 0x528)
struct UAnimatedZoomComponent : UZoomComponent {
	float WorldFOVMin; // 0x528(0x04)
	float WorldFOVMax; // 0x52c(0x04)
	float Mesh1PFOVMin; // 0x530(0x04)
	float Mesh1PFOVMax; // 0x534(0x04)
};

// Class ShooterGame.ProgressModel
// Size: 0x30 (Inherited: 0x30)
struct UProgressModel : UInterface {

	void UnbindProgressStateChanged(struct FDelegate& Delegate); // Function ShooterGame.ProgressModel.UnbindProgressStateChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f1a880
	void UnbindProgressCompleted(struct FDelegate& Delegate); // Function ShooterGame.ProgressModel.UnbindProgressCompleted // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2ff3dd0
	struct FProgressModelState GetProgressState(); // Function ShooterGame.ProgressModel.GetProgressState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ff37a0
	void BindProgressStateChanged(struct FDelegate& Delegate); // Function ShooterGame.ProgressModel.BindProgressStateChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2d95860
	void BindProgressCompleted(struct FDelegate& Delegate); // Function ShooterGame.ProgressModel.BindProgressCompleted // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f76eb0
};

// Class ShooterGame.AnimationConductorNode
// Size: 0x30 (Inherited: 0x30)
struct UAnimationConductorNode : UProgressModel {

	void StartAnimation(); // Function ShooterGame.AnimationConductorNode.StartAnimation // (Native|Public|BlueprintCallable) // @ game+0x2cb59f0
	void SkipAnimation(); // Function ShooterGame.AnimationConductorNode.SkipAnimation // (Native|Public|BlueprintCallable) // @ game+0x2cb59c0
	void SetDebugLogging(bool bNewValue, enum class EAnimationConductorNodePropagationMode PropagationMode); // Function ShooterGame.AnimationConductorNode.SetDebugLogging // (Native|Public|BlueprintCallable) // @ game+0x2cb56f0
	void ResetAnimation(enum class EAnimationConductorNodeResetType ResetType); // Function ShooterGame.AnimationConductorNode.ResetAnimation // (Native|Public|BlueprintCallable) // @ game+0x2cb5660
};

// Class ShooterGame.ProgressModelBase
// Size: 0x58 (Inherited: 0x30)
struct UProgressModelBase : UObject {
	char pad_30[0x28]; // 0x30(0x28)

	void BroadcastProgressStateChanged(); // Function ShooterGame.ProgressModelBase.BroadcastProgressStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ff3360
	void BroadcastProgressCompleted(); // Function ShooterGame.ProgressModelBase.BroadcastProgressCompleted // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ff3340
};

// Class ShooterGame.NumericProgressModelBase
// Size: 0x70 (Inherited: 0x58)
struct UNumericProgressModelBase : UProgressModelBase {
	char pad_58[0x18]; // 0x58(0x18)

	void BroadcastProgressValueChanged(); // Function ShooterGame.NumericProgressModelBase.BroadcastProgressValueChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f75560
};

// Class ShooterGame.ManualNumericProgressModelBase
// Size: 0x88 (Inherited: 0x70)
struct UManualNumericProgressModelBase : UNumericProgressModelBase {
	char pad_70[0x18]; // 0x70(0x18)

	void BP_SetProgressValueMaximum(int64_t NewValue); // Function ShooterGame.ManualNumericProgressModelBase.BP_SetProgressValueMaximum // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f2a760
	void BP_SetProgressValueCurrent(int64_t NewValue); // Function ShooterGame.ManualNumericProgressModelBase.BP_SetProgressValueCurrent // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f2a6d0
	void BP_SetProgressValue(struct FNumericProgressValue& NewValue); // Function ShooterGame.ManualNumericProgressModelBase.BP_SetProgressValue // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2f2a630
	void BP_SetProgressState(struct FProgressModelState NewValue); // Function ShooterGame.ManualNumericProgressModelBase.BP_SetProgressState // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f2a5b0
	void BP_CompleteProgress(); // Function ShooterGame.ManualNumericProgressModelBase.BP_CompleteProgress // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f29870
	void BP_ClearProgressValue(); // Function ShooterGame.ManualNumericProgressModelBase.BP_ClearProgressValue // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f29850
};

// Class ShooterGame.AnimationConductorNodeBase
// Size: 0xa8 (Inherited: 0x88)
struct UAnimationConductorNodeBase : UManualNumericProgressModelBase {
	char pad_88[0x20]; // 0x88(0x20)

	void BP_BroadcastNewCueEvent(struct FName CueName); // Function ShooterGame.AnimationConductorNodeBase.BP_BroadcastNewCueEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x2cb4fb0
	void BP_BroadcastCueEvent(struct FAnimationCueSource_CueEventData& EventData); // Function ShooterGame.AnimationConductorNodeBase.BP_BroadcastCueEvent // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2cb4e10
};

// Class ShooterGame.AnimationConductorNodeBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAnimationConductorNodeBlueprintLibrary : UBlueprintFunctionLibrary {

	void DumpToLog(struct TScriptInterface<IAnimationConductorNode> Target); // Function ShooterGame.AnimationConductorNodeBlueprintLibrary.DumpToLog // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cb51b0
};

// Class ShooterGame.AnimationCueSource
// Size: 0x30 (Inherited: 0x30)
struct UAnimationCueSource : UInterface {

	void UnbindOnCueEvent(struct FDelegate& Delegate); // Function ShooterGame.AnimationCueSource.UnbindOnCueEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2cb9a00
	void BindOnCueEvent(struct FDelegate& Delegate); // Function ShooterGame.AnimationCueSource.BindOnCueEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2cb9060
};

// Class ShooterGame.AnimationCueSourceBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAnimationCueSourceBlueprintLibrary : UBlueprintFunctionLibrary {

	struct FScopedAnimationCueSource_ScopedCueEventData MakeNewScopedCueEventData(struct FName InCueName, struct FName InScopeName); // Function ShooterGame.AnimationCueSourceBlueprintLibrary.MakeNewScopedCueEventData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cb94c0
	struct FAnimationCueSource_CueEventData MakeNewCueEventData(struct FName InCueName); // Function ShooterGame.AnimationCueSourceBlueprintLibrary.MakeNewCueEventData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cb9410
};

// Class ShooterGame.AnimationStateComponent
// Size: 0xb20 (Inherited: 0xe8)
struct UAnimationStateComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct FAnimationStateParams AnimationStateParams; // 0x100(0x1d0)
	struct FAnimationAssetsGun1P AnimationAssetsGun1P; // 0x2d0(0x48)
	struct FAnimationAssetsGun1P CosmeticAnimationAssetsGun1P; // 0x318(0x48)
	struct FBoneTransformAim3P BoneTransformAim3P; // 0x360(0x74)
	char pad_3D4[0x1]; // 0x3d4(0x01)
	bool bIsOnRope; // 0x3d5(0x01)
	bool bGlideActive; // 0x3d6(0x01)
	bool bIsMeleeAttacking; // 0x3d7(0x01)
	bool bForceAnimSlot1PNoBlend; // 0x3d8(0x01)
	bool bForceAnimSlotUpperBody3PNoBlend; // 0x3d9(0x01)
	bool bForceAnimSlotLowerBody3PNoBlend; // 0x3da(0x01)
	char pad_3DB[0x1]; // 0x3db(0x01)
	float MaxErrorDegrees; // 0x3dc(0x04)
	char pad_3E0[0x4]; // 0x3e0(0x04)
	float ErrorAnimationInterpolationRate; // 0x3e4(0x04)
	float WeaponInaccuracySpring1PStiffness; // 0x3e8(0x04)
	float WeaponInaccuracySpring1PDampening; // 0x3ec(0x04)
	float DefaultHitReactionBlendTime; // 0x3f0(0x04)
	float HitReactionAlpha; // 0x3f4(0x04)
	bool bHitReactionTriggeredThisFrame; // 0x3f8(0x01)
	char pad_3F9[0x3]; // 0x3f9(0x03)
	float CrouchLowerBodyMontageAlpha; // 0x3fc(0x04)
	float CrouchSplitterTranslationScale; // 0x400(0x04)
	float RopeSpineBlendWeightScale; // 0x404(0x04)
	bool bDisableSplitBodyRotation; // 0x408(0x01)
	char pad_409[0x43]; // 0x409(0x43)
	float AnimDynamicsBlendTime; // 0x44c(0x04)
	float AimModeBlendTime; // 0x450(0x04)
	float IkBlendTime; // 0x454(0x04)
	float FootIKMaxActorPullDownDistance; // 0x458(0x04)
	float FootIKActorPullDownInterpRate; // 0x45c(0x04)
	float FootIKRootScalar; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct UCurveFloat* FootIKEnableCurve; // 0x468(0x08)
	float AnimSlotBlendTime; // 0x470(0x04)
	float Idle1PBlendTime; // 0x474(0x04)
	float Run1PBlendTime; // 0x478(0x04)
	float Walk1PBlendTime; // 0x47c(0x04)
	float Crouch1PBlendTime; // 0x480(0x04)
	float CrouchIdle1PBlendTime; // 0x484(0x04)
	float CrouchWalk1PBlendTime; // 0x488(0x04)
	float StandUp1PBlendTime; // 0x48c(0x04)
	float Jump1PBlendTime; // 0x490(0x04)
	float JumpLand1PBlendTime; // 0x494(0x04)
	float BoneTransformAimPitchAngleLimit; // 0x498(0x04)
	float BoneTransformAimPitchMultiplier; // 0x49c(0x04)
	float BoneTransformAimYawMultiplier; // 0x4a0(0x04)
	float Spine1AimRotationScale; // 0x4a4(0x04)
	float Spine2AimRotationScale; // 0x4a8(0x04)
	float Spine3AimRotationScale; // 0x4ac(0x04)
	float Spine4AimRotationScale; // 0x4b0(0x04)
	float NeckAimRotationScale; // 0x4b4(0x04)
	float HeadAimRotationScale; // 0x4b8(0x04)
	float LeftClavicleAimRotationScale; // 0x4bc(0x04)
	float RightClavicleAimRotationScale; // 0x4c0(0x04)
	float AimSpring1PTargetRotationScale; // 0x4c4(0x04)
	float RecentlyFiredTime; // 0x4c8(0x04)
	float MinCounterStrafeAngle; // 0x4cc(0x04)
	bool bCanGlide; // 0x4d0(0x01)
	char pad_4D1[0x7]; // 0x4d1(0x07)
	struct TMap<struct UAnimSlot1P*, struct UAnimationAsset*> Anims1P; // 0x4d8(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> AnimsUpperBody3P; // 0x528(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> AnimsLowerBody3P; // 0x578(0x50)
	struct TMap<struct UAnimSlot1P*, struct UAnimationAsset*> OverrideAnims1P; // 0x5c8(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> OverrideAnimsUpperBody3P; // 0x618(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> OverrideAnimsLowerBody3P; // 0x668(0x50)
	struct TArray<struct UBlendSpace*> HeadHitReactions3P; // 0x6b8(0x10)
	struct TArray<struct UBlendSpace*> BodyHitReactions3P; // 0x6c8(0x10)
	struct TArray<struct UBlendSpace*> LegHitReactions3P; // 0x6d8(0x10)
	struct TMap<struct UAnimSlotFace3P*, struct UAnimSequence*> AnimsFace3P; // 0x6e8(0x50)
	struct TArray<struct UAnimSequence*> FaceFidgets3P; // 0x738(0x10)
	float FaceFidgetDelayMin; // 0x748(0x04)
	float FaceFidgetDelayMax; // 0x74c(0x04)
	float FaceFidgetDelayLength; // 0x750(0x04)
	float FaceFidgetDelayTimer; // 0x754(0x04)
	float FaceFidgetPlayLength; // 0x758(0x04)
	float FaceFidgetPlayTimer; // 0x75c(0x04)
	struct FAlphaBlend ZoomedModeAlphaBlend; // 0x760(0x30)
	bool bDisabled; // 0x790(0x01)
	char pad_791[0xf]; // 0x791(0x0f)
	struct FTransform GunToScopeTransform; // 0x7a0(0x30)
	struct UCurveFloat* ADSWeaponRecoveryCurve; // 0x7d0(0x08)
	struct TMap<struct UAnimSlot1P*, struct FAnimationSlotArray> Arms1PAnimations; // 0x7d8(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct FAnimationSlotArray> LowerBody3PAnimations; // 0x828(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct FAnimationSlotArray> UpperBody3PAnimations; // 0x878(0x50)
	struct FAnimationSlotArray UpperBodyAimOffsets; // 0x8c8(0x18)
	struct FAnimationSlotArray LowerBodyAimOffsets; // 0x8e0(0x18)
	struct FAnimationSlotArray HitReactionAnimations; // 0x8f8(0x18)
	struct UAnimSequence* FaceFidgetAnimation; // 0x910(0x08)
	struct FVector ReticlePosition; // 0x918(0x0c)
	bool bHasReticlePosition; // 0x924(0x01)
	char pad_925[0x3]; // 0x925(0x03)
	struct FName ADSIdleRefBoneName; // 0x928(0x0c)
	char pad_934[0x9c]; // 0x934(0x9c)
	struct AAresEquippable* LastEquippable; // 0x9d0(0x08)
	char pad_9D8[0x8]; // 0x9d8(0x08)
	struct UAnimMovementStateMachine* MovementStateMachine; // 0x9e0(0x08)
	bool bLastFirstPerson; // 0x9e8(0x01)
	char pad_9E9[0x3]; // 0x9e9(0x03)
	float LastActorYaw; // 0x9ec(0x04)
	float LastTimeFired; // 0x9f0(0x04)
	int32_t UpdateRateLimitingDisable3PRefCount; // 0x9f4(0x04)
	bool bCachedEnableUpdateRateOptimizations; // 0x9f8(0x01)
	char pad_9F9[0x3]; // 0x9f9(0x03)
	int32_t FaceLayerDisableRefCount; // 0x9fc(0x04)
	int32_t CharacterIsFiringRefCount; // 0xa00(0x04)
	char pad_A04[0x4]; // 0xa04(0x04)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0xa08(0x08)
	float ADSKickBackDistance; // 0xa10(0x04)
	char pad_A14[0xc]; // 0xa14(0x0c)
	struct FTransform ADSIdleRefTransform; // 0xa20(0x30)
	bool bEnteredClientRelevancy; // 0xa50(0x01)
	bool bJustRespawned; // 0xa51(0x01)
	char pad_A52[0xce]; // 0xa52(0xce)

	void SetOverrideAnimationUpperBody3P(struct UAnimSlotUpperBody3P* Slot, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AnimationStateComponent.SetOverrideAnimationUpperBody3P // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb9930
	void SetOverrideAnimationLowerBody3P(struct UAnimSlotLowerBody3P* Slot, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AnimationStateComponent.SetOverrideAnimationLowerBody3P // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb9860
	void SetOverrideAnimation1P(struct UAnimSlot1P* Slot, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AnimationStateComponent.SetOverrideAnimation1P // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb9790
	void SetDisableMontageSpineBlendWeight(bool Disable); // Function ShooterGame.AnimationStateComponent.SetDisableMontageSpineBlendWeight // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb9700
	void OnMontageStart(struct UAnimMontage* Montage); // Function ShooterGame.AnimationStateComponent.OnMontageStart // (Final|Native|Private) // @ game+0x2cb9670
	void OnClientBecomeRelevant(struct AActor* OwningActor); // Function ShooterGame.AnimationStateComponent.OnClientBecomeRelevant // (Final|Native|Public) // @ game+0x2cb95e0
	float GetIKAlpha(struct FName& BoneName); // Function ShooterGame.AnimationStateComponent.GetIKAlpha // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb9360
	int32_t GetAnimationUpperBody3PActiveIndex(struct UAnimSlotUpperBody3P* Slot); // Function ShooterGame.AnimationStateComponent.GetAnimationUpperBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb92c0
	int32_t GetAnimationLowerBody3PActiveIndex(struct UAnimSlotLowerBody3P* Slot); // Function ShooterGame.AnimationStateComponent.GetAnimationLowerBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb9220
	struct UAnimationAsset* GetAnimationGun1P(struct UAnimSlotGun1P* Slot); // Function ShooterGame.AnimationStateComponent.GetAnimationGun1P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cb9180
	int32_t GetAimOffsetUpperBody3PActiveIndex(); // Function ShooterGame.AnimationStateComponent.GetAimOffsetUpperBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb9160
	int32_t GetAimOffsetLowerBody3PLastValidActiveIndex(); // Function ShooterGame.AnimationStateComponent.GetAimOffsetLowerBody3PLastValidActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb9140
	int32_t GetAimOffsetLowerBody3PActiveIndex(); // Function ShooterGame.AnimationStateComponent.GetAimOffsetLowerBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb9120
};

// Class ShooterGame.AnimDynamicStateInfo
// Size: 0x30 (Inherited: 0x30)
struct UAnimDynamicStateInfo : UInterface {
};

// Class ShooterGame.AnimMovementStateMachine
// Size: 0xe8 (Inherited: 0x30)
struct UAnimMovementStateMachine : UObject {
	char pad_30[0xb8]; // 0x30(0xb8)
};

// Class ShooterGame.AnimNotifyState_AnimDynamic
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_AnimDynamic : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_BoneTransformAim
// Size: 0x50 (Inherited: 0x38)
struct UAnimNotifyState_BoneTransformAim : UAnimNotifyState {
	struct FBoneReference ConstraintBone; // 0x38(0x14)
	char pad_4C[0x4]; // 0x4c(0x04)
};

// Class ShooterGame.AnimNotifyState_CanInterruptDeathReaction
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_CanInterruptDeathReaction : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_CanTransition
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotifyState_CanTransition : UAnimNotifyState {
	enum class EAnimMovementStateMachineState FromState; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class ShooterGame.AnimNotifyState_CharacterIsFiring
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_CharacterIsFiring : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_DisableAnimUpdateRateOptimizations
// Size: 0x40 (Inherited: 0x38)
struct UAnimNotifyState_DisableAnimUpdateRateOptimizations : UAnimNotifyState {
	bool Disabled; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class ShooterGame.AnimNotifyState_DisableFaceLayer
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_DisableFaceLayer : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_EquippableCharacterAltAnims
// Size: 0x38 (Inherited: 0x38)
struct UAnimNotifyState_EquippableCharacterAltAnims : UAnimNotifyState {
};

// Class ShooterGame.AnimNotifyState_IKEnabled
// Size: 0x50 (Inherited: 0x38)
struct UAnimNotifyState_IKEnabled : UAnimNotifyState {
	struct FBoneReference Bone; // 0x38(0x14)
	bool Enabled; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
};

// Class ShooterGame.AnimSlot
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlot : UDataAsset {
};

// Class ShooterGame.AnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlot1P : UAnimSlot {
};

// Class ShooterGame.AnimSlotFace3P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlotFace3P : UAnimSlot {
};

// Class ShooterGame.AnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlotGun1P : UAnimSlot {
};

// Class ShooterGame.AnimSlotLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlotLowerBody3P : UAnimSlot {
};

// Class ShooterGame.AnimSlotUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UAnimSlotUpperBody3P : UAnimSlot {
};

// Class ShooterGame.StateTransitionContext
// Size: 0x30 (Inherited: 0x30)
struct UStateTransitionContext : UObject {

	void Reset(); // Function ShooterGame.StateTransitionContext.Reset // (Native|Event|Public|BlueprintEvent) // @ game+0x2dc33f0
	void OnReset(); // Function ShooterGame.StateTransitionContext.OnReset // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool IsValueDisagreement(struct UStateTransitionContext* Rhs); // Function ShooterGame.StateTransitionContext.IsValueDisagreement // (Native|Event|Public|BlueprintEvent) // @ game+0x2e0bc80
	struct FString GetDebugString(); // Function ShooterGame.StateTransitionContext.GetDebugString // (Native|Event|Public|BlueprintEvent) // @ game+0x31322d0
};

// Class ShooterGame.AnimTriggeredStateContinueTransitionContext
// Size: 0x30 (Inherited: 0x30)
struct UAnimTriggeredStateContinueTransitionContext : UStateTransitionContext {
};

// Class ShooterGame.AnimTriggeredStateComponent
// Size: 0x388 (Inherited: 0x368)
struct UAnimTriggeredStateComponent : URespondToEventStateComponent {
	struct UAnimMontage* TriggeringAnimation; // 0x368(0x08)
	struct TArray<struct FNotifyTriggerType> NotifyTriggers; // 0x370(0x10)
	char pad_380[0x8]; // 0x380(0x08)

	void AddManualTrigger(float TriggerTime, struct UScriptStateComponent* TriggeredState, bool bReturningState); // Function ShooterGame.AnimTriggeredStateComponent.AddManualTrigger // (Final|Native|Public|BlueprintCallable) // @ game+0x2cc38a0
	void AddAnimationTrigger(struct TSoftClassPtr<UObject> NotifyType, struct UScriptStateComponent* TriggeredState, bool bReturningState); // Function ShooterGame.AnimTriggeredStateComponent.AddAnimationTrigger // (Final|Native|Public|BlueprintCallable) // @ game+0x2cc34e0
};

// Class ShooterGame.AntiAddictionManager
// Size: 0x110 (Inherited: 0x80)
struct UAntiAddictionManager : UInitSystem {
	struct FMulticastInlineDelegate OnAntiAddictionWarningNotification; // 0x80(0x10)
	char pad_90[0x28]; // 0x90(0x28)
	struct UAntiAddictionService* AntiAddictionService; // 0xb8(0x08)
	struct UNotificationManager* NotificationManager; // 0xc0(0x08)
	struct UConfigManager* ConfigManager; // 0xc8(0x08)
	struct URMSManager* RMSManager; // 0xd0(0x08)
	struct FText ShutdownText; // 0xd8(0x18)
	char pad_F0[0x20]; // 0xf0(0x20)

	bool IsShutdown(); // Function ShooterGame.AntiAddictionManager.IsShutdown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc4ae0
	bool IsRestricted(); // Function ShooterGame.AntiAddictionManager.IsRestricted // (Final|Native|Public|Const) // @ game+0x2cc4ab0
	struct FText GetShutdownText(); // Function ShooterGame.AntiAddictionManager.GetShutdownText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc44e0
	struct UAntiAddictionManager* GetAntiAddictionManager(struct UObject* WorldContextObject); // Function ShooterGame.AntiAddictionManager.GetAntiAddictionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cc3e20
};

// Class ShooterGame.AntiAddictionService
// Size: 0xb0 (Inherited: 0x30)
struct UAntiAddictionService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
	struct UConfigManager* ConfigManager; // 0x38(0x08)
	struct FString AntiAddictionShutdownResource; // 0x40(0x10)
	struct FString AntiAddictionPlayTimeResource; // 0x50(0x10)
	struct FString AntiAddictionWarningResource; // 0x60(0x10)
	struct FString AntiAddictionDisableMatchmakingResource; // 0x70(0x10)
	struct FString AntiAddictionHopeHeartbeatResource; // 0x80(0x10)
	struct FString AntiAddictionHopeWarningResource; // 0x90(0x10)
	struct FString AntiAddictionHopeShutdownResource; // 0xa0(0x10)
};

// Class ShooterGame.AntiAddictionSessionManager
// Size: 0x38 (Inherited: 0x30)
struct UAntiAddictionSessionManager : UObject {
	struct UPlatformSessionManager* PlatformSessionManager; // 0x30(0x08)

	void HandleAntiAddictionTokenUpdate(struct FAntiAddictionToken AntiAddictionToken); // Function ShooterGame.AntiAddictionSessionManager.HandleAntiAddictionTokenUpdate // (Final|Native|Private) // @ game+0x2cc4710
};

// Class ShooterGame.ApplicationRepairManager
// Size: 0xa0 (Inherited: 0x80)
struct UApplicationRepairManager : UInitSystem {
	struct UApplicationRepairService* ApplicationRepairService; // 0x80(0x08)
	char pad_88[0x18]; // 0x88(0x18)
};

// Class ShooterGame.ApplicationRepairService
// Size: 0x38 (Inherited: 0x30)
struct UApplicationRepairService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.BaseProjectileEffectComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UBaseProjectileEffectComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	enum class EProjectileEventType TriggeringEvent; // 0xf0(0x01)
	bool bCanBeDisarmed; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)

	void OnProjectileStop(); // Function ShooterGame.BaseProjectileEffectComponent.OnProjectileStop // (Final|Native|Private) // @ game+0x2de0550
	void OnProjectileDisarmed(); // Function ShooterGame.BaseProjectileEffectComponent.OnProjectileDisarmed // (Final|Native|Private) // @ game+0x2de0530
	void OnEventTriggered(); // Function ShooterGame.BaseProjectileEffectComponent.OnEventTriggered // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnEntranceHit(struct FHitResult& LastHitResult, struct FHitResult& EntranceHit); // Function ShooterGame.BaseProjectileEffectComponent.OnEntranceHit // (Final|Native|Private|HasOutParms) // @ game+0x2de02f0
	void OnActorDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.BaseProjectileEffectComponent.OnActorDestroyed // (Final|Native|Private) // @ game+0x2de0070
};

// Class ShooterGame.ApplyBuffHitScanEffectComponent
// Size: 0x118 (Inherited: 0xf8)
struct UApplyBuffHitScanEffectComponent : UBaseProjectileEffectComponent {
	struct FEquippableStateBuffInfo BuffInfo; // 0xf8(0x20)
};

// Class ShooterGame.TimedStateComponent
// Size: 0x3a0 (Inherited: 0x368)
struct UTimedStateComponent : URespondToEventStateComponent {
	float TimerLength; // 0x368(0x04)
	char pad_36C[0x4]; // 0x36c(0x04)
	struct TArray<struct FGameplayAttribute> TimerModifingAttributes; // 0x370(0x10)
	bool bMovementSyncedTimer; // 0x380(0x01)
	char pad_381[0x1f]; // 0x381(0x1f)

	void TimerExpired(); // Function ShooterGame.TimedStateComponent.TimerExpired // (Native|Protected) // @ game+0x2cad9f0
	void SetTimerPaused(bool bPaused); // Function ShooterGame.TimedStateComponent.SetTimerPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x3160310
	void SetTimer(float NewTime); // Function ShooterGame.TimedStateComponent.SetTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x3160290
	float GetTimerModifier(); // Function ShooterGame.TimedStateComponent.GetTimerModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f6c0
	float GetTimeRemaining(); // Function ShooterGame.TimedStateComponent.GetTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f690
};

// Class ShooterGame.ApplyBuffStateComponent
// Size: 0x3b0 (Inherited: 0x3a0)
struct UApplyBuffStateComponent : UTimedStateComponent {
	struct UAresGameplayBuff* BuffClass; // 0x3a0(0x08)
	float BuffLevel; // 0x3a8(0x04)
	bool bRemoveBuffOnStateEnd; // 0x3ac(0x01)
	char pad_3AD[0x3]; // 0x3ad(0x03)
};

// Class ShooterGame.ApplyBuffToTargetsStateComponent
// Size: 0x2d8 (Inherited: 0x2c8)
struct UApplyBuffToTargetsStateComponent : UScriptStateComponent {
	struct UAresGameplayBuff* BuffClass; // 0x2c8(0x08)
	float BuffLevel; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
};

// Class ShooterGame.ApplyBuffWhileOverlappingComponent
// Size: 0x108 (Inherited: 0xe8)
struct UApplyBuffWhileOverlappingComponent : UActorComponent {
	struct UAresGameplayBuff* BuffClass; // 0xe8(0x08)
	float BuffLevel; // 0xf0(0x04)
	enum class EApplyBuffTarget ApplyBuffTarget; // 0xf4(0x01)
	char pad_F5[0xb]; // 0xf5(0x0b)
	struct AActor* OtherActor; // 0x100(0x08)

	void AuthSetOtherActor(struct AActor* OtherActor); // Function ShooterGame.ApplyBuffWhileOverlappingComponent.AuthSetOtherActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthHandleEndOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function ShooterGame.ApplyBuffWhileOverlappingComponent.AuthHandleEndOverlap // (Final|Native|Private) // @ game+0x2cc3bd0
	void AuthHandleBeginOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function ShooterGame.ApplyBuffWhileOverlappingComponent.AuthHandleBeginOverlap // (Final|Native|Private) // @ game+0x2cc3bd0
};

// Class ShooterGame.ApplyContinuousForceModuleToTargetStateComponent
// Size: 0x2e8 (Inherited: 0x2c8)
struct UApplyContinuousForceModuleToTargetStateComponent : UScriptStateComponent {
	struct UForceModule* ForceModule; // 0x2c8(0x08)
	float Duration; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct UForceModuleManagerComponent* TargetForceManager; // 0x2d8(0x08)
	struct FForceModuleHandle ModuleHandle; // 0x2e0(0x08)

	void OnModuleEnd(struct UForceModuleManagerComponent* Manager, struct FForceModuleHandle Handle); // Function ShooterGame.ApplyContinuousForceModuleToTargetStateComponent.OnModuleEnd // (Final|Native|Private) // @ game+0x2cc4b40
	void MulticastModuleExpired(); // Function ShooterGame.ApplyContinuousForceModuleToTargetStateComponent.MulticastModuleExpired // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2cc4b10
};

// Class ShooterGame.ApplyForceModuleStateComponent
// Size: 0x3c0 (Inherited: 0x3a0)
struct UApplyForceModuleStateComponent : UTimedStateComponent {
	struct UForceModule* Module; // 0x3a0(0x08)
	struct AActor* SourceActor; // 0x3a8(0x08)
	char pad_3B0[0x8]; // 0x3b0(0x08)
	struct UForceModuleManagerComponent* TargetForceManager; // 0x3b8(0x08)

	void RemoteClientModuleEnd(); // Function ShooterGame.ApplyForceModuleStateComponent.RemoteClientModuleEnd // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2cc4ce0
	void OnModuleEnd(struct UForceModuleManagerComponent* Manager, struct FForceModuleHandle Handle); // Function ShooterGame.ApplyForceModuleStateComponent.OnModuleEnd // (Final|Native|Protected) // @ game+0x2cc4c10
	struct FForceModuleHandle GetForceModuleHandle(); // Function ShooterGame.ApplyForceModuleStateComponent.GetForceModuleHandle // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cc4100
	struct UForceModule* GetForceModule(); // Function ShooterGame.ApplyForceModuleStateComponent.GetForceModule // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cc40d0
	void AuthSetSourceActor(struct AActor* NewSource); // Function ShooterGame.ApplyForceModuleStateComponent.AuthSetSourceActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cc3ca0
};

// Class ShooterGame.ApplyForceToTargetsStateComponent
// Size: 0x2d8 (Inherited: 0x2c8)
struct UApplyForceToTargetsStateComponent : UScriptStateComponent {
	struct UForceModule* ForceModule; // 0x2c8(0x08)
	float Duration; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
};

// Class ShooterGame.ArchiveUIData
// Size: 0xa8 (Inherited: 0x90)
struct UArchiveUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.ArchiveDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UArchiveDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> AccordContracts; // 0x80(0x10)
};

// Class ShooterGame.AresAbilitySystemComponent
// Size: 0x1540 (Inherited: 0x1340)
struct UAresAbilitySystemComponent : UAbilitySystemComponent {
	char pad_1340[0x58]; // 0x1340(0x58)
	struct TArray<struct FGameplayAttribute> TrackedAttributes; // 0x1398(0x10)
	struct TMap<struct FGameplayAttribute, float> AttributeChangedTimeMap; // 0x13a8(0x50)
	struct TMap<struct FGameplayAttribute, struct FAttributeValueChangeDelegateList> AttributeChangedEvents; // 0x13f8(0x50)
	struct UAresAttributeSet* CachedAttributeSet; // 0x1448(0x08)
	struct TArray<struct FGameplayTag> TrackedTags; // 0x1450(0x10)
	struct TMap<struct FGameplayTag, float> TagChangedTimeMap; // 0x1460(0x50)
	struct TMap<struct FGameplayTag, struct FTagValueChangeDelegateList> TagChangedEvents; // 0x14b0(0x50)
	struct TArray<struct FDeferredTagChangedEntry> DeferredTagChangedEventsToRemove; // 0x1500(0x10)
	struct FTagValueChangeDelegateList AnyTagChangedEvents; // 0x1510(0x18)
	struct TArray<struct FDelegate> DeferredAnyTagChangedEvents; // 0x1528(0x10)
	char pad_1538[0x8]; // 0x1538(0x08)

	void SpecificTagValueChanged(struct FGameplayTag& Tag, int32_t Count); // Function ShooterGame.AresAbilitySystemComponent.SpecificTagValueChanged // (Final|Native|Private|HasOutParms) // @ game+0x2cc5070
	void RemoveTagChangeEvent(struct FGameplayTag Tag, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.RemoveTagChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cc4f50
	void RemoveAttributeChangeEvent(struct FGameplayAttribute Attribute, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.RemoveAttributeChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cc4df0
	void RemoveAnyTagChangeEvent(struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.RemoveAnyTagChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cc4d30
	void RemoveAllActiveEffects(); // Function ShooterGame.AresAbilitySystemComponent.RemoveAllActiveEffects // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cc4d10
	void HandlePeriodicGameplayEffectExecuteOnSelf(struct UAbilitySystemComponent* Source, struct FGameplayEffectSpec& SpecExecuted, struct FActiveGameplayEffectHandle ActiveHandle); // Function ShooterGame.AresAbilitySystemComponent.HandlePeriodicGameplayEffectExecuteOnSelf // (Final|Native|Private|HasOutParms) // @ game+0x2cc4940
	void HandleGameplayEffectAppliedToSelf(struct UAbilitySystemComponent* Source, struct FGameplayEffectSpec& SpecExecuted, struct FActiveGameplayEffectHandle ActiveHandle); // Function ShooterGame.AresAbilitySystemComponent.HandleGameplayEffectAppliedToSelf // (Final|Native|Private|HasOutParms) // @ game+0x2cc47d0
	float GetTimeSinceTrackedTagChanged(struct FGameplayTag Tag); // Function ShooterGame.AresAbilitySystemComponent.GetTimeSinceTrackedTagChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x2cc4660
	float GetTimeSinceTrackedAttributeChanged(struct FGameplayAttribute Attribute); // Function ShooterGame.AresAbilitySystemComponent.GetTimeSinceTrackedAttributeChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x2cc4550
	struct TArray<struct FActiveGameplayEffectHandle> GetGameplayEffectsByInstigator(struct UGameplayEffect* EffectType, struct AActor* Instigator); // Function ShooterGame.AresAbilitySystemComponent.GetGameplayEffectsByInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc43c0
	struct TArray<struct FActiveGameplayEffectHandle> GetGameplayEffectsByCauser(struct UGameplayEffect* EffectType, struct AActor* Causer); // Function ShooterGame.AresAbilitySystemComponent.GetGameplayEffectsByCauser // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc42a0
	struct AActor* GetGameplayEffectInstigator(struct FActiveGameplayEffectHandle& Handle); // Function ShooterGame.AresAbilitySystemComponent.GetGameplayEffectInstigator // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc41f0
	struct AActor* GetGameplayEffectCauser(struct FActiveGameplayEffectHandle& Handle); // Function ShooterGame.AresAbilitySystemComponent.GetGameplayEffectCauser // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc4140
	float GetFloatAttribute(struct FGameplayAttribute Attribute); // Function ShooterGame.AresAbilitySystemComponent.GetFloatAttribute // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc3fc0
	bool GetBoolAttribute(struct FGameplayAttribute Attribute); // Function ShooterGame.AresAbilitySystemComponent.GetBoolAttribute // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc3eb0
	void EffectRemoved(struct FActiveGameplayEffect& ActiveEffect); // Function ShooterGame.AresAbilitySystemComponent.EffectRemoved // (Final|Native|Private|HasOutParms) // @ game+0x2cc3d30
	void AnyTagValueChanged(struct FGameplayTag& Tag, int32_t Count); // Function ShooterGame.AresAbilitySystemComponent.AnyTagValueChanged // (Final|Native|Private|HasOutParms) // @ game+0x2cc3ae0
	void AddTagChangeEvent(struct FGameplayTag Tag, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.AddTagChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cc39c0
	void AddAttributeChangeEvent(struct FGameplayAttribute Attribute, struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.AddAttributeChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cc3740
	void AddAnyTagChangeEvent(struct FDelegate& Event); // Function ShooterGame.AresAbilitySystemComponent.AddAnyTagChangeEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cc3680
};

// Class ShooterGame.AresTouchWidget
// Size: 0x960 (Inherited: 0x2c8)
struct UAresTouchWidget : UUserWidget {
	char pad_2C8[0x8]; // 0x2c8(0x08)
	uint32_t SwipeOptions; // 0x2d0(0x04)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct FMulticastInlineDelegate OnSwipe; // 0x2d8(0x10)
	struct FAresTouchHoldGestureProperties HoldGestureProperties; // 0x2e8(0x0c)
	bool bUseDoubleTap; // 0x2f4(0x01)
	char pad_2F5[0x3]; // 0x2f5(0x03)
	struct FAresTouchDoubleTapGestureProperties DoubleTapGestureProperties; // 0x2f8(0x14)
	bool bVisibilityCustomizable; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)
	struct FMulticastInlineDelegate OnSelectStateChanged; // 0x310(0x10)
	struct FMulticastInlineDelegate OnWidgetMoved; // 0x320(0x10)
	struct FMulticastInlineDelegate OnWidgetEditPressed; // 0x330(0x10)
	struct FMulticastInlineDelegate OnWidgetEditReleased; // 0x340(0x10)
	struct FMulticastInlineDelegate OnWidgetScaleChanged; // 0x350(0x10)
	struct FMulticastInlineDelegate OnWidgetOpacityChanged; // 0x360(0x10)
	struct UAresTouchBounds* TouchBounds; // 0x370(0x08)
	struct UImage* EditOutline; // 0x378(0x08)
	struct UScaleBox* UserDefinedScaleBox; // 0x380(0x08)
	bool bIsDirty; // 0x388(0x01)
	bool bHiddenByGameFeatureToggle; // 0x389(0x01)
	char ForwardingInputChannel; // 0x38a(0x01)
	char ReceivingForwardedInputChannel; // 0x38b(0x01)
	bool bCheckBoundsForForwardedTouchScreenPresses; // 0x38c(0x01)
	bool bActivateTouchOnTouchEnter; // 0x38d(0x01)
	bool bReleaseOnTouchLeave; // 0x38e(0x01)
	char pad_38F[0x9]; // 0x38f(0x09)
	struct FLinearColor EditModeDisabledColor; // 0x398(0x10)
	struct TWeakObjectPtr<struct UAresTouchScreen> ParentTouchScreen; // 0x3a8(0x08)
	struct UAresTouchComponent* TouchComponent; // 0x3b0(0x08)
	char pad_3B8[0x228]; // 0x3b8(0x228)
	bool bOverrideUserDefinedVisibility; // 0x5e0(0x01)
	enum class EWidgetVisibilityState InternalVisibilityState; // 0x5e1(0x01)
	enum class EWidgetEnabledState InternalEnabledState; // 0x5e2(0x01)
	char pad_5E3[0x5d]; // 0x5e3(0x5d)
	bool ForceVisible; // 0x640(0x01)
	char pad_641[0x7]; // 0x641(0x07)
	struct UAresTouchHoldGesture* HoldGesture; // 0x648(0x08)
	struct UAresTouchDoubleTapGesture* DoubleTapGesture; // 0x650(0x08)
	bool bRefreshOnTouchModeChanged; // 0x658(0x01)
	bool bSelectedForEdit; // 0x659(0x01)
	enum class EAresTouchWidgetMode EditTouchMode; // 0x65a(0x01)
	enum class EAresTouchTrackingMode TouchTrackingMode; // 0x65b(0x01)
	char pad_65C[0x4]; // 0x65c(0x04)
	struct FAresUIPropertyMap TouchWidgetDefaultProperties; // 0x660(0x2d0)
	struct UAresUIPropertyRegistry* TouchWidgetProperties; // 0x930(0x08)
	char pad_938[0x28]; // 0x938(0x28)

	void UnregisterGesture(struct UAresTouchGesture* TouchGesture); // Function ShooterGame.AresTouchWidget.UnregisterGesture // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2daef40
	void SetWheelPassthroughEnabled(bool bEnable); // Function ShooterGame.AresTouchWidget.SetWheelPassthroughEnabled // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2daee20
	void SetUserDefinedVisibilityState(enum class EWidgetVisibilityState InVisibilityState); // Function ShooterGame.AresTouchWidget.SetUserDefinedVisibilityState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2daeda0
	void SetUserDefinedScale(float InScale); // Function ShooterGame.AresTouchWidget.SetUserDefinedScale // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2daed20
	void SetUserDefinedOpacity(float InOpacity); // Function ShooterGame.AresTouchWidget.SetUserDefinedOpacity // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2daeca0
	void SetTouchTrackingMode(enum class EAresTouchTrackingMode InTouchTrackingMode); // Function ShooterGame.AresTouchWidget.SetTouchTrackingMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2daec20
	void SetTouchEnabled(bool InTouchEnabled); // Function ShooterGame.AresTouchWidget.SetTouchEnabled // (BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2daeb80
	void SetSlotName(struct FName& InSlotName); // Function ShooterGame.AresTouchWidget.SetSlotName // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2daeae0
	void SetInternalVisibilityState(enum class EWidgetVisibilityState InVisibilityState); // Function ShooterGame.AresTouchWidget.SetInternalVisibilityState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2daea60
	void SetInternalEnabledState(enum class EWidgetEnabledState InEnabledState); // Function ShooterGame.AresTouchWidget.SetInternalEnabledState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae9e0
	void SetInputChannelReceivingEnabled(enum class FAresTouchWidgetInputChannel InputChannel, bool bEnable); // Function ShooterGame.AresTouchWidget.SetInputChannelReceivingEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x2dae910
	void SetInputChannelPassthroughEnabled(enum class FAresTouchWidgetInputChannel InputChannel, bool bEnable); // Function ShooterGame.AresTouchWidget.SetInputChannelPassthroughEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x2dae840
	void SetHiddenByGameFeatureToggle(bool Value); // Function ShooterGame.AresTouchWidget.SetHiddenByGameFeatureToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x2dae7b0
	void SetFloatLayoutSetting(enum class EWidgetLayoutSettingName Setting, float Value); // Function ShooterGame.AresTouchWidget.SetFloatLayoutSetting // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae6e0
	void SetBoolLayoutWeaponOverride(enum class EWidgetLayoutSettingName Setting, bool Value, struct FString WeaponName); // Function ShooterGame.AresTouchWidget.SetBoolLayoutWeaponOverride // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae560
	void SetBoolLayoutSetting(enum class EWidgetLayoutSettingName Setting, bool Value); // Function ShooterGame.AresTouchWidget.SetBoolLayoutSetting // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae490
	void SetAimPassthroughEnabled(bool bEnable); // Function ShooterGame.AresTouchWidget.SetAimPassthroughEnabled // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae400
	void SetActivateTouchOnTouchEnter(bool bEnable); // Function ShooterGame.AresTouchWidget.SetActivateTouchOnTouchEnter // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae370
	void SetActivateTouchEnterIndex(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchWidget.SetActivateTouchEnterIndex // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae2f0
	void SaveLayoutForCurrentPreset(struct FWidgetLayout& WidgetLayout); // Function ShooterGame.AresTouchWidget.SaveLayoutForCurrentPreset // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dae190
	void SaveCurrentLayout(); // Function ShooterGame.AresTouchWidget.SaveCurrentLayout // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae170
	void ResetTouchState(); // Function ShooterGame.AresTouchWidget.ResetTouchState // (Final|Native|Public|BlueprintCallable) // @ game+0x2dae150
	void ResetGestureState(); // Function ShooterGame.AresTouchWidget.ResetGestureState // (Final|Native|Protected|BlueprintCallable) // @ game+0x2dae130
	void RegisterWithTouchScreen(struct UAresTouchScreen* InTouchScreen); // Function ShooterGame.AresTouchWidget.RegisterWithTouchScreen // (BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae0a0
	void RegisterGesture(struct UAresTouchGesture* TouchGesture); // Function ShooterGame.AresTouchWidget.RegisterGesture // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dae010
	void RefreshTouchModeVisuals(); // Function ShooterGame.AresTouchWidget.RefreshTouchModeVisuals // (Final|Native|Protected|BlueprintCallable) // @ game+0x2dadff0
	void RefreshSlateVisibility(); // Function ShooterGame.AresTouchWidget.RefreshSlateVisibility // (Final|BlueprintCosmetic|Native|Protected|BlueprintCallable) // @ game+0x2dadfd0
	void RefreshImpl(); // Function ShooterGame.AresTouchWidget.RefreshImpl // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dadfa0
	void RefreshEnabledState(); // Function ShooterGame.AresTouchWidget.RefreshEnabledState // (Final|BlueprintCosmetic|Native|Protected|BlueprintCallable) // @ game+0x2dadf80
	void Refresh(); // Function ShooterGame.AresTouchWidget.Refresh // (Final|Native|Protected|BlueprintCallable) // @ game+0x2dadf60
	struct UAresTouchComponent* RebuildTouchComponent(); // Function ShooterGame.AresTouchWidget.RebuildTouchComponent // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dadf20
	void OnTouchReset(); // Function ShooterGame.AresTouchWidget.OnTouchReset // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnTouchModeChange(enum class EAresTouchMode NewTouchMode); // Function ShooterGame.AresTouchWidget.OnTouchModeChange // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dade90
	void OnScaleChanged(float NewScale); // Function ShooterGame.AresTouchWidget.OnScaleChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnPresetChange(); // Function ShooterGame.AresTouchWidget.OnPresetChange // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dadde0
	void OnOpacityChanged(float NewOpacity); // Function ShooterGame.AresTouchWidget.OnOpacityChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnInitializeDefaultValues(); // Function ShooterGame.AresTouchWidget.OnInitializeDefaultValues // (Native|Event|Public|BlueprintEvent) // @ game+0x2daddb0
	void OnHoldStart(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnHoldStart // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnHoldEnd(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnHoldEnd // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnHoldChargeInterrupted(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnHoldChargeInterrupted // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnDoubleTapStart(struct FAresTouchDoubleTapGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnDoubleTapStart // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnDoubleTapHoldStart(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnDoubleTapHoldStart // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnDoubleTapHoldChargeInterrupted(struct FAresTouchHoldGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnDoubleTapHoldChargeInterrupted // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnDoubleTapEnd(struct FAresTouchDoubleTapGestureData GestureData); // Function ShooterGame.AresTouchWidget.OnDoubleTapEnd // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnComponentSelectStateChanged(bool bSelected); // Function ShooterGame.AresTouchWidget.OnComponentSelectStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dadd10
	void OnComponentEditReleased(); // Function ShooterGame.AresTouchWidget.OnComponentEditReleased // (Native|Protected) // @ game+0x2dadce0
	void OnComponentEditPressed(); // Function ShooterGame.AresTouchWidget.OnComponentEditPressed // (Native|Protected) // @ game+0x2dadcb0
	void OnComponentEditMoved(struct FVector2D ScreenDelta); // Function ShooterGame.AresTouchWidget.OnComponentEditMoved // (Native|Protected|HasDefaults) // @ game+0x2dadc20
	void OnCharacterHUDAnimationFinished(); // Function ShooterGame.AresTouchWidget.OnCharacterHUDAnimationFinished // (Native|Event|Public|BlueprintEvent) // @ game+0x2dadbf0
	void LoadWidgetLayoutFromSettings(); // Function ShooterGame.AresTouchWidget.LoadWidgetLayoutFromSettings // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dad7e0
	bool IsWheelPassthroughEnabled(); // Function ShooterGame.AresTouchWidget.IsWheelPassthroughEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad7b0
	bool IsInputChannelReceivingEnabled(enum class FAresTouchWidgetInputChannel InputChannel); // Function ShooterGame.AresTouchWidget.IsInputChannelReceivingEnabled // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad720
	bool IsInputChannelPassthroughEnabled(enum class FAresTouchWidgetInputChannel InputChannel); // Function ShooterGame.AresTouchWidget.IsInputChannelPassthroughEnabled // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad690
	bool IsInCharacterHUD(); // Function ShooterGame.AresTouchWidget.IsInCharacterHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad660
	bool IsHandlingForwardedInputIndex(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchWidget.IsHandlingForwardedInputIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad5d0
	bool IsHandlingForwardedInput(); // Function ShooterGame.AresTouchWidget.IsHandlingForwardedInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad5a0
	bool IsAimPassthroughEnabled(); // Function ShooterGame.AresTouchWidget.IsAimPassthroughEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad570
	void InitializeDefaultLayout(enum class EWidgetVisibilityState DefaultVisibilityState, bool bAllowForPreset, struct FWidgetLayoutSettingOverrides SettingOverrides, float Scale); // Function ShooterGame.AresTouchWidget.InitializeDefaultLayout // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dad2b0
	enum class EWidgetVisibilityState GetVisibilityState(); // Function ShooterGame.AresTouchWidget.GetVisibilityState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad260
	struct FWidgetLayout GetUserDefinedLayout(); // Function ShooterGame.AresTouchWidget.GetUserDefinedLayout // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad170
	struct UAresUIPropertyRegistry* GetTouchWidgetProperties(); // Function ShooterGame.AresTouchWidget.GetTouchWidgetProperties // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad150
	enum class EAresTouchTrackingMode GetTouchTrackingMode(); // Function ShooterGame.AresTouchWidget.GetTouchTrackingMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad120
	struct UAresTouchComponent* GetTouchComponent(); // Function ShooterGame.AresTouchWidget.GetTouchComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad100
	struct FName GetSlotName(); // Function ShooterGame.AresTouchWidget.GetSlotName // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad090
	bool GetSettingWeaponOverride(enum class EWidgetLayoutSettingName SettingName, bool& OutValue, struct FString OverrideWeaponPath); // Function ShooterGame.AresTouchWidget.GetSettingWeaponOverride // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dacf10
	struct UAresTouchScreen* GetParentTouchScreen(); // Function ShooterGame.AresTouchWidget.GetParentTouchScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dacdd0
	struct FVector2D GetLocalCenterCoordinates(); // Function ShooterGame.AresTouchWidget.GetLocalCenterCoordinates // (Native|Event|Protected|HasDefaults|BlueprintEvent|Const) // @ game+0x2dacd80
	bool GetHiddenByGameFeatureToggle(); // Function ShooterGame.AresTouchWidget.GetHiddenByGameFeatureToggle // (Final|Native|Public|BlueprintCallable) // @ game+0x2dacd50
	bool GetFloatLayoutSetting(enum class EWidgetLayoutSettingName SettingName, float& OutValue); // Function ShooterGame.AresTouchWidget.GetFloatLayoutSetting // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dacc70
	enum class EWidgetEnabledState GetEnabledState(); // Function ShooterGame.AresTouchWidget.GetEnabledState // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dacc40
	struct FWidgetLayout GetDefaultLayout(); // Function ShooterGame.AresTouchWidget.GetDefaultLayout // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dacac0
	bool GetBoolLayoutSetting(enum class EWidgetLayoutSettingName SettingName, bool& OutValue, bool UseOverrides, struct FString OverrideWeaponPath); // Function ShooterGame.AresTouchWidget.GetBoolLayoutSetting // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dac8e0
	void ForwardedOnTouchPress(struct FAresTouchEventInfo& TouchInfo, char InputChannel); // Function ShooterGame.AresTouchWidget.ForwardedOnTouchPress // (Final|Native|Protected|HasOutParms) // @ game+0x2dac730
	void ForwardedOnTouchMoved(struct FAresTouchEventInfo& TouchInfo, char InputChannel); // Function ShooterGame.AresTouchWidget.ForwardedOnTouchMoved // (Final|Native|Protected|HasOutParms) // @ game+0x2dac5b0
	void ForwardedOnTouchEnded(struct FAresTouchEventInfo& TouchInfo, char InputChannel); // Function ShooterGame.AresTouchWidget.ForwardedOnTouchEnded // (Final|Native|Protected|HasOutParms) // @ game+0x2dac430
	void ForceVisibilityUpdate(); // Function ShooterGame.AresTouchWidget.ForceVisibilityUpdate // (Final|Native|Protected|BlueprintCallable) // @ game+0x2dac410
	bool DoesHaveAnyActiveTouches(); // Function ShooterGame.AresTouchWidget.DoesHaveAnyActiveTouches // (Final|Native|Public|BlueprintCallable) // @ game+0x2dac3b0
	void ClearActivateTouchEnterIndex(); // Function ShooterGame.AresTouchWidget.ClearActivateTouchEnterIndex // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dac300
	void ApplyBoolLayoutWeaponOverrides(); // Function ShooterGame.AresTouchWidget.ApplyBoolLayoutWeaponOverrides // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dac2e0
};

// Class ShooterGame.AresActionButton
// Size: 0xa10 (Inherited: 0x960)
struct UAresActionButton : UAresTouchWidget {
	struct FMulticastInlineDelegate OnEngage; // 0x960(0x10)
	struct FMulticastInlineDelegate OnDisengage; // 0x970(0x10)
	struct FMulticastInlineDelegate OnClick; // 0x980(0x10)
	struct FMulticastInlineDelegate OnButtonPressed; // 0x990(0x10)
	struct FMulticastInlineDelegate OnButtonReleased; // 0x9a0(0x10)
	struct FMulticastInlineDelegate OnButtonEntered; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnButtonExited; // 0x9c0(0x10)
	struct FMulticastInlineDelegate OnButtonMoved; // 0x9d0(0x10)
	struct FMulticastInlineDelegate OnButtonReset; // 0x9e0(0x10)
	bool bEngaged; // 0x9f0(0x01)
	char pad_9F1[0x3]; // 0x9f1(0x03)
	struct FName ActionMappingName; // 0x9f4(0x0c)
	bool bFireOnRelease; // 0xa00(0x01)
	enum class EActionButtonActivationMode ActivationMode; // 0xa01(0x01)
	enum class EActionButtonStateTransitionMethod StateTransitionMethod; // 0xa02(0x01)
	char pad_A03[0xd]; // 0xa03(0x0d)

	void SimulateTap(); // Function ShooterGame.AresActionButton.SimulateTap // (Native|Public|BlueprintCallable) // @ game+0x2cc8e70
	void SetStateTransitionMethod(enum class EActionButtonStateTransitionMethod InStateTransitionMethod); // Function ShooterGame.AresActionButton.SetStateTransitionMethod // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2cc8df0
	void SetSelfHandlesTouchEngageVisualsEnabled(bool bInIsEnabled); // Function ShooterGame.AresActionButton.SetSelfHandlesTouchEngageVisualsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2cc8d60
	void SetSelfHandlesTouchEngageEnabled(bool bInIsEnabled); // Function ShooterGame.AresActionButton.SetSelfHandlesTouchEngageEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2cc8cd0
	void OnTouchComponentReleased(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentReleased // (Native|Protected) // @ game+0x2cc8c10
	void OnTouchComponentPressed(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentPressed // (Native|Protected) // @ game+0x2cc8b50
	void OnTouchComponentMoved(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentMoved // (Native|Protected) // @ game+0x2cc8a90
	void OnTouchComponentExited(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentExited // (Native|Protected) // @ game+0x2cc89d0
	void OnTouchComponentEntered(struct FAresTouchTrackingData TouchData); // Function ShooterGame.AresActionButton.OnTouchComponentEntered // (Native|Protected) // @ game+0x2cc8910
	void HandleTouchEngageVisuals(); // Function ShooterGame.AresActionButton.HandleTouchEngageVisuals // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2cc8720
	void HandleTouchEngage(); // Function ShooterGame.AresActionButton.HandleTouchEngage // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2cc86f0
	void HandleTouchDisengageVisuals(); // Function ShooterGame.AresActionButton.HandleTouchDisengageVisuals // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2cc4ce0
	void HandleTouchDisengage(); // Function ShooterGame.AresActionButton.HandleTouchDisengage // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2cad9f0
	void HandleTouchClick(); // Function ShooterGame.AresActionButton.HandleTouchClick // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2cc86c0
	bool GetSelfHandlesTouchEngageEnabled(); // Function ShooterGame.AresActionButton.GetSelfHandlesTouchEngageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc84b0
};

// Class ShooterGame.AresActorSoundPool
// Size: 0x3e0 (Inherited: 0x3d0)
struct AAresActorSoundPool : AActor {
	struct TArray<struct UAresAudioComponent*> RecycledAudioComponents; // 0x3d0(0x10)
};

// Class ShooterGame.AresAimToolingTracker
// Size: 0xf8 (Inherited: 0xf8)
struct UAresAimToolingTracker : UPMAimToolingTracker {

	void TrackAresShot(struct AShooterCharacter* ShooterCharacter, struct AAresEquippable* EquippableUsed, bool bIsBendingDamage, struct TArray<struct FAresPointDamageEvent>& AppliedDamageEvents); // Function ShooterGame.AresAimToolingTracker.TrackAresShot // (Final|Native|Public|HasOutParms) // @ game+0x2cc8ea0
	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.AresAimToolingTracker.OnRoundEnd // (Final|Native|Public) // @ game+0x2ca3d20
};

// Class ShooterGame.AresAimToolingTuningAsset
// Size: 0x290 (Inherited: 0x38)
struct UAresAimToolingTuningAsset : UDataAsset {
	bool bAimToolingModule; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float AimToolingTargetManagementOuterRadius; // 0x3c(0x04)
	float AimToolingTargetManagementOuterRadiusMinScalePct; // 0x40(0x04)
	float AimToolingTargetManagementOuterRadiusMaxScalePct; // 0x44(0x04)
	float AimToolingTargetManagementMinDistance; // 0x48(0x04)
	float AimToolingTargetManagementMaxDistance; // 0x4c(0x04)
	float AimToolingTargetManagementPreviousTargetDecay; // 0x50(0x04)
	float AimToolingMoveErrorMax; // 0x54(0x04)
	float AimToolingMoveErrorExponent; // 0x58(0x04)
	bool bAimToolingBending; // 0x5c(0x01)
	char pad_5D[0x3]; // 0x5d(0x03)
	float AimToolingBendingInnerRadiusCm; // 0x60(0x04)
	float AimToolingBendingOuterRadiusCm; // 0x64(0x04)
	float AimToolingBendingMaxAngleDegs; // 0x68(0x04)
	float AimToolingBendingExponent; // 0x6c(0x04)
	float AimToolingBendingMovePenaltyScale; // 0x70(0x04)
	bool bAimToolingPullToCenter; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	struct UCurveFloat* PullToCenterRadialTowardCurve; // 0x78(0x08)
	struct UCurveFloat* PullToCenterRadialTowardCurveZoomed; // 0x80(0x08)
	struct UCurveFloat* PullToCenterRadialAwayCurve; // 0x88(0x08)
	struct UCurveFloat* PullToCenterRadialAwayCurveZoomed; // 0x90(0x08)
	struct UCurveFloat* PullToCenterTangentialTowardCurve; // 0x98(0x08)
	struct UCurveFloat* PullToCenterTangentialTowardCurveZoomed; // 0xa0(0x08)
	struct UCurveFloat* PullToCenterTangentialAwayCurve; // 0xa8(0x08)
	struct UCurveFloat* PullToCenterTangentialAwayCurveZoomed; // 0xb0(0x08)
	struct UCurveFloat* PullToCenterWorldDistFromTargetCurve; // 0xb8(0x08)
	struct UCurveFloat* PullToCenterWorldDistFromTargetCurveZoomed; // 0xc0(0x08)
	struct UCurveFloat* PullToCenterScreenDistFromTargetCurve; // 0xc8(0x08)
	struct UCurveFloat* PullToCenterScreenDistFromTargetCurveZoomed; // 0xd0(0x08)
	struct UCurveFloat* PullToCenterStickDeflectionCurve; // 0xd8(0x08)
	struct UCurveFloat* PullToCenterStickDeflectionCurveZoomed; // 0xe0(0x08)
	float AimToolingPullToCenterRadialTowardExponent; // 0xe8(0x04)
	float AimToolingPullToCenterRadialTowardExponentZoomed; // 0xec(0x04)
	float AimToolingPullToCenterRadialTowardScale; // 0xf0(0x04)
	float AimToolingPullToCenterRadialTowardScaleZoomed; // 0xf4(0x04)
	float AimToolingPullToCenterRadialAwayExponent; // 0xf8(0x04)
	float AimToolingPullToCenterRadialAwayExponentZoomed; // 0xfc(0x04)
	float AimToolingPullToCenterRadialAwayScale; // 0x100(0x04)
	float AimToolingPullToCenterRadialAwayScaleZoomed; // 0x104(0x04)
	float AimToolingPullToCenterTangentialTowardExponent; // 0x108(0x04)
	float AimToolingPullToCenterTangentialTowardExponentZoomed; // 0x10c(0x04)
	float AimToolingPullToCenterTangentialTowardScale; // 0x110(0x04)
	float AimToolingPullToCenterTangentialTowardScaleZoomed; // 0x114(0x04)
	float AimToolingPullToCenterTangentialAwayExponent; // 0x118(0x04)
	float AimToolingPullToCenterTangentialAwayExponentZoomed; // 0x11c(0x04)
	float AimToolingPullToCenterTangentialAwayScale; // 0x120(0x04)
	float AimToolingPullToCenterTangentialAwayScaleZoomed; // 0x124(0x04)
	float AimToolingPullToCenterMovePenaltyScale; // 0x128(0x04)
	float AimToolingPullToCenterMovePenaltyScaleZoomed; // 0x12c(0x04)
	float AimToolingPullToCenterRecoilEfficacyScale; // 0x130(0x04)
	float AimToolingPullToCenterRecoilEfficacyScaleZoomed; // 0x134(0x04)
	float AimToolingPullToCenterAdjustmentClampThreshold; // 0x138(0x04)
	float AimToolingPullToCenterAdjustmentClampThresholdZoomed; // 0x13c(0x04)
	float AimToolingPullToCenterAdjustmentClampScale; // 0x140(0x04)
	float AimToolingPullToCenterAdjustmentClampScaleZoomed; // 0x144(0x04)
	bool bAimToolingTargetFriction; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
	struct UCurveFloat* TargetFrictionOverTargetPctCurve; // 0x150(0x08)
	struct UCurveFloat* TargetFrictionOverTargetPctCurveZoomed; // 0x158(0x08)
	struct UCurveFloat* TargetFrictionWorldDistFromTargetCurve; // 0x160(0x08)
	struct UCurveFloat* TargetFrictionWorldDistFromTargetCurveZoomed; // 0x168(0x08)
	struct UCurveFloat* TargetFrictionScreenDistFromTargetCurve; // 0x170(0x08)
	struct UCurveFloat* TargetFrictionScreenDistFromTargetCurveZoomed; // 0x178(0x08)
	struct UCurveFloat* TargetFrictionStickDeflectionCurve; // 0x180(0x08)
	struct UCurveFloat* TargetFrictionStickDeflectionCurveZoomed; // 0x188(0x08)
	bool bAimToolingOverTargetAcceleration; // 0x190(0x01)
	char pad_191[0x3]; // 0x191(0x03)
	float AimToolingOverTargetAccelerationFlatScale; // 0x194(0x04)
	float AimToolingOverTargetAccelerationScaleFloor; // 0x198(0x04)
	float AimToolingOverTargetAccelerationExponent; // 0x19c(0x04)
	bool bAimToolingAimAccelerationDelay; // 0x1a0(0x01)
	char pad_1A1[0x7]; // 0x1a1(0x07)
	struct UCurveFloat* AimAccelerationScaleCurve; // 0x1a8(0x08)
	float AimToolingAimAccelerationDelayScaleDecayRate; // 0x1b0(0x04)
	float AimToolingAimAccelerationDelayMinOverTargetPct; // 0x1b4(0x04)
	bool bAimToolingDeceleration; // 0x1b8(0x01)
	char pad_1B9[0x3]; // 0x1b9(0x03)
	float AimToolingDecelerationTime; // 0x1bc(0x04)
	float AimToolingDecelerationAverageWindow; // 0x1c0(0x04)
	float AimToolingDecelerationExponent; // 0x1c4(0x04)
	float AimToolingDecelerationHalfAngle; // 0x1c8(0x04)
	float AimToolingDecelerationMaxShift; // 0x1cc(0x04)
	float AimToolingDecelerationStartThreshold; // 0x1d0(0x04)
	bool bAimToolingStrafeAssist; // 0x1d4(0x01)
	char pad_1D5[0x3]; // 0x1d5(0x03)
	float AimToolingStrafeAssistMovementDeltaScale; // 0x1d8(0x04)
	float AimToolingStrafeAssistMovementDeltaScaleZoomed; // 0x1dc(0x04)
	float AimToolingStrafeAssistMode; // 0x1e0(0x04)
	float AimToolingStrafeAssistModeZoomed; // 0x1e4(0x04)
	struct UCurveFloat* StrafeAssistOverTargetPctCurve; // 0x1e8(0x08)
	struct UCurveFloat* StrafeAssistOverTargetPctCurveZoomed; // 0x1f0(0x08)
	struct UCurveFloat* StrafeAssistWorldDistFromTargetCurve; // 0x1f8(0x08)
	struct UCurveFloat* StrafeAssistWorldDistFromTargetCurveZoomed; // 0x200(0x08)
	struct UCurveFloat* StrafeAssistScreenDistFromTargetCurve; // 0x208(0x08)
	struct UCurveFloat* StrafeAssistScreenDistFromTargetCurveZoomed; // 0x210(0x08)
	struct UCurveFloat* StrafeAssistPlayerSpeedCurve; // 0x218(0x08)
	struct UCurveFloat* StrafeAssistPlayerSpeedCurveZoomed; // 0x220(0x08)
	bool bAimToolingFrameOfReference; // 0x228(0x01)
	char pad_229[0x3]; // 0x229(0x03)
	float AimToolingFrameOfReferenceMinOverTargetPct; // 0x22c(0x04)
	float AimToolingFrameOfReferenceMinOverTargetPctZoomed; // 0x230(0x04)
	float AimToolingFrameOfReferenceMovementDeltaScale; // 0x234(0x04)
	float AimToolingFrameOfReferenceMovementDeltaScaleZoomed; // 0x238(0x04)
	char pad_23C[0x4]; // 0x23c(0x04)
	struct UCurveFloat* FrameOfReferenceWorldDistFromTargetCurve; // 0x240(0x08)
	struct UCurveFloat* FrameOfReferenceWorldDistFromTargetCurveZoomed; // 0x248(0x08)
	struct UCurveFloat* FrameOfReferenceScreenDistFromTargetCurve; // 0x250(0x08)
	struct UCurveFloat* FrameOfReferenceScreenDistFromTargetCurveZoomed; // 0x258(0x08)
	struct UCurveFloat* FrameOfReferenceStickDeflectionCurve; // 0x260(0x08)
	struct UCurveFloat* FrameOfReferenceStickDeflectionCurveZoomed; // 0x268(0x08)
	struct UCurveFloat* FrameOfReferenceOverTargetPctCurve; // 0x270(0x08)
	struct UCurveFloat* FrameOfReferenceOverTargetPctCurveZoomed; // 0x278(0x08)
	bool bAimToolingFlashTurning; // 0x280(0x01)
	char pad_281[0x3]; // 0x281(0x03)
	float AimToolingFlashTurningAimAccelerationScale; // 0x284(0x04)
	float AimToolingFlashTurningPitchSensitivityScale; // 0x288(0x04)
	float AimToolingFlashTurningYawSensitivityScale; // 0x28c(0x04)
};

// Class ShooterGame.AresAimToolingTuningComponent
// Size: 0x118 (Inherited: 0xe8)
struct UAresAimToolingTuningComponent : UActorComponent {
	int32_t CurrentTuningMode; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FString> TuningModeAssetPaths; // 0xf0(0x10)
	struct UAresAimToolingTuningAsset* CurrentTuningAsset; // 0x100(0x08)
	char pad_108[0x10]; // 0x108(0x10)

	void OnAimToolingGameRuleChanged(enum class EGameRuleBoolName RuleName, bool RuleValue); // Function ShooterGame.AresAimToolingTuningComponent.OnAimToolingGameRuleChanged // (Final|Native|Protected) // @ game+0x2cc8840
	void HandleTuningAssetLoaded(); // Function ShooterGame.AresAimToolingTuningComponent.HandleTuningAssetLoaded // (Final|Native|Protected) // @ game+0x2cc8750
	void HandleAimToolingTuningModeChanged(enum class EGameFeatureFloatConfigName TuningModeName, float NewValue); // Function ShooterGame.AresAimToolingTuningComponent.HandleAimToolingTuningModeChanged // (Final|Native|Protected) // @ game+0x2cc85f0
};

// Class ShooterGame.AresAIPerceptionComponent
// Size: 0x1d8 (Inherited: 0x1d0)
struct UAresAIPerceptionComponent : UAIPerceptionComponent {
	float ReactionTime; // 0x1d0(0x04)
	char pad_1D4[0x4]; // 0x1d4(0x04)

	bool HasSensedTimePassedReactionTime(struct UAISense* SenseToUse, struct AActor* Actor); // Function ShooterGame.AresAIPerceptionComponent.HasSensedTimePassedReactionTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc8770
	bool GetTotalSensedTime(struct UAISense* SenseToUse, struct AActor* Actor, float& Time); // Function ShooterGame.AresAIPerceptionComponent.GetTotalSensedTime // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc84d0
	bool GetActorsSensedLocation(struct AActor* Actor, struct FVector& Location); // Function ShooterGame.AresAIPerceptionComponent.GetActorsSensedLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2cc83d0
	void DeactivatePerception(); // Function ShooterGame.AresAIPerceptionComponent.DeactivatePerception // (Final|Native|Public|BlueprintCallable) // @ game+0x2cc83b0
	void ActivatePerception(); // Function ShooterGame.AresAIPerceptionComponent.ActivatePerception // (Final|Native|Public|BlueprintCallable) // @ game+0x2cc8390
};

// Class ShooterGame.AresAIPerceptionSystem
// Size: 0x148 (Inherited: 0x148)
struct UAresAIPerceptionSystem : UAIPerceptionSystem {
};

// Class ShooterGame.AresAISystem
// Size: 0x158 (Inherited: 0x158)
struct UAresAISystem : UAISystem {
};

// Class ShooterGame.GamepadTuningDataAsset
// Size: 0x80 (Inherited: 0x38)
struct UGamepadTuningDataAsset : UDataAsset {
	float AnalogRoundness; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct UCurveFloat*> AimCurves; // 0x40(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> TriggerSwapEquippables; // 0x50(0x10)
	float WeaponSwapTapHoldThreshold; // 0x60(0x04)
	float DropItemsTapHoldThreshold; // 0x64(0x04)
	float ReloadShopTapHoldThreshold; // 0x68(0x04)
	float UseTapHoldThreshold; // 0x6c(0x04)
	float MapScoreboardTapHoldThreshold; // 0x70(0x04)
	float QuickAbilityMaxHoldTime; // 0x74(0x04)
	float UltInputSeparationTime; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
};

// Class ShooterGame.AresAssetManager
// Size: 0x4b8 (Inherited: 0x460)
struct UAresAssetManager : UAssetManager {
	char pad_460[0x58]; // 0x460(0x58)
};

// Class ShooterGame.AresAttachmentSocket
// Size: 0x40 (Inherited: 0x30)
struct UAresAttachmentSocket : UObject {
	struct FName SocketName; // 0x30(0x0c)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class ShooterGame.GameplayModMagnitudeCalculationLevelAsCurve
// Size: 0x50 (Inherited: 0x48)
struct UGameplayModMagnitudeCalculationLevelAsCurve : UGameplayModMagnitudeCalculation {
	struct UCurveFloat* AttributeLevelCurve; // 0x48(0x08)
};

// Class ShooterGame.AresGameplayModMagnitudeCalculation
// Size: 0x48 (Inherited: 0x48)
struct UAresGameplayModMagnitudeCalculation : UGameplayModMagnitudeCalculation {

	struct UObject* GetSourceObject(struct FGameplayEffectSpec& Spec); // Function ShooterGame.AresGameplayModMagnitudeCalculation.GetSourceObject // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cd5900
	float GetEffectLevel(struct FGameplayEffectSpec& Spec); // Function ShooterGame.AresGameplayModMagnitudeCalculation.GetEffectLevel // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cd55b0
	struct AActor* GetEffectInstigator(struct FGameplayEffectSpec& Spec); // Function ShooterGame.AresGameplayModMagnitudeCalculation.GetEffectInstigator // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cd54d0
	struct AActor* GetEffectCauser(struct FGameplayEffectSpec& Spec); // Function ShooterGame.AresGameplayModMagnitudeCalculation.GetEffectCauser // (Final|Native|Protected|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cd53f0
};

// Class ShooterGame.AresAttributeSet
// Size: 0x758 (Inherited: 0x38)
struct UAresAttributeSet : UAttributeSet {
	struct FGameplayBooleanAttributeData AllowFiringWhileUsing; // 0x38(0x10)
	struct FGameplayAttributeData Blinded; // 0x48(0x10)
	struct FGameplayAttributeData BonusDamage; // 0x58(0x10)
	struct FGameplayBooleanAttributeData CanSeeOthersHealth; // 0x68(0x10)
	struct FGameplayAttributeData DamageReduction; // 0x78(0x10)
	struct FGameplayAttributeData DefensiveDetectionDuration; // 0x88(0x10)
	struct FGameplayAttributeData DescendingGravityModifier; // 0x98(0x10)
	struct FGameplayAttributeData DetectionDelay; // 0xa8(0x10)
	struct FGameplayBooleanAttributeData DetectionDisabled; // 0xb8(0x10)
	struct FGameplayAttributeData EquippableMovementModifier; // 0xc8(0x10)
	struct FGameplayAttributeData HealingEffectiveness; // 0xd8(0x10)
	struct FGameplayAttributeData ShieldRestoreEffectiveness; // 0xe8(0x10)
	struct FGameplayAttributeData FiringErrorModifier; // 0xf8(0x10)
	struct FGameplayAttributeData FiringRateModifier; // 0x108(0x10)
	struct FGameplayAttributeData StabilityMovementModifier; // 0x118(0x10)
	struct FGameplayAttributeData GravityModifier; // 0x128(0x10)
	struct FGameplayAttributeData FootstepVolumeReduction; // 0x138(0x10)
	struct FGameplayBooleanAttributeData ForceCrouch; // 0x148(0x10)
	struct FGameplayBooleanAttributeData Frozen; // 0x158(0x10)
	struct FGameplayBooleanAttributeData HeavyWeaponsDisabled; // 0x168(0x10)
	struct FGameplayBooleanAttributeData Hide1P; // 0x178(0x10)
	struct FGameplayBooleanAttributeData HideCrosshair; // 0x188(0x10)
	struct FGameplayBooleanAttributeData HudVisibleToAll; // 0x198(0x10)
	struct FGameplayBooleanAttributeData HudVisibleToInstigator; // 0x1a8(0x10)
	struct FGameplayBooleanAttributeData InDanger; // 0x1b8(0x10)
	struct FGameplayBooleanAttributeData Intangible; // 0x1c8(0x10)
	struct FGameplayBooleanAttributeData invisible; // 0x1d8(0x10)
	struct FGameplayBooleanAttributeData InvisibleEquippables; // 0x1e8(0x10)
	struct FGameplayBooleanAttributeData InvisibleToEnemies; // 0x1f8(0x10)
	struct FGameplayBooleanAttributeData InvisibleToOwner; // 0x208(0x10)
	struct FGameplayBooleanAttributeData Invulnerable; // 0x218(0x10)
	struct FGameplayAttributeData JumpForceModifier; // 0x228(0x10)
	struct FGameplayAttributeData JumpMovementSlow; // 0x238(0x10)
	struct FGameplayBooleanAttributeData MinimapBlinded; // 0x248(0x10)
	struct FGameplayAttributeData MinimumAboveMaxSpeedDecayRateReduction; // 0x258(0x10)
	struct FGameplayAttributeData FallDamageReduction; // 0x268(0x10)
	struct FGameplayBooleanAttributeData LockMovement; // 0x278(0x10)
	struct FGameplayAttributeData MagazineBonus; // 0x288(0x10)
	struct FGameplayBooleanAttributeData MapVisibleToAll; // 0x298(0x10)
	struct FGameplayAttributeData MaxHealthModifier; // 0x2a8(0x10)
	struct FGameplayAttributeData MaxShieldModifier; // 0x2b8(0x10)
	struct FGameplayAttributeData MaxTurnRate; // 0x2c8(0x10)
	struct FGameplayAttributeData MinError; // 0x2d8(0x10)
	struct FGameplayAttributeData MinimapDetectionDelay; // 0x2e8(0x10)
	struct FGameplayBooleanAttributeData MinimapDisabled; // 0x2f8(0x10)
	struct FGameplayBooleanAttributeData MinimapInvisible; // 0x308(0x10)
	struct FGameplayAttributeData MinimapViewDistance; // 0x318(0x10)
	struct FGameplayAttributeData MaxVisionDistance; // 0x328(0x10)
	struct FGameplayAttributeData MoneyKillRewardModifier; // 0x338(0x10)
	struct FGameplayAttributeData MovementBonus; // 0x348(0x10)
	struct FGameplayAttributeData MovementBonusCrouch; // 0x358(0x10)
	struct FGameplayAttributeData MovementBonusFlying; // 0x368(0x10)
	struct FGameplayAttributeData MovementBonusJump; // 0x378(0x10)
	struct FGameplayAttributeData MovementBonusRun; // 0x388(0x10)
	struct FGameplayAttributeData MovementBonusWalk; // 0x398(0x10)
	struct FGameplayAttributeData MovementErrorModifier; // 0x3a8(0x10)
	struct FGameplayAttributeData MovementSlow; // 0x3b8(0x10)
	struct FGameplayAttributeData OffensiveDetectionDuration; // 0x3c8(0x10)
	struct FGameplayAttributeData PickupAmmoBonus; // 0x3d8(0x10)
	struct FGameplayBooleanAttributeData PreventAbilities; // 0x3e8(0x10)
	struct FGameplayBooleanAttributeData PreventCrouch; // 0x3f8(0x10)
	struct FGameplayBooleanAttributeData PreventDroppingEquippables; // 0x408(0x10)
	struct FGameplayBooleanAttributeData PreventJump; // 0x418(0x10)
	struct FGameplayBooleanAttributeData PreventFiring; // 0x428(0x10)
	struct FGameplayBooleanAttributeData PreventMeleeAttacking; // 0x438(0x10)
	struct FGameplayBooleanAttributeData PreventMovementInput; // 0x448(0x10)
	struct FGameplayBooleanAttributeData PreventReloading; // 0x458(0x10)
	struct FGameplayBooleanAttributeData PreventSwitchingEquippables; // 0x468(0x10)
	struct FGameplayBooleanAttributeData PreventUseCancelling; // 0x478(0x10)
	struct FGameplayBooleanAttributeData PreventUsing; // 0x488(0x10)
	struct FGameplayBooleanAttributeData PreventPickup; // 0x498(0x10)
	struct FGameplayBooleanAttributeData PrimarySlotDisabled; // 0x4a8(0x10)
	struct FGameplayAttributeData ReduceAbilityMovementPenalty; // 0x4b8(0x10)
	struct FGameplayAttributeData ReduceTaggingMovementPenalty; // 0x4c8(0x10)
	struct FGameplayAttributeData ReloadTimeModifier; // 0x4d8(0x10)
	struct FGameplayAttributeData SpreadRecoveryModifier; // 0x4e8(0x10)
	struct FGameplayBooleanAttributeData Stealthed; // 0x4f8(0x10)
	struct FGameplayAttributeData RecoilModifier; // 0x508(0x10)
	struct FGameplayBooleanAttributeData ThirdPerson; // 0x518(0x10)
	struct FGameplayAttributeData TurnRatePenalty; // 0x528(0x10)
	struct FGameplayAttributeData UltimatePointsDeathModifier; // 0x538(0x10)
	struct FGameplayAttributeData UltimatePointsDefuseModifier; // 0x548(0x10)
	struct FGameplayAttributeData UltimatePointsKillModifier; // 0x558(0x10)
	struct FGameplayAttributeData UltimatePointsPickUpModifier; // 0x568(0x10)
	struct FGameplayAttributeData UltimatePointsPlantModifier; // 0x578(0x10)
	struct FGameplayAttributeData UsingTimeModifier; // 0x588(0x10)
	struct FGameplayAttributeData WallPenetrationDistanceModifier; // 0x598(0x10)
	struct FGameplayAttributeData WeaponDrawTimeModifier; // 0x5a8(0x10)
	struct FGameplayBooleanAttributeData WeaponsDisabled; // 0x5b8(0x10)
	struct FGameplayBooleanAttributeData WeaponsLowered; // 0x5c8(0x10)
	struct FGameplayBooleanAttributeData Disarmed; // 0x5d8(0x10)
	struct FGameplayBooleanAttributeData GrenadeDisabled; // 0x5e8(0x10)
	struct FGameplayBooleanAttributeData QDisabled; // 0x5f8(0x10)
	struct FGameplayBooleanAttributeData EDisabled; // 0x608(0x10)
	struct FGameplayBooleanAttributeData UltimateDisabled; // 0x618(0x10)
	struct FGameplayBooleanAttributeData ZoomDisabled; // 0x628(0x10)
	struct FGameplayBooleanAttributeData EquipmentDisabled; // 0x638(0x10)
	struct FGameplayAttributeData TemporaryDamage; // 0x648(0x10)
	struct FGameplayAttributeData IncomingDamageShieldPenetrationModifier; // 0x658(0x10)
	struct FGameplayBooleanAttributeData PreventDeathFromDamage; // 0x668(0x10)
	struct FGameplayBooleanAttributeData BlindImmune; // 0x678(0x10)
	struct FGameplayBooleanAttributeData PreventUsingAbilities; // 0x688(0x10)
	struct FGameplayBooleanAttributeData PreventUsingAscenders; // 0x698(0x10)
	struct FGameplayAttributeData OverrideEquippableBaseMovement; // 0x6a8(0x10)
	struct FGameplayBooleanAttributeData DisableRegionalDamageMultipliers; // 0x6b8(0x10)
	struct FGameplayBooleanAttributeData DisableIncomingDamageCombatTracking; // 0x6c8(0x10)
	struct FGameplayBooleanAttributeData HealsFromAllyFlames; // 0x6d8(0x10)
	struct FGameplayAttributeData Marked; // 0x6e8(0x10)
	struct FGameplayBooleanAttributeData Suppressed; // 0x6f8(0x10)
	struct FGameplayBooleanAttributeData PreventDowned; // 0x708(0x10)
	struct FGameplayBooleanAttributeData PreventPlanting; // 0x718(0x10)
	struct FGameplayBooleanAttributeData PreventDefusing; // 0x728(0x10)
	struct FGameplayBooleanAttributeData PreventFollowing; // 0x738(0x10)
	float Healing; // 0x748(0x04)
	float Damage; // 0x74c(0x04)
	float Shield; // 0x750(0x04)
	char pad_754[0x4]; // 0x754(0x04)
};

// Class ShooterGame.AresAudioBankLoader
// Size: 0x50 (Inherited: 0x30)
struct UAresAudioBankLoader : UObject {
	struct TArray<struct FAresAudioBank> AudioBanks; // 0x30(0x10)
	struct TArray<struct UAkAudioEvent*> ReferencedAudioEvents; // 0x40(0x10)
};

// Class ShooterGame.AresAudioBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresAudioBlueprintLibrary : UBlueprintFunctionLibrary {

	void SetDebugAresAudio(int32_t Value); // Function ShooterGame.AresAudioBlueprintLibrary.SetDebugAresAudio // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cd5ca0
	void SetAudioLanguage(struct FString Language); // Function ShooterGame.AresAudioBlueprintLibrary.SetAudioLanguage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cd5ba0
	void LoadLocalizedEventsFromBankList(struct TArray<struct UAkAudioBank*>& AudioBanks); // Function ShooterGame.AresAudioBlueprintLibrary.LoadLocalizedEventsFromBankList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2cd5b00
	void LoadEventsFromBankList(struct TArray<struct UAkAudioBank*>& AudioBanks); // Function ShooterGame.AresAudioBlueprintLibrary.LoadEventsFromBankList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2cd5a60
	void LoadEventsForBank(struct UAkAudioBank* AudioBank); // Function ShooterGame.AresAudioBlueprintLibrary.LoadEventsForBank // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cd59e0
	struct AAresSoundHandler* GetSoundHandlerForWorld(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioBlueprintLibrary.GetSoundHandlerForWorld // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cd5870
	struct TArray<struct FString> GetLocalizationDirectories(); // Function ShooterGame.AresAudioBlueprintLibrary.GetLocalizationDirectories // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cd5780
	void GetEventsForBank(struct UAkAudioBank* AudioBank, struct TArray<struct UAkAudioEvent*>& OutEvents); // Function ShooterGame.AresAudioBlueprintLibrary.GetEventsForBank // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2cd5690
	int32_t GetDebugAresAudio(); // Function ShooterGame.AresAudioBlueprintLibrary.GetDebugAresAudio // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cd53c0
	struct FString GetAudioLanguage(); // Function ShooterGame.AresAudioBlueprintLibrary.GetAudioLanguage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cd5330
	struct AAresActorSoundPool* GetActorSoundPoolForWorld(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioBlueprintLibrary.GetActorSoundPoolForWorld // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cd52a0
	void AudioStatsSetInt(struct UObject* WorldContextObject, struct FName StatName, int32_t Value); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsSetInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cd5180
	void AudioStatsResetAll(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsResetAll // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cd5100
	int32_t AudioStatsIncrementInt(struct UObject* WorldContextObject, struct FName StatName); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsIncrementInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2cd5020
	struct FString AudioStatsGetString(struct UObject* WorldContextObject, int32_t TotalFrames); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsGetString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cd4f00
	int32_t AudioStatsGetInt(struct UObject* WorldContextObject, struct FName StatName); // Function ShooterGame.AresAudioBlueprintLibrary.AudioStatsGetInt // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cd4e20
	struct UAkAudioEvent* AresLoadAkAudioEventByPath(struct FString EventPath); // Function ShooterGame.AresAudioBlueprintLibrary.AresLoadAkAudioEventByPath // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cd4d70
};

// Class ShooterGame.AresAudioComponent
// Size: 0x560 (Inherited: 0x470)
struct UAresAudioComponent : UAkComponent {
	bool bEnableDopplerRTPC; // 0x470(0x01)
	bool bEnableOcclusion; // 0x471(0x01)
	bool bSimpleOcclusion; // 0x472(0x01)
	bool bContinuousOcclusion; // 0x473(0x01)
	float OcclusionUpdateInterval; // 0x474(0x04)
	struct TArray<struct AActor*> OcclusionIgnoredActors; // 0x478(0x10)
	char pad_488[0x11]; // 0x488(0x11)
	bool bAllowActorRecycling; // 0x499(0x01)
	char pad_49A[0xc6]; // 0x49a(0xc6)

	void WillRecycleComponent(); // Function ShooterGame.AresAudioComponent.WillRecycleComponent // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void WillPostEvent(struct FString PostEventName); // Function ShooterGame.AresAudioComponent.WillPostEvent // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void UpdatePosition(); // Function ShooterGame.AresAudioComponent.UpdatePosition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2cdc8f0
	void SetVolumeMultiplier(float VolumeMultiplier); // Function ShooterGame.AresAudioComponent.SetVolumeMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc6e0
	void SetSurfaceType(enum class EAresSurfaceType AresSurfaceType); // Function ShooterGame.AresAudioComponent.SetSurfaceType // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc660
	void SetRegionDamage(enum class EAresRegionalDamage RegionDamage); // Function ShooterGame.AresAudioComponent.SetRegionDamage // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc5e0
	void SetImpactAllies(enum class EAresImpactEffectAllies Allies); // Function ShooterGame.AresAudioComponent.SetImpactAllies // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc490
	void SetHitSpace(enum class EAresImpactEffectHitspace HitSpace); // Function ShooterGame.AresAudioComponent.SetHitSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc410
	void SetHitImpactArmor(enum class EAresImpactEffectWithArmor HitImpactArmor); // Function ShooterGame.AresAudioComponent.SetHitImpactArmor // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc390
	void SetHitConfirmLocality(enum class EAresHitConfirmLocality HitConfirmLocality); // Function ShooterGame.AresAudioComponent.SetHitConfirmLocality // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc310
	void SetFacingAngle(); // Function ShooterGame.AresAudioComponent.SetFacingAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc2f0
	void ResetAudioComponent(); // Function ShooterGame.AresAudioComponent.ResetAudioComponent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2cdc2d0
	void PrepareForReuse(); // Function ShooterGame.AresAudioComponent.PrepareForReuse // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2cdc040
	float GetSoundFacingAngle(); // Function ShooterGame.AresAudioComponent.GetSoundFacingAngle // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdbec0
	float GetOcclusionValue(); // Function ShooterGame.AresAudioComponent.GetOcclusionValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdbe70
	void GetComponentDebugString(struct FString& DebugString); // Function ShooterGame.AresAudioComponent.GetComponentDebugString // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	float ComputeOcclusion(); // Function ShooterGame.AresAudioComponent.ComputeOcclusion // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ComputeDopplerRTPC(float DeltaTime); // Function ShooterGame.AresAudioComponent.ComputeDopplerRTPC // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdbc20
	void AudioTick(float DeltaTime); // Function ShooterGame.AresAudioComponent.AudioTick // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void AresUseGlobal2DAudioComponent(struct UObject* WorldContextObject, struct UAkAudioEvent* Event); // Function ShooterGame.AresAudioComponent.AresUseGlobal2DAudioComponent // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x2cdbb60
	bool AresIsEventAudible(struct UObject* WorldContextObject, struct UAkAudioEvent* AudioEvent, struct FVector& Location, bool IsAttached, float VolumeMultiplier); // Function ShooterGame.AresAudioComponent.AresIsEventAudible // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2cdb990
	struct FVector AresGetListenerVelocity(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioComponent.AresGetListenerVelocity // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2cdb8f0
	struct FVector AresGetListenerPosition(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioComponent.AresGetListenerPosition // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2cdb850
	struct FVector AresGetListenerForward(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioComponent.AresGetListenerForward // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2cdb7b0
	struct APlayerController* AresGetActiveListenerPlayerController(struct UObject* WorldContextObject); // Function ShooterGame.AresAudioComponent.AresGetActiveListenerPlayerController // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cdb720
	struct UAresAudioComponent* AresFindOrCreateReusableAudioComponentForWorld(struct UAresAudioComponent* ComponentClass, struct UObject* WorldContextObject, struct FVector& Location, struct FRotator& Orientation, struct FString ComponentName); // Function ShooterGame.AresAudioComponent.AresFindOrCreateReusableAudioComponentForWorld // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2cdb530
	struct UAresAudioComponent* AresFindOrCreateReusableAudioComponentForActor(struct UAresAudioComponent* ComponentClass, struct AActor* Owner, struct USceneComponent* ParentComponent, struct FName AttachPointName, struct FVector Offset); // Function ShooterGame.AresAudioComponent.AresFindOrCreateReusableAudioComponentForActor // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2cdb380
	struct UAresAudioComponent* AresCreateAudioComponentForActor(struct UAresAudioComponent* ComponentClass, struct AActor* Owner, struct USceneComponent* ParentComponent, struct FName AttachPointName, struct FVector Offset, struct FRotator Orientation, bool bAutoDestroyComponent, bool bStopWhenOwnerDestroyed, bool bAllowRecycling); // Function ShooterGame.AresAudioComponent.AresCreateAudioComponentForActor // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2cdb0a0
};

// Class ShooterGame.AresAudioComponentManagerComponent
// Size: 0x140 (Inherited: 0xe8)
struct UAresAudioComponentManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct TMap<struct UObject*, struct FAudioComponentPool> AudioComponentPools; // 0xf0(0x50)

	void SetPooledAudioLimit(int32_t Limit, struct UObject* ParentObject); // Function ShooterGame.AresAudioComponentManagerComponent.SetPooledAudioLimit // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc510
	void RemovePoolFromMontage(struct UAnimMontage* Montage, bool bInterrupted); // Function ShooterGame.AresAudioComponentManagerComponent.RemovePoolFromMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc130
	void RemovePooledAudioComponent(struct UAresAudioComponent* AudioComponent, struct UObject* ParentObject); // Function ShooterGame.AresAudioComponentManagerComponent.RemovePooledAudioComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc200
	void RemoveAudioPool(struct UObject* ParentObject, bool bStopAllAudio); // Function ShooterGame.AresAudioComponentManagerComponent.RemoveAudioPool // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdc060
	void AddPooledAudioComponent(struct UAresAudioComponent* AudioComponent, struct UObject* ParentObject); // Function ShooterGame.AresAudioComponentManagerComponent.AddPooledAudioComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2cdaed0
};

// Class ShooterGame.AresAudioSettings
// Size: 0xa8 (Inherited: 0x48)
struct UAresAudioSettings : UDeveloperSettings {
	float BasicOcclusion; // 0x48(0x04)
	float HeavyOcclusion; // 0x4c(0x04)
	float SoundBlockerOcclusion; // 0x50(0x04)
	float NoOcclusionPathOcclusion; // 0x54(0x04)
	struct FSoftObjectPath HeavyOcclusionMaterial; // 0x58(0x20)
	struct FSoftObjectPath SoundBlockerMaterial; // 0x78(0x20)
	float InterpolationTimeMs; // 0x98(0x04)
	float TracePadding; // 0x9c(0x04)
	enum class ECollisionChannel DirectLineToSoundCollision; // 0xa0(0x01)
	enum class ECollisionChannel DetectBlockersCollision; // 0xa1(0x01)
	char pad_A2[0x6]; // 0xa2(0x06)
};

// Class ShooterGame.AutocompleteSuggestionBase
// Size: 0x2f8 (Inherited: 0x2c8)
struct UAutocompleteSuggestionBase : UUserWidget {
	struct FString Suggestion; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnClick; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnHover; // 0x2e8(0x10)

	void SetHighlighted(bool Highlighted); // Function ShooterGame.AutocompleteSuggestionBase.SetHighlighted // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AutocompleteProvider
// Size: 0x30 (Inherited: 0x30)
struct UAutocompleteProvider : UInterface {

	bool PerformsAutoFill(); // Function ShooterGame.AutocompleteProvider.PerformsAutoFill // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3520f50
	bool IsRelevant(struct TArray<struct FString>& Tokens); // Function ShooterGame.AutocompleteProvider.IsRelevant // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3520f50
	struct UAutocompleteSuggestionBase* GetSuggestionWidgetClass(); // Function ShooterGame.AutocompleteProvider.GetSuggestionWidgetClass // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3520f50
	struct TArray<struct FString> GetAllSuggestions(struct UAresClientGameInstance* AresClientGame); // Function ShooterGame.AutocompleteProvider.GetAllSuggestions // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3520f50
};

// Class ShooterGame.AresAutocompleteTextBox
// Size: 0x328 (Inherited: 0x2c8)
struct UAresAutocompleteTextBox : UUserWidget {
	struct UEditableTextBox* RawTextBox; // 0x2c8(0x08)
	int32_t MaxSuggestions; // 0x2d0(0x04)
	bool ShouldSplitInputOnSpace; // 0x2d4(0x01)
	char pad_2D5[0x3]; // 0x2d5(0x03)
	struct FString LastToken; // 0x2d8(0x10)
	bool bAutoFill; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)
	struct UAutocompleteSuggestionBase* CurrentSuggestionWidgetClass; // 0x2f0(0x08)
	struct TArray<struct FString> CurrentSuggestions; // 0x2f8(0x10)
	bool bApplyingSuggestion; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct TArray<struct TScriptInterface<IAutocompleteProvider>> Providers; // 0x310(0x10)
	struct UEmojiMapping* EmojiMapping; // 0x320(0x08)

	void UpdateSuggestions(struct FString Input); // Function ShooterGame.AresAutocompleteTextBox.UpdateSuggestions // (Final|Native|Protected|BlueprintCallable) // @ game+0x2cdc910
	struct TArray<struct FString> TokenizeInput(struct FString Input, bool SplitOnSpace); // Function ShooterGame.AresAutocompleteTextBox.TokenizeInput // (Final|Native|Protected|Const) // @ game+0x2cdc760
	void ApplySuggestion(struct UEditableTextBox* TargetTextBox, struct FString Suggestion); // Function ShooterGame.AresAutocompleteTextBox.ApplySuggestion // (Final|Native|Protected|BlueprintCallable) // @ game+0x2cdafa0
};

// Class ShooterGame.AresBaseGameInstance
// Size: 0x40 (Inherited: 0x30)
struct UAresBaseGameInstance : UObject {
	struct UTelemetryManager* TelemetryManagerInstance; // 0x30(0x08)
	struct UTelemetrySampler* TelemetrySamplerInstance; // 0x38(0x08)
};

// Class ShooterGame.ShooterAIController
// Size: 0x518 (Inherited: 0x4f0)
struct AShooterAIController : AAIController {
	struct URoundPersistenceComponent* Persistence; // 0x4f0(0x08)
	bool bTurretAiming; // 0x4f8(0x01)
	char pad_4F9[0xf]; // 0x4f9(0x0f)
	struct FName ShooterCharacterFocalPointBone; // 0x508(0x0c)
	char pad_514[0x4]; // 0x514(0x04)

	void SetAimOffset(struct FVector& NewOffset); // Function ShooterGame.ShooterAIController.SetAimOffset // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30833f0
	void ClearAimOffset(); // Function ShooterGame.ShooterAIController.ClearAimOffset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3074210
};

// Class ShooterGame.AresBotController
// Size: 0x538 (Inherited: 0x518)
struct AAresBotController : AShooterAIController {
	bool bAutoSetClass; // 0x518(0x01)
	bool bRandomizeShootingSkillMultiplier; // 0x519(0x01)
	char pad_51A[0x2]; // 0x51a(0x02)
	float MinShootingSkillMultiplier; // 0x51c(0x04)
	float MaxShootingSkillMultiplier; // 0x520(0x04)
	struct FName ShootingSkillMultiplierKeyName; // 0x524(0x0c)
	bool bCanPickupBombEquippable; // 0x530(0x01)
	char pad_531[0x7]; // 0x531(0x07)
};

// Class ShooterGame.AresCalloutRegion
// Size: 0x410 (Inherited: 0x3d0)
struct AAresCalloutRegion : AActor {
	struct FText RegionName; // 0x3d0(0x18)
	enum class ECalloutSuperRegion SuperRegion; // 0x3e8(0x01)
	char pad_3E9[0x3]; // 0x3e9(0x03)
	int32_t Priority; // 0x3ec(0x04)
	struct TArray<struct UAresCalloutSubregionComponent*> SubRegions; // 0x3f0(0x10)
	struct UTextRenderComponent* EditorNameText; // 0x400(0x08)
	char pad_408[0x8]; // 0x408(0x08)

	void OnCalloutRegionsFeatureToggled(enum class EGameFeatureToggleName Toggle, bool bEnabled); // Function ShooterGame.AresCalloutRegion.OnCalloutRegionsFeatureToggled // (Final|Native|Public) // @ game+0x2cdbee0
	bool ContainsActor(struct AActor* Actor); // Function ShooterGame.AresCalloutRegion.ContainsActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cdbca0
};

// Class ShooterGame.AresCalloutSubregionComponent
// Size: 0x600 (Inherited: 0x600)
struct UAresCalloutSubregionComponent : UStaticMeshComponent {

	struct AAresCalloutRegion* GetParentRegion(); // Function ShooterGame.AresCalloutSubregionComponent.GetParentRegion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cdbe90
};

// Class ShooterGame.CalloutRegionTrackingComponent
// Size: 0x110 (Inherited: 0xe8)
struct UCalloutRegionTrackingComponent : UActorComponent {
	struct FMulticastInlineDelegate OnCalloutRegionChanged; // 0xe8(0x10)
	struct TArray<struct AAresCalloutRegion*> OverlappingRegions; // 0xf8(0x10)
	struct AAresCalloutRegion* CurrentRegion; // 0x108(0x08)

	void OnRep_CurrentRegion(struct AAresCalloutRegion* Region); // Function ShooterGame.CalloutRegionTrackingComponent.OnRep_CurrentRegion // (Final|Native|Protected) // @ game+0x2cdbfb0
	struct FText GetCurrentCalloutRegionName(); // Function ShooterGame.CalloutRegionTrackingComponent.GetCurrentCalloutRegionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cdbe00
	struct AAresCalloutRegion* GetCurrentCalloutRegion(); // Function ShooterGame.CalloutRegionTrackingComponent.GetCurrentCalloutRegion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cdbdd0
	struct UCalloutRegionTrackingComponent* GetCalloutRegionTrackingComponent(struct AActor* Actor); // Function ShooterGame.CalloutRegionTrackingComponent.GetCalloutRegionTrackingComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cdbd40
};

// Class ShooterGame.AresCalloutVolume
// Size: 0x410 (Inherited: 0x3d0)
struct AAresCalloutVolume : AActor {
	struct UStaticMeshComponent* VolumeMesh; // 0x3d0(0x08)
	struct UBoxComponent* OverlapBox; // 0x3d8(0x08)
	struct FString CalloutRegion; // 0x3e0(0x10)
	struct FString CalloutSubRegion; // 0x3f0(0x10)
	char pad_400[0x10]; // 0x400(0x10)

	void Tick(float DeltaSeconds); // Function ShooterGame.AresCalloutVolume.Tick // (Native|Public) // @ game+0x2cee5e0
	struct FString GetSubRegion(); // Function ShooterGame.AresCalloutVolume.GetSubRegion // (Final|Native|Public|Const) // @ game+0x2ced290
	struct FString GetRegion(); // Function ShooterGame.AresCalloutVolume.GetRegion // (Final|Native|Public|Const) // @ game+0x2cecf80
	struct TArray<struct AAresCalloutVolume*> FindOverlappingVolumes(struct AActor* Actor, bool bStopSearchOnFirstHit); // Function ShooterGame.AresCalloutVolume.FindOverlappingVolumes // (Final|Native|Static|Public) // @ game+0x2cebb60
};

// Class ShooterGame.AresCeremony
// Size: 0x3d0 (Inherited: 0x3d0)
struct AAresCeremony : AInfo {

	bool ShouldDisplayCeremony(struct FAresCeremonyDecisionContext& DecisionContext); // Function ShooterGame.AresCeremony.ShouldDisplayCeremony // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2cee480
	void AuthCheatSetCeremonyDisplayed(bool bShouldDisplay); // Function ShooterGame.AresCeremony.AuthCheatSetCeremonyDisplayed // (Native|Event|Public|BlueprintEvent) // @ game+0x2ceb600
};

// Class ShooterGame.AresCeremonyComponent
// Size: 0x138 (Inherited: 0xe8)
struct UAresCeremonyComponent : UActorComponent {
	struct TArray<struct AAresCeremony*> RegisteredCeremonies; // 0xe8(0x10)
	struct TArray<struct AAresCeremony*> PrioritySortedCeremonies; // 0xf8(0x10)
	struct TArray<struct FAresCeremonyTriggerEvent> CeremonyTriggerEvents; // 0x108(0x10)
	char pad_118[0x20]; // 0x118(0x20)

	void ResetRoundTrackers(); // Function ShooterGame.AresCeremonyComponent.ResetRoundTrackers // (Final|Native|Private) // @ game+0x2cee270
	void RecordRespawn(struct APawn* RespawnedPawn); // Function ShooterGame.AresCeremonyComponent.RecordRespawn // (Final|Native|Public) // @ game+0x2cb4be0
	void RecordKill(struct AOwnerExclusivePlayerInfo* KillerPlayerInfo, struct AOwnerExclusivePlayerInfo* VictimPlayerInfo, struct APawn* KilledPawn, struct UDamageResponse* Response, struct TArray<struct FAresAssist>& AssistList, struct UDamageType* DamageType); // Function ShooterGame.AresCeremonyComponent.RecordKill // (Final|Native|Public|HasOutParms) // @ game+0x2cedfa0
	void OnRoundWin(struct UBaseTeamComponent* WinningTeam, enum class EAresRoundOutcome RoundResult); // Function ShooterGame.AresCeremonyComponent.OnRoundWin // (Final|Native|Public) // @ game+0x2cedde0
	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.AresCeremonyComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x2cedd50
	void OnPhaseTransition(enum class EAresGamePhase NewGamePhase); // Function ShooterGame.AresCeremonyComponent.OnPhaseTransition // (Final|Native|Public) // @ game+0x2cedcd0
	void GetCeremonyToDisplay(struct AShooterGameState* ShooterGameState); // Function ShooterGame.AresCeremonyComponent.GetCeremonyToDisplay // (Final|Native|Private) // @ game+0x2cec0a0
	struct TArray<struct FAresCeremonyTriggerEvent> GetAllCeremonyTriggerEventsForCurrentRound(); // Function ShooterGame.AresCeremonyComponent.GetAllCeremonyTriggerEventsForCurrentRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebeb0
	void AuthRegisterCeremonies(); // Function ShooterGame.AresCeremonyComponent.AuthRegisterCeremonies // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthClearCeremonyTriggerEvents(); // Function ShooterGame.AresCeremonyComponent.AuthClearCeremonyTriggerEvents // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthAddCeremonyTriggerEvent(struct FAresCeremonyTriggerEvent& CeremonyKillEvent); // Function ShooterGame.AresCeremonyComponent.AuthAddCeremonyTriggerEvent // (Final|Native|Public|HasOutParms) // @ game+0x2ceb560
};

// Class ShooterGame.CharacterAbilityUIData
// Size: 0xa8 (Inherited: 0x90)
struct UCharacterAbilityUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.CharacterRoleUIData
// Size: 0xa8 (Inherited: 0x90)
struct UCharacterRoleUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.CharacterRoleDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UCharacterRoleDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.CharacterUIData
// Size: 0x198 (Inherited: 0x90)
struct UCharacterUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
	struct UTexture* DisplayIconSmall; // 0xa8(0x08)
	struct UTexture* KillfeedPortrait; // 0xb0(0x08)
	struct UTexture* TopHUDPortrait; // 0xb8(0x08)
	struct FWidgetTransform PortraitRenderTransform; // 0xc0(0x1c)
	char pad_DC[0x4]; // 0xdc(0x04)
	struct TMap<enum class ECharacterAbilitySlot, struct UCharacterAbilityUIData*> Abilities; // 0xe0(0x50)
	struct TArray<struct FText> CharacterTags; // 0x130(0x10)
	struct FName WwiseStateName; // 0x140(0x0c)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct UAkAudioEvent* PickMeVOEvent; // 0x150(0x08)
	struct FLinearColor BackgroundGradientColor1; // 0x158(0x10)
	struct FLinearColor BackgroundGradientColor2; // 0x168(0x10)
	struct FLinearColor BackgroundGradientColor3; // 0x178(0x10)
	struct FLinearColor BackgroundGradientColor4; // 0x188(0x10)
};

// Class ShooterGame.CharacterDataAsset
// Size: 0x198 (Inherited: 0x50)
struct UCharacterDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Character; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
	struct TSoftClassPtr<UObject> Role; // 0xb0(0x30)
	struct TSoftObjectPtr<UTexture2D> FullPortrait; // 0xe0(0x30)
	struct TSoftObjectPtr<UTexture2D> CharacterBackground; // 0x110(0x30)
	bool FullPortraitRightFacing; // 0x140(0x01)
	char pad_141[0x7]; // 0x141(0x07)
	struct TSoftClassPtr<UObject> CharacterSelectFXC; // 0x148(0x30)
	struct FName DeveloperName; // 0x178(0x0c)
	struct FName ShippingName; // 0x184(0x0c)
	bool bIsPlayableCharacter; // 0x190(0x01)
	bool bAvailableForTest; // 0x191(0x01)
	char pad_192[0x6]; // 0x192(0x06)
};

// Class ShooterGame.AresTouchPad
// Size: 0x9f0 (Inherited: 0x960)
struct UAresTouchPad : UAresTouchWidget {
	struct FMulticastInlineDelegate OnPadPressed; // 0x960(0x10)
	struct FMulticastInlineDelegate OnPadReleased; // 0x970(0x10)
	struct FMulticastInlineDelegate OnPadMoved; // 0x980(0x10)
	struct FMulticastInlineDelegate OnPadIndexPressed; // 0x990(0x10)
	struct FMulticastInlineDelegate OnPadIndexReleased; // 0x9a0(0x10)
	struct FMulticastInlineDelegate OnPadIndexMoved; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnPadXLocationChanged; // 0x9c0(0x10)
	struct FMulticastInlineDelegate OnPadYLocationChanged; // 0x9d0(0x10)
	struct TWeakObjectPtr<struct UAresTouchTrackPadComponent> TouchPadComponent; // 0x9e0(0x08)
	int32_t MaxTouchesAllowed; // 0x9e8(0x04)
	char pad_9EC[0x4]; // 0x9ec(0x04)

	void SetAxisEnabledY(enum class ETouchIndex InTouchIndex, bool InEnabled); // Function ShooterGame.AresTouchPad.SetAxisEnabledY // (Final|Native|Public|BlueprintCallable) // @ game+0x2da3ed0
	void SetAxisEnabledX(enum class ETouchIndex InTouchIndex, bool InEnabled); // Function ShooterGame.AresTouchPad.SetAxisEnabledX // (Final|Native|Public|BlueprintCallable) // @ game+0x2da3e00
	void OnTouchPadYLocationChanged(float YDelta, float UnmodifiedYDelta); // Function ShooterGame.AresTouchPad.OnTouchPadYLocationChanged // (Native|Protected) // @ game+0x2da3850
	void OnTouchPadXLocationChanged(float XDelta, float UnmodifiedXDelta); // Function ShooterGame.AresTouchPad.OnTouchPadXLocationChanged // (Native|Protected) // @ game+0x2da3770
	void OnTouchPadReleased(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchPad.OnTouchPadReleased // (Native|Protected|HasDefaults) // @ game+0x2d9d4a0
	void OnTouchPadPressed(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchPad.OnTouchPadPressed // (Native|Protected|HasDefaults) // @ game+0x2d9cfc0
	void OnTouchPadMoved(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchPad.OnTouchPadMoved // (Native|Protected|HasDefaults) // @ game+0x2d9d3d0
};

// Class ShooterGame.AresCharacterAimingTouchPad
// Size: 0xa08 (Inherited: 0x9f0)
struct UAresCharacterAimingTouchPad : UAresTouchPad {
	char pad_9F0[0x8]; // 0x9f0(0x08)
	struct TArray<struct UAresHudElement*> DebugHudElementClasses; // 0x9f8(0x10)
};

// Class ShooterGame.AresCharacterHUDMobile
// Size: 0x370 (Inherited: 0x2c8)
struct UAresCharacterHUDMobile : UUserWidget {
	struct TMap<struct FName, struct UWidgetAnimation*> AnimationMap; // 0x2c8(0x50)
	struct TMap<struct FName, struct UWidget*> SlotNameToWidgetInstance; // 0x318(0x50)
	struct UAresTouchScreen* ParentTouchScreen; // 0x368(0x08)

	void PrePresetChange(); // Function ShooterGame.AresCharacterHUDMobile.PrePresetChange // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e6e7b0
	void PostPresetChange(); // Function ShooterGame.AresCharacterHUDMobile.PostPresetChange // (Final|Native|Protected|BlueprintCallable) // @ game+0x2cedf80
	void PlayAnimationByName(struct FName& AnimationName); // Function ShooterGame.AresCharacterHUDMobile.PlayAnimationByName // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cedee0
	void LoadWidgetLayoutFromSettings(); // Function ShooterGame.AresCharacterHUDMobile.LoadWidgetLayoutFromSettings // (Final|Native|Protected|BlueprintCallable) // @ game+0x2cedc90
	bool IsWidgetInCharacterHUD(struct UUserWidget* Widget); // Function ShooterGame.AresCharacterHUDMobile.IsWidgetInCharacterHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cedbf0
	struct UWidget* GetWidgetBySlotName(struct FName SlotName, struct UWidget* OptionalWidgetClass); // Function ShooterGame.AresCharacterHUDMobile.GetWidgetBySlotName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced6c0
	struct TArray<struct UDataTable*> GetDataTablesFromHUDDefinition(); // Function ShooterGame.AresCharacterHUDMobile.GetDataTablesFromHUDDefinition // (Native|Event|Protected|BlueprintEvent) // @ game+0x2cec400
	struct UAresCharacterHUDMobile* GetCharacterHUDMobile(struct UObject* WorldContextObject); // Function ShooterGame.AresCharacterHUDMobile.GetCharacterHUDMobile // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cec130
};

// Class ShooterGame.AresCheatAutoCompletePopulator
// Size: 0x50 (Inherited: 0x30)
struct UAresCheatAutoCompletePopulator : UObject {
	struct FSoftObjectPath DevOnlyGunNamesToEquippableDataAssetsDataTable; // 0x30(0x20)

	void GenerateAutoComplete(struct TArray<struct FAutoCompleteCommand>& AutoCompleteList, struct UContentIndex* ContentIndex, struct UConsole* ViewportConsole); // Function ShooterGame.AresCheatAutoCompletePopulator.GenerateAutoComplete // (Final|Native|Public|HasOutParms) // @ game+0x2cebc80
};

// Class ShooterGame.BasePlayerController
// Size: 0x738 (Inherited: 0x738)
struct ABasePlayerController : APlayerController {

	float GetTimeSinceLastInput(); // Function ShooterGame.BasePlayerController.GetTimeSinceLastInput // (Final|Native|Public|BlueprintCallable) // @ game+0x2ddf3f0
	void ApplySettingsCustomizations(); // Function ShooterGame.BasePlayerController.ApplySettingsCustomizations // (Final|Native|Public|BlueprintCallable) // @ game+0x2ddeb50
};

// Class ShooterGame.AresPlayerController
// Size: 0x988 (Inherited: 0x738)
struct AAresPlayerController : ABasePlayerController {
	char pad_738[0x10]; // 0x738(0x10)
	struct FMulticastInlineDelegate OnScreenTransitionUpdated; // 0x748(0x10)
	struct FMulticastInlineDelegate OnScoreboardVisibleUpdated; // 0x758(0x10)
	struct FMulticastInlineDelegate OnAresPlayerStateChanged; // 0x768(0x10)
	char pad_778[0x80]; // 0x778(0x80)
	struct FMulticastInlineDelegate OnPlayerViewTargetModeChanged; // 0x7f8(0x10)
	struct FMulticastInlineDelegate OnPlayerViewTargetChanged; // 0x808(0x10)
	enum class EAnalogPlayerState PreviousAnalogPlayerState; // 0x818(0x01)
	char LastKnownTargetID; // 0x819(0x01)
	char pad_81A[0x6]; // 0x81a(0x06)
	struct FMulticastInlineDelegate OnInputModeChanged; // 0x820(0x10)
	char pad_830[0x18]; // 0x830(0x18)
	struct UAresUIManager* UIManager; // 0x848(0x08)
	struct UAresUIDirector* UIDirector; // 0x850(0x08)
	bool bCreateUIInstancesFromGlobals; // 0x858(0x01)
	char pad_859[0x7]; // 0x859(0x07)
	struct UShooterUICoordinator* UICoordinator; // 0x860(0x08)
	struct UAresMinimapManager* MinimapManager; // 0x868(0x08)
	char pad_870[0x8]; // 0x870(0x08)
	struct AShooterCharacter* CachedShooterCharacter; // 0x878(0x08)
	struct AShooterCamera* CachedShooterCamera; // 0x880(0x08)
	struct UScreenTransitionComponent* ScreenTransitionComponent; // 0x888(0x08)
	struct UViewTargetComponent* ViewTargetComponent; // 0x890(0x08)
	struct UGamepadInputComponent* GamepadInputComponent; // 0x898(0x08)
	struct USpectateInOrderActionComponent* SpectateInOrderActionComponent; // 0x8a0(0x08)
	struct USpectateSpecificActionComponent* SpectateSpecificActionComponent; // 0x8a8(0x08)
	struct UShooterCharacterMinimapComponent* MapSpectateKeybindComponentClass; // 0x8b0(0x08)
	struct FRateLimiter SpectateRequestRateLimiter; // 0x8b8(0x30)
	char pad_8E8[0x28]; // 0x8e8(0x28)
	struct FString MatchID; // 0x910(0x10)
	char pad_920[0x8]; // 0x920(0x08)
	struct UPMAimToolingComponent* AimToolingComponent; // 0x928(0x08)
	struct UPMMovementToolingComponent* MovementToolingComponent; // 0x930(0x08)
	char pad_938[0x38]; // 0x938(0x38)
	struct URemoteClientMovementComponent* RemoteClientMovementComponent; // 0x970(0x08)
	char pad_978[0x10]; // 0x978(0x10)

	void UpdateMapSpectateKeybindVisibility(); // Function ShooterGame.AresPlayerController.UpdateMapSpectateKeybindVisibility // (Final|Native|Public) // @ game+0x2d58890
	void UnlockFOV(); // Function ShooterGame.AresPlayerController.UnlockFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x2d58870
	void TouchSnapReleaseHandler(struct FVector2D WidgetLocation); // Function ShooterGame.AresPlayerController.TouchSnapReleaseHandler // (Final|Native|Public|HasDefaults) // @ game+0x2d585c0
	void TouchSnapFireHandler(struct AShooterCharacter* InCharacter, struct AAresEquippable* Equippable, struct AProjectile* ProjectileClass, int32_t NumProjectiles); // Function ShooterGame.AresPlayerController.TouchSnapFireHandler // (Final|Native|Public|BlueprintCallable) // @ game+0x2d58460
	void StartScreenTransition(struct FName TransitionReason, float MaxDuration); // Function ShooterGame.AresPlayerController.StartScreenTransition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2d58370
	void SimulateInputKey(struct FKey Key, bool bPressed); // Function ShooterGame.AresPlayerController.SimulateInputKey // (Final|Native|Public|BlueprintCallable) // @ game+0x2d58210
	bool ShowCorpsesForPlayer(); // Function ShooterGame.AresPlayerController.ShowCorpsesForPlayer // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d581e0
	void ShowCheatMenuCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.AresPlayerController.ShowCheatMenuCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d580c0
	bool ShowBloodForPlayer(); // Function ShooterGame.AresPlayerController.ShowBloodForPlayer // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d58090
	void SetTickViewTargetModeEnabled(bool bEnabled); // Function ShooterGame.AresPlayerController.SetTickViewTargetModeEnabled // (Final|Native|Protected|BlueprintCallable) // @ game+0x2d58000
	void SetMapSpectateKeybindsVisible(bool IsVisible); // Function ShooterGame.AresPlayerController.SetMapSpectateKeybindsVisible // (BlueprintCosmetic|Native|Protected|BlueprintCallable) // @ game+0x2d57f60
	void SetMapOpen(bool bOpen); // Function ShooterGame.AresPlayerController.SetMapOpen // (Final|Native|Public|BlueprintCallable) // @ game+0x2d57ed0
	void SetInputSimulated(bool bUsingSimulatedInput); // Function ShooterGame.AresPlayerController.SetInputSimulated // (Final|Native|Public|BlueprintCallable) // @ game+0x2d57e40
	void SetFOV(float F); // Function ShooterGame.AresPlayerController.SetFOV // (Final|Native|Public|BlueprintCallable) // @ game+0x2d57dc0
	void SetAresInputMode(bool bIsUIOnly); // Function ShooterGame.AresPlayerController.SetAresInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2d57d30
	void ServerTryActivateModifier(struct UGameModifierComponent* Modifier, struct FString Argument); // Function ShooterGame.AresPlayerController.ServerTryActivateModifier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d57c30
	void ServerStopRecordingReplay(); // Function ShooterGame.AresPlayerController.ServerStopRecordingReplay // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d57c00
	void ServerStartRecordingReplay(struct FString RecordingName); // Function ShooterGame.AresPlayerController.ServerStartRecordingReplay // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d57b40
	void ServerSlackMessage(struct FString Channel, struct FString Text, struct FString Icon); // Function ShooterGame.AresPlayerController.ServerSlackMessage // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d579c0
	void ServerSetPlayerDisassociating(bool NewDisassociating); // Function ShooterGame.AresPlayerController.ServerSetPlayerDisassociating // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x2d57920
	void ServerSetBotShootingSkillMultiplier(float Multiplier); // Function ShooterGame.AresPlayerController.ServerSetBotShootingSkillMultiplier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d57890
	void ServerSay(struct FString Msg, int32_t ChatMode); // Function ShooterGame.AresPlayerController.ServerSay // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x2d576f0
	void ServerSaveRiotProfiling(); // Function ShooterGame.AresPlayerController.ServerSaveRiotProfiling // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2d576c0
	void ServerOnToggleDetailedProfiling(bool bEnabled); // Function ShooterGame.AresPlayerController.ServerOnToggleDetailedProfiling // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x2d57580
	void ServerNotifyOnClientToggleDetailedProfiling(bool bEnabled); // Function ShooterGame.AresPlayerController.ServerNotifyOnClientToggleDetailedProfiling // (Net|NetReliableNative|Event|Public|NetServer|NetValidate) // @ game+0x2d57440
	void ServerNotifyFinishedLoadingDropInPlayer(struct FUniqueNetIdRepl UniqueId); // Function ShooterGame.AresPlayerController.ServerNotifyFinishedLoadingDropInPlayer // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x2d57330
	void ServerConsoleCommand(struct FString Text); // Function ShooterGame.AresPlayerController.ServerConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d57270
	void ServerCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.AresPlayerController.ServerCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d57150
	void ServerBugItWorker(struct FVector TheLocation, struct FRotator TheRotation); // Function ShooterGame.AresPlayerController.ServerBugItWorker // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2d57060
	void ServerBroadcastConsoleCommand(struct FString Text); // Function ShooterGame.AresPlayerController.ServerBroadcastConsoleCommand // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d56fa0
	void ServerAddRiotProfileInstantMarker(); // Function ShooterGame.AresPlayerController.ServerAddRiotProfileInstantMarker // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2d56f70
	void ServerAcknowledgeSetControlRotation(); // Function ShooterGame.AresPlayerController.ServerAcknowledgeSetControlRotation // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2d56f40
	void ServerAcknowledgeLoadClass(struct FSoftObjectPath Class); // Function ShooterGame.AresPlayerController.ServerAcknowledgeLoadClass // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x2d56e60
	bool ScreenTransitionActive(); // Function ShooterGame.AresPlayerController.ScreenTransitionActive // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d56e30
	void RPC_SetServerTargetID(char NewTargetID); // Function ShooterGame.AresPlayerController.RPC_SetServerTargetID // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2d56d70
	void OnViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.AresPlayerController.OnViewTargetModeChanged // (Final|Native|Public|HasOutParms) // @ game+0x2d56cc0
	void OnViewTargetActorReplicated(struct FViewTargetInfo& Info); // Function ShooterGame.AresPlayerController.OnViewTargetActorReplicated // (Final|Native|Public|HasOutParms) // @ game+0x2d56c30
	void OnToggleInformationalHUD(); // Function ShooterGame.AresPlayerController.OnToggleInformationalHUD // (Final|Native|Public) // @ game+0x2d56c10
	void OnToggleDetailedProfiling(bool bEnabled, struct AActor* Initiator); // Function ShooterGame.AresPlayerController.OnToggleDetailedProfiling // (Final|Native|Public) // @ game+0x2d56b40
	void OnShowDeveloperMenu(); // Function ShooterGame.AresPlayerController.OnShowDeveloperMenu // (Final|Native|Public) // @ game+0x2d56b20
	void OnNoPreloadsInProgress(); // Function ShooterGame.AresPlayerController.OnNoPreloadsInProgress // (Final|Native|Private) // @ game+0x2d56b00
	void OnMinimapKeybindSettingsChange(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.AresPlayerController.OnMinimapKeybindSettingsChange // (Final|Native|Public) // @ game+0x2d569e0
	void OnMapToggle(bool bOpen); // Function ShooterGame.AresPlayerController.OnMapToggle // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnGoreSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresPlayerController.OnGoreSettingChanged // (Final|Native|Private) // @ game+0x2d56890
	void OnEventScreenTransitionUpdated(bool IsAnyTransitionActive); // Function ShooterGame.AresPlayerController.OnEventScreenTransitionUpdated // (Final|Native|Public) // @ game+0x2d56800
	float OnEventGamepadTurnAtRate(float Rate); // Function ShooterGame.AresPlayerController.OnEventGamepadTurnAtRate // (Final|Native|Public) // @ game+0x2d56760
	float OnEventGamepadMoveRight(float Rate); // Function ShooterGame.AresPlayerController.OnEventGamepadMoveRight // (Final|Native|Public) // @ game+0x2d566c0
	float OnEventGamepadMoveForward(float Rate); // Function ShooterGame.AresPlayerController.OnEventGamepadMoveForward // (Final|Native|Public) // @ game+0x2d56620
	float OnEventGamepadLookUpAtRate(float Rate); // Function ShooterGame.AresPlayerController.OnEventGamepadLookUpAtRate // (Final|Native|Public) // @ game+0x2d56580
	void OnBotDesiredCharactersReady(); // Function ShooterGame.AresPlayerController.OnBotDesiredCharactersReady // (Final|Native|Private) // @ game+0x2d56530
	bool K2_UseShortConnectTimeout(); // Function ShooterGame.AresPlayerController.K2_UseShortConnectTimeout // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d564e0
	bool IsViewingPlayerState(struct AShooterPlayerState* InPlayerState); // Function ShooterGame.AresPlayerController.IsViewingPlayerState // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d56440
	bool IsSpectatingShooterCharacter(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.AresPlayerController.IsSpectatingShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d563a0
	bool IsShowHUD(); // Function ShooterGame.AresPlayerController.IsShowHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d56370
	bool IsMapOpen(); // Function ShooterGame.AresPlayerController.IsMapOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d56310
	bool InSpectatorMode(); // Function ShooterGame.AresPlayerController.InSpectatorMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d56230
	void InsertLogMarker(); // Function ShooterGame.AresPlayerController.InsertLogMarker // (Final|Native|Public) // @ game+0x2d562f0
	void InsertClientHitchFromKeybind(); // Function ShooterGame.AresPlayerController.InsertClientHitchFromKeybind // (Final|Native|Protected) // @ game+0x1e6e7b0
	void InitMapSpectateKeybindComponentFor(struct AShooterCharacter* InCharacter); // Function ShooterGame.AresPlayerController.InitMapSpectateKeybindComponentFor // (Final|Native|Protected) // @ game+0x2d56260
	bool HasValidUIGlobals(); // Function ShooterGame.AresPlayerController.HasValidUIGlobals // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d56200
	void HandleThreadedChatManagerSentInGameMessage(struct FString NewMessage, enum class EChatMode ChatMode); // Function ShooterGame.AresPlayerController.HandleThreadedChatManagerSentInGameMessage // (Native|Protected) // @ game+0x2d56020
	void HandleDisassociateComplete(); // Function ShooterGame.AresPlayerController.HandleDisassociateComplete // (Final|Native|Private) // @ game+0x2d56000
	struct UAresUIManager* GetUIManager(); // Function ShooterGame.AresPlayerController.GetUIManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55fd0
	struct UAresUIDirector* GetUIDirector(); // Function ShooterGame.AresPlayerController.GetUIDirector // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55fa0
	struct AShooterCharacter* GetSpectatingShooterCharacter(); // Function ShooterGame.AresPlayerController.GetSpectatingShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55f70
	struct AShooterCharacter* GetSpectatedSpawnedCharacter(); // Function ShooterGame.AresPlayerController.GetSpectatedSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55f40
	float GetSmokeOverlay(); // Function ShooterGame.AresPlayerController.GetSmokeOverlay // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2d55f00
	struct FText GetShortcutActionDisplayNameToSpectate(struct AShooterCharacter* ViewedCharacter); // Function ShooterGame.AresPlayerController.GetShortcutActionDisplayNameToSpectate // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55e30
	struct AShooterCharacter* GetShooterCharacter(); // Function ShooterGame.AresPlayerController.GetShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55e00
	struct AShooterCamera* GetShooterCamera(); // Function ShooterGame.AresPlayerController.GetShooterCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55dd0
	struct FVector GetPlayerViewVector(); // Function ShooterGame.AresPlayerController.GetPlayerViewVector // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55d00
	enum class EAresPlayerViewTargetMode GetPlayerViewTargetMode(); // Function ShooterGame.AresPlayerController.GetPlayerViewTargetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55cd0
	struct FRotator GetPlayerViewRotation(); // Function ShooterGame.AresPlayerController.GetPlayerViewRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55c90
	void GetPlayerViewPoint(struct FVector& out_Location, struct FRotator& out_Rotation); // Function ShooterGame.AresPlayerController.GetPlayerViewPoint // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55ba0
	struct FVector GetPlayerViewLocation(); // Function ShooterGame.AresPlayerController.GetPlayerViewLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55b60
	struct APlayerCameraManager* GetPlayerCameraManager(); // Function ShooterGame.AresPlayerController.GetPlayerCameraManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ceca40
	struct UAresMinimapManager* GetMinimapManager(); // Function ShooterGame.AresPlayerController.GetMinimapManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d557c0
	struct TScriptInterface<IInputMethodInterface> GetInputMethodInterface(); // Function ShooterGame.AresPlayerController.GetInputMethodInterface // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55780
	struct AShooterCharacter* GetFirstPersonCharacter(); // Function ShooterGame.AresPlayerController.GetFirstPersonCharacter // (Final|Native|Public) // @ game+0x2d55750
	struct AAresPlayerStateBase* GetAresPlayerState(); // Function ShooterGame.AresPlayerController.GetAresPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d553f0
	void GamepadTurnAtRate(float Rate); // Function ShooterGame.AresPlayerController.GamepadTurnAtRate // (Final|Native|Public|BlueprintCallable) // @ game+0x2d54d90
	void GamepadMoveRight(float Rate); // Function ShooterGame.AresPlayerController.GamepadMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0x2d54d10
	void GamepadMoveForward(float Rate); // Function ShooterGame.AresPlayerController.GamepadMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0x2d54c90
	void GamepadLookUpAtRate(float Rate); // Function ShooterGame.AresPlayerController.GamepadLookUpAtRate // (Final|Native|Public|BlueprintCallable) // @ game+0x2d54c10
	void EnablePacketLossKeybindsFunc(struct UWorld* World); // Function ShooterGame.AresPlayerController.EnablePacketLossKeybindsFunc // (Final|Native|Static|Protected) // @ game+0x2d54b90
	void EnableClientHitchKeybindFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.AresPlayerController.EnableClientHitchKeybindFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DisconnectPlayerDueToSecurityViolation(); // Function ShooterGame.AresPlayerController.DisconnectPlayerDueToSecurityViolation // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d54a40
	void DisconnectFromServer(); // Function ShooterGame.AresPlayerController.DisconnectFromServer // (Final|Native|Public) // @ game+0x2d54a20
	void DisassociateAndDisconnectFromServer(); // Function ShooterGame.AresPlayerController.DisassociateAndDisconnectFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x2d54a00
	void ConsoleBroadcastCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.AresPlayerController.ConsoleBroadcastCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d548e0
	void CompleteScreenTransition(struct FName TransitionReason); // Function ShooterGame.AresPlayerController.CompleteScreenTransition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2d54840
	void ClientUpdateVisibility(struct UVisibilityComponent* VisibilityComponent, struct FVector Location, struct FVector_NetQuantizeNormal FacingVector, struct TArray<struct AShooterCharacter*> CharactersWithVision); // Function ShooterGame.AresPlayerController.ClientUpdateVisibility // (Net|Native|Event|Public|HasDefaults|NetClient) // @ game+0x2d546b0
	void ClientSyncLifeState(struct AShooterCharacter* CharacterToSync, struct TArray<struct FLifeChangeEvent> DamageSectionStates, bool bDamageableComponentAlive, struct FLifeChangeTimestamp LifeChangeTimestamp); // Function ShooterGame.AresPlayerController.ClientSyncLifeState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d54500
	void ClientStartOnlineGame(); // Function ShooterGame.AresPlayerController.ClientStartOnlineGame // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d544d0
	void ClientSendSystemMessage(struct APlayerState* SourcePlayerState, struct APlayerState* TargetPlayerState, struct FText S, bool bIsLocalMessage); // Function ShooterGame.AresPlayerController.ClientSendSystemMessage // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2d54350
	void ClientSaveRiotProfiling(); // Function ShooterGame.AresPlayerController.ClientSaveRiotProfiling // (Final|Native|Private|BlueprintCallable) // @ game+0x1e6e7b0
	void ClientReceiveRemoteCharacterUpdatesSingleArrayNoAutonomous(struct TArray<struct FRemoteCharacterUpdate> RemoteCharacterUpdates); // Function ShooterGame.AresPlayerController.ClientReceiveRemoteCharacterUpdatesSingleArrayNoAutonomous // (Net|Native|Event|Public|NetClient) // @ game+0x2d54270
	void ClientReceiveRemoteCharacterUpdatesSingleArray(struct TArray<struct FRemoteCharacterUpdate> RemoteCharacterUpdates, struct FComponentDataStream AutonomousComponentDataStream); // Function ShooterGame.AresPlayerController.ClientReceiveRemoteCharacterUpdatesSingleArray // (Net|Native|Event|Public|NetClient) // @ game+0x2d54130
	void ClientReceiveRemoteCharacterUpdates(struct TArray<struct FRemoteCharacterUpdate> AllyRemoteCharacterUpdates, struct TArray<struct FRemoteCharacterUpdate> EnemyAndNeutralRemoteCharacterUpdates, struct FComponentDataStream AutonomousComponentDataStream); // Function ShooterGame.AresPlayerController.ClientReceiveRemoteCharacterUpdates // (Net|Native|Event|Public|NetClient) // @ game+0x2d53f70
	void ClientOnWinningTeam(struct UBaseTeamComponent* WinningTeam); // Function ShooterGame.AresPlayerController.ClientOnWinningTeam // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d53eb0
	void ClientInternalUnreliableOnScreenDebugMessage(struct FName Identifier, float TimeToDisplay, struct TArray<struct FAresHUDDebugTextLine> Message, enum class EDebugMessagePosition Loc, enum class EDebugMessageOptionFlags Options); // Function ShooterGame.AresPlayerController.ClientInternalUnreliableOnScreenDebugMessage // (Final|Net|Native|Event|Private|NetClient|Const) // @ game+0x2d53cb0
	void ClientInternalOnScreenDebugMessage(struct FName Identifier, float TimeToDisplay, struct TArray<struct FAresHUDDebugTextLine> Message, enum class EDebugMessagePosition Loc, enum class EDebugMessageOptionFlags Options); // Function ShooterGame.AresPlayerController.ClientInternalOnScreenDebugMessage // (Final|Net|NetReliableNative|Event|Private|NetClient|Const) // @ game+0x2d53ab0
	void ClientGameStarted(); // Function ShooterGame.AresPlayerController.ClientGameStarted // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d53a80
	void ClientGamePhaseEnded(enum class EAresGamePhase OldPhase); // Function ShooterGame.AresPlayerController.ClientGamePhaseEnded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d539f0
	void ClientGamePhaseBegin(enum class EAresGamePhase NewPhase); // Function ShooterGame.AresPlayerController.ClientGamePhaseBegin // (Net|NetReliableNative|Event|Public|NetClient|NetValidate) // @ game+0x2d538b0
	void ClientForceSetControlRotation(struct FRotator NewRotation); // Function ShooterGame.AresPlayerController.ClientForceSetControlRotation // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient) // @ game+0x2d53820
	void ClientEndOnlineGame(); // Function ShooterGame.AresPlayerController.ClientEndOnlineGame // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d53730
	void ClientDrawDebugSpheres(struct TArray<struct FAresDebugSphereReplicated> DebugSpheres); // Function ShooterGame.AresPlayerController.ClientDrawDebugSpheres // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d53680
	void ClientDrawDebugLines(struct TArray<struct FAresDebugLineReplicated> DebugLines); // Function ShooterGame.AresPlayerController.ClientDrawDebugLines // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d535d0
	void ClientDebugDrawTextOnScreenAndLog(struct FString DrawText, struct FLinearColor DrawColor, float DurationOverride); // Function ShooterGame.AresPlayerController.ClientDebugDrawTextOnScreenAndLog // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|BlueprintCallable|Const) // @ game+0x2d53480
	void ClientDebugDrawTextOnScreen(struct FString DrawText, struct FLinearColor DrawColor, float DurationOverride); // Function ShooterGame.AresPlayerController.ClientDebugDrawTextOnScreen // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient|BlueprintCallable|Const) // @ game+0x2d53330
	void ClientConsolePrint(struct FString ConsoleText); // Function ShooterGame.AresPlayerController.ClientConsolePrint // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2d53270
	void ClientConsoleCommand(struct FString Text, struct APlayerState* RequestingPlayer); // Function ShooterGame.AresPlayerController.ClientConsoleCommand // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d53170
	void ClientBeginLoadingDropInPlayer(struct FUniqueNetIdRepl UniqueId, struct FDropInPlayerAssets DropInPlayerAssets); // Function ShooterGame.AresPlayerController.ClientBeginLoadingDropInPlayer // (Net|NetReliableNative|Event|Public|NetClient|Const) // @ game+0x2d52f90
	bool CanTriggerSpectateShortcuts(); // Function ShooterGame.AresPlayerController.CanTriggerSpectateShortcuts // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d52ea0
	void AuthOverrideControlRotation(struct FRotator NewRotation); // Function ShooterGame.AresPlayerController.AuthOverrideControlRotation // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d52e10
	void AuthFindValidSpectateTarget(); // Function ShooterGame.AresPlayerController.AuthFindValidSpectateTarget // (Final|Native|Public) // @ game+0x2d52df0
	void AresGetInputMouseDelta(float& DeltaX, float& DeltaY); // Function ShooterGame.AresPlayerController.AresGetInputMouseDelta // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d52d00
	void AddRiotProfileInstantMarker(); // Function ShooterGame.AresPlayerController.AddRiotProfileInstantMarker // (Final|Native|Private|BlueprintCallable) // @ game+0x2d52bf0
};

// Class ShooterGame.AresCheatManagerBase
// Size: 0x80 (Inherited: 0x80)
struct UAresCheatManagerBase : UCheatManager {

	void ToggleWatermark(); // Function ShooterGame.AresCheatManagerBase.ToggleWatermark // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	struct UUserWidget* CheatGetSecretWidgetClass(struct FString Name); // Function ShooterGame.AresCheatManagerBase.CheatGetSecretWidgetClass // (Final|Native|Private|BlueprintCallable) // @ game+0x2ceb6c0
};

// Class ShooterGame.AresCheatManager
// Size: 0xf8 (Inherited: 0x80)
struct UAresCheatManager : UAresCheatManagerBase {
	struct UMaterial* GreenScreenMaterial; // 0x80(0x08)
	struct FSoftObjectPath GreenScreenMaterialName; // 0x88(0x20)
	struct TMap<struct UStaticMeshComponent*, struct FStaticMeshMaterialList> StaticMeshToOriginalMaterialsMap; // 0xa8(0x50)

	void StopRecordingReplay(); // Function ShooterGame.AresCheatManager.StopRecordingReplay // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void StartRecordingReplay(struct FString RecordingName); // Function ShooterGame.AresCheatManager.StartRecordingReplay // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void ShowUI(int32_t Show); // Function ShooterGame.AresCheatManager.ShowUI // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetBotShootingSkillMultiplier(float Multiplier); // Function ShooterGame.AresCheatManager.SetBotShootingSkillMultiplier // (Final|Exec|Native|Public) // @ game+0x2cee3b0
	void OnFoWDebugCheatsChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.AresCheatManager.OnFoWDebugCheatsChanged // (Final|Native|Public) // @ game+0x2cdbee0
	void EnableGreenScreen(bool bEnableGreenScreen, int32_t Red, int32_t Green, int32_t Blue); // Function ShooterGame.AresCheatManager.EnableGreenScreen // (Final|Exec|Native|Public) // @ game+0x2ceba00
};

// Class ShooterGame.AresClientEvents
// Size: 0x68 (Inherited: 0x30)
struct UAresClientEvents : UObject {
	struct FMulticastInlineDelegate OnBugCommandDelegate; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPlatformUnhealthy; // 0x40(0x10)
	struct FMulticastInlineDelegate OnInitScreenComplete; // 0x50(0x10)
	char pad_60[0x8]; // 0x60(0x08)

	void MarkInitScreenComplete(); // Function ShooterGame.AresClientEvents.MarkInitScreenComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x2cedcb0
};

// Class ShooterGame.AresClientGameInstance
// Size: 0x6c0 (Inherited: 0x40)
struct UAresClientGameInstance : UAresBaseGameInstance {
	char pad_40[0x18]; // 0x40(0x18)
	struct FString ErrorMessage; // 0x58(0x10)
	struct FMulticastInlineDelegate ClientGameInstanceInitStatusChanged; // 0x68(0x10)
	enum class EAresClientGameInstanceInitStatus InitStatus; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct FMulticastInlineDelegate OnPatchContentUpToDate; // 0x80(0x10)
	struct ULatencyService* LatencyService; // 0x90(0x08)
	struct FMulticastInlineDelegate OnQuitGameInstance; // 0x98(0x10)
	struct FMulticastInlineDelegate OnRequestDestroyWindow; // 0xa8(0x10)
	bool bDidPlayIntroCinematic; // 0xb8(0x01)
	char pad_B9[0x7]; // 0xb9(0x07)
	struct UConfigManager* ConfigManager; // 0xc0(0x08)
	struct URSOManager* RSOManager; // 0xc8(0x08)
	struct UPlatformSessionManager* SessionManager; // 0xd0(0x08)
	struct URMSManager* RMSManager; // 0xd8(0x08)
	struct UPersonalizationManagerV2* PersonalizationManagerV2; // 0xe0(0x08)
	struct UPartyManager* PartyManager; // 0xe8(0x08)
	struct UPlayerReportManager* PlayerReportManager; // 0xf0(0x08)
	struct UGlobalAudioManager* GlobalAudioManager; // 0xf8(0x08)
	int32_t PlaytimeWidgetZOrder; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct UCrossWorldUserWidget* PlaytimeManagerWidget; // 0x108(0x08)
	struct TSoftClassPtr<UObject> GlobalAudioManagerAssetClass; // 0x110(0x30)
	struct TSoftClassPtr<UObject> PlaytimeManagerWidgetAssetClass; // 0x140(0x30)
	struct TSoftClassPtr<UObject> LeaveMatchConfirmationClass; // 0x170(0x30)
	struct UAresSettingsManager* AresSettingsManagerClass; // 0x1a0(0x08)
	struct UActionTraitsManager* ActionTraitsManagerClass; // 0x1a8(0x08)
	struct UUserWidget* LeaveMatchConfirmationWidget; // 0x1b0(0x08)
	struct UClientTelemetryPersistence* TelemetryPersistence; // 0x1b8(0x08)
	struct UPlatformInitializerV2* PlatformInitializer; // 0x1c0(0x08)
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x1c8(0x08)
	struct UAresWidgetRegistry* WidgetRegistry; // 0x1d0(0x08)
	struct UAresGameInstance* MyGameInstance; // 0x1d8(0x08)
	struct UContentIndexManager* ContentIndexManager; // 0x1e0(0x08)
	struct UInventoryInitManager* InventoryInitManager; // 0x1e8(0x08)
	struct UAntiAddictionManager* AntiAddictionManager; // 0x1f0(0x08)
	struct UAntiAddictionSessionManager* AntiAddictionSessionManager; // 0x1f8(0x08)
	struct URNetVoiceManager* VoiceManager; // 0x200(0x08)
	struct UChatFriendsMetadataManager* ChatFriendsMetadataManager; // 0x208(0x08)
	struct UPresenceManager* PresenceManager; // 0x210(0x08)
	struct UPresenceUpdater* PresenceUpdater; // 0x218(0x08)
	struct UTextChatManagerV2* TextChatManagerV2; // 0x220(0x08)
	struct UMutedPatternsManager* MutedPatternsManager; // 0x228(0x08)
	struct UThreadedChatManager* ThreadedChatManager; // 0x230(0x08)
	struct UFriendsManager* FriendsManager; // 0x238(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x240(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0x248(0x08)
	struct URiotProductManager* RiotProductManager; // 0x250(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0x258(0x08)
	struct URoamingSettingsManager* RoamingSettingsManager; // 0x260(0x08)
	struct UCustomGameManager* CustomGameManager; // 0x268(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x270(0x08)
	struct UVoiceRoomManager* VoiceRoomManager; // 0x278(0x08)
	struct UMatchDetailsManager* MatchDetailsManager; // 0x280(0x08)
	struct UMMRManager* MMRManager; // 0x288(0x08)
	struct UContentManager* ContentManager; // 0x290(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x298(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x2a0(0x08)
	struct UServiceTickerManager* ServiceTickerManager; // 0x2a8(0x08)
	struct UMatchHistoryManager* MatchHistoryManager; // 0x2b0(0x08)
	struct UMatchHistoryViewController* MatchHistoryViewController; // 0x2b8(0x08)
	struct UTravelManager* TravelManager; // 0x2c0(0x08)
	struct UPreloadManager* PreloadManager; // 0x2c8(0x08)
	struct UPlayerFeedbackToolPluginManager* PlayerFeedbackToolPluginManager; // 0x2d0(0x08)
	struct UPartyModel* PartyModel; // 0x2d8(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x2e0(0x08)
	struct UPartyViewController* PartyViewController; // 0x2e8(0x08)
	struct USocialViewControllerV3* SocialViewController; // 0x2f0(0x08)
	struct UPatchNotesManager* PatchNotesManager; // 0x2f8(0x08)
	struct UAresWatermarkManager* WatermarkManager; // 0x300(0x08)
	struct UInventoryManager* InventoryManager; // 0x308(0x08)
	struct UPlayerListingManager* PlayerListingManager; // 0x310(0x08)
	struct UWhisperChatManager* WhisperChatManager; // 0x318(0x08)
	struct UNotificationManager* NotificationManager; // 0x320(0x08)
	struct UDebugNotificationEmitter* DebugNotificationEmitter; // 0x328(0x08)
	struct UPartyNotificationManager* PartyNotificationManager; // 0x330(0x08)
	struct UFriendNotificationManager* FriendNotificationManager; // 0x338(0x08)
	struct UPlayerReportNotificationManager* PlayerReportNotificationManager; // 0x340(0x08)
	struct UVoiceModel* VoiceModel; // 0x348(0x08)
	struct UVoicePreferencesManager* VoicePreferencesManager; // 0x350(0x08)
	struct UVoiceViewController* VoiceViewController; // 0x358(0x08)
	struct UMatchmakingManager* MatchmakingManager; // 0x360(0x08)
	struct UPregameManager* PregameManager; // 0x368(0x08)
	struct UContractsManager* ContractsManager; // 0x370(0x08)
	struct UContractDefinitionsManager* ContractDefinitionsManager; // 0x378(0x08)
	struct UContractsViewController* ContractsViewController; // 0x380(0x08)
	struct UCrosshairManager* CrosshairManager; // 0x388(0x08)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x390(0x08)
	struct UVanguardManager* VanguardManager; // 0x398(0x08)
	struct UDropInLoadingManager* DropInLoadingManager; // 0x3a0(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0x3a8(0x08)
	struct UPurchaseManager* PurchaseManager; // 0x3b0(0x08)
	struct UStoreManager* StoreManager; // 0x3b8(0x08)
	struct UStoreUITelemetryManager* StoreUITelemetryManager; // 0x3c0(0x08)
	struct UStoreViewControllerV2* StoreViewController; // 0x3c8(0x08)
	struct UPlayerFeedbackToolViewController* PlayerFeedbackToolViewController; // 0x3d0(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x3d8(0x08)
	struct UCompetitiveTierUpdater* CompetitiveTierUpdater; // 0x3e0(0x08)
	struct UPlayerIdentityUpdater* PlayerIdentityUpdater; // 0x3e8(0x08)
	struct UProvisioningErrorNotificationManager* ProvisioningErrorNotificationManager; // 0x3f0(0x08)
	struct ULegalInfoManager* LegalInfoManager; // 0x3f8(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x400(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x408(0x08)
	struct UModalManager* ModalManager; // 0x410(0x08)
	struct UPlayerAliasManager* PlayerAliasManager; // 0x418(0x08)
	struct UPaymentsManager* PaymentsManager; // 0x420(0x08)
	struct UPingManager* PingManager; // 0x428(0x08)
	struct UOnlineIdentityManager* OnlineIdentityManager; // 0x430(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0x438(0x08)
	struct UUITelemetryManager* UITelemetryManager; // 0x440(0x08)
	struct UActionTraitsManager* ActionTraitsManager; // 0x448(0x08)
	struct UActionBindingsManager* ActionBindingsManager; // 0x450(0x08)
	struct UPlayerFacingPerfManager* PlayerFacingPerfManager; // 0x458(0x08)
	struct UApplicationRepairManager* ApplicationRepairManager; // 0x460(0x08)
	struct UArsenalViewController* ArsenalViewController; // 0x468(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x470(0x08)
	struct UPatchAvailabilityManager* PatchAvailabilityManager; // 0x478(0x08)
	struct UPatchManager* PatchManager; // 0x480(0x08)
	struct URiotClientConfigManager* RiotClientConfigManager; // 0x488(0x08)
	struct UNPELoader* NPELoader; // 0x490(0x08)
	struct UTransitionModelManager* TransitionModelManager; // 0x498(0x08)
	struct UTutorialManager* TutorialManager; // 0x4a0(0x08)
	struct ULoginQueueManager* LoginQueueManager; // 0x4a8(0x08)
	struct URiotClientHeartbeatManager* RiotClientHeartbeatManager; // 0x4b0(0x08)
	struct ULocalePreferenceManager* LocalePreferenceManager; // 0x4b8(0x08)
	struct UVNGManager* VNGManager; // 0x4c0(0x08)
	struct UMassRewardsManager* MassRewardsManager; // 0x4c8(0x08)
	struct URestrictionsManager* RestrictionsManager; // 0x4d0(0x08)
	struct UAccountXPManager* AccountXPManager; // 0x4d8(0x08)
	struct UReporterFeedbackManager* ReporterFeedbackManager; // 0x4e0(0x08)
	struct URiotWarningManager* RiotWarningManager; // 0x4e8(0x08)
	struct URosterManager* RosterManager; // 0x4f0(0x08)
	struct URosterViewController* RosterViewController; // 0x4f8(0x08)
	struct UTournamentsManager* TournamentsManager; // 0x500(0x08)
	struct UPremierManager* PremierManager; // 0x508(0x08)
	struct UPremierRosterViewController* PremierRosterViewController; // 0x510(0x08)
	struct UMainMenuTelemetryManager* MainMenuTelemetryManager; // 0x518(0x08)
	struct UHovercardCacheManager* HovercardCacheManager; // 0x520(0x08)
	struct UEULAManager* EULAManager; // 0x528(0x08)
	struct UAVSManager* AVSManager; // 0x530(0x08)
	struct UDailyTicketManager* DailyTicketManager; // 0x538(0x08)
	struct UJuiceScreenViewController* JuiceScreenViewController; // 0x540(0x08)
	struct UFavoritesManager* FavoritesManager; // 0x548(0x08)
	struct UContentFilterViewController* ContentFilterViewController; // 0x550(0x08)
	struct UContentFilterUITelemetryManager* ContentFilterUITelemetryManager; // 0x558(0x08)
	bool RiotLoggedIn; // 0x560(0x01)
	bool bPatchFiles; // 0x561(0x01)
	bool bNoRiotClient; // 0x562(0x01)
	bool bPendingLogoutOnExit; // 0x563(0x01)
	bool UserPatchConfirmed; // 0x564(0x01)
	char pad_565[0x3]; // 0x565(0x03)
	struct UUserInfoNotificationManager* UserInfoNotificationManager; // 0x568(0x08)
	char pad_570[0x8]; // 0x570(0x08)
	struct FGameClientInstanceInfo ClientInstanceInfo; // 0x578(0x148)

	bool UseLoginWithField(); // Function ShooterGame.AresClientGameInstance.UseLoginWithField // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cee740
	void UpdatePatchStatus(); // Function ShooterGame.AresClientGameInstance.UpdatePatchStatus // (Native|Protected) // @ game+0x1e6ead0
	void UpdateInitStatus(); // Function ShooterGame.AresClientGameInstance.UpdateInitStatus // (Final|Native|Private) // @ game+0x2cee720
	void TriggerVanguardBanNotification(struct FString Subject); // Function ShooterGame.AresClientGameInstance.TriggerVanguardBanNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee670
	void StartPatchDownload(); // Function ShooterGame.AresClientGameInstance.StartPatchDownload // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee5c0
	bool ShouldAllowLeaveMatch(); // Function ShooterGame.AresClientGameInstance.ShouldAllowLeaveMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cee450
	void SetupRequestDestroyWindowOverride(); // Function ShooterGame.AresClientGameInstance.SetupRequestDestroyWindowOverride // (Final|Native|Private) // @ game+0x2cee430
	bool RiotLogin(struct FString Username, struct FString Password); // Function ShooterGame.AresClientGameInstance.RiotLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee290
	bool RequestSystemRestart(struct FText& Reason); // Function ShooterGame.AresClientGameInstance.RequestSystemRestart // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cee1b0
	bool PatchFailed(); // Function ShooterGame.AresClientGameInstance.PatchFailed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cedeb0
	bool IsRiotSDKAvailable(); // Function ShooterGame.AresClientGameInstance.IsRiotSDKAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cedbc0
	bool IsPlatformFaulted(); // Function ShooterGame.AresClientGameInstance.IsPlatformFaulted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cedb90
	bool IsPatchUpToDate(); // Function ShooterGame.AresClientGameInstance.IsPatchUpToDate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cedb60
	bool IsLoggedIn(); // Function ShooterGame.AresClientGameInstance.IsLoggedIn // (Native|Public|BlueprintCallable) // @ game+0x2cedb20
	bool IsInProvisioningFlow(enum class EProvisioningFlowID ExpectedProvisioningFlow); // Function ShooterGame.AresClientGameInstance.IsInProvisioningFlow // (Final|Native|Public|Const) // @ game+0x2ceda60
	bool IsInPregame(); // Function ShooterGame.AresClientGameInstance.IsInPregame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ceda30
	bool IsInMatchmadeGame(); // Function ShooterGame.AresClientGameInstance.IsInMatchmadeGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ceda00
	bool IsInitialized(); // Function ShooterGame.AresClientGameInstance.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cedaf0
	bool IsInCustomGame(); // Function ShooterGame.AresClientGameInstance.IsInCustomGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9d0
	bool IsDirectConnectAllowed(); // Function ShooterGame.AresClientGameInstance.IsDirectConnectAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9a0
	void InitiateRiotLogin(enum class ERiotMobileLoginStrategy LoginStrategy); // Function ShooterGame.AresClientGameInstance.InitiateRiotLogin // (Native|Public|BlueprintCallable) // @ game+0x2ced910
	void HandleRNetHealthChange(); // Function ShooterGame.AresClientGameInstance.HandleRNetHealthChange // (Final|Native|Private) // @ game+0x2ced8f0
	void HandlePlatformInitStatusChanged(enum class EAresPlatformInitStatus Status); // Function ShooterGame.AresClientGameInstance.HandlePlatformInitStatusChanged // (Final|Native|Public) // @ game+0x2ced870
	void HandlePlatformFault(enum class EPlatformFaultReason& Reason); // Function ShooterGame.AresClientGameInstance.HandlePlatformFault // (Final|Native|Private|HasOutParms) // @ game+0x2ced7e0
	struct UAresWidgetRegistry* GetWidgetRegistry(); // Function ShooterGame.AresClientGameInstance.GetWidgetRegistry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced7c0
	struct UWhisperChatManager* GetWhisperChatManager(); // Function ShooterGame.AresClientGameInstance.GetWhisperChatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced690
	struct UAresWatermarkManager* GetWatermarkManager(); // Function ShooterGame.AresClientGameInstance.GetWatermarkManager // (Final|Native|Public|Const) // @ game+0x2ced660
	struct UVoiceViewController* GetVoiceViewController(); // Function ShooterGame.AresClientGameInstance.GetVoiceViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced630
	struct UVoiceRoomManager* GetVoiceRoomManager(); // Function ShooterGame.AresClientGameInstance.GetVoiceRoomManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced600
	struct UVoicePreferencesManager* GetVoicePreferencesManager(); // Function ShooterGame.AresClientGameInstance.GetVoicePreferencesManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced5d0
	struct UVoiceModel* GetVoiceModel(); // Function ShooterGame.AresClientGameInstance.GetVoiceModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced5a0
	struct URNetVoiceManager* GetVoiceManager(); // Function ShooterGame.AresClientGameInstance.GetVoiceManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced570
	struct UVNGManager* GetVNGManager(); // Function ShooterGame.AresClientGameInstance.GetVNGManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced450
	struct UVanguardManager* GetVanguardManager(); // Function ShooterGame.AresClientGameInstance.GetVanguardManager // (Final|Native|Public|Const) // @ game+0x2ced540
	struct FString GetVanguardIncompatibleSoftware(); // Function ShooterGame.AresClientGameInstance.GetVanguardIncompatibleSoftware // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced4b0
	int32_t GetVanguardErrorCode(); // Function ShooterGame.AresClientGameInstance.GetVanguardErrorCode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced480
	struct UUITelemetryManager* GetUITelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetUITelemetryManager // (Final|Native|Public|Const) // @ game+0x2ced420
	struct UTutorialManager* GetTutorialManager(); // Function ShooterGame.AresClientGameInstance.GetTutorialManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced3f0
	struct UTravelManager* GetTravelManager(); // Function ShooterGame.AresClientGameInstance.GetTravelManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced3c0
	struct UTransitionModelManager* GetTransitionModelManager(); // Function ShooterGame.AresClientGameInstance.GetTransitionModelManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced390
	struct UTournamentsManager* GetTournamentsManager(); // Function ShooterGame.AresClientGameInstance.GetTournamentsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced360
	float GetTimeSinceLastInput(); // Function ShooterGame.AresClientGameInstance.GetTimeSinceLastInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced330
	struct UThreadedChatManager* GetThreadedChatManager(); // Function ShooterGame.AresClientGameInstance.GetThreadedChatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced300
	struct UTextChatManagerV2* GetTextChatManager(); // Function ShooterGame.AresClientGameInstance.GetTextChatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced2d0
	struct UStoreViewControllerV2* GetStoreViewController(); // Function ShooterGame.AresClientGameInstance.GetStoreViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced260
	struct UStoreUITelemetryManager* GetStoreUITelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetStoreUITelemetryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced230
	struct UStoreManager* GetStoreManager(); // Function ShooterGame.AresClientGameInstance.GetStoreManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced200
	struct USocialViewControllerV3* GetSocialViewController(); // Function ShooterGame.AresClientGameInstance.GetSocialViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced1d0
	struct UPlatformSessionManager* GetSessionManager(); // Function ShooterGame.AresClientGameInstance.GetSessionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced1a0
	struct UServiceTickerManager* GetServiceTickerManager(); // Function ShooterGame.AresClientGameInstance.GetServiceTickerManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced170
	struct URosterViewController* GetRosterViewController(); // Function ShooterGame.AresClientGameInstance.GetRosterViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced140
	struct URosterManager* GetRosterManager(); // Function ShooterGame.AresClientGameInstance.GetRosterManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced110
	struct URoamingSettingsManager* GetRoamingSettingsManager(); // Function ShooterGame.AresClientGameInstance.GetRoamingSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced0e0
	struct URMSManager* GetRMSManager(); // Function ShooterGame.AresClientGameInstance.GetRMSManager // (Final|Native|Public|Const) // @ game+0x2cecf50
	struct URiotWarningManager* GetRiotWarningManager(); // Function ShooterGame.AresClientGameInstance.GetRiotWarningManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced0b0
	struct URiotClientHeartbeatManager* GetRiotClientHeartbeatManager(); // Function ShooterGame.AresClientGameInstance.GetRiotClientHeartbeatManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced080
	struct URiotClientConfigManager* GetRiotClientConfigManager(); // Function ShooterGame.AresClientGameInstance.GetRiotClientConfigManager // (Final|Native|Public|Const) // @ game+0x2ced050
	struct URewardGrantModelFactory* GetRewardGrantModelFactory(); // Function ShooterGame.AresClientGameInstance.GetRewardGrantModelFactory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced020
	struct URestrictionsManager* GetRestrictionsManager(); // Function ShooterGame.AresClientGameInstance.GetRestrictionsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecff0
	struct UReporterFeedbackManager* GetReporterFeedbackManager(); // Function ShooterGame.AresClientGameInstance.GetReporterFeedbackManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecfc0
	struct UPurchaseManager* GetPurchaseManager(); // Function ShooterGame.AresClientGameInstance.GetPurchaseManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecf20
	struct UProvisioningErrorNotificationManager* GetProvisioningErrorNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetProvisioningErrorNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecef0
	struct UPresenceManager* GetPresenceManager(); // Function ShooterGame.AresClientGameInstance.GetPresenceManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecec0
	struct UPremierRosterViewController* GetPremierRosterViewController(); // Function ShooterGame.AresClientGameInstance.GetPremierRosterViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cece90
	struct UPremierManager* GetPremierManager(); // Function ShooterGame.AresClientGameInstance.GetPremierManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cece60
	struct UPreloadManager* GetPreloadManager(); // Function ShooterGame.AresClientGameInstance.GetPreloadManager // (Final|Native|Public|Const) // @ game+0x2cece30
	struct UPregameManager* GetPregameManager(); // Function ShooterGame.AresClientGameInstance.GetPregameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cece00
	struct UPlayerSettingsTelemetry* GetPlayerSettingsTelemetry(); // Function ShooterGame.AresClientGameInstance.GetPlayerSettingsTelemetry // (Final|Native|Public|Const) // @ game+0x2cecdd0
	struct UPlayerReportNotificationManager* GetPlayerReportNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerReportNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecda0
	struct UPlayerReportManager* GetPlayerReportManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerReportManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecd70
	struct UPlayerFeedbackToolViewController* GetPlayerFeedbackToolViewController(); // Function ShooterGame.AresClientGameInstance.GetPlayerFeedbackToolViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecd40
	struct UPlayerFeedbackToolPluginManager* GetPlayerFeedbackToolPluginManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerFeedbackToolPluginManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecd10
	struct UPlayerFacingPerfManager* GetPlayerFacingPerfManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerFacingPerfManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecce0
	struct UPlayerAliasManager* GetPlayerAliasManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerAliasManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ceccb0
	struct UPlayerAffinityManager* GetPlayerAffinityManager(); // Function ShooterGame.AresClientGameInstance.GetPlayerAffinityManager // (Final|Native|Public|Const) // @ game+0x2cecc80
	struct FText GetPlatormFailureReason(); // Function ShooterGame.AresClientGameInstance.GetPlatormFailureReason // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cecc30
	enum class EPlatformFaultReason GetPlatormFailureCode(); // Function ShooterGame.AresClientGameInstance.GetPlatormFailureCode // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cecc00
	struct UPlatformPlayerManager* GetPlatformPlayerManager(); // Function ShooterGame.AresClientGameInstance.GetPlatformPlayerManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecbd0
	struct FText GetPlatformInitErrorReason(); // Function ShooterGame.AresClientGameInstance.GetPlatformInitErrorReason // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cecb80
	enum class EPlatformInitErrorReason GetPlatformInitErrorCode(); // Function ShooterGame.AresClientGameInstance.GetPlatformInitErrorCode // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cecb30
	struct UPingManager* GetPingManager(); // Function ShooterGame.AresClientGameInstance.GetPingManager // (Final|Native|Public|Const) // @ game+0x2cecb00
	struct UPaymentsManager* GetPaymentsManager(); // Function ShooterGame.AresClientGameInstance.GetPaymentsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecad0
	struct UPatchNotesManager* GetPatchNotesManager(); // Function ShooterGame.AresClientGameInstance.GetPatchNotesManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecaa0
	struct UPatchManager* GetPatchManager(); // Function ShooterGame.AresClientGameInstance.GetPatchManager // (Final|Native|Public|Const) // @ game+0x2ceca70
	struct UPatchAvailabilityManager* GetPatchAvailabilityManager(); // Function ShooterGame.AresClientGameInstance.GetPatchAvailabilityManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ceca40
	struct UPartyViewController* GetPartyViewController(); // Function ShooterGame.AresClientGameInstance.GetPartyViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ceca10
	struct UPartyNotificationManager* GetPartyNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetPartyNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec9e0
	struct UPartyManager* GetPartyManager(); // Function ShooterGame.AresClientGameInstance.GetPartyManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec9b0
	struct UOnlineIdentityManager* GetOnlineIdentityManager(); // Function ShooterGame.AresClientGameInstance.GetOnlineIdentityManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec980
	struct UNotificationManager* GetNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec950
	struct UMutedPatternsManager* GetMutedPatternsManager(); // Function ShooterGame.AresClientGameInstance.GetMutedPatternsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec920
	struct UModalManager* GetModalManager(); // Function ShooterGame.AresClientGameInstance.GetModalManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec8f0
	struct UMMRManager* GetMMRManager(); // Function ShooterGame.AresClientGameInstance.GetMMRManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec700
	struct UMenuStackManager* GetMenuStackManager(); // Function ShooterGame.AresClientGameInstance.GetMenuStackManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec8c0
	struct UMatchmakingManager* GetMatchmakingManager(); // Function ShooterGame.AresClientGameInstance.GetMatchmakingManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec890
	struct UMatchHistoryViewController* GetMatchHistoryViewController(); // Function ShooterGame.AresClientGameInstance.GetMatchHistoryViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec860
	struct UMatchHistoryManager* GetMatchHistoryManager(); // Function ShooterGame.AresClientGameInstance.GetMatchHistoryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec830
	struct UMatchDetailsManager* GetMatchDetailsManager(); // Function ShooterGame.AresClientGameInstance.GetMatchDetailsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec800
	struct UMassRewardsManager* GetMassRewardsManager(); // Function ShooterGame.AresClientGameInstance.GetMassRewardsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec7d0
	struct UMapLoadModel* GetMapLoadModel(); // Function ShooterGame.AresClientGameInstance.GetMapLoadModel // (Final|Native|Public|Const) // @ game+0x2cec7a0
	struct UMainMenuTelemetryManager* GetMainMenuTelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetMainMenuTelemetryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec770
	struct FName GetMainMenuLevel(); // Function ShooterGame.AresClientGameInstance.GetMainMenuLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec730
	struct ULoginQueueManager* GetLoginQueueManager(); // Function ShooterGame.AresClientGameInstance.GetLoginQueueManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec6d0
	struct ULocalePreferenceManager* GetLocalePreferenceManager(); // Function ShooterGame.AresClientGameInstance.GetLocalePreferenceManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec6a0
	struct ULegalInfoManager* GetLegalInfoManager(); // Function ShooterGame.AresClientGameInstance.GetLegalInfoManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec670
	struct UJuiceScreenViewController* GetJuiceScreenViewController(); // Function ShooterGame.AresClientGameInstance.GetJuiceScreenViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec640
	struct UInventoryManager* GetInventoryManager(); // Function ShooterGame.AresClientGameInstance.GetInventoryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec610
	struct UInventoryInitManager* GetInventoryInitManager(); // Function ShooterGame.AresClientGameInstance.GetInventoryInitManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec5e0
	struct UHovercardCacheManager* GetHovercardCacheManager(); // Function ShooterGame.AresClientGameInstance.GetHovercardCacheManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec5b0
	struct UGameFlowStateManager* GetGameFlowStateManager(); // Function ShooterGame.AresClientGameInstance.GetGameFlowStateManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec580
	struct UFriendsManager* GetFriendsManager(); // Function ShooterGame.AresClientGameInstance.GetFriendsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec550
	struct UFriendNotificationManager* GetFriendNotificationManager(); // Function ShooterGame.AresClientGameInstance.GetFriendNotificationManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x1e82b90
	struct UFavoritesManager* GetFavoritesManager(); // Function ShooterGame.AresClientGameInstance.GetFavoritesManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec520
	struct UDropInLoadingManager* GetDropInLoadingManager(); // Function ShooterGame.AresClientGameInstance.GetDropInLoadingManager // (Final|Native|Public|Const) // @ game+0x2cec4f0
	struct UDisplayNameManager* GetDisplayNameManager(); // Function ShooterGame.AresClientGameInstance.GetDisplayNameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec4c0
	struct UDebugNotificationEmitter* GetDebugNotificationEmitter(); // Function ShooterGame.AresClientGameInstance.GetDebugNotificationEmitter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec490
	struct UDailyTicketManager* GetDailyTicketManager(); // Function ShooterGame.AresClientGameInstance.GetDailyTicketManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec3d0
	struct UCustomGameManager* GetCustomGameManager(); // Function ShooterGame.AresClientGameInstance.GetCustomGameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec3a0
	struct UCrosshairManager* GetCrosshairManager(); // Function ShooterGame.AresClientGameInstance.GetCrosshairManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec370
	struct UCoreGameManager* GetCoreGameManager(); // Function ShooterGame.AresClientGameInstance.GetCoreGameManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec340
	struct UContractsViewController* GetContractsViewController(); // Function ShooterGame.AresClientGameInstance.GetContractsViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad2c0
	struct UContractsManager* GetContractsManager(); // Function ShooterGame.AresClientGameInstance.GetContractsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec310
	struct UContractDefinitionsManager* GetContractDefinitionsManager(); // Function ShooterGame.AresClientGameInstance.GetContractDefinitionsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec2e0
	struct UContentManager* GetContentManager(); // Function ShooterGame.AresClientGameInstance.GetContentManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec2b0
	struct UContentFilterViewController* GetContentFilterViewController(); // Function ShooterGame.AresClientGameInstance.GetContentFilterViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec280
	struct UContentFilterUITelemetryManager* GetContentFilterUITelemetryManager(); // Function ShooterGame.AresClientGameInstance.GetContentFilterUITelemetryManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec250
	struct UClientTelemetryPersistence* GetClientTelemetryPersistence(); // Function ShooterGame.AresClientGameInstance.GetClientTelemetryPersistence // (Final|Native|Public|Const) // @ game+0x2cec220
	struct UChatSessionManager* GetChatSessionManager(); // Function ShooterGame.AresClientGameInstance.GetChatSessionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec1f0
	struct UChatFriendsMetadataManager* GetChatFriendsMetadataManager(); // Function ShooterGame.AresClientGameInstance.GetChatFriendsMetadataManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec1c0
	struct UAVSManager* GetAVSManager(); // Function ShooterGame.AresClientGameInstance.GetAVSManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebdf0
	struct UArsenalViewController* GetArsenalViewController(); // Function ShooterGame.AresClientGameInstance.GetArsenalViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec070
	struct UAresSettingsManager* GetAresSettingsManager(); // Function ShooterGame.AresClientGameInstance.GetAresSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec040
	struct UAresClientGameInstance* GetAresClientGameInstance(struct UObject* WorldContextObject); // Function ShooterGame.AresClientGameInstance.GetAresClientGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cebfb0
	struct UAresClientEvents* GetAresClientEvents(); // Function ShooterGame.AresClientGameInstance.GetAresClientEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebf80
	struct UApplicationRepairManager* GetApplicationRepairManager(); // Function ShooterGame.AresClientGameInstance.GetApplicationRepairManager // (Final|Native|Public|Const) // @ game+0x2cebf50
	struct UAntiAddictionSessionManager* GetAntiAddictionSessionManager(); // Function ShooterGame.AresClientGameInstance.GetAntiAddictionSessionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebf20
	struct UAntiAddictionManager* GetAntiAddictionManager(); // Function ShooterGame.AresClientGameInstance.GetAntiAddictionManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebef0
	struct UActionTraitsManager* GetActionTraitsManager(); // Function ShooterGame.AresClientGameInstance.GetActionTraitsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebe80
	struct UActionBindingsManager* GetActionBindingsManager(); // Function ShooterGame.AresClientGameInstance.GetActionBindingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebe50
	struct UAccountXPManager* GetAccountXPManager(); // Function ShooterGame.AresClientGameInstance.GetAccountXPManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebe20
	void DisconnectFromServer(); // Function ShooterGame.AresClientGameInstance.DisconnectFromServer // (Final|Native|Public|BlueprintCallable) // @ game+0x2ceb9e0
	void ConnectToServer(struct FConnectToServerDetails Details); // Function ShooterGame.AresClientGameInstance.ConnectToServer // (Final|Native|Public|BlueprintCallable) // @ game+0x2ceb870
	void ConfirmCloseGame(); // Function ShooterGame.AresClientGameInstance.ConfirmCloseGame // (Final|Native|Public|BlueprintCallable) // @ game+0x2ceb850
	void CloseGame(bool bForceImmediate, bool bLogoutOnExit); // Function ShooterGame.AresClientGameInstance.CloseGame // (Final|Native|Public|BlueprintCallable) // @ game+0x2ceb780
	void BringToFront(); // Function ShooterGame.AresClientGameInstance.BringToFront // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2ceb6a0
};

// Class ShooterGame.AresClientGameInstance_NativePlatform
// Size: 0x728 (Inherited: 0x6c0)
struct UAresClientGameInstance_NativePlatform : UAresClientGameInstance {
	struct UAresGameInstance* GameInstance; // 0x6c0(0x08)
	struct UNativePlatformFriendsManager* NativePlatformFriendsManager; // 0x6c8(0x08)
	char pad_6D0[0x58]; // 0x6d0(0x58)

	struct UNativePlatformFriendsManager* GetNativePlatformFriendsManager(); // Function ShooterGame.AresClientGameInstance_NativePlatform.GetNativePlatformFriendsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf5ff0
	struct UAresClientGameInstance_NativePlatform* GetAresClientGameInstance_NativePlatform(struct UObject* WorldContextObject); // Function ShooterGame.AresClientGameInstance_NativePlatform.GetAresClientGameInstance_NativePlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cf5de0
};

// Class ShooterGame.AresClientGameInstance_Touch
// Size: 0x740 (Inherited: 0x6c0)
struct UAresClientGameInstance_Touch : UAresClientGameInstance {
	struct FString TouchAimToolsTuningComponentClass; // 0x6c0(0x10)
	struct FMulticastInlineDelegate OnConnectionInfoUpdatedDelegate; // 0x6d0(0x10)
	struct FMulticastInlineDelegate OnThermalStateChangedDelegate; // 0x6e0(0x10)
	char pad_6F0[0x8]; // 0x6f0(0x08)
	struct UWidgetLayoutManager* WidgetLayoutManager; // 0x6f8(0x08)
	struct UAresTouchManager* AresTouchManager; // 0x700(0x08)
	struct UPushNotificationsManager* PushNotificationsManager; // 0x708(0x08)
	struct UMobileOverlayViewController* MobileOverlayViewController; // 0x710(0x08)
	struct UTextChatPanelViewController* TextChatPanelViewController; // 0x718(0x08)
	struct TArray<struct UObject*> PersistentBlueprintObjects; // 0x720(0x10)
	char pad_730[0x10]; // 0x730(0x10)

	void TryAutoLogin(); // Function ShooterGame.AresClientGameInstance_Touch.TryAutoLogin // (Final|Native|Public|BlueprintCallable) // @ game+0x2cf65e0
	void SetActiveUserPersistentSessionFound(bool LoggedIn); // Function ShooterGame.AresClientGameInstance_Touch.SetActiveUserPersistentSessionFound // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2cf64a0
	void SaveSelectedLocale(struct FString SelectedLocale); // Function ShooterGame.AresClientGameInstance_Touch.SaveSelectedLocale // (Final|Native|Public|BlueprintCallable) // @ game+0x2cf63a0
	void RegisterPersistentBlueprintObject(struct UObject* InObject); // Function ShooterGame.AresClientGameInstance_Touch.RegisterPersistentBlueprintObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2cf6310
	bool IsActiveUserPersistentSessionFound(); // Function ShooterGame.AresClientGameInstance_Touch.IsActiveUserPersistentSessionFound // (Final|Native|Public|BlueprintCallable) // @ game+0x2cf61d0
	struct UWidgetLayoutManager* GetWidgetLayoutManager(); // Function ShooterGame.AresClientGameInstance_Touch.GetWidgetLayoutManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf6110
	struct UTextChatPanelViewController* GetTextChatPanelViewController(); // Function ShooterGame.AresClientGameInstance_Touch.GetTextChatPanelViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf60e0
	struct FString GetSavedLocale(); // Function ShooterGame.AresClientGameInstance_Touch.GetSavedLocale // (Final|Native|Public|BlueprintCallable) // @ game+0x2cf6050
	struct UPushNotificationsManager* GetPushNotificationsManager(); // Function ShooterGame.AresClientGameInstance_Touch.GetPushNotificationsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf6020
	struct UMobileOverlayViewController* GetMobileOverlayViewController(); // Function ShooterGame.AresClientGameInstance_Touch.GetMobileOverlayViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf5fc0
	int32_t GetCurrentDeviceThermalState(); // Function ShooterGame.AresClientGameInstance_Touch.GetCurrentDeviceThermalState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cf5f30
	struct UAresTouchManager* GetAresTouchManager(); // Function ShooterGame.AresClientGameInstance_Touch.GetAresTouchManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf5f00
	struct UAresClientGameInstance_Touch* GetAresClientGameInstance_Touch(struct UObject* WorldContextObject); // Function ShooterGame.AresClientGameInstance_Touch.GetAresClientGameInstance_Touch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cf5e70
	struct TArray<struct FString> GetAllLocalesForMobile(); // Function ShooterGame.AresClientGameInstance_Touch.GetAllLocalesForMobile // (Final|Native|Public|BlueprintCallable) // @ game+0x2cf5d50
	struct UObject* FindPersistentBlueprintObjectByClass(struct UObject* ObjectClass); // Function ShooterGame.AresClientGameInstance_Touch.FindPersistentBlueprintObjectByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf5cb0
};

// Class ShooterGame.AresComboBox
// Size: 0xf20 (Inherited: 0xf08)
struct UAresComboBox : UComboBoxString {
	struct FDelegate OnGenerateButtonContentWidgetEvent; // 0xf08(0x14)
	char pad_F1C[0x4]; // 0xf1c(0x04)

	void SetComboButtonWidget(struct UWidget* Widget); // Function ShooterGame.AresComboBox.SetComboButtonWidget // (Native|Public|BlueprintCallable) // @ game+0x2cf6530
};

// Class ShooterGame.AresContextMenuActionBaseWidget
// Size: 0x2f0 (Inherited: 0x2c8)
struct UAresContextMenuActionBaseWidget : UUserWidget {
	char pad_2C8[0x18]; // 0x2c8(0x18)
	struct FMulticastInlineDelegate OnActionTriggered; // 0x2e0(0x10)

	void TriggerAction(); // Function ShooterGame.AresContextMenuActionBaseWidget.TriggerAction // (Final|Native|Public|BlueprintCallable) // @ game+0x2cf65c0
	void OnInit(struct FText& Text, struct UTexture2D* IconTexture, bool Enabled); // Function ShooterGame.AresContextMenuActionBaseWidget.OnInit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AresContextMenuBaseWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAresContextMenuBaseWidget : UUserWidget {
	struct UAresContextMenuActionBaseWidget* ActionWidgetClass; // 0x2c8(0x08)
	struct FMulticastInlineDelegate OnAnyActionTriggered; // 0x2d0(0x10)

	void OnActionTriggered(struct UAresContextMenuActionBaseWidget* ActionWidget); // Function ShooterGame.AresContextMenuBaseWidget.OnActionTriggered // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnActionAdded(struct UAresContextMenuActionBaseWidget* ActionWidget); // Function ShooterGame.AresContextMenuBaseWidget.OnActionAdded // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void HandleActionTriggered(struct UAresContextMenuActionBaseWidget* ActionWidget); // Function ShooterGame.AresContextMenuBaseWidget.HandleActionTriggered // (Final|Native|Protected) // @ game+0x2cf6140
	struct UAresContextMenuActionBaseWidget* AddAction(struct FDelegate& Callback, struct FText Text, struct UTexture2D* IconTexture, bool Enabled); // Function ShooterGame.AresContextMenuBaseWidget.AddAction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cf5a10
};

// Class ShooterGame.AresMenuAnchor
// Size: 0x1d8 (Inherited: 0x1b8)
struct UAresMenuAnchor : UMenuAnchor {
	struct FVector2D MenuPosition; // 0x1b8(0x08)
	struct FMargin ActionPadding; // 0x1c0(0x10)
	bool AnchorOnMouse; // 0x1d0(0x01)
	char pad_1D1[0x7]; // 0x1d1(0x07)
};

// Class ShooterGame.EffectContainer
// Size: 0x530 (Inherited: 0x3d0)
struct AEffectContainer : AActor {
	char pad_3D0[0x10]; // 0x3d0(0x10)
	struct UFXCTypePool* Pool; // 0x3e0(0x08)
	struct FEffectID EffectID; // 0x3e8(0x20)
	struct FEffectData EffectData; // 0x408(0x58)
	struct FMulticastInlineDelegate OnStartEffect; // 0x460(0x10)
	struct FMulticastInlineDelegate OnUpdateEffectPerspective; // 0x470(0x10)
	struct FMulticastInlineDelegate OnEffectDataUpdated; // 0x480(0x10)
	struct FMulticastInlineDelegate OnStopEffect; // 0x490(0x10)
	struct FMulticastInlineDelegate OnResetEffect; // 0x4a0(0x10)
	enum class EEffectAttachType AttachType; // 0x4b0(0x01)
	bool bObeyOwnerHidden; // 0x4b1(0x01)
	enum class EMovementSyncType MovementSyncType; // 0x4b2(0x01)
	bool bPureEffect; // 0x4b3(0x01)
	enum class ESpawnEffectType SpawnType; // 0x4b4(0x01)
	bool bCosmeticEffect; // 0x4b5(0x01)
	bool bForceOneShotEffect; // 0x4b6(0x01)
	char pad_4B7[0x1]; // 0x4b7(0x01)
	float ReplayEffectOffsetTime; // 0x4b8(0x04)
	char pad_4BC[0x1]; // 0x4bc(0x01)
	bool bCurrentPerspectiveIsFirstPerson; // 0x4bd(0x01)
	char pad_4BE[0x2]; // 0x4be(0x02)
	float EffectTailTime; // 0x4c0(0x04)
	char pad_4C4[0x54]; // 0x4c4(0x54)
	struct AEffectContainer* PureEffectInstance; // 0x518(0x08)
	struct UEffectManagerComponent* OwningManager; // 0x520(0x08)
	struct AActor* OriginalTarget; // 0x528(0x08)

	void UpdateEffectPerspective(float CurrentTime, bool FirstPerson); // Function ShooterGame.EffectContainer.UpdateEffectPerspective // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void StopEffect(enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectContainer.StopEffect // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void StartPlacedEffectContainer(); // Function ShooterGame.EffectContainer.StartPlacedEffectContainer // (Final|Native|Private) // @ game+0x2e7fa80
	void StartEffect(struct AActor* Target, struct UObject* Context, float StartTime, bool FirstPerson); // Function ShooterGame.EffectContainer.StartEffect // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ResetEffect(); // Function ShooterGame.EffectContainer.ResetEffect // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void PerspectiveChanged(struct AShooterCharacter* Character); // Function ShooterGame.EffectContainer.PerspectiveChanged // (Final|Native|Private) // @ game+0x2e7f110
	void OwnerHiddenChanged(struct AActor* Actor); // Function ShooterGame.EffectContainer.OwnerHiddenChanged // (Final|Native|Private) // @ game+0x2e7f080
	void OnMontageStartedByCosmeticFXC(struct UAnimMontage* Montage); // Function ShooterGame.EffectContainer.OnMontageStartedByCosmeticFXC // (Final|Native|Private) // @ game+0x2cb4be0
	void K2_OnAssetsLoaded(int32_t AssetTypes); // Function ShooterGame.EffectContainer.K2_OnAssetsLoaded // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void K2_GetPreloadAssetPaths(int32_t AssetTypes, struct TArray<struct FSoftObjectPath>& AssetPathsToPreload); // Function ShooterGame.EffectContainer.K2_GetPreloadAssetPaths // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e7e100
	bool HasStopped(); // Function ShooterGame.EffectContainer.HasStopped // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e7e0d0
	void GetPreloadAssetPathsOnContainer(int32_t AssetTypes, struct TArray<struct FSoftObjectPath>& AssetPathsToPreload); // Function ShooterGame.EffectContainer.GetPreloadAssetPathsOnContainer // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	float GetElapsedEffectTime(); // Function ShooterGame.EffectContainer.GetElapsedEffectTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e7e000
	void EquippablePerspectiveChanged(struct AAresEquippable* Equippable, bool bFirstPersonVisible, bool bThirdPersonVisible); // Function ShooterGame.EffectContainer.EquippablePerspectiveChanged // (Final|Native|Private) // @ game+0x2e7deb0
	void EffectDataUpdated(); // Function ShooterGame.EffectContainer.EffectDataUpdated // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	struct UAresAudioComponent* CreateReusableAudioComponent(); // Function ShooterGame.EffectContainer.CreateReusableAudioComponent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2e7de80
	void AddTailTime(float TailTime); // Function ShooterGame.EffectContainer.AddTailTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2e7dcd0
	void AbortEffect(); // Function ShooterGame.EffectContainer.AbortEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2e7dcb0
};

// Class ShooterGame.AresTracerInterface
// Size: 0x620 (Inherited: 0x530)
struct AAresTracerInterface : AEffectContainer {
	struct FVector AdjustedStartLocation; // 0x530(0x0c)
	struct FVector BeamDirectionNormalized; // 0x53c(0x0c)
	struct FName TracerBeamIntensityParameterName; // 0x548(0x0c)
	char pad_554[0x4]; // 0x554(0x04)
	struct UParticleSystemComponent* BeamComponent; // 0x558(0x08)
	struct TArray<int32_t> BeamEmitterIndices; // 0x560(0x10)
	float InitialSpeed; // 0x570(0x04)
	float ImpactDistance; // 0x574(0x04)
	float AdjustForwardDistance; // 0x578(0x04)
	float PostImpactLife; // 0x57c(0x04)
	bool bPlayImpactForHitCharacters; // 0x580(0x01)
	bool bCollapsed; // 0x581(0x01)
	bool bAutoDisableCollisionOnImpact; // 0x582(0x01)
	char pad_583[0x1]; // 0x583(0x01)
	struct FHitResult EndHitResult; // 0x584(0x94)
	char pad_618[0x8]; // 0x618(0x08)

	void TracerStartEffect(struct AActor* Target, struct UObject* Context, float StartTime, bool FirstPerson); // Function ShooterGame.AresTracerInterface.TracerStartEffect // (Native|Public) // @ game+0x2dbc5f0
	void TracerResetEffect(); // Function ShooterGame.AresTracerInterface.TracerResetEffect // (Native|Protected) // @ game+0x2dbc5c0
	void Tick(float DeltaSeconds); // Function ShooterGame.AresTracerInterface.Tick // (Native|Protected) // @ game+0x2cee5e0
	void OnStartTracer(); // Function ShooterGame.AresTracerInterface.OnStartTracer // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void NotifyImpact(struct FHitResult& HitResult); // Function ShooterGame.AresTracerInterface.NotifyImpact // (BlueprintCosmetic|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	float GetTracerTraveledDistance(); // Function ShooterGame.AresTracerInterface.GetTracerTraveledDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db9300
	float GetTracerIntensityFalloff(); // Function ShooterGame.AresTracerInterface.GetTracerIntensityFalloff // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db92d0
	float GetTracerAliveTime(); // Function ShooterGame.AresTracerInterface.GetTracerAliveTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db92a0
};

// Class ShooterGame.AresContrailTracer
// Size: 0x620 (Inherited: 0x620)
struct AAresContrailTracer : AAresTracerInterface {
	float LastTickTime; // 0x618(0x04)
};

// Class ShooterGame.AresPlatformDataAsset
// Size: 0x40 (Inherited: 0x38)
struct UAresPlatformDataAsset : UPrimaryDataAsset {
	uint32_t Platforms; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class ShooterGame.CoreGlobalsDataAsset
// Size: 0x58 (Inherited: 0x40)
struct UCoreGlobalsDataAsset : UAresPlatformDataAsset {
	struct UAresClientGameInstance* GameInstanceClass; // 0x40(0x08)
	struct UCurveFloat* ClientFramerateInstabilityThresholdCurve; // 0x48(0x08)
	struct UCurveFloat* ClientFramerateInstabilityCriticalThresholdCurve; // 0x50(0x08)
};

// Class ShooterGame.AresCustomizationPackInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresCustomizationPackInterface : UInterface {
};

// Class ShooterGame.DebugInformation
// Size: 0x30 (Inherited: 0x30)
struct UDebugInformation : UInterface {
};

// Class ShooterGame.AresDelegates
// Size: 0x30 (Inherited: 0x30)
struct UAresDelegates : UObject {
};

// Class ShooterGame.AresDetachedTracer
// Size: 0x630 (Inherited: 0x620)
struct AAresDetachedTracer : AAresTracerInterface {
	float BeamLength; // 0x618(0x04)
	float LastTickTime; // 0x61c(0x04)
	bool bImpacted; // 0x620(0x01)
	float EndDistance; // 0x624(0x04)
	char pad_62D[0x3]; // 0x62d(0x03)
};

// Class ShooterGame.AresUIScreen
// Size: 0x78 (Inherited: 0x30)
struct UAresUIScreen : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	enum class EUIChannel Channel; // 0x48(0x01)
	bool bWidgetsCreated; // 0x49(0x01)
	char pad_4A[0x2]; // 0x4a(0x02)
	int32_t ViewportZOrder; // 0x4c(0x04)
	char pad_50[0x20]; // 0x50(0x20)
	bool bCreateWidgetDefaultOverlayContainer; // 0x70(0x01)
	enum class EAresScreenVibility Visibility; // 0x71(0x01)
	char pad_72[0x6]; // 0x72(0x06)

	void TickActive(); // Function ShooterGame.AresUIScreen.TickActive // (Native|Public) // @ game+0x2dc4190
	void TakeFocus(); // Function ShooterGame.AresUIScreen.TakeFocus // (Native|Public) // @ game+0x2dc4160
	void SetVisiblity(enum class EAresScreenVibility NewVisiblity); // Function ShooterGame.AresUIScreen.SetVisiblity // (Final|Native|Public) // @ game+0x2dc40e0
	void RemoveFromChannel(); // Function ShooterGame.AresUIScreen.RemoveFromChannel // (Final|Native|Public) // @ game+0x2dc3d70
	void OnVisibilityUpdate(enum class EAresScreenVibility OldVisiblity, enum class EAresScreenVibility NewVisiblity); // Function ShooterGame.AresUIScreen.OnVisibilityUpdate // (Native|Public) // @ game+0x2dc3c00
	bool IsVisible(); // Function ShooterGame.AresUIScreen.IsVisible // (Final|Native|Public|Const) // @ game+0x2dc3910
	struct UAresUIManager* GetUIManager(); // Function ShooterGame.AresUIScreen.GetUIManager // (Final|Native|Public|Const) // @ game+0x2dc3870
	bool GetShowMouseCursor(); // Function ShooterGame.AresUIScreen.GetShowMouseCursor // (Native|Public|Const) // @ game+0x2dc3830
	bool GetGiveGameFocus(); // Function ShooterGame.AresUIScreen.GetGiveGameFocus // (Native|Public|Const) // @ game+0x2dc37f0
	struct UGameViewportClient* GetGameViewport(); // Function ShooterGame.AresUIScreen.GetGameViewport // (Final|Native|Public|Const) // @ game+0x2dc37c0
	enum class EUIChannel GetChannel(); // Function ShooterGame.AresUIScreen.GetChannel // (Final|Native|Public|Const) // @ game+0x2dc34c0
	struct AAresPlayerController* GetAresController(); // Function ShooterGame.AresUIScreen.GetAresController // (Final|Native|Public|Const) // @ game+0x2dc3490
	void DestroyWidgets(); // Function ShooterGame.AresUIScreen.DestroyWidgets // (Native|Public) // @ game+0x2dc3420
	void CreateWidgets(); // Function ShooterGame.AresUIScreen.CreateWidgets // (Native|Public) // @ game+0x2dc33f0
};

// Class ShooterGame.AresDeveloperMenuScreen
// Size: 0x78 (Inherited: 0x78)
struct UAresDeveloperMenuScreen : UAresUIScreen {
};

// Class ShooterGame.AresDeveloperSettings
// Size: 0x30 (Inherited: 0x30)
struct UAresDeveloperSettings : UObject {
};

// Class ShooterGame.GameObject
// Size: 0x400 (Inherited: 0x3d0)
struct AGameObject : AActor {
	struct UMeshComponent* Mesh; // 0x3d0(0x08)
	struct URoundPersistenceComponent* Persistence; // 0x3d8(0x08)
	bool Invulnerable; // 0x3e0(0x01)
	bool bIgnoreFriendlyFireModifiers; // 0x3e1(0x01)
	bool bPlayImpactEffects; // 0x3e2(0x01)
	char pad_3E3[0x1]; // 0x3e3(0x01)
	float PostDeathLifespan; // 0x3e4(0x04)
	enum class EAresTeamTargeting CanBeTeleportedFilter; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)
	struct UDamageableComponent* DamageHandler; // 0x3f0(0x08)
	struct UChildDamageSectionComponent* HealthSection; // 0x3f8(0x08)

	void ReceiveServerPreDie(struct UDamageResponse* Response, struct AController* Killer); // Function ShooterGame.GameObject.ReceiveServerPreDie // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	bool OnCrushed(struct AActor* CrushingObject, float CrushDamage); // Function ShooterGame.GameObject.OnCrushed // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnAuthRoundEnd(); // Function ShooterGame.GameObject.OnAuthRoundEnd // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnAuthRoundBegin(); // Function ShooterGame.GameObject.OnAuthRoundBegin // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool IsAlive(); // Function ShooterGame.GameObject.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6d10
	void HandleOnDeath(struct UDamageResponse* Response); // Function ShooterGame.GameObject.HandleOnDeath // (Final|Native|Protected) // @ game+0x2ed6c80
	void HandleOnDamaged(struct UDamageResponse* Response); // Function ShooterGame.GameObject.HandleOnDamaged // (Final|Native|Protected) // @ game+0x2cb4be0
	float GetShield(); // Function ShooterGame.GameObject.GetShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6c50
	enum class EAresRegionalDamage GetRegionalDamage(struct FHitResult& HitResult); // Function ShooterGame.GameObject.GetRegionalDamage // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2ed6b50
	float GetMaxShield(); // Function ShooterGame.GameObject.GetMaxShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6ab0
	float GetMaxHealth(); // Function ShooterGame.GameObject.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6ab0
	float GetHealth(); // Function ShooterGame.GameObject.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6860
	bool CanBeTeleported(struct AShooterCharacter* TeleportInstigator); // Function ShooterGame.GameObject.CanBeTeleported // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6310
	void AuthRoundEnd(); // Function ShooterGame.GameObject.AuthRoundEnd // (Native|Public) // @ game+0x2d53f40
	void AuthRoundBegin(); // Function ShooterGame.GameObject.AuthRoundBegin // (Native|Public) // @ game+0x2dbc5c0
	bool AuthGameObjectCrushed(struct AActor* CrushingObject, float CrushDamage); // Function ShooterGame.GameObject.AuthGameObjectCrushed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ed6240
};

// Class ShooterGame.AresDoor
// Size: 0x420 (Inherited: 0x400)
struct AAresDoor : AGameObject {
	bool bResetOnRound; // 0x400(0x01)
	enum class EAresInitialDoorState InitialDoorState; // 0x401(0x01)
	char pad_402[0x2]; // 0x402(0x02)
	float DoorSpeed; // 0x404(0x04)
	float DoorOpenTime; // 0x408(0x04)
	float DoorCloseTime; // 0x40c(0x04)
	float LocalDoorPos; // 0x410(0x04)
	float PreviousLocalDoorPos; // 0x414(0x04)
	struct FAresDoorStatus DoorStatus; // 0x418(0x02)
	char pad_41A[0x6]; // 0x41a(0x06)

	void UpdateDoorStatus(struct FAresDoorStatus& PreviousDoorStatus, bool bNotifyDoorStateChanged); // Function ShooterGame.AresDoor.UpdateDoorStatus // (Final|Native|Private|HasOutParms) // @ game+0x2cf6600
	void Tick(float DeltaSeconds); // Function ShooterGame.AresDoor.Tick // (Native|Public) // @ game+0x2cee5e0
	void OnRep_DoorStatus(struct FAresDoorStatus PreviousDoorStatus); // Function ShooterGame.AresDoor.OnRep_DoorStatus // (Final|Native|Private) // @ game+0x2cf6290
	void OnDoorMoved(float TimeElapsed, float DoorPos); // Function ShooterGame.AresDoor.OnDoorMoved // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool IsOpenOrOpening(); // Function ShooterGame.AresDoor.IsOpenOrOpening // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf6230
	bool IsOpeningOrClosing(); // Function ShooterGame.AresDoor.IsOpeningOrClosing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf6260
	bool IsClosedOrClosing(); // Function ShooterGame.AresDoor.IsClosedOrClosing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf6200
	float GetLocalPos(); // Function ShooterGame.AresDoor.GetLocalPos // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf5f90
	enum class EAresDoorState GetDoorState(); // Function ShooterGame.AresDoor.GetDoorState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf5f60
	void DoorStateChanged(enum class EAresDoorState NewState, enum class EAresDoorState OldState, enum class EAresDoorTransition Transition); // Function ShooterGame.AresDoor.DoorStateChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void AuthStartOpen(); // Function ShooterGame.AresDoor.AuthStartOpen // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthStartClose(); // Function ShooterGame.AresDoor.AuthStartClose // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthSetDoorStatus(enum class EAresDoorState NewState, enum class EAresDoorTransition NewTransition); // Function ShooterGame.AresDoor.AuthSetDoorStatus // (Final|Native|Private) // @ game+0x2cf5be0
	void AuthSetDoorSpeed(float NewSpeed); // Function ShooterGame.AresDoor.AuthSetDoorSpeed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AuthResetDoor(); // Function ShooterGame.AresDoor.AuthResetDoor // (Final|Native|Private) // @ game+0x1e6e7b0
};

// Class ShooterGame.AresDPICustomScalingRule
// Size: 0x40 (Inherited: 0x30)
struct UAresDPICustomScalingRule : UDPICustomScalingRule {
	int32_t CustomReferenceScreenDensity; // 0x30(0x04)
	char pad_34[0xc]; // 0x34(0x0c)
};

// Class ShooterGame.Projectile
// Size: 0x4d0 (Inherited: 0x3d0)
struct AProjectile : AActor {
	char pad_3D0[0x8]; // 0x3d0(0x08)
	struct FMulticastInlineDelegate OnTeleported; // 0x3d8(0x10)
	bool bIsDisarmed; // 0x3e8(0x01)
	char pad_3E9[0x7]; // 0x3e9(0x07)
	struct FMulticastInlineDelegate OnDisarmed; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnEntranceHitEvent; // 0x400(0x10)
	struct FMulticastInlineDelegate OnExitHitEvent; // 0x410(0x10)
	struct FMulticastInlineDelegate OnStopEvent; // 0x420(0x10)
	char pad_430[0x18]; // 0x430(0x18)
	struct FMulticastInlineDelegate OnMaximumRangeReachedEvent; // 0x448(0x10)
	bool bShouldAlwaysCollideWithAllies; // 0x458(0x01)
	bool bIgnoreFriendlyFireModifiers; // 0x459(0x01)
	bool bSimulation; // 0x45a(0x01)
	bool bIsReusable; // 0x45b(0x01)
	bool bUseProjectilePooling; // 0x45c(0x01)
	bool bIsCleanedUpForReuse; // 0x45d(0x01)
	bool bIsBeingReused; // 0x45e(0x01)
	char pad_45F[0x1]; // 0x45f(0x01)
	float InitializedForUseTimestamp; // 0x460(0x04)
	float SpeedScale; // 0x464(0x04)
	float DefaultDestroyDelay; // 0x468(0x04)
	enum class EProjectileSimulation ProjectileSimulationRule; // 0x46c(0x01)
	enum class EProjectileStopAction ProjectileStopAction; // 0x46d(0x01)
	char pad_46E[0x2]; // 0x46e(0x02)
	float DestroyDelay; // 0x470(0x04)
	char pad_474[0xc]; // 0x474(0x0c)
	struct USceneComponent* CollisionComponent; // 0x480(0x08)
	int32_t CreationRandomSeed; // 0x488(0x04)
	enum class EProjectilePerspective Perspective; // 0x48c(0x01)
	char pad_48D[0x3]; // 0x48d(0x03)
	struct FTransform CreationTransform; // 0x490(0x30)
	struct TWeakObjectPtr<struct AOwnerExclusivePlayerInfo> InstigatorPlayerInfo; // 0x4c0(0x08)
	char pad_4C8[0x8]; // 0x4c8(0x08)

	void StopProjectile(); // Function ShooterGame.Projectile.StopProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x2ffaf10
	void StartProjectile(); // Function ShooterGame.Projectile.StartProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x2ffaef0
	void SetCollisionComponent(struct USceneComponent* SceneComponent); // Function ShooterGame.Projectile.SetCollisionComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2ffadd0
	void ProcessDestroyOrPooling(); // Function ShooterGame.Projectile.ProcessDestroyOrPooling // (Final|Native|Public|BlueprintCallable) // @ game+0x2ffac80
	void PostInitializeComponents(); // Function ShooterGame.Projectile.PostInitializeComponents // (Native|Public) // @ game+0x2d5fc80
	void MulticastStopProjectile(); // Function ShooterGame.Projectile.MulticastStopProjectile // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2d5f090
	void MulticastStartProjectile(); // Function ShooterGame.Projectile.MulticastStartProjectile // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2dbc5c0
	void MulticastInitializeForUse(struct FTransform SpawnTransform, struct AActor* NewOwner, struct APawn* NewInstigator); // Function ShooterGame.Projectile.MulticastInitializeForUse // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x2ffa920
	void MulticastCleanupForPooling(); // Function ShooterGame.Projectile.MulticastCleanupForPooling // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2d53f40
	enum class EProjectilePerspective GetPerspective(); // Function ShooterGame.Projectile.GetPerspective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ffa6a0
	struct AOwnerExclusivePlayerInfo* GetInstigatorPlayerInfo(); // Function ShooterGame.Projectile.GetInstigatorPlayerInfo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ffa660
	float GetGameTimeSinceInitializedForUse(); // Function ShooterGame.Projectile.GetGameTimeSinceInitializedForUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ffa630
	struct FTransform GetCreationTransform(); // Function ShooterGame.Projectile.GetCreationTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ffa5f0
	int32_t GetCreationRandomSeed(); // Function ShooterGame.Projectile.GetCreationRandomSeed // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ffa5c0
	struct FVector GetCreationLocation(); // Function ShooterGame.Projectile.GetCreationLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ffa580
	struct USceneComponent* GetCollisionComponent(); // Function ShooterGame.Projectile.GetCollisionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ceca70
	void FireStandaloneProjectile(struct AProjectile* ProjectileFired, struct FVector& FiringLocation, struct FVector& FiringDirection, float SpeedScale, struct AShooterCharacter* ProjectileInstigator, enum class ETracerOption TracerOption, enum class EImpactEffectsOption ImpactEffectsOption, enum class EProjectilePerspective ProjectilePerspective, struct TArray<struct AActor*>& IgnoredActors, enum class EChildActorIgnoreSetting ChildActorIgnoreSetting, bool bUseRewinding); // Function ShooterGame.Projectile.FireStandaloneProjectile // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2ffa210
	struct TArray<struct AProjectile*> FireProjectiles(struct AProjectile* ProjectileFired, struct FVector& FiringLocation, struct FVector& FiringDirection, float SpeedScale, int32_t NumProjectilesToCreate, float ErrorDegrees, float ErrorPower, int32_t ErrorRetries, int32_t RandomSeed, struct UObject* WorldContextObject, struct AActor* ProjectileOwner, enum class ETracerOption TracerOption, enum class EImpactEffectsOption ImpactEffectsOption, enum class EProjectilePerspective ProjectilePerspective, struct TArray<struct AActor*>& IgnoredActors, enum class EChildActorIgnoreSetting ChildActorIgnoreSetting, struct AOwnerExclusivePlayerInfo* InstigatorPlayerInfo, bool bUseRewinding); // Function ShooterGame.Projectile.FireProjectiles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2ff9c70
	struct TArray<struct AProjectile*> FireMultipleProjectiles(struct AProjectile* ProjectileFired, struct TArray<struct FTransform> FiringTransforms, float SpeedScale, struct UObject* WorldContextObject, struct AAresEquippable* FiringEquippable, enum class ETracerOption TracerOption, enum class EImpactEffectsOption ImpactEffectsOption, enum class EProjectilePerspective ProjectilePerspective, struct TArray<struct AActor*>& IgnoredActors, enum class EChildActorIgnoreSetting ChildActorIgnoreSetting, struct AOwnerExclusivePlayerInfo* InstigatorPlayerInfo, bool bUseRewinding); // Function ShooterGame.Projectile.FireMultipleProjectiles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2ff9820
	void DisarmProjectile(); // Function ShooterGame.Projectile.DisarmProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff94b0
	void AddIgnoredActor(struct AActor* Actor); // Function ShooterGame.Projectile.AddIgnoredActor // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff9280
};

// Class ShooterGame.AresDroppedEquippable
// Size: 0x4e0 (Inherited: 0x4d0)
struct AAresDroppedEquippable : AProjectile {
	struct AAresEquippable* MyEquippable; // 0x4c8(0x08)
	struct AShooterCharacter* LastOwner; // 0x4d0(0x08)

	void AuthInitialize(struct AAresEquippable* DroppedEquippable, struct FVector DropVector); // Function ShooterGame.AresDroppedEquippable.AuthInitialize // (BlueprintAuthorityOnly|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void AuthEquippableRemoved(); // Function ShooterGame.AresDroppedEquippable.AuthEquippableRemoved // (Final|Native|Private) // @ game+0x1e6e7b0
	void AuthEquippableOwnerChanged(struct AAresEquippable* Equippable, struct AActor* EquippableOwner); // Function ShooterGame.AresDroppedEquippable.AuthEquippableOwnerChanged // (Final|Native|Private) // @ game+0x2cc3bd0
	void AuthEquippableDestroyed(struct AActor* Equippable); // Function ShooterGame.AresDroppedEquippable.AuthEquippableDestroyed // (Final|Native|Private) // @ game+0x2cb4be0
};

// Class ShooterGame.AresEditControls
// Size: 0x318 (Inherited: 0x2c8)
struct UAresEditControls : UUserWidget {
	struct TMap<struct UObject*, struct FEditControlsWidgetList> CustomWidgetPool; // 0x2c8(0x50)

	void ReleaseCustomWidgetToPool(struct UUserWidget* Widget); // Function ShooterGame.AresEditControls.ReleaseCustomWidgetToPool // (Final|Native|Public|BlueprintCallable) // @ game+0x2d03c30
	struct UUserWidget* GetOrCreateCustomWidgetFromPool(struct UUserWidget* WidgetClass); // Function ShooterGame.AresEditControls.GetOrCreateCustomWidgetFromPool // (Final|Native|Public|BlueprintCallable) // @ game+0x2d023a0
	struct UAresEditControls* GetEditControlsMobile(struct UObject* WorldContextObject); // Function ShooterGame.AresEditControls.GetEditControlsMobile // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d02060
};

// Class ShooterGame.AresEjectable
// Size: 0x520 (Inherited: 0x3d0)
struct AAresEjectable : AActor {
	enum class EEjectableType EjectableType; // 0x3d0(0x01)
	char pad_3D1[0x3]; // 0x3d1(0x03)
	float MaxSpawnDistance; // 0x3d4(0x04)
	bool bUseSocketVelocityIn1P; // 0x3d8(0x01)
	bool bUseSocketRotationalVelocityIn1P; // 0x3d9(0x01)
	char pad_3DA[0x2]; // 0x3da(0x02)
	float RotationalVelocityAxisSnapAmount; // 0x3dc(0x04)
	int32_t NumBounces; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct UProjectileMovementComponent* ProjectileMovementComponent; // 0x3e8(0x08)
	struct UBoxComponent* CollisionComponent; // 0x3f0(0x08)
	float RandomMinEjectSpeed; // 0x3f8(0x04)
	float RandomMaxEjectSpeed; // 0x3fc(0x04)
	struct FVector RandomVelocityConeDirection; // 0x400(0x0c)
	float RandomVelocityConeAngleHorizontal; // 0x40c(0x04)
	float RandomVelocityConeAngleVertical; // 0x410(0x04)
	float RandomVelocitySpread; // 0x414(0x04)
	float RotationalRandomness; // 0x418(0x04)
	int32_t MaxBounces; // 0x41c(0x04)
	float PostProjectileStopIdleTime; // 0x420(0x04)
	float FadeOutTime; // 0x424(0x04)
	struct UAkAudioEvent* BounceEvent; // 0x428(0x08)
	float MinBounceSpeedToPlaySound[0x23]; // 0x430(0x8c)
	bool bStopPreviousBounceSound; // 0x4bc(0x01)
	char pad_4BD[0x3]; // 0x4bd(0x03)
	struct FName NumBouncesParameterName; // 0x4c0(0x0c)
	struct FName BounceSpeedParameterName; // 0x4cc(0x0c)
	struct TArray<struct FVector> RestNormals; // 0x4d8(0x10)
	bool bAlignToSurfaceOnFirstBounce; // 0x4e8(0x01)
	bool bAlignToSurfaceOnStop; // 0x4e9(0x01)
	char pad_4EA[0x6]; // 0x4ea(0x06)
	struct UAresAudioComponent* PreviousBounceSoundComponent; // 0x4f0(0x08)
	struct UAresEjectablePool* EjectablePool; // 0x4f8(0x08)
	struct UMaterialInterface* CurrentOverrideMaterial1P; // 0x500(0x08)
	struct UMaterialInterface* CurrentOverrideMaterial3P; // 0x508(0x08)
	struct UStaticMesh* CurrentOverrideMesh1P; // 0x510(0x08)
	struct UStaticMesh* CurrentOverrideMesh3P; // 0x518(0x08)

	int32_t GetNumBounces(); // Function ShooterGame.AresEjectable.GetNumBounces // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02370
	float GetCurrentOpacityValue(); // Function ShooterGame.AresEjectable.GetCurrentOpacityValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d01f10
	struct UBoxComponent* GetCollisionComponent(); // Function ShooterGame.AresEjectable.GetCollisionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecef0
	void EventSpawned(); // Function ShooterGame.AresEjectable.EventSpawned // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EventOverrideMesh(struct UStaticMesh* OverrideMesh1P, struct UStaticMesh* OverrideMesh3P); // Function ShooterGame.AresEjectable.EventOverrideMesh // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EventOverrideMaterial(struct UMaterialInterface* OverrideMaterial1P, struct UMaterialInterface* OverrideMaterial3P); // Function ShooterGame.AresEjectable.EventOverrideMaterial // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EventOverride3PMesh(struct UStaticMesh* OverrideMesh); // Function ShooterGame.AresEjectable.EventOverride3PMesh // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EventOverride3PMaterial(struct UMaterialInterface* OverrideMaterial); // Function ShooterGame.AresEjectable.EventOverride3PMaterial // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EventOverride1PMesh(struct UStaticMesh* OverrideMesh); // Function ShooterGame.AresEjectable.EventOverride1PMesh // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EventOverride1PMaterial(struct UMaterialInterface* OverrideMaterial); // Function ShooterGame.AresEjectable.EventOverride1PMaterial // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EventDespawned(); // Function ShooterGame.AresEjectable.EventDespawned // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EventApplyRotationalVelocity(struct FRotator& rotRate); // Function ShooterGame.AresEjectable.EventApplyRotationalVelocity // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void ClientOnStop(struct FHitResult& HitResult); // Function ShooterGame.AresEjectable.ClientOnStop // (Final|Native|Protected|HasOutParms) // @ game+0x2d018b0
	void ClientOnBounce(struct FHitResult& HitResult, struct FVector& PreBounceVelocity); // Function ShooterGame.AresEjectable.ClientOnBounce // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2d01780
};

// Class ShooterGame.AresEjectablePool
// Size: 0x78 (Inherited: 0x30)
struct UAresEjectablePool : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct AAresEjectable*> FreeEjectables; // 0x48(0x10)
	struct UMaterialInterface* CurrentOverrideMaterial1P; // 0x58(0x08)
	struct UMaterialInterface* CurrentOverrideMaterial3P; // 0x60(0x08)
	struct UStaticMesh* CurrentOverrideMesh1P; // 0x68(0x08)
	struct UStaticMesh* CurrentOverrideMesh3P; // 0x70(0x08)
};

// Class ShooterGame.AresItem
// Size: 0x440 (Inherited: 0x3d0)
struct AAresItem : AActor {
	int32_t MaximumAmount; // 0x3d0(0x04)
	char pad_3D4[0x4]; // 0x3d4(0x04)
	struct FMulticastInlineDelegate AuthItemOnSetOwner; // 0x3d8(0x10)
	struct FMulticastInlineDelegate ItemOnSetOwner; // 0x3e8(0x10)
	struct URoundPersistenceComponent* Persistence; // 0x3f8(0x08)
	struct UReplicationSleepComponent* ReplicationSleepComponent; // 0x400(0x08)
	enum class EAresItemSlot EquippableSlot; // 0x408(0x01)
	bool bShouldShowInStore; // 0x409(0x01)
	char pad_40A[0x6]; // 0x40a(0x06)
	struct AShooterCharacter* MyPawn; // 0x410(0x08)
	enum class EEquippableInInventory InInventory; // 0x418(0x01)
	char pad_419[0x7]; // 0x419(0x07)
	struct FString AuthOriginalOwnerId; // 0x420(0x10)
	struct TWeakObjectPtr<struct UAresBasePrimaryDataAsset> CachedDataAsset; // 0x430(0x08)
	struct TWeakObjectPtr<struct UBaseContentUIData> CachedUIData; // 0x438(0x08)

	bool ShouldShowInStore(); // Function ShooterGame.AresItem.ShouldShowInStore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d36730
	void ReceiveClientSetOwningCharacter(struct AShooterCharacter* NewCharacter); // Function ShooterGame.AresItem.ReceiveClientSetOwningCharacter // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void ReceiveClientClearOwningCharacter(struct AShooterCharacter* OldCharacter); // Function ShooterGame.AresItem.ReceiveClientClearOwningCharacter // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void ReceiveAuthSetOwningCharacter(struct AShooterCharacter* NewCharacter); // Function ShooterGame.AresItem.ReceiveAuthSetOwningCharacter // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void ReceiveAuthClearOwningCharacter(struct AShooterCharacter* OldCharacter); // Function ShooterGame.AresItem.ReceiveAuthClearOwningCharacter // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OverrideUIData(struct UBaseContentUIData* OverriddenUIData); // Function ShooterGame.AresItem.OverrideUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x2d36480
	bool MustBeStartingEquippableForSlot(enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresItem.MustBeStartingEquippableForSlot // (Native|Event|Public|BlueprintEvent) // @ game+0x2d36200
	bool IsEquippable(); // Function ShooterGame.AresItem.IsEquippable // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d36040
	int32_t GetSellPrice(int32_t BasePrice); // Function ShooterGame.AresItem.GetSellPrice // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x2d35fa0
	struct AShooterCharacter* GetPawnOwner(); // Function ShooterGame.AresItem.GetPawnOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec8f0
	struct AShooterCharacter* GetOwningShooterCharacter(); // Function ShooterGame.AresItem.GetOwningShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d35f70
	struct FText GetItemTooltipText(); // Function ShooterGame.AresItem.GetItemTooltipText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d35f30
	enum class EAresItemSlot GetItemSlot(); // Function ShooterGame.AresItem.GetItemSlot // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d35ef0
	struct FText GetItemNameText(); // Function ShooterGame.AresItem.GetItemNameText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d35eb0
	struct UTexture* GetItemIcon(); // Function ShooterGame.AresItem.GetItemIcon // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d35e70
	struct FString GetAssetServiceIDFromClass(struct UObject* WorldContextObject, struct UObject* ItemClass); // Function ShooterGame.AresItem.GetAssetServiceIDFromClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d35cc0
	struct FString GetAssetServiceID(); // Function ShooterGame.AresItem.GetAssetServiceID // (Final|Native|Public|BlueprintCallable) // @ game+0x2d35c30
	void ClientDebugDrawTextOnScreen(struct FString DrawText, struct FLinearColor DrawColor, float DurationOverride); // Function ShooterGame.AresItem.ClientDebugDrawTextOnScreen // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient|BlueprintCallable|Const) // @ game+0x2d35730
	void AuthSetOwnerTo(struct AActor* NewOwner); // Function ShooterGame.AresItem.AuthSetOwnerTo // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d356a0
	void AuthRemoveAndDestroy(enum class EInventoryTransaction TransactionType); // Function ShooterGame.AresItem.AuthRemoveAndDestroy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	struct FString AuthGetOriginalOwnerId(); // Function ShooterGame.AresItem.AuthGetOriginalOwnerId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d35660
	void AuthDestroyInternal(); // Function ShooterGame.AresItem.AuthDestroyInternal // (Final|Native|Public) // @ game+0x1e6e7b0
};

// Class ShooterGame.AresEquippable
// Size: 0xed0 (Inherited: 0x440)
struct AAresEquippable : AAresItem {
	char pad_440[0x10]; // 0x440(0x10)
	enum class EEquippableTickState EquippableTickState; // 0x450(0x01)
	char pad_451[0xa7]; // 0x451(0xa7)
	struct UTexture* ObjectiveIcon; // 0x4f8(0x08)
	bool bUsingCharacterAlternateAnims; // 0x500(0x01)
	char pad_501[0x7]; // 0x501(0x07)
	struct TMap<struct UAnimSlot1P*, struct TSoftObjectPtr<UAnimationAsset>> CharacterAnims1P; // 0x508(0x50)
	struct TMap<struct UAnimSlot1P*, struct TSoftObjectPtr<UAnimationAsset>> CharacterAnimsAltmode1P; // 0x558(0x50)
	struct TMap<struct UAnimSlot1P*, struct TSoftObjectPtr<UAnimationAsset>> CharacterAnimsAltmode1POverride; // 0x5a8(0x50)
	struct TMap<struct UAnimSlot1P*, struct TSoftObjectPtr<UAnimationAsset>> CharacterAnims1POverride; // 0x5f8(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct TSoftObjectPtr<UAnimationAsset>> GunAnims1POverride; // 0x648(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct TSoftObjectPtr<UAnimationAsset>> CosmeticGunAnims1POverride; // 0x698(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct TSoftObjectPtr<UAnimationAsset>> CosmeticGunAnimsAltmode1POverride; // 0x6e8(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> CharacterAnimsLowerBody3POverride; // 0x738(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> CharacterAnimsUpperBody3POverride; // 0x788(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct TSoftObjectPtr<UAnimationAsset>> GunAnims1P; // 0x7d8(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> CharacterAnimsUpperBody3P; // 0x828(0x50)
	struct TMap<struct UAnimSlotUpperBody3P*, struct UAnimationAsset*> CharacterAnimsAltModeUpperBody3P; // 0x878(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> CharacterAnimsLowerBody3P; // 0x8c8(0x50)
	struct TMap<struct UAnimSlotLowerBody3P*, struct UAnimationAsset*> CharacterAnimsAltModeLowerBody3P; // 0x918(0x50)
	struct TMap<struct UAnimSlotFace3P*, struct UAnimationAsset*> CharacterAnimsFace3P; // 0x968(0x50)
	struct TMap<struct UAnimSlotFace3P*, struct UAnimationAsset*> CharacterAnimsAltModeFace3P; // 0x9b8(0x50)
	bool LeftHandIKEnabled; // 0xa08(0x01)
	bool RightHandIKEnabled; // 0xa09(0x01)
	bool AltModeLeftHandIKEnabled; // 0xa0a(0x01)
	bool AltModeRightHandIKEnabled; // 0xa0b(0x01)
	float InaccuracyAnimationMultiplier; // 0xa0c(0x04)
	float AimOffsetDisableOnEquip; // 0xa10(0x04)
	float PrimaryAimSpring1PStiffness; // 0xa14(0x04)
	float PrimaryAimSpring1PDampening; // 0xa18(0x04)
	float SecondaryAimSpring1PStiffness; // 0xa1c(0x04)
	float SecondaryAimSpring1PDampening; // 0xa20(0x04)
	char pad_A24[0x4]; // 0xa24(0x04)
	struct UAkAudioEvent* PickupSoundEvent; // 0xa28(0x08)
	struct FMulticastInlineDelegate OnRejectedInput; // 0xa30(0x10)
	struct FEquippableAimToolingModifiers AimToolingModifiers; // 0xa40(0x08)
	struct TMap<struct UAnimSlot1P*, struct FAsyncLoadedEquippableCharacterAnim> CachedCharacterAnimationAssetMap; // 0xa48(0x50)
	struct TMap<struct UAnimSlotGun1P*, struct FAsyncLoadedEquippableGunAnim> CachedGunAnimationAssetMap; // 0xa98(0x50)
	struct TWeakObjectPtr<struct AShooterCharacter> AttributeOwner; // 0xae8(0x08)
	struct FMulticastInlineDelegate OnItemEquipped; // 0xaf0(0x10)
	struct FMulticastInlineDelegate OnItemUnequipped; // 0xb00(0x10)
	char pad_B10[0x18]; // 0xb10(0x18)
	float EquipQueueTime; // 0xb28(0x04)
	bool bCanBeAutoEquipped; // 0xb2c(0x01)
	bool bCanBeAutoEquippedWithoutResources; // 0xb2d(0x01)
	bool bCanBeEquippedOutsideGameplay; // 0xb2e(0x01)
	char pad_B2F[0x1]; // 0xb2f(0x01)
	struct FMulticastInlineDelegate EquippableOnSetOwner; // 0xb30(0x10)
	enum class EEquippableSuppressionBehavior SuppressionBehavior; // 0xb40(0x01)
	enum class EEquippableEquipBehavior EquipBehavior; // 0xb41(0x01)
	bool OverrideHolstering; // 0xb42(0x01)
	char pad_B43[0x5]; // 0xb43(0x05)
	struct FMulticastInlineDelegate OnMeshVisibilityUpdated; // 0xb48(0x10)
	struct TArray<struct FString> PostInitErrors; // 0xb58(0x10)
	struct TMap<struct TSoftClassPtr<UObject>, struct AEffectContainer*> EffectOverrides; // 0xb68(0x50)
	struct UZoomManagerComponent* ZoomManager; // 0xbb8(0x08)
	char pad_BC0[0x1]; // 0xbc0(0x01)
	bool bAutoEquip; // 0xbc1(0x01)
	bool bAutoPickup; // 0xbc2(0x01)
	char pad_BC3[0x1]; // 0xbc3(0x01)
	float AutoPickupDistance; // 0xbc4(0x04)
	float PreventPickupDuration; // 0xbc8(0x04)
	float ScaleOnGround; // 0xbcc(0x04)
	struct UAkAudioEvent* FootstepEvent; // 0xbd0(0x08)
	struct UAkAudioEvent* JumpEvent; // 0xbd8(0x08)
	struct UAkAudioEvent* LandEvent; // 0xbe0(0x08)
	struct UCooldownComponent* CooldownComponent; // 0xbe8(0x08)
	struct FMulticastInlineDelegate OnDisabledInputRequested; // 0xbf0(0x10)
	struct FMulticastInlineDelegate OnEquippableDisabled; // 0xc00(0x10)
	bool bDestroyWhenDropped; // 0xc10(0x01)
	char pad_C11[0x7]; // 0xc11(0x07)
	struct FMulticastInlineDelegate OnDropped; // 0xc18(0x10)
	struct FMulticastInlineDelegate OnFiringVFXStateUpdated; // 0xc28(0x10)
	struct FMulticastInlineDelegate OnEquippableVFXStateChanged; // 0xc38(0x10)
	struct FMulticastInlineDelegate OnEquippableZoomVFXStateChanged; // 0xc48(0x10)
	bool bInPersistentData; // 0xc58(0x01)
	bool bCanActivateWhenSlotDisabled; // 0xc59(0x01)
	bool bHideFirstPersonWhileZoomed; // 0xc5a(0x01)
	enum class EZoomInHideOption ZoomInHideOption; // 0xc5b(0x01)
	enum class EZoomOutShowOption ZoomOutShowOption; // 0xc5c(0x01)
	char pad_C5D[0x3]; // 0xc5d(0x03)
	float ZoomedMovementRatio; // 0xc60(0x04)
	float AlwaysTurnRatio; // 0xc64(0x04)
	float AlwaysMovementRatio; // 0xc68(0x04)
	struct FName EquippableAttachPoint1P; // 0xc6c(0x0c)
	struct FName EquippableAttachPoint3P; // 0xc78(0x0c)
	char pad_C84[0x4]; // 0xc84(0x04)
	struct USceneComponent* MySceneRoot; // 0xc88(0x08)
	struct USceneComponent* MyRoot3P; // 0xc90(0x08)
	struct USkeletalMeshComponent* Mesh1P; // 0xc98(0x08)
	struct UAresOutlineComponent* OutlineComponent1P; // 0xca0(0x08)
	struct USkeletalMeshComponent* Mesh3P; // 0xca8(0x08)
	struct UAresOutlineComponent* OutlineComponent3P; // 0xcb0(0x08)
	struct UEquippableStateMachineComponent* EquippableStateMachine; // 0xcb8(0x08)
	enum class EAresEquippableState CurrentEquippableVFXState; // 0xcc0(0x01)
	char pad_CC1[0x7]; // 0xcc1(0x07)
	struct UEquippableFogOfWarComponent* EquippableFogOfWar; // 0xcc8(0x08)
	struct UCycleZoomState* EquippableCycleZoomState; // 0xcd0(0x08)
	struct TArray<struct UEquippableStateMachineComponent*> EquippableStateMachines; // 0xcd8(0x10)
	struct TArray<struct USkeletalMeshComponent*> Meshes; // 0xce8(0x10)
	struct FName InventoryAttachPoint; // 0xcf8(0x0c)
	bool bCanBeDropped; // 0xd04(0x01)
	bool bDropOnDeath; // 0xd05(0x01)
	enum class EAresDropOnDeath DropOnDeathNew; // 0xd06(0x01)
	char pad_D07[0x1]; // 0xd07(0x01)
	struct FRotator DropOnDeathScatterMin; // 0xd08(0x0c)
	struct FRotator DropOnDeathScatterMax; // 0xd14(0x0c)
	bool bOnlyAlliesCanPickup; // 0xd20(0x01)
	enum class EUsablePriority PickupPriority; // 0xd21(0x01)
	char pad_D22[0x2]; // 0xd22(0x02)
	float PickupScoringBonus; // 0xd24(0x04)
	struct FName MuzzlePointSocketName; // 0xd28(0x0c)
	char pad_D34[0x44]; // 0xd34(0x44)
	struct UKillBannerData* SkinKillBannerData; // 0xd78(0x08)
	struct UTexture* InventoryIcon; // 0xd80(0x08)
	struct UEquippableSkinDataAsset* SkinDataAsset; // 0xd88(0x08)
	struct UEquippableSkinLevelDataAsset* SkinLevelDataAsset; // 0xd90(0x08)
	struct TArray<struct UEquippableAttachmentDataAsset*> AttachmentDataAssets; // 0xd98(0x10)
	struct UEquippableSkinChromaDataAsset* ChromaDataAsset; // 0xda8(0x08)
	struct UEquippableCharmDataAsset* CharmDataAsset; // 0xdb0(0x08)
	struct UEquippableCharmLevelDataAsset* CharmLevelDataAsset; // 0xdb8(0x08)
	struct FGuid SkinDataAssetId; // 0xdc0(0x10)
	struct FGuid SkinLevelDataAssetId; // 0xdd0(0x10)
	struct FGuid CharmDataAssetId; // 0xde0(0x10)
	struct FGuid CharmLevelDataAssetId; // 0xdf0(0x10)
	struct TArray<struct FGuid> AttachmentDataAssetIds; // 0xe00(0x10)
	struct FGuid ChromaDataAssetId; // 0xe10(0x10)
	struct AShooterCharacter* PreventPickupCharacter; // 0xe20(0x08)
	int32_t CosmeticRandomSeed; // 0xe28(0x04)
	char pad_E2C[0xc]; // 0xe2c(0x0c)
	bool bInitialCooldownOnRoundStart; // 0xe38(0x01)
	bool bAuthIsGhostEquipped; // 0xe39(0x01)
	char pad_E3A[0x6]; // 0xe3a(0x06)
	struct TSet<enum class EAresEquippableInput> UnequippedInputs; // 0xe40(0x50)
	int32_t MaxCharges; // 0xe90(0x04)
	int32_t ChargesGainedEachRefresh; // 0xe94(0x04)
	float AuthHitRegistrationSubTickMovementTimestamp; // 0xe98(0x04)
	float AuthServerSnapshottedMovementTimestamp; // 0xe9c(0x04)
	bool bCanAddToStorageSlot; // 0xea0(0x01)
	char pad_EA1[0x7]; // 0xea1(0x07)
	struct TArray<struct TWeakObjectPtr<struct UObject>> HolsterBlockingObjects; // 0xea8(0x10)
	struct AShooterCharacter* LastFiringCharacter; // 0xeb8(0x08)
	bool bIsForced1PTextureStreamingEnabled; // 0xec0(0x01)
	char pad_EC1[0xf]; // 0xec1(0x0f)

	void UpdateMaterial(int32_t Index, struct UMaterialInterface* Material); // Function ShooterGame.AresEquippable.UpdateMaterial // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool UnequipEquippable(enum class EEquipSpeed Speed, bool bIgnoreAutoEquipSettings); // Function ShooterGame.AresEquippable.UnequipEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x2d04600
	bool TryEquip(enum class EEquipSource EquipSource, bool bSkipRestrictions); // Function ShooterGame.AresEquippable.TryEquip // (Final|Native|Public|BlueprintCallable) // @ game+0x2d04530
	bool TryAutoEquip(enum class EEquipSpeed EquipSpeed, enum class EEquipSource EquipSource); // Function ShooterGame.AresEquippable.TryAutoEquip // (Final|Native|Public|BlueprintCallable) // @ game+0x2d04460
	bool ShouldPresentAsUsable(); // Function ShooterGame.AresEquippable.ShouldPresentAsUsable // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d04420
	void SetMuzzlePointSocketName(struct FName InMuzzlePointSocketName); // Function ShooterGame.AresEquippable.SetMuzzlePointSocketName // (Final|Native|Public|BlueprintCallable) // @ game+0x2d04380
	void SetGunAnimation1POverride(struct UAnimSlotGun1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetGunAnimation1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2d042b0
	void SetForceFirstPersonMeshHide(enum class EFirstPersonHideOption Option); // Function ShooterGame.AresEquippable.SetForceFirstPersonMeshHide // (Final|Native|Public|BlueprintCallable) // @ game+0x2d04230
	void SetCosmeticGunAnimationAltmode1POverride(struct UAnimSlotGun1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCosmeticGunAnimationAltmode1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2d04160
	void SetCosmeticGunAnimation1POverride(struct UAnimSlotGun1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCosmeticGunAnimation1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2d04090
	void SetCharacterClassForAbility(struct AShooterCharacter* CharacterClass); // Function ShooterGame.AresEquippable.SetCharacterClassForAbility // (Final|Native|Public|BlueprintCallable) // @ game+0x2d04000
	void SetCharacterAnimationUpperBody3POverride(struct UAnimSlotUpperBody3P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCharacterAnimationUpperBody3POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2d03f30
	void SetCharacterAnimationLowerBody3POverride(struct UAnimSlotLowerBody3P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCharacterAnimationLowerBody3POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2d03e60
	void SetCharacterAnimationAltmode1POverride(struct UAnimSlot1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCharacterAnimationAltmode1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2d03d90
	void SetCharacterAnimation1POverride(struct UAnimSlot1P* SlotClass, struct UAnimationAsset* AnimAsset); // Function ShooterGame.AresEquippable.SetCharacterAnimation1POverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2d03cc0
	struct UAresAudioComponent* PlayEquippableSoundEvent(struct UAkAudioEvent* SoundEvent, struct USceneComponent* WorldComponent, struct FName AttachPoint, bool bSoundFollowsAttachPoint, struct UAresAudioComponent* ReuseAudioComponent); // Function ShooterGame.AresEquippable.PlayEquippableSoundEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2d03a80
	struct UParticleSystemComponent* PlayEquippableEffect(struct UParticleSystem* FX, struct FName AttachPoint, struct FVector Location, struct FRotator Rotation, struct FVector Scale, enum class EAttachLocation LocationType, bool bAutoDestroy, enum class EPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bIsFirstPerson, float WarmupTime, enum class EAresParticleVariantColor VariantColor, bool bAttach); // Function ShooterGame.AresEquippable.PlayEquippableEffect // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d03650
	void OverrideEffect(struct TSoftClassPtr<UObject> Base, struct AEffectContainer* Override); // Function ShooterGame.AresEquippable.OverrideEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2d03500
	void OnZoomInStarted(struct UZoomComponent* ZoomComponent, float TargetZoomLevel, bool IsInitialZoom); // Function ShooterGame.AresEquippable.OnZoomInStarted // (Final|Native|Public) // @ game+0x2d033e0
	void OnZoomInCompleted(struct UZoomComponent* ZoomComponent, float TargetZoomLevel, bool IsInitialZoom); // Function ShooterGame.AresEquippable.OnZoomInCompleted // (Final|Native|Public) // @ game+0x2d032c0
	void OnUnZoomStarted(struct UZoomComponent* ZoomComponent, float SourceZoomLevel); // Function ShooterGame.AresEquippable.OnUnZoomStarted // (Final|Native|Public) // @ game+0x2d031f0
	void OnUnZoomCompleted(struct UZoomComponent* ZoomComponent, float SourceZoomLevel); // Function ShooterGame.AresEquippable.OnUnZoomCompleted // (Final|Native|Public) // @ game+0x2d03120
	void OnRep_InPersistentData(); // Function ShooterGame.AresEquippable.OnRep_InPersistentData // (Final|Native|Public) // @ game+0x2d03100
	void OnPawnDeath(); // Function ShooterGame.AresEquippable.OnPawnDeath // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnJumped(); // Function ShooterGame.AresEquippable.OnJumped // (Native|Public) // @ game+0x2d030d0
	void OnItemPickedUp(struct AShooterCharacter* NewOwner, bool bCurrentWasDropped); // Function ShooterGame.AresEquippable.OnItemPickedUp // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnInvisibleEquippablePropertyChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.AresEquippable.OnInvisibleEquippablePropertyChanged // (Final|Native|Protected|HasOutParms) // @ game+0x2d02f00
	void OnEquippableStateMachineSubTick(float SubTickDeltaTime); // Function ShooterGame.AresEquippable.OnEquippableStateMachineSubTick // (Final|Native|Protected) // @ game+0x2d02e80
	void OnEquippableStateMachineServerCorrection(struct UEquippableStateMachineComponent* EquippableStateMachineComponent); // Function ShooterGame.AresEquippable.OnEquippableStateMachineServerCorrection // (Final|Native|Protected) // @ game+0x2d02df0
	void OnEquippableStateMachineInactive(struct UEquippableStateMachineComponent* InactiveEquippableStateMachine); // Function ShooterGame.AresEquippable.OnEquippableStateMachineInactive // (Final|Native|Protected) // @ game+0x2d02df0
	void OnEquippableStateMachineActive(struct UEquippableStateMachineComponent* ActiveEquippableStateMachine); // Function ShooterGame.AresEquippable.OnEquippableStateMachineActive // (Final|Native|Protected) // @ game+0x2d02df0
	void OnDisablePropertyChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.AresEquippable.OnDisablePropertyChanged // (Final|Native|Protected|HasOutParms) // @ game+0x2d02c20
	void OnAuthRoundEnd(); // Function ShooterGame.AresEquippable.OnAuthRoundEnd // (Native|Event|Public|BlueprintEvent) // @ game+0x1e62560
	void On3PMontagesFinished(); // Function ShooterGame.AresEquippable.On3PMontagesFinished // (Final|Native|Private) // @ game+0x2d02c00
	void MulticastOnItemMovedToPersistentData(); // Function ShooterGame.AresEquippable.MulticastOnItemMovedToPersistentData // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2d02bd0
	void ModifyDroppability(bool CanDrop, bool DestroyOnDrop); // Function ShooterGame.AresEquippable.ModifyDroppability // (Final|Native|Public|BlueprintCallable) // @ game+0x2d02b00
	void Load1PAnimAssetsOnClient(); // Function ShooterGame.AresEquippable.Load1PAnimAssetsOnClient // (Final|Native|Protected) // @ game+0x2d02ae0
	bool IsZoomed(); // Function ShooterGame.AresEquippable.IsZoomed // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02aa0
	bool IsOffCooldown(); // Function ShooterGame.AresEquippable.IsOffCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02a70
	bool IsInputUp(enum class EAresEquippableInput Input); // Function ShooterGame.AresEquippable.IsInputUp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d029e0
	bool IsInputDown(enum class EAresEquippableInput Input); // Function ShooterGame.AresEquippable.IsInputDown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02950
	bool IsHolsteringAllowed(struct AAresEquippable* NextEquippable); // Function ShooterGame.AresEquippable.IsHolsteringAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d028b0
	bool IsDesiredEquippable(); // Function ShooterGame.AresEquippable.IsDesiredEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02880
	bool IsCurrentEquippable(); // Function ShooterGame.AresEquippable.IsCurrentEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02850
	bool InputIsDisabled(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, bool bReportFailure); // Function ShooterGame.AresEquippable.InputIsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02730
	bool HasPipsToCast(); // Function ShooterGame.AresEquippable.HasPipsToCast // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02700
	bool HasMuzzle(); // Function ShooterGame.AresEquippable.HasMuzzle // (Final|Native|Public|BlueprintCallable) // @ game+0x2d026d0
	bool HasEnoughChargesToUse(); // Function ShooterGame.AresEquippable.HasEnoughChargesToUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d026a0
	bool HasAnyResources(); // Function ShooterGame.AresEquippable.HasAnyResources // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2d02660
	void HandleResourceChanged(struct UResourceComponent* Resource); // Function ShooterGame.AresEquippable.HandleResourceChanged // (Final|Native|Public) // @ game+0x2cb4be0
	void HandleInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, float InputTimestamp, enum class EAresActivationInputType ActivationType); // Function ShooterGame.AresEquippable.HandleInput // (Final|Native|Public|BlueprintCallable) // @ game+0x2d02500
	int32_t GetPipCost(); // Function ShooterGame.AresEquippable.GetPipCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d024d0
	struct AEffectContainer* GetOverridableEffect(struct AEffectContainer* Effect); // Function ShooterGame.AresEquippable.GetOverridableEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2d02440
	struct FTransform GetMuzzleTransform(); // Function ShooterGame.AresEquippable.GetMuzzleTransform // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d02330
	struct USkeletalMeshComponent* GetMesh3P(); // Function ShooterGame.AresEquippable.GetMesh3P // (Final|Native|Public) // @ game+0x2d02310
	struct USkeletalMeshComponent* GetMesh1P(); // Function ShooterGame.AresEquippable.GetMesh1P // (Final|Native|Public) // @ game+0x2d022f0
	int32_t GetMaxCharges(); // Function ShooterGame.AresEquippable.GetMaxCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d022c0
	struct UBaseContentUIData* GetEquippableUIData(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> EquippableClass); // Function ShooterGame.AresEquippable.GetEquippableUIData // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d02170
	struct UEquippableSkinDataAsset* GetEquippableSkinDataAsset(); // Function ShooterGame.AresEquippable.GetEquippableSkinDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d02150
	struct USkeletalMeshComponent* GetEquippableMesh(); // Function ShooterGame.AresEquippable.GetEquippableMesh // (Final|Native|Public|Const) // @ game+0x2d02120
	struct UEquippableFogOfWarComponent* GetEquippableFogOfWar(); // Function ShooterGame.AresEquippable.GetEquippableFogOfWar // (Final|Native|Public|BlueprintCallable) // @ game+0x2d020f0
	enum class EAresDropOnDeath GetDropOnDeath(struct FRotator& DropRotation); // Function ShooterGame.AresEquippable.GetDropOnDeath // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x2d01fc0
	float GetDefaultAutoEquipPriorityForSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresEquippable.GetDefaultAutoEquipPriorityForSlot // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d01f40
	struct UBaseCrosshairHudElement* GetCurrentCrosshairHudElementClass(); // Function ShooterGame.AresEquippable.GetCurrentCrosshairHudElementClass // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2d01ed0
	int32_t GetCurrentCharges(); // Function ShooterGame.AresEquippable.GetCurrentCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d01ea0
	bool GetCanEquipWhenSlotDisabled(); // Function ShooterGame.AresEquippable.GetCanEquipWhenSlotDisabled // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2d01e60
	bool GetCanDrop(); // Function ShooterGame.AresEquippable.GetCanDrop // (Final|Native|Public|Const) // @ game+0x2d01e30
	bool GetCanActivateWhenSlotDisabled(); // Function ShooterGame.AresEquippable.GetCanActivateWhenSlotDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d01e00
	float GetAutoEquipPriority(); // Function ShooterGame.AresEquippable.GetAutoEquipPriority // (Native|Event|Public|BlueprintEvent) // @ game+0x2d01dc0
	void GetAttachmentControllerParameters(struct UAttachmentControllerComponent* AttachmentControllerComponent, enum class EAttachmentPerspective AttachmentPerspective, enum class EAttachmentVisibility ComputedVisibility, struct USceneComponent* ComputedAttachComponent, enum class EAttachmentVisibility& DesiredVisibility, struct USceneComponent*& DesiredAttachComponent, struct FAttachmentSettings& DesiredAttachmentSettings); // Function ShooterGame.AresEquippable.GetAttachmentControllerParameters // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2d01b60
	bool EquippableSlotIsDisabled(); // Function ShooterGame.AresEquippable.EquippableSlotIsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d01b30
	bool EquippableIsLocallyControlledOrSpectated(); // Function ShooterGame.AresEquippable.EquippableIsLocallyControlledOrSpectated // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d01b00
	bool EquippableIsLocallyControlled(); // Function ShooterGame.AresEquippable.EquippableIsLocallyControlled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d01ad0
	enum class EAresImpactEffectHitspace ComputeHitSpace(struct AAresEquippable* Equippable, struct FHitResult& Impact); // Function ShooterGame.AresEquippable.ComputeHitSpace // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d01990
	void ClientTickActiveForLocalPlayer(float DeltaSeconds); // Function ShooterGame.AresEquippable.ClientTickActiveForLocalPlayer // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ClientMapPing(struct FVector ClickLocation); // Function ShooterGame.AresEquippable.ClientMapPing // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void ClientMapClicked(struct FVector ClickLocation); // Function ShooterGame.AresEquippable.ClientMapClicked // (Event|Public|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void ClientItemWillEquip(); // Function ShooterGame.AresEquippable.ClientItemWillEquip // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ClientItemUnEquipped(); // Function ShooterGame.AresEquippable.ClientItemUnEquipped // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ClientItemEquipped(); // Function ShooterGame.AresEquippable.ClientItemEquipped // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ClearPreventPickupCharacter(); // Function ShooterGame.AresEquippable.ClearPreventPickupCharacter // (Final|Native|Protected) // @ game+0x1e6e7b0
	void ChangeEquippableVFXState(enum class EAresEquippableState State); // Function ShooterGame.AresEquippable.ChangeEquippableVFXState // (Final|Native|Public|BlueprintCallable) // @ game+0x2d01700
	bool CanZoom(); // Function ShooterGame.AresEquippable.CanZoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d016d0
	enum class EAresEquippableCanUseResult CanUse(); // Function ShooterGame.AresEquippable.CanUse // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d01690
	bool CanBeDesiredEquippable(); // Function ShooterGame.AresEquippable.CanBeDesiredEquippable // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d01650
	bool CanAutoEquip(); // Function ShooterGame.AresEquippable.CanAutoEquip // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d01610
	void AuthSetCooldown(float NewCooldown); // Function ShooterGame.AresEquippable.AuthSetCooldown // (Final|Native|Public|BlueprintCallable) // @ game+0x2d01590
	void AuthRefreshEvent(); // Function ShooterGame.AresEquippable.AuthRefreshEvent // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void AuthRefresh(); // Function ShooterGame.AresEquippable.AuthRefresh // (Native|Public) // @ game+0x1e64c90
	void AuthOnUnEquipped(); // Function ShooterGame.AresEquippable.AuthOnUnEquipped // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void AuthOnPawnDeath(); // Function ShooterGame.AresEquippable.AuthOnPawnDeath // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void AuthOnOwningCharacterRemoteRoleChanged(struct AShooterCharacter* OwningShooterCharacter, enum class ENetRole PrevRole, enum class ENetRole NewRole); // Function ShooterGame.AresEquippable.AuthOnOwningCharacterRemoteRoleChanged // (Final|Native|Protected) // @ game+0x2d01480
	void AuthOnEquipped(); // Function ShooterGame.AresEquippable.AuthOnEquipped // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void AuthGrantResourcesForAutomation(); // Function ShooterGame.AresEquippable.AuthGrantResourcesForAutomation // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void AuthDrop(struct FVector& Location, struct FRotator& Rotation, float SpeedScale); // Function ShooterGame.AresEquippable.AuthDrop // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2d01350
	void AuthClearCooldown(); // Function ShooterGame.AresEquippable.AuthClearCooldown // (Final|Native|Public|BlueprintCallable) // @ game+0x2d01330
	bool AllowPickup(struct AShooterCharacter* TargetCharacter); // Function ShooterGame.AresEquippable.AllowPickup // (Native|Event|Public|BlueprintEvent) // @ game+0x2d01280
	void AddPostInitError(struct FString ErrorMessage); // Function ShooterGame.AresEquippable.AddPostInitError // (Final|Native|Public) // @ game+0x2d01180
};

// Class ShooterGame.AresEquippableAnimInstance
// Size: 0x520 (Inherited: 0x300)
struct UAresEquippableAnimInstance : UAnimInstance {
	struct FAnimationStateParams AnimationStateParams; // 0x300(0x1d0)
	struct FAnimationAssetsGun1P CosmeticAnimationAssetsGun1P; // 0x4d0(0x48)
	char pad_518[0x8]; // 0x518(0x08)
};

// Class ShooterGame.AresEquippableDataTracker
// Size: 0xf0 (Inherited: 0xe8)
struct UAresEquippableDataTracker : UActorComponent {
	struct AAresPlayerStateBase* OriginalBuyer; // 0xe8(0x08)

	struct FString GetOriginalBuyerName(); // Function ShooterGame.AresEquippableDataTracker.GetOriginalBuyerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d0d2b0
	struct AAresPlayerStateBase* GetOriginalBuyer(); // Function ShooterGame.AresEquippableDataTracker.GetOriginalBuyer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec9b0
};

// Class ShooterGame.AresEquippableGlobals
// Size: 0x140 (Inherited: 0x30)
struct UAresEquippableGlobals : UObject {
	struct AAresDroppedEquippable* DroppedEquippable; // 0x30(0x08)
	struct AAresOnGroundEquippable* OnGroundEquippable; // 0x38(0x08)
	struct AAresEquippableSlot* EquippableSlots[0x10]; // 0x40(0x80)
	struct UAnimNotify* InterruptFrameAnimNotifyClass; // 0xc0(0x08)
	struct FSoftObjectPath DevOnlyPurchasableOverrideDataTable; // 0xc8(0x20)
	struct TMap<struct UAresPurchasable*, struct UAresPurchasable*> PurchasableOverrideMap; // 0xe8(0x50)
	char pad_138[0x8]; // 0x138(0x08)

	struct UAresPurchasable* GetPurchasableFromConfig(struct UObject* WorldContextObject, struct UAresPurchasable* OriginalPurchasable); // Function ShooterGame.AresEquippableGlobals.GetPurchasableFromConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d0d340
};

// Class ShooterGame.AresEquippableSlot
// Size: 0x3e0 (Inherited: 0x3d0)
struct AAresEquippableSlot : AInfo {
	int32_t MaximumAmount; // 0x3d0(0x04)
	enum class EAresEquippableSlotViewType bViewType; // 0x3d4(0x01)
	enum class EAresItemSlot SlotType; // 0x3d5(0x01)
	char pad_3D6[0x2]; // 0x3d6(0x02)
	int32_t SortPriority; // 0x3d8(0x04)
	bool bCanReplaceItems; // 0x3dc(0x01)
	bool bCanRepurchaseSameItem; // 0x3dd(0x01)
	char pad_3DE[0x2]; // 0x3de(0x02)
};

// Class ShooterGame.FireCustomizationWeaponDataList
// Size: 0x48 (Inherited: 0x38)
struct UFireCustomizationWeaponDataList : UDataAsset {
	struct TArray<struct FFireButtonWeaponCustomizationSettingData> WeaponUIData; // 0x38(0x10)
};

// Class ShooterGame.AresFireButtonCustomization
// Size: 0x2c8 (Inherited: 0x2c8)
struct UAresFireButtonCustomization : UUserWidget {
};

// Class ShooterGame.AresFireButtonCustomizationWeaponGrid
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAresFireButtonCustomizationWeaponGrid : UUserWidget {
	struct FString WeaponUIDataAssetPath; // 0x2c8(0x10)
	struct UFireCustomizationWeaponDataList* WeaponUIDataAsset; // 0x2d8(0x08)

	struct UFireCustomizationWeaponDataList* GetWeaponUIDataAsset(); // Function ShooterGame.AresFireButtonCustomizationWeaponGrid.GetWeaponUIDataAsset // (Final|Native|Public|BlueprintCallable) // @ game+0x2d0d450
};

// Class ShooterGame.FrontendUIGlobalsDataAsset
// Size: 0x228 (Inherited: 0x40)
struct UFrontendUIGlobalsDataAsset : UAresPlatformDataAsset {
	struct TSoftClassPtr<UObject> MainMenuAsset; // 0x40(0x30)
	struct TSoftClassPtr<UObject> MainMenuViewControllerAsset; // 0x70(0x30)
	struct TMap<enum class EAresMainMenuTopNavigationState, struct TSoftClassPtr<UObject>> MainMenuStateWidgets; // 0xa0(0x50)
	struct TSoftClassPtr<UObject> PregameAsset; // 0xf0(0x30)
	struct TSoftClassPtr<UObject> WelcomeAsset; // 0x120(0x30)
	struct TSoftObjectPtr<UTexture2D> MainMenuDefaultBackgroundArt; // 0x150(0x30)
	struct TMap<enum class EAresMainMenuTopNavigationState, struct TSoftObjectPtr<UTexture2D>> MainMenuBackgroundArtOverride; // 0x180(0x50)
	struct TMap<enum class EAresMainMenuTopNavigationState, struct FMediaSourceParams> MainMenuBackgroundVideoOverride; // 0x1d0(0x50)
	bool bUsingUpdatedNavBar; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)

	bool TryGetBackgroundVideoForState(enum class EAresMainMenuTopNavigationState DesiredNavigationState, struct FMediaSourceParams& OutParams); // Function ShooterGame.FrontendUIGlobalsDataAsset.TryGetBackgroundVideoForState // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d0d6d0
	struct TSoftObjectPtr<UTexture2D> GetBackgroundArtForState(enum class EAresMainMenuTopNavigationState DesiredNavigationState); // Function ShooterGame.FrontendUIGlobalsDataAsset.GetBackgroundArtForState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d0d140
};

// Class ShooterGame.AresFrontendUIGlobalsBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresFrontendUIGlobalsBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	struct UFrontendUIGlobalsDataAsset* GetFrontendUIGlobalsForWidget(struct UWidget* Requester); // Function ShooterGame.AresFrontendUIGlobalsBlueprintFunctionLibrary.GetFrontendUIGlobalsForWidget // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0x2d0d220
};

// Class ShooterGame.AresGameAutomation
// Size: 0x3e0 (Inherited: 0x3d0)
struct AAresGameAutomation : AActor {
	bool bStartTestInGameplayPhase; // 0x3d0(0x01)
	bool bStartWithPausedTimer; // 0x3d1(0x01)
	bool bWaitUntilAllPlayersLoadedAutomation; // 0x3d2(0x01)
	char pad_3D3[0x1]; // 0x3d3(0x01)
	float ReadyToTestDelay; // 0x3d4(0x04)
	bool bReadyToTest; // 0x3d8(0x01)
	char pad_3D9[0x3]; // 0x3d9(0x03)
	float ReadyToTestDuration; // 0x3dc(0x04)

	void Tick(float DeltaSeconds); // Function ShooterGame.AresGameAutomation.Tick // (Native|Public) // @ game+0x2cee5e0
	void ReceiveReadyToTest(); // Function ShooterGame.AresGameAutomation.ReceiveReadyToTest // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ReceivePlayerAutomationComplete(struct AAresPlayerAutomation* PlayerAutomation); // Function ShooterGame.AresGameAutomation.ReceivePlayerAutomationComplete // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void PostInitProperties(); // Function ShooterGame.AresGameAutomation.PostInitProperties // (Native|Public) // @ game+0x2d0d510
	bool GetReadyToTest(); // Function ShooterGame.AresGameAutomation.GetReadyToTest // (Final|Native|Public|Const) // @ game+0x2d0d420
	void AuthSetGameToGameplayPhase(); // Function ShooterGame.AresGameAutomation.AuthSetGameToGameplayPhase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	bool AuthPollIsReadyToTest(); // Function ShooterGame.AresGameAutomation.AuthPollIsReadyToTest // (Native|Event|Public|BlueprintEvent) // @ game+0x2d0cdb0
	void AuthPassTest(); // Function ShooterGame.AresGameAutomation.AuthPassTest // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthNotifyPlayersGameAutomationPassed(); // Function ShooterGame.AresGameAutomation.AuthNotifyPlayersGameAutomationPassed // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthLog(struct FString Reason); // Function ShooterGame.AresGameAutomation.AuthLog // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d0cd00
	void AuthFailTest(struct FString Reason); // Function ShooterGame.AresGameAutomation.AuthFailTest // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d0cd00
};

// Class ShooterGame.AresGameEngine
// Size: 0x1030 (Inherited: 0xfe0)
struct UAresGameEngine : UGameEngine {
	struct TMap<struct FString, struct FString> AssetFoldersToCategories; // 0xfe0(0x50)
};

// Class ShooterGame.AresGameEventLog
// Size: 0x118 (Inherited: 0xe8)
struct UAresGameEventLog : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct UWorld* TheWorld; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)
	struct UTelemetrySampler* TelemetrySampler; // 0x100(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x108(0x08)
	bool bEventPostEnabled; // 0x110(0x01)
	char pad_111[0x7]; // 0x111(0x07)

	bool ShouldSampleByMatch(); // Function ShooterGame.AresGameEventLog.ShouldSampleByMatch // (Final|Native|Public|Const) // @ game+0x2d0d6a0
	void SetEventPostEnabled(bool bNewEventPostEnabled); // Function ShooterGame.AresGameEventLog.SetEventPostEnabled // (Final|Native|Public) // @ game+0x2d0d610
	void RecordRoundScoreEvent(); // Function ShooterGame.AresGameEventLog.RecordRoundScoreEvent // (Final|Native|Public) // @ game+0x2d0d5f0
	void RecordPlayerLocationsEvent(); // Function ShooterGame.AresGameEventLog.RecordPlayerLocationsEvent // (Final|Native|Public) // @ game+0x2d0d5d0
	void RecordDamageEvent(struct UDamageResponse* DamageResponse); // Function ShooterGame.AresGameEventLog.RecordDamageEvent // (Final|Native|Public) // @ game+0x2d0d540
	void OnActorSpawned(struct AActor* NewActor); // Function ShooterGame.AresGameEventLog.OnActorSpawned // (Final|Native|Public) // @ game+0x2d0d480
	void AuthRecordPlayerTeleporterUseEvent(struct FName TeleporterName, struct AShooterCharacter* Character); // Function ShooterGame.AresGameEventLog.AuthRecordPlayerTeleporterUseEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x2d0cf20
	void AuthRecordOrbInteractionEvent(struct FName OrbName, struct AShooterCharacter* Collector, struct AActor* Orb); // Function ShooterGame.AresGameEventLog.AuthRecordOrbInteractionEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x2d0d010
	void AuthRecordItemTeleporterUseEvent(struct FName TeleporterName, struct AActor* item); // Function ShooterGame.AresGameEventLog.AuthRecordItemTeleporterUseEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x2d0cf20
	void AuthRecordAscenderUseEvent(struct FName AscenderName, struct AShooterCharacter* Character, float UseDuration); // Function ShooterGame.AresGameEventLog.AuthRecordAscenderUseEvent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x2d0cdf0
};

// Class ShooterGame.AresGameInstance
// Size: 0x2b0 (Inherited: 0x280)
struct UAresGameInstance : UPlatformGameInstance {
	struct UAresServerGameInstance* ServerGameInstanceClass; // 0x280(0x08)
	struct UAresClientGameInstance* ClientGameInstance; // 0x288(0x08)
	struct UAresServerGameInstance* ServerGameInstance; // 0x290(0x08)
	struct UContentIndex* ContentIndexInstance; // 0x298(0x08)
	struct UAresTestLogic* RunningTestLogic; // 0x2a0(0x08)
	char pad_2A8[0x8]; // 0x2a8(0x08)

	void StopBlueprintTest(); // Function ShooterGame.AresGameInstance.StopBlueprintTest // (Final|Native|Public) // @ game+0x1e6e7b0
	bool StartBlueprintTestByName(struct FString& Name, bool bIsServer, char ClientIndex); // Function ShooterGame.AresGameInstance.StartBlueprintTestByName // (Final|Native|Public|HasOutParms) // @ game+0x2d19c90
	struct UAresTestLogic* GetRunningTestLogic(); // Function ShooterGame.AresGameInstance.GetRunningTestLogic // (Final|Native|Public|Const) // @ game+0x2d18d10
	struct UAresGameInstance* GetFromContext(struct UObject* WorldContextObject); // Function ShooterGame.AresGameInstance.GetFromContext // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d18b90
	struct UAresGameInstance* Get(struct UWorld* FromWorld); // Function ShooterGame.AresGameInstance.Get // (Final|Native|Static|Public) // @ game+0x2d18950
};

// Class ShooterGame.GameModeDataAsset
// Size: 0x218 (Inherited: 0x50)
struct UGameModeDataAsset : UAresBasePrimaryDataAsset {
	struct FString DisplayName; // 0x50(0x10)
	struct TArray<enum class EAresTeamRole> TeamRoles; // 0x60(0x10)
	bool bHidesMinimap; // 0x70(0x01)
	bool bAllowsTeamVoice; // 0x71(0x01)
	bool bAllowsMatchTimeouts; // 0x72(0x01)
	enum class EEconomyTypes EconomyType; // 0x73(0x01)
	char pad_74[0x4]; // 0x74(0x04)
	struct TSoftClassPtr<UObject> GameMode; // 0x78(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0xa8(0x30)
	struct TMap<enum class EGameFeatureToggleName, bool> GameFeatureToggleOverrides; // 0xd8(0x50)
	struct TMap<enum class EGameFeatureFloatConfigName, float> GameFeatureFloatOverrides; // 0x128(0x50)
	struct TMap<enum class EGameRuleBoolName, bool> GameRuleBoolOverrides; // 0x178(0x50)
	struct TSet<enum class EGameRuleBoolName> PlayerSettableGameRuleBools; // 0x1c8(0x50)

	bool IsFreeForAll(); // Function ShooterGame.GameModeDataAsset.IsFreeForAll // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d192d0
	struct TArray<struct FSoftObjectPath> GetAssetPathsToPreloadForMatch(struct FString MatchID); // Function ShooterGame.GameModeDataAsset.GetAssetPathsToPreloadForMatch // (Event|Public|BlueprintEvent|Const) // @ game+0x3520f50
	struct FString GetAssetPath(); // Function ShooterGame.GameModeDataAsset.GetAssetPath // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d18b00
};

// Class ShooterGame.GameModeUIData
// Size: 0xc8 (Inherited: 0x90)
struct UGameModeUIData : UBaseContentUIData {
	struct FGameModeMatchDetailsConfig GameModeMatchDetailsConfig; // 0x90(0x18)
	struct FText Duration; // 0xa8(0x18)
	struct UCharacterSelectScreen* CharacterSelectOverride; // 0xc0(0x08)
};

// Class ShooterGame.AresGameplayBuff
// Size: 0x900 (Inherited: 0x8b8)
struct UAresGameplayBuff : UGameplayEffect {
	struct FEmbeddedEffectInfo BuffEffect; // 0x8b8(0x30)
	enum class EBuffEffectContext ContextObject; // 0x8e8(0x01)
	char pad_8E9[0x7]; // 0x8e9(0x07)
	struct UDamageType* DamageType; // 0x8f0(0x08)
	bool bIgnoreAlliedDamageDuringEnemyDamage; // 0x8f8(0x01)
	bool bOnlyAllowOneDamageEventPerTeam; // 0x8f9(0x01)
	enum class EAresTeamTargeting TeamTargeting; // 0x8fa(0x01)
	char pad_8FB[0x5]; // 0x8fb(0x05)

	enum class EAresTeamTargeting GetTeamTargeting(); // Function ShooterGame.AresGameplayBuff.GetTeamTargeting // (Final|Native|Public|Const) // @ game+0x2d18d40
	void ApplyRadialBuff(struct UObject* WorldContextObject, struct UAresGameplayBuff* BuffClass, struct FVector& Origin, float Radius, struct AActor* DamageCauser, struct APawn* InstigatorPawn); // Function ShooterGame.AresGameplayBuff.ApplyRadialBuff // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x2d17d10
};

// Class ShooterGame.AresGameStateBase
// Size: 0x5a8 (Inherited: 0x458)
struct AAresGameStateBase : AGameState {
	char pad_458[0x68]; // 0x458(0x68)
	struct APostProcessVolume* GlobalPostProcessVolume; // 0x4c0(0x08)
	struct TArray<struct APawn*> PlayerClassesInGame; // 0x4c8(0x10)
	struct TArray<struct UCharacterUIData*> PlayerUIDataInGame; // 0x4d8(0x10)
	struct TArray<struct FGuid> DesiredBotCharacters; // 0x4e8(0x10)
	bool bBotDesiredCharactersReady; // 0x4f8(0x01)
	char pad_4F9[0x7]; // 0x4f9(0x07)
	struct AAresGameAutomation* AresGameAutomation; // 0x500(0x08)
	char pad_508[0x20]; // 0x508(0x20)
	bool bShouldPerformanceInstabilityTrackingBeEnabled; // 0x528(0x01)
	char pad_529[0x7]; // 0x529(0x07)
	struct TArray<struct FNetworkLoadedClass> LoadedClasses; // 0x530(0x10)
	struct TMap<struct FName, uint32_t> ThrottledEvents; // 0x540(0x50)
	char pad_590[0x18]; // 0x590(0x18)

	void PlayerControllerDestroyed(struct AActor* PlayerController); // Function ShooterGame.AresGameStateBase.PlayerControllerDestroyed // (Final|Native|Protected) // @ game+0x2d19c00
	void OnRep_BotDesiredCharactersReady(); // Function ShooterGame.AresGameStateBase.OnRep_BotDesiredCharactersReady // (Final|Native|Protected) // @ game+0x2d19be0
	void OnPlayerConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AresGameStateBase.OnPlayerConnectionStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnLocalPlayerConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AresGameStateBase.OnLocalPlayerConnectionStatusChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void NetMulticastReleaseClass(struct FSoftObjectPath Class); // Function ShooterGame.AresGameStateBase.NetMulticastReleaseClass // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x2d19b00
	void NetMulticastLoadClass(struct FSoftObjectPath Class, bool bBlockingLoad); // Function ShooterGame.AresGameStateBase.NetMulticastLoadClass // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x2d199d0
	void MulticastResetForRespawn(struct AShooterCharacter* ShooterCharacter, struct FTransform SpawnTransform); // Function ShooterGame.AresGameStateBase.MulticastResetForRespawn // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults|BlueprintCallable) // @ game+0x2d19880
	struct AAresPlayerStateBase* GetPlayerStateFromSubject(struct FString Subject); // Function ShooterGame.AresGameStateBase.GetPlayerStateFromSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d18c50
	struct APostProcessVolume* GetGlobalPostProcessVolume(); // Function ShooterGame.AresGameStateBase.GetGlobalPostProcessVolume // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d18c20
	struct AAresGameAutomation* GetAutomation(); // Function ShooterGame.AresGameStateBase.GetAutomation // (Final|Native|Public|Const) // @ game+0x2ced360
	struct TArray<struct AAresPlayerStateBase*> GetAresPlayerStates(); // Function ShooterGame.AresGameStateBase.GetAresPlayerStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d18a70
	struct TArray<struct AAresPlayerStateBase*> GetActiveAresPlayerStates(); // Function ShooterGame.AresGameStateBase.GetActiveAresPlayerStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d189e0
	void CheckLoadingCompleted(struct FSoftObjectPath Class); // Function ShooterGame.AresGameStateBase.CheckLoadingCompleted // (Final|Native|Protected|HasDefaults) // @ game+0x2d182a0
	void AuthSetAutomation(struct AAresGameAutomation* NewAutomation); // Function ShooterGame.AresGameStateBase.AuthSetAutomation // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthReleaseNetworkLoadedClass(struct TSoftClassPtr<UObject> Class); // Function ShooterGame.AresGameStateBase.AuthReleaseNetworkLoadedClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d181c0
	void AuthNetworkLoadClass(struct TSoftClassPtr<UObject> Class, bool bBlockingLoad, struct FDelegate& CompletedEvent); // Function ShooterGame.AresGameStateBase.AuthNetworkLoadClass // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d18030
	void AuthAcknowledgeLoadClass(struct AAresPlayerController* Controller, struct FSoftObjectPath Class); // Function ShooterGame.AresGameStateBase.AuthAcknowledgeLoadClass // (Final|Native|Public|HasDefaults) // @ game+0x2d17f10
	void AddPlayerUIDataToGame(struct UCharacterUIData* NewClass); // Function ShooterGame.AresGameStateBase.AddPlayerUIDataToGame // (Final|Native|Public) // @ game+0x2d17b40
	void AddPlayerClassToGame(struct APawn* NewClass); // Function ShooterGame.AresGameStateBase.AddPlayerClassToGame // (Final|Native|Public) // @ game+0x2d17ab0
};

// Class ShooterGame.AresGameViewportClient
// Size: 0x388 (Inherited: 0x380)
struct UAresGameViewportClient : UGameViewportClient {
	struct UWorld* ActiveWorldOverride; // 0x380(0x08)
};

// Class ShooterGame.AresGauntletControllerBase
// Size: 0x60 (Inherited: 0x38)
struct UAresGauntletControllerBase : UGauntletTestController {
	char pad_38[0x28]; // 0x38(0x28)

	void InitStatusHandler(enum class EAresClientGameInstanceInitStatus InitStatus, struct FText ErrorCode); // Function ShooterGame.AresGauntletControllerBase.InitStatusHandler // (Final|Native|Private) // @ game+0x2d191d0
};

// Class ShooterGame.AresGauntletTestResultsManager
// Size: 0x80 (Inherited: 0x30)
struct UAresGauntletTestResultsManager : UObject {
	char pad_30[0x50]; // 0x30(0x50)

	void AddResult(struct FString ControllerName, struct FGauntletTestResult NewResult); // Function ShooterGame.AresGauntletTestResultsManager.AddResult // (Final|Native|Static|Public) // @ game+0x2d17bd0
};

// Class ShooterGame.AresGlobalTransition
// Size: 0x428 (Inherited: 0x400)
struct AAresGlobalTransition : AGameObject {
	struct UMaterialInterface* ReplaceMaterial; // 0x400(0x08)
	struct FName ExcludeTag; // 0x408(0x0c)
	char pad_414[0x4]; // 0x414(0x04)
	struct TArray<struct FStaticActorMaterialMapping> SavedMapping; // 0x418(0x10)
};

// Class ShooterGame.AresHitReactions
// Size: 0x48 (Inherited: 0x30)
struct UAresHitReactions : UObject {
	struct TArray<struct FAresHitReactionEntry> HitReactions; // 0x30(0x10)
	enum class EDirectionFilter DirectionFilter; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	void LookupHitReactionResults(enum class EAresDamageAnimationCategory AnimationCategory, enum class EAresDirectionalDamage DirectionalDamage, enum class EAresRegionalDamage RegionalDamage, enum class EAresDamageCategory DamageCategory, enum class EAresBodySection DamageBodySection, struct FName BoneName, struct UShooterDamageType* DamageType, float DamageAmount, struct TArray<struct FHitReactionResult>& OutHitReactionResults); // Function ShooterGame.AresHitReactions.LookupHitReactionResults // (Final|Native|Public|HasOutParms|Const) // @ game+0x2d19590
	struct FHitReactionResult LookupHitReactionResult(enum class EAresDamageAnimationCategory AnimationCategory, enum class EAresDirectionalDamage DirectionalDamage, enum class EAresRegionalDamage RegionalDamage, enum class EAresDamageCategory DamageCategory, enum class EAresBodySection DamageBodySection, struct FName BoneName, struct UShooterDamageType* DamageType, float DamageAmount); // Function ShooterGame.AresHitReactions.LookupHitReactionResult // (Final|Native|Public|Const) // @ game+0x2d19300
};

// Class ShooterGame.AresHudElement
// Size: 0x58 (Inherited: 0x30)
struct UAresHudElement : UObject {
	struct UCanvas* Canvas; // 0x30(0x08)
	bool bPixelAlignmentEnabled; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	float GlobalAlpha; // 0x3c(0x04)
	struct FAresHudElementRectangle ElementRectangle; // 0x40(0x14)
	bool bElementEnabled; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)

	void OnDraw(float DeltaTime); // Function ShooterGame.AresHudElement.OnDraw // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	struct FVector2D GetTextExtentsWithLineWrap(struct FText& Text, float LineWrapWidth, float VerticalSpaceBetweenLines, enum class EAresHudTextExtentsMode TextExtentsMode, struct FAresHudFontParams& AresHudFontParams); // Function ShooterGame.AresHudElement.GetTextExtentsWithLineWrap // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d18f80
	struct FVector2D GetTextExtents(struct FText& Text, enum class EAresHudTextExtentsMode TextExtentsMode, struct FAresHudFontParams& AresHudFontParams, struct FVector2D& ScaleExtents); // Function ShooterGame.AresHudElement.GetTextExtents // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d18d70
	struct FVector2D DrawTextWithLineWrap(struct FText& Text, float LineWrapWidth, float VerticalSpaceBetweenLines, struct FVector2D& Pos, enum class EAresDrawOrigin DrawOrigin, enum class EAresHudTextExtentsMode TextExtentsModeForDrawOriginAdjustment, struct FAresHudFontParams& AresHudFontParams, struct FLinearColor DrawColor); // Function ShooterGame.AresHudElement.DrawTextWithLineWrap // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d18630
	void DrawText(struct FText& Text, struct FVector2D& Pos, enum class EAresDrawOrigin DrawOrigin, enum class EAresHudTextExtentsMode TextExtentsModeForDrawOriginAdjustment, struct FAresHudFontParams& AresHudFontParams, struct FVector2D ScaleExtents, struct FLinearColor DrawColor); // Function ShooterGame.AresHudElement.DrawText // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d18370
};

// Class ShooterGame.HUDGlobalsDataAsset
// Size: 0x2c0 (Inherited: 0x40)
struct UHUDGlobalsDataAsset : UAresPlatformDataAsset {
	struct TArray<struct TSoftClassPtr<UObject>> OptionsScreenAssets; // 0x40(0x10)
	struct TSoftClassPtr<UObject> InformationalScreenAsset; // 0x50(0x30)
	struct FAresUMGElementAsset ShopScreenAsset; // 0x80(0xb0)
	struct TSoftClassPtr<UObject> MegamapAsset; // 0x130(0x30)
	struct TSoftClassPtr<UObject> ShootingRangeMissionAsset; // 0x160(0x30)
	struct TSoftClassPtr<UObject> MissionSettingsScreenCoordinatorAsset; // 0x190(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapMaterialAsset; // 0x1c0(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapFogMaterialAsset; // 0x1f0(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapVisionMaterialAsset; // 0x220(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapObserverVisionMaterialAsset; // 0x250(0x30)
	struct TSoftObjectPtr<UMaterialInterface> CircularMinimapIconMaterialAsset; // 0x280(0x30)
	struct TArray<struct FAresUMGElementAsset> HUDElementAssets; // 0x2b0(0x10)
};

// Class ShooterGame.AresHUDListener
// Size: 0xf0 (Inherited: 0xe8)
struct UAresHUDListener : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)

	void HandleEquippableRestrictionErrorInEditor(struct AAresEquippable* Equippable, enum class EAresEquippableRestrictionType Restriction); // Function ShooterGame.AresHUDListener.HandleEquippableRestrictionErrorInEditor // (Final|Native|Private) // @ game+0x2d22c60
	void HandleEquippableChanged(struct AAresEquippable* Equippable); // Function ShooterGame.AresHUDListener.HandleEquippableChanged // (Final|Native|Private) // @ game+0x2d22bd0
};

// Class ShooterGame.AresIconButton
// Size: 0xa18 (Inherited: 0xa10)
struct UAresIconButton : UAresActionButton {
	enum class EAresIconButtonSize ButtonSize; // 0xa10(0x01)
	enum class EAresIconButtonState ButtonState; // 0xa11(0x01)
	char pad_A12[0x6]; // 0xa12(0x06)

	void SetOverrides(struct FAresIconButtonOverridesData& OverridesData); // Function ShooterGame.AresIconButton.SetOverrides // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d23990
	void SetButtonState(enum class EAresIconButtonState NewState); // Function ShooterGame.AresIconButton.SetButtonState // (Final|Native|Protected|BlueprintCallable) // @ game+0x2d23880
	void SetButtonSize(enum class EAresIconButtonSize NewButtonSize); // Function ShooterGame.AresIconButton.SetButtonSize // (Final|Native|Protected|BlueprintCallable) // @ game+0x2d23800
	void ResetToDefaults(); // Function ShooterGame.AresIconButton.ResetToDefaults // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d237d0
};

// Class ShooterGame.AresWidgetPropertyComponent
// Size: 0x2d0 (Inherited: 0x2c8)
struct UAresWidgetPropertyComponent : UUserWidget {
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void UnbindVector2DProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindVector2DProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc4bd0
	void UnbindTexture2DProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindTexture2DProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc4a60
	void UnbindTextProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindTextProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc48f0
	void UnbindMaterialInterfaceProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindMaterialInterfaceProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc4780
	void UnbindLinearColorProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindLinearColorProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc4610
	void UnbindIntProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindIntProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc44a0
	void UnbindFloatProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindFloatProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc4330
	void UnbindBoolProperty(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.UnbindBoolProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc41c0
	void SetPropertyComponentActive(bool bActive); // Function ShooterGame.AresWidgetPropertyComponent.SetPropertyComponentActive // (Final|Native|Public|BlueprintCallable) // @ game+0x2dc4050
	bool IsPropertyComponentOnScreen(); // Function ShooterGame.AresWidgetPropertyComponent.IsPropertyComponentOnScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dc38f0
	bool IsPropertyComponentActive(); // Function ShooterGame.AresWidgetPropertyComponent.IsPropertyComponentActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dc38d0
	struct UAresUIPropertyRegistry* GetPropertyRegistry(); // Function ShooterGame.AresWidgetPropertyComponent.GetPropertyRegistry // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2dadf20
	void ComponentInitialize(); // Function ShooterGame.AresWidgetPropertyComponent.ComponentInitialize // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dc33c0
	void ComponentCleanup(); // Function ShooterGame.AresWidgetPropertyComponent.ComponentCleanup // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dc3390
	void BindVector2DProperty(struct FString PropertyID, struct FVector2D DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindVector2DProperty // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2dc31e0
	void BindTexture2DProperty(struct FString PropertyID, struct UTexture2D* DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindTexture2DProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc3030
	void BindTextProperty(struct FString PropertyID, struct FText DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindTextProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc2e50
	void BindMaterialInterfaceProperty(struct FString PropertyID, struct UMaterialInterface* DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindMaterialInterfaceProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc2ca0
	void BindLinearColorProperty(struct FString PropertyID, struct FLinearColor DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindLinearColorProperty // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2dc2ae0
	void BindIntProperty(struct FString PropertyID, int32_t DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindIntProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc2930
	void BindFloatProperty(struct FString PropertyID, float DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindFloatProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc2780
	void BindBoolProperty(struct FString PropertyID, bool DefaultValue, struct FDelegate& Event); // Function ShooterGame.AresWidgetPropertyComponent.BindBoolProperty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dc25c0
};

// Class ShooterGame.AresTouchWidgetComponent
// Size: 0x338 (Inherited: 0x2d0)
struct UAresTouchWidgetComponent : UAresWidgetPropertyComponent {
	char pad_2D0[0x8]; // 0x2d0(0x08)
	bool bHandlesEnabledStateChange; // 0x2d8(0x01)
	bool bHandlesSelectedForEditChange; // 0x2d9(0x01)
	enum class EWidgetEnabledState EnabledState; // 0x2da(0x01)
	bool bSelectedForEdit; // 0x2db(0x01)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct TSoftObjectPtr<UAresTouchWidget> ParentTouchWidgetSoftPtr; // 0x2e0(0x30)
	char pad_310[0x28]; // 0x310(0x28)

	void OnSelectedForEditChanged_Internal(struct FString PropertyID, bool bOldValue, bool bNewValue); // Function ShooterGame.AresTouchWidgetComponent.OnSelectedForEditChanged_Internal // (Final|Native|Private) // @ game+0x2db9e00
	void OnSelectedForEditChanged(bool bNewValue); // Function ShooterGame.AresTouchWidgetComponent.OnSelectedForEditChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x2db9d60
	void OnEnabledStateChanged_Internal(struct FString PropertyID, int32_t OldValue, int32_t NewValue); // Function ShooterGame.AresTouchWidgetComponent.OnEnabledStateChanged_Internal // (Final|Native|Private) // @ game+0x2db9c20
	void OnEnabledStateChanged(enum class EWidgetEnabledState NewValue); // Function ShooterGame.AresTouchWidgetComponent.OnEnabledStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x2db9b90
};

// Class ShooterGame.AresIconButtonComponent
// Size: 0x368 (Inherited: 0x338)
struct UAresIconButtonComponent : UAresTouchWidgetComponent {
	bool bHandlesButtonStateChanged; // 0x338(0x01)
	bool bHandlesCrossedOutChanged; // 0x339(0x01)
	bool bOnlyVisibleWhenCrossedOut; // 0x33a(0x01)
	enum class EAresIconButtonState ButtonState; // 0x33b(0x01)
	bool bCrossedOut; // 0x33c(0x01)
	char pad_33D[0x2b]; // 0x33d(0x2b)

	void OnCrossedOutChanged_Internal(struct FString PropertyID, bool bOldValue, bool bNewValue); // Function ShooterGame.AresIconButtonComponent.OnCrossedOutChanged_Internal // (Final|Native|Private) // @ game+0x2d23090
	void OnCrossedOutChanged(bool bNewValue); // Function ShooterGame.AresIconButtonComponent.OnCrossedOutChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x2d22ff0
	void OnButtonStateChanged_Internal(struct FString PropertyID, int32_t OldValue, int32_t NewValue); // Function ShooterGame.AresIconButtonComponent.OnButtonStateChanged_Internal // (Final|Native|Private) // @ game+0x2d22eb0
	void OnButtonStateChanged(enum class EAresIconButtonState NewValue); // Function ShooterGame.AresIconButtonComponent.OnButtonStateChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x2d22e20
	struct UAresIconButton* GetParentIconButton(); // Function ShooterGame.AresIconButtonComponent.GetParentIconButton // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d22ba0
};

// Class ShooterGame.AresIconButtonStyleAsset
// Size: 0x60 (Inherited: 0x38)
struct UAresIconButtonStyleAsset : UDataAsset {
	struct FAresIconButtonStyle ButtonStyle; // 0x38(0x24)
	char pad_5C[0x4]; // 0x5c(0x04)
};

// Class ShooterGame.ImpactEffectInstance
// Size: 0x170 (Inherited: 0x30)
struct UImpactEffectInstance : UObject {
	struct AAresImpactEffect* PureInstance; // 0x30(0x08)
	struct UWorld* World; // 0x38(0x08)
	bool bIsAlive; // 0x40(0x01)
	bool bInitialized; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	float StartTime; // 0x44(0x04)
	float MinLifespan; // 0x48(0x04)
	bool bVisibleOnStart; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	struct FHitResult HitResult; // 0x50(0x94)
	char pad_E4[0x4]; // 0xe4(0x04)
	struct UParticleSystemComponent* ParticleSystemComponent; // 0xe8(0x08)
	struct UParticleSystem* ParticleSystem; // 0xf0(0x08)
	struct FRotator ParticleRotation; // 0xf8(0x0c)
	float ParticleScale; // 0x104(0x04)
	struct UObject* EffectContext; // 0x108(0x08)
	struct FImpactEffectAudioInfo AudioInfo; // 0x110(0x18)
	struct FImpactEffectDecalInfo DecalInfo; // 0x128(0x48)

	float GetElapsedLifetime(); // Function ShooterGame.ImpactEffectInstance.GetElapsedLifetime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d22b70
};

// Class ShooterGame.ImpactEffectStaticMeshInstance
// Size: 0x178 (Inherited: 0x170)
struct UImpactEffectStaticMeshInstance : UImpactEffectInstance {
	struct UStaticMeshComponent* StaticMeshComponent; // 0x170(0x08)
};

// Class ShooterGame.AresImpactEffectComponent
// Size: 0x290 (Inherited: 0x290)
struct UAresImpactEffectComponent : USceneComponent {

	void TickImpactEffect(struct UImpactEffectInstance* Instance); // Function ShooterGame.AresImpactEffectComponent.TickImpactEffect // (Native|Event|Public|BlueprintEvent) // @ game+0x2d23c50
	void StopImpactEffect(struct UImpactEffectInstance* Instance); // Function ShooterGame.AresImpactEffectComponent.StopImpactEffect // (Native|Event|Public|BlueprintEvent) // @ game+0x2d23bc0
	void StartImpactEffect(struct UImpactEffectInstance* Instance); // Function ShooterGame.AresImpactEffectComponent.StartImpactEffect // (Native|Event|Public|BlueprintEvent) // @ game+0x2d23b30
};

// Class ShooterGame.AresImpactEffect
// Size: 0x660 (Inherited: 0x530)
struct AAresImpactEffect : AEffectContainer {
	struct UImpactEffectInstance* InstanceClass; // 0x530(0x08)
	struct TMap<enum class EAresSurfaceType, struct FAresHitImpactParticle> ImpactParticleMap; // 0x538(0x50)
	struct TMap<enum class EAresSurfaceType, struct FDecalData> ImpactDecalMap; // 0x588(0x50)
	struct FClassInclusionExclusionFilter ValidHitActorClassFilter; // 0x5d8(0x50)
	struct AShooterCharacter* CharacterClass; // 0x628(0x08)
	struct UPhysicalMaterial* FleshPhysicalMaterial; // 0x630(0x08)
	struct UAkAudioEvent* ImpactEffectAudioEvent; // 0x638(0x08)
	float MaxImpactEffectAudioDistance; // 0x640(0x04)
	struct FName AudioExclusionTag; // 0x644(0x0c)
	struct TArray<struct UAresImpactEffectComponent*> ImpactEffectComponents; // 0x650(0x10)
};

// Class ShooterGame.ImpactEffectRemap
// Size: 0x88 (Inherited: 0x38)
struct UImpactEffectRemap : UDataAsset {
	struct TMap<struct AEffectContainer*, struct AAresImpactEffect*> ClassRemaps; // 0x38(0x50)
};

// Class ShooterGame.AresInitGauntletController
// Size: 0x68 (Inherited: 0x60)
struct UAresInitGauntletController : UAresGauntletControllerBase {
	char pad_60[0x8]; // 0x60(0x08)

	void PatchFinished(); // Function ShooterGame.AresInitGauntletController.PatchFinished // (Final|Native|Private) // @ game+0x1e6e7b0
};

// Class ShooterGame.AresInputComponent
// Size: 0x16d0 (Inherited: 0x180)
struct UAresInputComponent : UInputComponent {
	struct AShooterCharacter* ShooterCharacterOwner; // 0x180(0x08)
	struct FAresInputStream CurrentFrameInputStream; // 0x188(0x438)
	struct FAresInputStream RawSubFrameKeyInputStream; // 0x5c0(0x438)
	struct FAresInputStream OrderedSubFrameInputStream; // 0x9f8(0x438)
	struct FAresInputStream UnusedSubFrameInputs; // 0xe30(0x438)
	struct TArray<float> SubFrameMousePositionXDeltas; // 0x1268(0x10)
	struct TArray<float> SubFrameMousePositionYDeltas; // 0x1278(0x10)
	struct FAresInputStream AccumulatedInputStream; // 0x1288(0x438)
	char pad_16C0[0x10]; // 0x16c0(0x10)

	void HandleTriggerSwapUnequip(); // Function ShooterGame.AresInputComponent.HandleTriggerSwapUnequip // (Final|Native|Private) // @ game+0x2d22e00
	void HandleReflexLatencyAnalyzerFeatureToggled(enum class EGameFeatureToggleName Feature, bool bEnabled); // Function ShooterGame.AresInputComponent.HandleReflexLatencyAnalyzerFeatureToggled // (Final|Native|Private) // @ game+0x2d22d30
};

// Class ShooterGame.AresInputMotionComponent
// Size: 0x120 (Inherited: 0xe8)
struct UAresInputMotionComponent : UActorComponent {
	char pad_E8[0x30]; // 0xe8(0x30)
	enum class EAresBoolSettingName GyroEnableSetting; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)

	void SetPaused(bool bInPaused); // Function ShooterGame.AresInputMotionComponent.SetPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x2d23aa0
	void OnGyroEnabledSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresInputMotionComponent.OnGyroEnabledSettingChanged // (Final|Native|Protected) // @ game+0x2d23260
	bool CanActivate(); // Function ShooterGame.AresInputMotionComponent.CanActivate // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2cb53d0
	bool bIsPaused(); // Function ShooterGame.AresInputMotionComponent.bIsPaused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d23ce0
};

// Class ShooterGame.AresInputMotionAimingComponent
// Size: 0x1b0 (Inherited: 0x120)
struct UAresInputMotionAimingComponent : UAresInputMotionComponent {
	float GyroAimSensitivityScalarX; // 0x120(0x04)
	float GyroAimSensitivityScalarY; // 0x124(0x04)
	struct FName WalkAction; // 0x128(0x0c)
	char pad_134[0x4]; // 0x134(0x04)
	struct FMulticastInlineDelegate OnGyroMove; // 0x138(0x10)
	struct FMulticastInlineDelegate OnGyroStop; // 0x148(0x10)
	char pad_158[0x58]; // 0x158(0x58)

	void SetGyroMovementRestricted(bool NewValue); // Function ShooterGame.AresInputMotionAimingComponent.SetGyroMovementRestricted // (Final|Native|Public|BlueprintCallable) // @ game+0x2d23900
	void OnGyroFilteringMinCutoffSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresInputMotionAimingComponent.OnGyroFilteringMinCutoffSettingChanged // (Final|Native|Public) // @ game+0x2d236c0
	void OnGyroFilteringEnabledSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresInputMotionAimingComponent.OnGyroFilteringEnabledSettingChanged // (Final|Native|Public) // @ game+0x2d235a0
	void OnGyroFilteringDeltaCutoffSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresInputMotionAimingComponent.OnGyroFilteringDeltaCutoffSettingChanged // (Final|Native|Public) // @ game+0x2d23490
	void OnGyroFilteringCutoffSlopeSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresInputMotionAimingComponent.OnGyroFilteringCutoffSlopeSettingChanged // (Final|Native|Public) // @ game+0x2d23380
};

// Class ShooterGame.AresInputDebugHistory
// Size: 0x4e0 (Inherited: 0x30)
struct UAresInputDebugHistory : UObject {
	char pad_30[0x4b0]; // 0x30(0x4b0)
};

// Class ShooterGame.AresInputStateComponent
// Size: 0xb08 (Inherited: 0xe8)
struct UAresInputStateComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct FMulticastInlineDelegate OnInputStateChanged; // 0x100(0x10)
	char pad_110[0x28]; // 0x110(0x28)
	bool bInputAimVectorIsValid; // 0x138(0x01)
	char pad_139[0x1f]; // 0x139(0x1f)
	struct AShooterCharacter* ShooterCharacterOwner; // 0x158(0x08)
	char pad_160[0xa0]; // 0x160(0xa0)
	struct FVector_NetQuantizeNormal CurrentInputAimVector; // 0x200(0x0c)
	char pad_20C[0x4]; // 0x20c(0x04)
	struct AAresEquippable* CurrentEquippableTarget; // 0x210(0x08)
	struct AAresEquippable* LastClientPredictedEquippable; // 0x218(0x08)
	int32_t ClientAcknowledgedCorrectionIndex; // 0x220(0x04)
	enum class EAresInputState CurrentEquippableInputStates[0xf]; // 0x224(0x0f)
	enum class EAresInputState CurrentActivationInputStates[0x10]; // 0x233(0x10)
	enum class EAresInputState CurrentMovementInputStates; // 0x243(0x01)
	enum class EAresInputState CurrentInteractableUseStates[0x2]; // 0x244(0x02)
	char pad_246[0x2]; // 0x246(0x02)
	float LastStartInteractableUseInputTime[0x2]; // 0x248(0x08)
	float ViewRotationAbsPitchLimitDegrees; // 0x250(0x04)
	char pad_254[0x1c]; // 0x254(0x1c)
	struct FAresInputStream InputStreamPendingLocalProcessing; // 0x270(0x438)
	struct FAresInputStream InputStreamPendingSerialize; // 0x6a8(0x438)
	char pad_AE0[0x10]; // 0xae0(0x10)
	struct UAresInputDebugHistory* DebugHistory; // 0xaf0(0x08)
	char pad_AF8[0x10]; // 0xaf8(0x10)

	void OnEquippableChanged(struct AAresEquippable* Equippable); // Function ShooterGame.AresInputStateComponent.OnEquippableChanged // (Final|Native|Private) // @ game+0x2d231d0
	void ClientInternalDebugUpdateEventStatus(int32_t EventRangeStart, int32_t EventRangeEndInclusive, enum class EAresInputEventDebugStatus Status); // Function ShooterGame.AresInputStateComponent.ClientInternalDebugUpdateEventStatus // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x2d22a60
	void AuthOnOwnerConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.AresInputStateComponent.AuthOnOwnerConnectionStatusChanged // (Final|Native|Public) // @ game+0x2cb4c70
	void AuthHandleControllerChanged(struct AController* NewController); // Function ShooterGame.AresInputStateComponent.AuthHandleControllerChanged // (Final|Native|Public) // @ game+0x2cb4be0
};

// Class ShooterGame.AresInventory
// Size: 0x300 (Inherited: 0xe8)
struct UAresInventory : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FVector DropOffset; // 0xf0(0x0c)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct FMulticastInlineDelegate AuthOnInventoryTransaction; // 0x100(0x10)
	struct FMulticastInlineDelegate OnEquippableEquipped; // 0x110(0x10)
	struct FMulticastInlineDelegate OnEquippableUnequipped; // 0x120(0x10)
	struct FMulticastInlineDelegate OnEquippableChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnEquippableRestrictionError; // 0x140(0x10)
	struct FMulticastInlineDelegate OnItemsChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnAuthTryPickup; // 0x160(0x10)
	char pad_170[0x18]; // 0x170(0x18)
	struct UItemSlot* ItemSlots[0x10]; // 0x188(0x80)
	struct TArray<struct AAresItem*> ItemsTrashedThisRound; // 0x208(0x10)
	struct TArray<struct AAresEquippable*> LastEquippables; // 0x218(0x10)
	enum class EAresItemSlot LatestDesiredEquippableSlot; // 0x228(0x01)
	char pad_229[0x7]; // 0x229(0x07)
	struct AAresEquippable* DesiredEquippable; // 0x230(0x08)
	struct AAresEquippable* CurrentEquippable; // 0x238(0x08)
	bool bInitialEquippableChanged; // 0x240(0x01)
	char pad_241[0x17]; // 0x241(0x17)
	struct FPendingEquippableChange EquippableChange; // 0x258(0x18)
	struct TArray<struct FPendingEquippableChange> PendingEquippableChanges; // 0x270(0x10)
	float DesiredEquippableStartTime; // 0x280(0x04)
	float LastCycleEquippableTimestamp; // 0x284(0x04)
	struct TArray<struct USlotModifierComponent*> SlotModifiers; // 0x288(0x10)
	struct AShooterCharacter* ShooterCharacterOwner; // 0x298(0x08)
	int32_t OwningClientCurrentCorrectionIndex; // 0x2a0(0x04)
	enum class EServerCorrectionState AuthCorrectionState; // 0x2a4(0x01)
	char pad_2A5[0x3]; // 0x2a5(0x03)
	float DisagreementTimeStamp; // 0x2a8(0x04)
	float LastPendingReplicationWarning; // 0x2ac(0x04)
	float DisagreementGracePeriodDuration; // 0x2b0(0x04)
	bool bInitialServerCorrectionSent; // 0x2b4(0x01)
	bool bInitialServerCorrectionProcessed; // 0x2b5(0x01)
	char pad_2B6[0x2]; // 0x2b6(0x02)
	float bNeedsEquipWeaponAfterRespawn; // 0x2b8(0x04)
	bool bIsReplacingEquippableWithPickup; // 0x2bc(0x01)
	char pad_2BD[0xb]; // 0x2bd(0x0b)
	struct FInventoryServerCorrectRepVariables AuthServerCorrectRepVariables; // 0x2c8(0x10)
	struct TArray<struct FEquipDebugRecord> EquipDebugRecordHistory; // 0x2d8(0x10)
	struct TArray<struct AAresItem*> DroppedItems; // 0x2e8(0x10)
	enum class EAresItemSlot CycleEquippableSlotOverride; // 0x2f8(0x01)
	bool bIsSuppressible; // 0x2f9(0x01)
	enum class EEquipSpeed SuppressedUnequipSpeed; // 0x2fa(0x01)
	enum class EStorageClashBehavior StorageClashBehavior; // 0x2fb(0x01)
	char pad_2FC[0x4]; // 0x2fc(0x04)

	void UpdatePendingEquippableChange(float Timestamp); // Function ShooterGame.AresInventory.UpdatePendingEquippableChange // (Final|Native|Private) // @ game+0x2d2ea50
	bool TryEquipSpecificEquippable(struct AAresEquippable* Equippable, enum class EEquipSource EquipSource, bool bSkipRestrictions); // Function ShooterGame.AresInventory.TryEquipSpecificEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2e940
	bool TryAutoEquipNextWeapon(enum class EEquipSpeed EquipSpeed, enum class EEquipSource EquipSource); // Function ShooterGame.AresInventory.TryAutoEquipNextWeapon // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2e870
	bool SlotCompatibilityIsModified(enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.SlotCompatibilityIsModified // (Final|Native|Public) // @ game+0x2d2e7e0
	void SetIsReplacingEquippableWithPickup(bool bIsReplacing); // Function ShooterGame.AresInventory.SetIsReplacingEquippableWithPickup // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2e750
	void ServerRequestCorrection(int32_t ClientCorrectionIndex); // Function ShooterGame.AresInventory.ServerRequestCorrection // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d2e6c0
	void PossessedBy(struct AController* Controller); // Function ShooterGame.AresInventory.PossessedBy // (Final|Native|Public) // @ game+0x2d2e630
	void OverrideEquipSpeed(enum class EEquipSpeed EquipSpeed); // Function ShooterGame.AresInventory.OverrideEquipSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2e5b0
	void OnUnequipCurrentEquippableChanged(enum class EAresInputState InputState); // Function ShooterGame.AresInventory.OnUnequipCurrentEquippableChanged // (Final|Native|Public) // @ game+0x2d2e530
	void OnRep_ItemSlots(); // Function ShooterGame.AresInventory.OnRep_ItemSlots // (Final|Native|Public) // @ game+0x2d2e510
	void OnRep_EquippableChange(); // Function ShooterGame.AresInventory.OnRep_EquippableChange // (Final|Native|Private) // @ game+0x2d2e4f0
	void OnRep_AuthServerCorrectRepVariables(); // Function ShooterGame.AresInventory.OnRep_AuthServerCorrectRepVariables // (Final|Native|Private) // @ game+0x2d2e4d0
	void OnPrevEquippableInput(); // Function ShooterGame.AresInventory.OnPrevEquippableInput // (Final|Native|Public) // @ game+0x2d2e4b0
	void OnNextEquippableInput(); // Function ShooterGame.AresInventory.OnNextEquippableInput // (Final|Native|Public) // @ game+0x2d2e490
	void OnItemSlotChanged(); // Function ShooterGame.AresInventory.OnItemSlotChanged // (Final|Native|Public) // @ game+0x2d2e470
	void OnInputStateChanged(enum class EAresEquippableInput Input, enum class EAresInputState NewInputState, float InputTimestamp, float SubTickMovementTimestamp); // Function ShooterGame.AresInventory.OnInputStateChanged // (Final|Native|Public) // @ game+0x2d2e310
	void OnEquippableDropChanged(struct AAresEquippable* Equippable); // Function ShooterGame.AresInventory.OnEquippableDropChanged // (Final|Native|Public) // @ game+0x2d2e280
	void OnEquipLastUsedInput(); // Function ShooterGame.AresInventory.OnEquipLastUsedInput // (Final|Native|Public) // @ game+0x2d2e260
	void OnDroppedEquippableOwnerChanged(struct AAresItem* item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AresInventory.OnDroppedEquippableOwnerChanged // (Final|Native|Private) // @ game+0x2d2e150
	void OnDroppedEquippableDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.AresInventory.OnDroppedEquippableDestroyed // (Final|Native|Private) // @ game+0x2d2e0c0
	void OnDropEquippableInput(); // Function ShooterGame.AresInventory.OnDropEquippableInput // (Final|Native|Public) // @ game+0x2d2e0a0
	void OnAuthInventoryTransaction(enum class EInventoryTransaction Transaction, struct UAresInventory* Inventory, struct AAresItem* item); // Function ShooterGame.AresInventory.OnAuthInventoryTransaction // (Final|Native|Private) // @ game+0x2d2df90
	void OnActivationInputStateChanged(enum class EAresItemSlot ItemSlot, char IndexInItemSlot, enum class EAresInputState NewInputState, enum class EAresActivationInputType ActivationType, float InputTimestamp); // Function ShooterGame.AresInventory.OnActivationInputStateChanged // (Final|Native|Public) // @ game+0x2d2ddf0
	void MulticastCurrentEquippableForServerOwnedActors(struct AAresEquippable* NewCurrentEquippable); // Function ShooterGame.AresInventory.MulticastCurrentEquippableForServerOwnedActors // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2d2dd60
	bool IsReplacingEquippableWithPickup(); // Function ShooterGame.AresInventory.IsReplacingEquippableWithPickup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2dd40
	bool IsDesiredEquippable(struct AAresEquippable* Equippable); // Function ShooterGame.AresInventory.IsDesiredEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2dca0
	bool IsCurrentEquippable(struct AAresEquippable* Equippable); // Function ShooterGame.AresInventory.IsCurrentEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2dc00
	bool HasSecondaryEquippable(); // Function ShooterGame.AresInventory.HasSecondaryEquippable // (Final|Native|Public|Const) // @ game+0x2d2dbd0
	bool HasPrimaryEquippable(); // Function ShooterGame.AresInventory.HasPrimaryEquippable // (Final|Native|Public|Const) // @ game+0x2d2dba0
	bool HasItemByClass(struct AAresItem* ItemClass); // Function ShooterGame.AresInventory.HasItemByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2db00
	struct AAresItem* GetTrashedItemForSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresInventory.GetTrashedItemForSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2da70
	int32_t GetTotalLoadoutValue(); // Function ShooterGame.AresInventory.GetTotalLoadoutValue // (Final|Native|Public|Const) // @ game+0x2d2da40
	struct AShooterCharacter* GetShooterCharacterOwner(); // Function ShooterGame.AresInventory.GetShooterCharacterOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec580
	int32_t GetNumChargesForEquippable(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresInventory.GetNumChargesForEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2d9a0
	struct AAresEquippable* GetNextEquippableOnUnequip(struct AAresEquippable* Equippable, bool bIgnoreAutoEquipSettings, bool bFullEquipSlotStorageCheck); // Function ShooterGame.AresInventory.GetNextEquippableOnUnequip // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d880
	struct AAresEquippable* GetLastEquippable(); // Function ShooterGame.AresInventory.GetLastEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d850
	int32_t GetItemSlotTotal(enum class EAresItemSlot ItemSlot, bool bIncludeStorageSlots); // Function ShooterGame.AresInventory.GetItemSlotTotal // (Final|Native|Public|Const) // @ game+0x2d2d6f0
	int32_t GetItemSlotLimit(enum class EAresItemSlot ItemSlot, bool bIncludeStorageSlots); // Function ShooterGame.AresInventory.GetItemSlotLimit // (Final|Native|Public|Const) // @ game+0x2d2d620
	struct TArray<struct AAresItem*> GetItems(); // Function ShooterGame.AresInventory.GetItems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d7c0
	int32_t GetItemQuantityByClass(struct AAresItem* ItemClass); // Function ShooterGame.AresInventory.GetItemQuantityByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d580
	struct AAresItem* GetFirstItemFromSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresInventory.GetFirstItemFromSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d4f0
	struct AAresEquippable* GetFirstEquippableFromSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresInventory.GetFirstEquippableFromSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d460
	struct TArray<struct AAresEquippable*> GetEquippables(); // Function ShooterGame.AresInventory.GetEquippables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d3d0
	struct AAresEquippable* GetEquippableByClass(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresInventory.GetEquippableByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d330
	struct AAresEquippable* GetDesiredEquippable(); // Function ShooterGame.AresInventory.GetDesiredEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced300
	struct AAresEquippable* GetCurrentEquippable(); // Function ShooterGame.AresInventory.GetCurrentEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec550
	struct TArray<enum class EAresItemSlot> GetCompatibleSlotTypesForItem(enum class EAresItemSlot ItemSlotType); // Function ShooterGame.AresInventory.GetCompatibleSlotTypesForItem // (Final|Native|Public|Const) // @ game+0x2d2d250
	struct TArray<enum class EAresItemSlot> GetCompatibleItemTypesForSlot(enum class EAresItemSlot SlotType); // Function ShooterGame.AresInventory.GetCompatibleItemTypesForSlot // (Final|Native|Public|Const) // @ game+0x2d2d170
	enum class EAresItemSlot GetAssociatedStorageSlot(enum class EAresItemSlot EquipSlot); // Function ShooterGame.AresInventory.GetAssociatedStorageSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d0e0
	enum class EAresItemSlot GetAssociatedEquipSlot(enum class EAresItemSlot StorageSlot); // Function ShooterGame.AresInventory.GetAssociatedEquipSlot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2d050
	struct TArray<struct AAresEquippable*> GetAllEquippablesWithCharges(); // Function ShooterGame.AresInventory.GetAllEquippablesWithCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2cfc0
	void ForceUnequipCurrentEquippableInput(); // Function ShooterGame.AresInventory.ForceUnequipCurrentEquippableInput // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2cfa0
	void ForceEquippableDropInput(struct AAresEquippable* EquippableToDrop); // Function ShooterGame.AresInventory.ForceEquippableDropInput // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2cf10
	void ForceActivateSlotInput(enum class EAresItemSlot ItemSlot, enum class EAresActivationInputType ActivationType); // Function ShooterGame.AresInventory.ForceActivateSlotInput // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2ce40
	void ForceActivatePreviousEquippableInput(struct UObject* WorldContextObject, struct FLatentActionInfo LatentInfo); // Function ShooterGame.AresInventory.ForceActivatePreviousEquippableInput // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2cd40
	void ForceActivateEquippableInput(struct AAresEquippable* Equippable, enum class EAresActivationInputType ActivationType); // Function ShooterGame.AresInventory.ForceActivateEquippableInput // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2cc70
	struct AAresItem* FindPreviousItemBySlot(enum class EAresItemSlot WhichSlot, struct AAresItem* StartingItem); // Function ShooterGame.AresInventory.FindPreviousItemBySlot // (Final|Native|Public|Const) // @ game+0x2d2cba0
	struct AAresItem* FindPreviousItem(struct AAresItem* StartItem, enum class EItemWrap Wrapped); // Function ShooterGame.AresInventory.FindPreviousItem // (Final|Native|Public|Const) // @ game+0x2d2cad0
	struct AAresEquippable* FindPreviousEquippableBySlot(enum class EAresItemSlot WhichSlot, struct AAresEquippable* StartingEquippable); // Function ShooterGame.AresInventory.FindPreviousEquippableBySlot // (Final|Native|Public|Const) // @ game+0x2d2ca00
	struct AAresEquippable* FindPreviousEquippable(struct AAresEquippable* StartingEquippable, enum class EItemWrap Wrapped); // Function ShooterGame.AresInventory.FindPreviousEquippable // (Final|Native|Public|Const) // @ game+0x2d2c930
	struct AAresItem* FindNextItemBySlot(enum class EAresItemSlot WhichSlot, struct AAresItem* StartingItem); // Function ShooterGame.AresInventory.FindNextItemBySlot // (Final|Native|Public|Const) // @ game+0x2d2c860
	struct AAresItem* FindNextItem(struct AAresItem* StartItem, enum class EItemWrap Wrapped, bool bIncludeNonRotateables); // Function ShooterGame.AresInventory.FindNextItem // (Final|Native|Public|Const) // @ game+0x2d2c750
	struct AAresEquippable* FindNextEquippableBySlot(enum class EAresItemSlot WhichSlot, struct AAresEquippable* StartingEquippable); // Function ShooterGame.AresInventory.FindNextEquippableBySlot // (Final|Native|Public|Const) // @ game+0x2d2c680
	struct AAresEquippable* FindNextEquippable(struct AAresEquippable* StartingEquippable, enum class EItemWrap Wrapped); // Function ShooterGame.AresInventory.FindNextEquippable // (Final|Native|Public|Const) // @ game+0x2d2c5b0
	struct AAresEquippable* FindMostRecentEquippable(struct AAresEquippable* StartingItem, bool bIgnoreCurrentEquippable, bool bOnlyWithResources); // Function ShooterGame.AresInventory.FindMostRecentEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2c490
	struct TArray<enum class EAresItemSlot> FindItemSlotTypes(struct AAresItem* ItemClass); // Function ShooterGame.AresInventory.FindItemSlotTypes // (Final|Native|Public|Const) // @ game+0x2d2c3a0
	enum class EAresItemSlot FindItemSlotType(struct AAresItem* item); // Function ShooterGame.AresInventory.FindItemSlotType // (Final|Native|Public|Const) // @ game+0x2d2c300
	struct UItemSlot* FindItemSlot(struct AAresItem* item); // Function ShooterGame.AresInventory.FindItemSlot // (Final|Native|Public|Const) // @ game+0x2d2c260
	struct AAresItem* FindItemBySlotAndIndex(enum class EAresItemSlot WhichSlot, int32_t Index); // Function ShooterGame.AresInventory.FindItemBySlotAndIndex // (Final|Native|Public|Const) // @ game+0x2d2c190
	struct AAresItem* FindItemBySlot(enum class EAresItemSlot WhichSlot); // Function ShooterGame.AresInventory.FindItemBySlot // (Final|Native|Public|Const) // @ game+0x2d2c100
	struct AAresItem* FindItemByClass(struct AAresItem* ItemClass, enum class EAresItemSlot InSlot); // Function ShooterGame.AresInventory.FindItemByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2c030
	struct AAresEquippable* FindEquippableByClass(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresInventory.FindEquippableByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2bf90
	struct AAresItem* FindBestReplacementCandidate(struct AAresItem* item, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.FindBestReplacementCandidate // (Final|Native|Public|Const) // @ game+0x2d2bec0
	void CycleEquippable(bool bPrevious); // Function ShooterGame.AresInventory.CycleEquippable // (Final|Native|Public) // @ game+0x2d2be30
	void ClientOnEquippableAdded(struct AAresEquippable* NewEquippable); // Function ShooterGame.AresInventory.ClientOnEquippableAdded // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d2bda0
	void ClientHandleEquippableDisagreement(struct AAresEquippable* Equippable, int32_t CorrectionIndex); // Function ShooterGame.AresInventory.ClientHandleEquippableDisagreement // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x2d2bcc0
	bool CanAddItemByClass(struct AAresItem* WhichClass, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.CanAddItemByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2bbf0
	bool CanAddItem(struct AAresItem* WhichItem); // Function ShooterGame.AresInventory.CanAddItem // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2bb50
	bool AuthValidateAndAddItem(struct AAresItem* item, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.AuthValidateAndAddItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2ba40
	void AuthTryTransferWeaponFromStorage(enum class EAresItemSlot EquippableSlot); // Function ShooterGame.AresInventory.AuthTryTransferWeaponFromStorage // (Final|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void AuthTransferValidItem(struct UAresInventory* TargetInventory, struct AAresItem* item); // Function ShooterGame.AresInventory.AuthTransferValidItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cc3bd0
	bool AuthStoreEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.AresInventory.AuthStoreEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b4a0
	void AuthRemoveSlotModifier(struct USlotModifierComponent* SlotModifier); // Function ShooterGame.AresInventory.AuthRemoveSlotModifier // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	bool AuthRemoveItem(struct AAresItem* ItemToRemove, enum class EInventoryTransaction TransactionType); // Function ShooterGame.AresInventory.AuthRemoveItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b970
	void AuthRemoveAllEquippablesByClass(struct AAresEquippable* EquippableClass, enum class EInventoryTransaction TransactionType); // Function ShooterGame.AresInventory.AuthRemoveAllEquippablesByClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d22c60
	bool AuthRecoverTrashedItemForSlot(enum class EAresItemSlot Slot); // Function ShooterGame.AresInventory.AuthRecoverTrashedItemForSlot // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b8e0
	struct AAresEquippable* AuthPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.AresInventory.AuthPickupEquippable // (Final|Native|Public) // @ game+0x2d2b840
	bool AuthIsInitialServerCorrectionProcessed(); // Function ShooterGame.AresInventory.AuthIsInitialServerCorrectionProcessed // (Final|Native|Public|Const) // @ game+0x2d2b810
	struct TArray<struct AAresItem*> AuthGetDroppedItems(); // Function ShooterGame.AresInventory.AuthGetDroppedItems // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b780
	void AuthForceDesiredEquippable(struct AAresEquippable* Equippable, enum class EEquipSpeed Speed, enum class EEquipSource EquipSource); // Function ShooterGame.AresInventory.AuthForceDesiredEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4c70
	void AuthEquipLastEquippedWeapon(); // Function ShooterGame.AresInventory.AuthEquipLastEquippedWeapon // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthEquipFirstEquippedWeapon(enum class EEquipSpeed Speed, bool bSkipCurrentEquippable, bool bWithAmmo); // Function ShooterGame.AresInventory.AuthEquipFirstEquippedWeapon // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b660
	bool AuthDropEquippableWithDirection(struct AAresEquippable* TargetEquippable, struct FRotator DropRotation, float SpeedScale); // Function ShooterGame.AresInventory.AuthDropEquippableWithDirection // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d2b540
	bool AuthDropEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.AresInventory.AuthDropEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b4a0
	void AuthDestroyInventory(); // Function ShooterGame.AresInventory.AuthDestroyInventory // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	struct AAresItem* AuthCreateAndAddItem(struct AAresItem* ItemClass, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.AuthCreateAndAddItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b2f0
	struct AAresEquippable* AuthCreateAndAddEquippable(struct AAresEquippable* EquippableClass); // Function ShooterGame.AresInventory.AuthCreateAndAddEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b400
	void AuthAddValidItem(struct AAresItem* item, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.AuthAddValidItem // (Final|Native|Public) // @ game+0x2cb4c70
	struct USlotModifierComponent* AuthAddSlotModifier(struct UObject* Owner, enum class EAresItemSlot TargetSlot, enum class EAresItemSlot AddedCompatibility); // Function ShooterGame.AresInventory.AuthAddSlotModifier // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2b2f0
	struct AAresItem* AddExistingItem(struct AAresItem* TargetItem, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot); // Function ShooterGame.AresInventory.AddExistingItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b2f0
};

// Class ShooterGame.AresJoinGameGauntletControllerBase
// Size: 0x130 (Inherited: 0x60)
struct UAresJoinGameGauntletControllerBase : UAresGauntletControllerBase {
	struct UMemoryPerfStatsReport* MemoryReportStatsReport; // 0x60(0x08)
	char pad_68[0xc8]; // 0x68(0xc8)

	void TestJoinGame(enum class EGameFlowStateType NewGameStateType); // Function ShooterGame.AresJoinGameGauntletControllerBase.TestJoinGame // (Final|Native|Public) // @ game+0x2cedcd0
	void StartCustomGame(); // Function ShooterGame.AresJoinGameGauntletControllerBase.StartCustomGame // (Native|Protected) // @ game+0x2d36760
	void SetGameMode(); // Function ShooterGame.AresJoinGameGauntletControllerBase.SetGameMode // (Native|Protected) // @ game+0x2d36680
	void SendMemoryTelemetry(struct FString TestScenarioName); // Function ShooterGame.AresJoinGameGauntletControllerBase.SendMemoryTelemetry // (Final|Native|Protected) // @ game+0x1e6e9a0
	void OnTestSuccess(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnTestSuccess // (Native|Protected) // @ game+0x2d36450
	void OnStartCustomGameSuccess(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnStartCustomGameSuccess // (Native|Protected) // @ game+0x2d36420
	void OnStartCustomGameError(enum class EPartyErrorEnum PartyErrorEnum); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnStartCustomGameError // (Native|Protected) // @ game+0x2d36390
	void OnLockCharacterFailure(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnLockCharacterFailure // (Native|Protected) // @ game+0x2d36360
	void OnCustomGameDisassociateSuccess(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnCustomGameDisassociateSuccess // (Native|Protected) // @ game+0x2d36330
	void OnConvertCustomGameSuccess(); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnConvertCustomGameSuccess // (Native|Protected) // @ game+0x1e6eaa0
	void OnConvertCustomGameError(enum class EPartyErrorEnum PartyErrorEnum); // Function ShooterGame.AresJoinGameGauntletControllerBase.OnConvertCustomGameError // (Native|Protected) // @ game+0x2d362a0
	struct FString GenerateMemreportCommand(); // Function ShooterGame.AresJoinGameGauntletControllerBase.GenerateMemreportCommand // (Final|Native|Protected) // @ game+0x2d35aa0
	void GenerateMemreport(); // Function ShooterGame.AresJoinGameGauntletControllerBase.GenerateMemreport // (Final|Native|Protected) // @ game+0x1e6e7b0
	void DisassociateGame(); // Function ShooterGame.AresJoinGameGauntletControllerBase.DisassociateGame // (Native|Protected) // @ game+0x2d35a70
	void CloseGame(); // Function ShooterGame.AresJoinGameGauntletControllerBase.CloseGame // (Native|Protected) // @ game+0x2d35880
};

// Class ShooterGame.AresJoinGameGauntletController
// Size: 0x130 (Inherited: 0x130)
struct UAresJoinGameGauntletController : UAresJoinGameGauntletControllerBase {
};

// Class ShooterGame.AresListView
// Size: 0x6f0 (Inherited: 0x148)
struct UAresListView : UTableViewBase {
	float ItemHeight; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct TArray<struct UObject*> Items; // 0x150(0x10)
	enum class ESelectionMode SelectionMode; // 0x160(0x01)
	char pad_161[0x3]; // 0x161(0x03)
	struct FDelegate OnGenerateRowEvent; // 0x164(0x14)
	struct FScrollBarStyle WidgetBarStyle; // 0x178(0x518)
	enum class ESlateVisibility ScrollBarVisibility; // 0x690(0x01)
	char pad_691[0x3]; // 0x691(0x03)
	struct FVector2D ScrollbarThickness; // 0x694(0x08)
	bool AlwaysShowScrollbar; // 0x69c(0x01)
	char pad_69D[0x3]; // 0x69d(0x03)
	struct FVector2D HeaderSpacerSize; // 0x6a0(0x08)
	struct FVector2D FooterSpacerSize; // 0x6a8(0x08)
	char pad_6B0[0x40]; // 0x6b0(0x40)

	void SetHeaderSpacerSize(struct FVector2D NewSize); // Function ShooterGame.AresListView.SetHeaderSpacerSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d366b0
	void SetFooterSpacerSize(struct FVector2D NewSize); // Function ShooterGame.AresListView.SetFooterSpacerSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d36600
	void ScrollToTop(); // Function ShooterGame.AresListView.ScrollToTop // (Final|Native|Public|BlueprintCallable) // @ game+0x2d365e0
	void ScrollToBottom(); // Function ShooterGame.AresListView.ScrollToBottom // (Final|Native|Public|BlueprintCallable) // @ game+0x2d365c0
	void RequestScrollIntoView(struct UObject* ItemToView); // Function ShooterGame.AresListView.RequestScrollIntoView // (Final|Native|Public|BlueprintCallable) // @ game+0x2d36530
	void RequestListRefresh(); // Function ShooterGame.AresListView.RequestListRefresh // (Final|Native|Public|BlueprintCallable) // @ game+0x2d36510
	bool IsScrolledBottom(); // Function ShooterGame.AresListView.IsScrolledBottom // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d36080
};

// Class ShooterGame.AresLocalizationBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresLocalizationBlueprintLibrary : UBlueprintFunctionLibrary {

	void LocalizedStringToFloat(struct FString inString, float& OutConvertedFloat, bool& OutIsValid); // Function ShooterGame.AresLocalizationBlueprintLibrary.LocalizedStringToFloat // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2d360b0
	struct FString GetCurrentCultureName(); // Function ShooterGame.AresLocalizationBlueprintLibrary.GetCurrentCultureName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d35de0
	struct TMap<struct FString, struct FString> GetAllAvailableCultures(); // Function ShooterGame.AresLocalizationBlueprintLibrary.GetAllAvailableCultures // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d35b30
	void DateTime_UTCToLocal(struct FDateTime& LocalDateTime, struct FTimespan& DSTOffset, struct FDateTime& UTCDateTime); // Function ShooterGame.AresLocalizationBlueprintLibrary.DateTime_UTCToLocal // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d35950
	struct FText AsTimeZoneTime_DateTime(struct FDateTime& InDateTime, enum class EAresDateTimeStyle TimeStyle, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d353d0
	struct FText AsTimeZoneDateTime_DateTime_Skeleton(struct FDateTime& InDateTime, struct FText Skeleton, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneDateTime_DateTime_Skeleton // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d350b0
	struct FText AsTimeZoneDateTime_DateTime_Pattern(struct FDateTime& InDateTime, struct FText Pattern, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneDateTime_DateTime_Pattern // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d34f10
	struct FText AsTimeZoneDateTime_DateTime(struct FDateTime& InDateTime, enum class EAresDateTimeStyle DateStyle, enum class EAresDateTimeStyle TimeStyle, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d34d30
	struct FText AsTimeZoneDate_DateTime(struct FDateTime& InDateTime, enum class EAresDateTimeStyle DateStyle, struct FString InTimeZone); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTimeZoneDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d35250
	struct FText AsTime_DateTime(struct FDateTime& In, enum class EAresDateTimeStyle TimeStyle); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d35550
	struct FText AsDateTime_DateTime_Skeleton(struct FDateTime& InDateTime, struct FText Skeleton); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsDateTime_DateTime_Skeleton // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d34ad0
	struct FText AsDateTime_DateTime_Pattern(struct FDateTime& InDateTime, struct FText Pattern); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsDateTime_DateTime_Pattern // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d34980
	struct FText AsDateTime_DateTime(struct FDateTime& In, enum class EAresDateTimeStyle DateStyle, enum class EAresDateTimeStyle TimeStyle); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsDateTime_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d34830
	struct FText AsDate_DateTime(struct FDateTime& InDateTime, enum class EAresDateTimeStyle DateStyle); // Function ShooterGame.AresLocalizationBlueprintLibrary.AsDate_DateTime // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2d34c20
};

// Class ShooterGame.AresManifestExportInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresManifestExportInterface : UInterface {
};

// Class ShooterGame.MapUIData
// Size: 0xc0 (Inherited: 0x90)
struct UMapUIData : UBaseContentUIData {
	float XScalarToAdd; // 0x90(0x04)
	float XMultiplier; // 0x94(0x04)
	float YScalarToAdd; // 0x98(0x04)
	float YMultiplier; // 0x9c(0x04)
	struct UTexture* ListViewIcon; // 0xa0(0x08)
	struct FText Coordinates; // 0xa8(0x18)

	struct FVector2D ConvertWorldToScaleCoordinates(struct FVector2D& WorldCoordinates); // Function ShooterGame.MapUIData.ConvertWorldToScaleCoordinates // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d358b0
};

// Class ShooterGame.MapDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct UMapDataAsset : UAresBasePrimaryDataAsset {
	struct FString MapURL; // 0x50(0x10)
	struct TSoftClassPtr<UObject> UIData; // 0x60(0x30)
	struct TSoftObjectPtr<UTexture2D> LevelSplashScreen; // 0x90(0x30)
};

// Class ShooterGame.AresMarker
// Size: 0x3d8 (Inherited: 0x3d0)
struct AAresMarker : AActor {
	enum class EAresTeam Team; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)
};

// Class ShooterGame.AresMenuTouchWidget
// Size: 0x960 (Inherited: 0x960)
struct UAresMenuTouchWidget : UAresTouchWidget {
};

// Class ShooterGame.AresMinimapCamera
// Size: 0x3f0 (Inherited: 0x3e8)
struct AAresMinimapCamera : ASceneCapture2D {
	bool bOnlyCaptureActorsWithMinimapShowTag; // 0x3e8(0x01)
	char pad_3E9[0x3]; // 0x3e9(0x03)
	int32_t DefaultRenderClearMethod; // 0x3ec(0x04)
};

// Class ShooterGame.AresMinimapComponent
// Size: 0x500 (Inherited: 0x290)
struct UAresMinimapComponent : USceneComponent {
	bool bUpdateWidgetEveryUpdate; // 0x290(0x01)
	bool bUpdateComponentEveryUpdate; // 0x291(0x01)
	bool bForceUpdateNextTick; // 0x292(0x01)
	enum class EAresMinimapPositionSource PositionSource; // 0x293(0x01)
	enum class EAresMinimapRotationSource RotationSource; // 0x294(0x01)
	char pad_295[0x3]; // 0x295(0x03)
	struct FVector WidgetLocation; // 0x298(0x0c)
	float Rotation; // 0x2a4(0x04)
	bool bPositioningPresetOverrides; // 0x2a8(0x01)
	bool bMoves; // 0x2a9(0x01)
	bool bRotates; // 0x2aa(0x01)
	enum class EAresMinimapPositionSpace PositionSpace; // 0x2ab(0x01)
	enum class EAresMinimapRotationSpace RotationSpace; // 0x2ac(0x01)
	bool bDriveWidgetSizing; // 0x2ad(0x01)
	char pad_2AE[0x2]; // 0x2ae(0x02)
	struct FVector WidgetSize; // 0x2b0(0x0c)
	enum class EAresMinimapSizeSpace SizeSpace; // 0x2bc(0x01)
	bool bDriveWidgetAttributes; // 0x2bd(0x01)
	enum class EAresMinimapLayer Layer; // 0x2be(0x01)
	char pad_2BF[0x1]; // 0x2bf(0x01)
	struct FVector2D Alignment; // 0x2c0(0x08)
	bool bDrawOffMap; // 0x2c8(0x01)
	char pad_2C9[0x3]; // 0x2c9(0x03)
	struct FVector EdgeSize; // 0x2cc(0x0c)
	enum class EAresMinimapSizeSpace EdgeSizeSpace; // 0x2d8(0x01)
	enum class EAresMinimapRotationSpace EdgeRotationSpace; // 0x2d9(0x01)
	bool bDriveWidgetAppearance; // 0x2da(0x01)
	char pad_2DB[0x1]; // 0x2db(0x01)
	struct FLinearColor WidgetColor; // 0x2dc(0x10)
	char pad_2EC[0x4]; // 0x2ec(0x04)
	struct FSlateBrush WidgetBrush; // 0x2f0(0x90)
	struct FLinearColor WidgetBrushTint; // 0x380(0x10)
	bool bUsingMaskingMaterial; // 0x390(0x01)
	char pad_391[0x7]; // 0x391(0x07)
	struct TArray<enum class EAresMapIdentifier> RegisterOnMaps; // 0x398(0x10)
	struct TMap<struct UAresMinimapPanel*, struct UUserWidget*> Widgets; // 0x3a8(0x50)
	struct TMap<struct UUserWidget*, bool> VisibilityMap; // 0x3f8(0x50)
	struct UUserWidget* WidgetClass; // 0x448(0x08)
	struct UUserWidget* EdgeWidgetClass; // 0x450(0x08)
	char pad_458[0x10]; // 0x458(0x10)
	bool bProblematic; // 0x468(0x01)
	char pad_469[0x7]; // 0x469(0x07)
	struct TMap<struct UUserWidget*, struct FRecycledWidgetArray> RecycledWidgets; // 0x470(0x50)
	struct UAresMinimapManager* MinimapManager; // 0x4c0(0x08)
	char pad_4C8[0x38]; // 0x4c8(0x38)

	void UpdateWidget(struct UUserWidget* Widget, bool bForce); // Function ShooterGame.AresMinimapComponent.UpdateWidget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d3dfa0
	void Update(bool bForce); // Function ShooterGame.AresMinimapComponent.Update // (Native|Event|Public|BlueprintEvent) // @ game+0x2d3dea0
	bool UnregisterWithManager(); // Function ShooterGame.AresMinimapComponent.UnregisterWithManager // (Native|Public|BlueprintCallable) // @ game+0x2d3de60
	void SetWidgetLocation(struct FVector InWidgetLocation, enum class EAresMinimapPositionSource InPositionSpace); // Function ShooterGame.AresMinimapComponent.SetWidgetLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d3d6f0
	void SetWidgetColor(struct FLinearColor InWidgetColor); // Function ShooterGame.AresMinimapComponent.SetWidgetColor // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d3d660
	bool SetWidgetClass(struct UUserWidget* InWidgetClass); // Function ShooterGame.AresMinimapComponent.SetWidgetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3d5c0
	void SetWidgetBrushTint(struct FLinearColor InWidgetBrushTint); // Function ShooterGame.AresMinimapComponent.SetWidgetBrushTint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d3d530
	void SetWidgetBrush(struct FSlateBrush InWidgetBrush); // Function ShooterGame.AresMinimapComponent.SetWidgetBrush // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3d3f0
	void SetSize(struct FVector InSize, enum class EAresMinimapSizeSpace SizeSpace); // Function ShooterGame.AresMinimapComponent.SetSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d3d320
	void SetRotationSpace(enum class EAresMinimapRotationSpace InRotationSpace); // Function ShooterGame.AresMinimapComponent.SetRotationSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3d2a0
	void SetRotationSource(enum class EAresMinimapRotationSource InRotationSource); // Function ShooterGame.AresMinimapComponent.SetRotationSource // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3d220
	void SetRotation(float InRotation); // Function ShooterGame.AresMinimapComponent.SetRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3d1a0
	void SetPositionSpace(enum class EAresMinimapPositionSpace InPositionSpace); // Function ShooterGame.AresMinimapComponent.SetPositionSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3d050
	void SetPositionSource(enum class EAresMinimapPositionSource InPositionSource); // Function ShooterGame.AresMinimapComponent.SetPositionSource // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cfd0
	void SetNeedsWidgetUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsWidgetUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cfb0
	void SetNeedsWidgetAttributesUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsWidgetAttributesUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cf90
	void SetNeedsWidgetAppearanceUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsWidgetAppearanceUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cf70
	void SetNeedsPositionAimUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsPositionAimUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cf50
	void SetNeedsPanelVisibilityUpdate(); // Function ShooterGame.AresMinimapComponent.SetNeedsPanelVisibilityUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cf30
	void SetLayer(enum class EAresMinimapLayer InLayer); // Function ShooterGame.AresMinimapComponent.SetLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cda0
	bool SetEdgeWidgetClass(struct UUserWidget* InWidgetClass); // Function ShooterGame.AresMinimapComponent.SetEdgeWidgetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cd00
	void SetEdgeSizeSpace(enum class EAresMinimapSizeSpace InEdgeSizeSpace); // Function ShooterGame.AresMinimapComponent.SetEdgeSizeSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cc80
	void SetEdgeSize(struct FVector InEdgeSize); // Function ShooterGame.AresMinimapComponent.SetEdgeSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d3cbf0
	void SetEdgeRotationSpace(enum class EAresMinimapRotationSpace InEdgeRotationSpace); // Function ShooterGame.AresMinimapComponent.SetEdgeRotationSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cb70
	void SetDrawOffMap(bool bInDrawOffMap); // Function ShooterGame.AresMinimapComponent.SetDrawOffMap // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cae0
	void SetAlignment(struct FVector2D InAlignment); // Function ShooterGame.AresMinimapComponent.SetAlignment // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d3ca60
	struct UUserWidget* RemoveWidget(struct UAresMinimapPanel* MinimapPanel); // Function ShooterGame.AresMinimapComponent.RemoveWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3c9c0
	void RemoveAllWidgets(); // Function ShooterGame.AresMinimapComponent.RemoveAllWidgets // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3c9a0
	bool RegisterWithManager(); // Function ShooterGame.AresMinimapComponent.RegisterWithManager // (Native|Public|BlueprintCallable) // @ game+0x2d3c960
	bool IsRegisteredWithManager(); // Function ShooterGame.AresMinimapComponent.IsRegisteredWithManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3c270
	void InitializeWidget(struct UUserWidget* Widget); // Function ShooterGame.AresMinimapComponent.InitializeWidget // (Native|Event|Public|BlueprintEvent) // @ game+0x2d23bc0
	void HandleMinimapVisibilityChanged(bool bInVisible); // Function ShooterGame.AresMinimapComponent.HandleMinimapVisibilityChanged // (Final|Native|Public) // @ game+0x2d3c1e0
	struct TMap<struct UAresMinimapPanel*, struct UUserWidget*> GetWidgets(); // Function ShooterGame.AresMinimapComponent.GetWidgets // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3be50
	struct UUserWidget* GetWidgetClass(); // Function ShooterGame.AresMinimapComponent.GetWidgetClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bd20
	struct UAresMinimapManager* GetMinimapManager(); // Function ShooterGame.AresMinimapComponent.GetMinimapManager // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x2ced450
	struct UUserWidget* GetEdgeWidgetClass(); // Function ShooterGame.AresMinimapComponent.GetEdgeWidgetClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bb20
	struct TArray<struct UUserWidget*> GetAllWidgetsOfClass(struct UUserWidget* ClassToSearch); // Function ShooterGame.AresMinimapComponent.GetAllWidgetsOfClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3ba60
	void ForceUpdateNextTick(); // Function ShooterGame.AresMinimapComponent.ForceUpdateNextTick // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3b9f0
	struct UUserWidget* FindOrCreateWidget(struct UAresMinimapPanel* MinimapPanel, bool bEdgeWidget); // Function ShooterGame.AresMinimapComponent.FindOrCreateWidget // (Native|Public|BlueprintCallable) // @ game+0x2d3b910
	struct FVector ComputeMinimapPosition(); // Function ShooterGame.AresMinimapComponent.ComputeMinimapPosition // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d3b740
	struct FVector ComputeMinimapAim(); // Function ShooterGame.AresMinimapComponent.ComputeMinimapAim // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d3b6a0
};

// Class ShooterGame.AresMinimapManager
// Size: 0x390 (Inherited: 0xe8)
struct UAresMinimapManager : UActorComponent {
	struct FMulticastInlineDelegate WorldToMinimapUpdated; // 0xe8(0x10)
	char pad_F8[0x40]; // 0xf8(0x40)
	struct TSet<struct UAresMinimapComponent*> MinimapComponents; // 0x138(0x50)
	struct TSet<struct UAresMinimapComponent*> ActiveMinimapComponents; // 0x188(0x50)
	struct TSet<struct UAresMinimapComponent*> RecentlyUpdatedMinimapComponents; // 0x1d8(0x50)
	char pad_228[0xb8]; // 0x228(0xb8)
	struct TSet<struct UAresMinimapComponent*> ProblematicMinimapComponents; // 0x2e0(0x50)
	char pad_330[0x10]; // 0x330(0x10)
	struct AAresMinimapCamera* MinimapCamera; // 0x340(0x08)
	char pad_348[0x8]; // 0x348(0x08)
	struct FMatrix WorldToMinimap; // 0x350(0x40)

	void RefreshMinimapVisibility(); // Function ShooterGame.AresMinimapManager.RefreshMinimapVisibility // (Final|Native|Public) // @ game+0x2d3c920
	void HandleMinimapComponentShouldUpdateChanged(struct UAresMinimapComponent* MinimapComponent, bool bNewShouldUpdate); // Function ShooterGame.AresMinimapManager.HandleMinimapComponentShouldUpdateChanged // (Final|Native|Public) // @ game+0x2d3c110
	struct FMatrix GetWorldToMinimap(); // Function ShooterGame.AresMinimapManager.GetWorldToMinimap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bf50
	struct AAresMinimapCamera* GetMinimapCamera(); // Function ShooterGame.AresMinimapManager.GetMinimapCamera // (Final|Native|Public|Const) // @ game+0x2cecda0
};

// Class ShooterGame.AresMinimapPanel
// Size: 0x370 (Inherited: 0x160)
struct UAresMinimapPanel : UPanelWidget {
	char pad_160[0x3]; // 0x160(0x03)
	bool bRotateMinimap; // 0x163(0x01)
	float FixedMinimapRotation; // 0x164(0x04)
	bool bKeepPlayerCentered; // 0x168(0x01)
	char pad_169[0x3]; // 0x169(0x03)
	float Zoom; // 0x16c(0x04)
	enum class EAresMapIdentifier MapIdentifier; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)
	struct AAresPlayerController* Controller; // 0x178(0x08)
	struct FMatrix WorldToMinimap; // 0x180(0x40)
	struct FMatrix MinimapToWidget; // 0x1c0(0x40)
	struct FMatrix WidgetToMinimap; // 0x200(0x40)
	struct FMatrix MinimapToWorld; // 0x240(0x40)
	struct FMatrix WidgetToWorld; // 0x280(0x40)
	struct FVector2D MinimapCenter; // 0x2c0(0x08)
	struct FVector2D MinimapTransformOffset; // 0x2c8(0x08)
	float MinimapRotation; // 0x2d0(0x04)
	int32_t VisibleLayers; // 0x2d4(0x04)
	bool bDrawEdgeWidgets; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct TMap<struct UAresMinimapComponent*, struct UUserWidget*> ComponentWidgetMap; // 0x2e0(0x50)
	struct FMulticastInlineDelegate OnMinimapWidgetAdded; // 0x330(0x10)
	struct FMulticastInlineDelegate OnMinimapWidgetRemoved; // 0x340(0x10)
	char pad_350[0x10]; // 0x350(0x10)
	struct UTexture2D* MinimapTexture; // 0x360(0x08)
	char pad_368[0x8]; // 0x368(0x08)

	void UpdateWorldToMinimap(); // Function ShooterGame.AresMinimapPanel.UpdateWorldToMinimap // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3e080
	void UpdateMinimapToWidget(); // Function ShooterGame.AresMinimapPanel.UpdateMinimapToWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3df80
	void UpdateMinimapTexture(); // Function ShooterGame.AresMinimapPanel.UpdateMinimapTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3df60
	void UpdateInverseMatrices(); // Function ShooterGame.AresMinimapPanel.UpdateInverseMatrices // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3df40
	struct FVector2D TransformWorldVectorToMinimap(struct FVector& WorldDirection); // Function ShooterGame.AresMinimapPanel.TransformWorldVectorToMinimap // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3ddb0
	struct FVector2D TransformWorldToMinimap(struct FVector& WorldPos); // Function ShooterGame.AresMinimapPanel.TransformWorldToMinimap // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3dd00
	struct FVector TransformWidgetToWorld(struct FVector2D& LocalPos, float ZValue); // Function ShooterGame.AresMinimapPanel.TransformWidgetToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3dc00
	struct FVector2D TransformWidgetToAbsolute(struct FVector2D& MinimapPos); // Function ShooterGame.AresMinimapPanel.TransformWidgetToAbsolute // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3db60
	struct FVector TransformMinimapToWorld(struct FVector2D& PercentagePos, float ZValue); // Function ShooterGame.AresMinimapPanel.TransformMinimapToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3da60
	struct FVector2D TransformMinimapToAbsolute(struct FVector2D& PercentagePos); // Function ShooterGame.AresMinimapPanel.TransformMinimapToAbsolute // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3d9c0
	struct FVector TransformLocalToWorld(struct FVector2D& LocalPos, float ZValue); // Function ShooterGame.AresMinimapPanel.TransformLocalToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3d8c0
	struct FVector TransformAbsoluteToWorld(struct FVector2D& AbsolutePos, float ZValue); // Function ShooterGame.AresMinimapPanel.TransformAbsoluteToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3d7c0
	void SetRotateMinimap(bool bRotate, bool bFixedRotion); // Function ShooterGame.AresMinimapPanel.SetRotateMinimap // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3d0d0
	void SetMinimapTexture(struct UTexture2D* NewMinimapTexture); // Function ShooterGame.AresMinimapPanel.SetMinimapTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3cea0
	void SetMapIdentifier(enum class EAresMapIdentifier InMapIdentifier); // Function ShooterGame.AresMinimapPanel.SetMapIdentifier // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3ce20
	void RefreshWidgetVisibility(); // Function ShooterGame.AresMinimapPanel.RefreshWidgetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3c940
	bool ProjectWidgetToWorld(struct FVector2D& LocalPos, float ZValue, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectWidgetToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3c780
	bool ProjectMinimapToWorld(struct FVector2D& PercentagePos, float ZValue, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectMinimapToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3c5e0
	bool ProjectLocalToWorld(struct FVector2D& LocalPos, float ZValue, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectLocalToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3c440
	bool ProjectAbsoluteToWorld(struct FVector2D& AbsolutePos, float ZValue, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.AresMinimapPanel.ProjectAbsoluteToWorld // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3c2a0
	void HandleComponentRemoved(struct UAresMinimapComponent* MinimapComponent); // Function ShooterGame.AresMinimapPanel.HandleComponentRemoved // (Final|Native|Public) // @ game+0x2d3c080
	void HandleComponentAdded(struct UAresMinimapComponent* MinimapComponent); // Function ShooterGame.AresMinimapPanel.HandleComponentAdded // (Final|Native|Public) // @ game+0x2d3bff0
	struct FMatrix GetWorldToMinimapMatrix(); // Function ShooterGame.AresMinimapPanel.GetWorldToMinimapMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bfa0
	struct FMatrix GetWidgetToWorldMatrix(); // Function ShooterGame.AresMinimapPanel.GetWidgetToWorldMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3be00
	struct FMatrix GetWidgetToMinimapMatrix(); // Function ShooterGame.AresMinimapPanel.GetWidgetToMinimapMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bdb0
	struct FMatrix GetWidgetToLocalMatrix(); // Function ShooterGame.AresMinimapPanel.GetWidgetToLocalMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bd60
	struct FMatrix GetMinimapToWorldMatrix(); // Function ShooterGame.AresMinimapPanel.GetMinimapToWorldMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bcd0
	struct FMatrix GetMinimapToWidgetMatrix(); // Function ShooterGame.AresMinimapPanel.GetMinimapToWidgetMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bc80
	struct FMatrix GetMinimapToAbsoluteMatrix(); // Function ShooterGame.AresMinimapPanel.GetMinimapToAbsoluteMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bc30
	struct UTexture2D* GetMinimapTexture(); // Function ShooterGame.AresMinimapPanel.GetMinimapTexture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec890
	struct UAresMinimapManager* GetMinimapManager(); // Function ShooterGame.AresMinimapPanel.GetMinimapManager // (Final|Native|Protected|Const) // @ game+0x2d3bc00
	struct FMatrix GetLocalToWidgetMatrix(); // Function ShooterGame.AresMinimapPanel.GetLocalToWidgetMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bbb0
	struct FMatrix GetLocalToAbsoluteMatrix(); // Function ShooterGame.AresMinimapPanel.GetLocalToAbsoluteMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3bb60
	struct FMatrix GetAbsoluteToLocalMatrix(); // Function ShooterGame.AresMinimapPanel.GetAbsoluteToLocalMatrix // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3ba10
	struct FMatrix ComputeWorldToMinimap(); // Function ShooterGame.AresMinimapPanel.ComputeWorldToMinimap // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d3b8c0
	struct FVector2D ComputeMinimapTransformOffset(struct FVector2D& CurMinimapCenter, float CurMinimapRotation); // Function ShooterGame.AresMinimapPanel.ComputeMinimapTransformOffset // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d3b7d0
	float ComputeMinimapRotation(); // Function ShooterGame.AresMinimapPanel.ComputeMinimapRotation // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d3b790
	struct FVector2D ComputeMinimapCenter(); // Function ShooterGame.AresMinimapPanel.ComputeMinimapCenter // (Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d3b6f0
	struct UAresMinimapPanelSlot* AddChildToAresMinimap(struct UWidget* Content); // Function ShooterGame.AresMinimapPanel.AddChildToAresMinimap // (Final|Native|Public|BlueprintCallable) // @ game+0x2d3b600
};

// Class ShooterGame.AresMinimapPanelSlot
// Size: 0xa8 (Inherited: 0x40)
struct UAresMinimapPanelSlot : UPanelSlot {
	enum class EAresMinimapLayer Layer; // 0x40(0x01)
	char pad_41[0x3]; // 0x41(0x03)
	struct FVector Position; // 0x44(0x0c)
	enum class EAresMinimapPositionSpace PositionSpace; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	struct FVector Size; // 0x54(0x0c)
	enum class EAresMinimapSizeSpace SizeSpace; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	struct FVector Aim; // 0x64(0x0c)
	float Rotation; // 0x70(0x04)
	enum class EAresMinimapRotationSpace RotationSpace; // 0x74(0x01)
	char pad_75[0x3]; // 0x75(0x03)
	struct FVector2D Alignment; // 0x78(0x08)
	bool bDrawOffMap; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct UWidget* EdgeWidget; // 0x88(0x08)
	struct FVector EdgeSize; // 0x90(0x0c)
	enum class EAresMinimapSizeSpace EdgeSizeSpace; // 0x9c(0x01)
	enum class EAresMinimapRotationSpace EdgeRotationSpace; // 0x9d(0x01)
	char pad_9E[0xa]; // 0x9e(0x0a)

	void SetSizeSpace(enum class EAresMinimapSizeSpace InSizeSpace); // Function ShooterGame.AresMinimapPanelSlot.SetSizeSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d45830
	void SetSize(struct FVector InSize); // Function ShooterGame.AresMinimapPanelSlot.SetSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d457a0
	void SetRotationSpace(enum class EAresMinimapRotationSpace InRotationSpace); // Function ShooterGame.AresMinimapPanelSlot.SetRotationSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d45720
	void SetRotation(float InRotation); // Function ShooterGame.AresMinimapPanelSlot.SetRotation // (Final|Native|Public|BlueprintCallable) // @ game+0x2d456a0
	void SetPositionSpace(enum class EAresMinimapPositionSpace InPositonSpace); // Function ShooterGame.AresMinimapPanelSlot.SetPositionSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d45620
	void SetPosition(struct FVector InPosition); // Function ShooterGame.AresMinimapPanelSlot.SetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d45590
	void SetLayer(enum class EAresMinimapLayer InLayer); // Function ShooterGame.AresMinimapPanelSlot.SetLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2d45270
	void SetEdgeWidget(struct UWidget* InEdgeWidget); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2d45160
	void SetEdgeSizeSpace(enum class EAresMinimapSizeSpace InSizeSpace); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeSizeSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d450e0
	void SetEdgeSize(struct FVector InSize); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeSize // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d45050
	void SetEdgeRotationSpace(enum class EAresMinimapRotationSpace InRotationSpace); // Function ShooterGame.AresMinimapPanelSlot.SetEdgeRotationSpace // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44fd0
	void SetDrawOffMap(bool bInDrawOffMap); // Function ShooterGame.AresMinimapPanelSlot.SetDrawOffMap // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44f40
	void SetAlignment(struct FVector2D InAlignment); // Function ShooterGame.AresMinimapPanelSlot.SetAlignment // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d44cb0
	void SetAim(struct FVector InAim); // Function ShooterGame.AresMinimapPanelSlot.SetAim // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d44c20
	enum class EAresMinimapSizeSpace GetSizeSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetSizeSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44600
	struct FVector GetSize(); // Function ShooterGame.AresMinimapPanelSlot.GetSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d445c0
	enum class EAresMinimapRotationSpace GetRotationSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetRotationSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44590
	float GetRotation(); // Function ShooterGame.AresMinimapPanelSlot.GetRotation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44560
	enum class EAresMinimapPositionSpace GetPositionSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetPositionSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44530
	struct FVector GetPosition(); // Function ShooterGame.AresMinimapPanelSlot.GetPosition // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d444f0
	enum class EAresMinimapLayer GetLayer(); // Function ShooterGame.AresMinimapPanelSlot.GetLayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44460
	struct UWidget* GetEdgeWidget(); // Function ShooterGame.AresMinimapPanelSlot.GetEdgeWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44400
	enum class EAresMinimapSizeSpace GetEdgeSizeSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetEdgeSizeSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d443d0
	struct FVector GetEdgeSize(); // Function ShooterGame.AresMinimapPanelSlot.GetEdgeSize // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44390
	enum class EAresMinimapRotationSpace GetEdgeRotationSpace(); // Function ShooterGame.AresMinimapPanelSlot.GetEdgeRotationSpace // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44360
	bool GetDrawOffMap(); // Function ShooterGame.AresMinimapPanelSlot.GetDrawOffMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44330
	struct FVector2D GetAlignment(); // Function ShooterGame.AresMinimapPanelSlot.GetAlignment // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44260
	struct FVector GetAim(); // Function ShooterGame.AresMinimapPanelSlot.GetAim // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44220
};

// Class ShooterGame.AresMinimapWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAresMinimapWidget : UUserWidget {
	struct UImage* MinimapIcon; // 0x2c8(0x08)
	bool bMinimapDebug; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct UAresMinimapComponent* MinimapComponent; // 0x2d8(0x08)

	void SetDebug(bool bDebug); // Function ShooterGame.AresMinimapWidget.SetDebug // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44eb0
	void ReceiveSetState(); // Function ShooterGame.AresMinimapWidget.ReceiveSetState // (Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.MissionDataAsset
// Size: 0x130 (Inherited: 0x50)
struct UMissionDataAsset : UAresBasePrimaryDataAsset {
	enum class EAresMissionType Type; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct TArray<enum class EAresMissionTag> Tags; // 0x58(0x10)
	struct FDateTime ExpirationDate; // 0x68(0x08)
	struct FDateTime ActivationDate; // 0x70(0x08)
	int32_t XPGrant; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct TSoftClassPtr<UObject> Mission; // 0x80(0x30)
	struct TMap<struct TSoftClassPtr<UObject>, int32_t> Objectives; // 0xb0(0x50)
	struct TSoftClassPtr<UObject> UIData; // 0x100(0x30)
};

// Class ShooterGame.AccordMissionDataAsset
// Size: 0x190 (Inherited: 0x130)
struct UAccordMissionDataAsset : UMissionDataAsset {
	struct TSoftClassPtr<UObject> AccordAgent; // 0x130(0x30)
	struct TSoftClassPtr<UObject> AccordContract; // 0x160(0x30)
};

// Class ShooterGame.MissionUIData
// Size: 0xa8 (Inherited: 0x90)
struct UMissionUIData : UBaseContentUIData {
	struct FText Title; // 0x90(0x18)
};

// Class ShooterGame.ObjectiveUIData
// Size: 0xa8 (Inherited: 0x90)
struct UObjectiveUIData : UBaseContentUIData {
	struct FText Directive; // 0x90(0x18)
};

// Class ShooterGame.ObjectiveDataAsset
// Size: 0xb0 (Inherited: 0x50)
struct UObjectiveDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> ObjectiveComponent; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
};

// Class ShooterGame.AresMovementToolingTuningAsset
// Size: 0x68 (Inherited: 0x38)
struct UAresMovementToolingTuningAsset : UDataAsset {
	bool bMovementToolingModule; // 0x38(0x01)
	bool bMovementToolingShotRooting; // 0x39(0x01)
	char pad_3A[0x2]; // 0x3a(0x02)
	float MovementToolingShotRootingDeadzone; // 0x3c(0x04)
	float MovementToolingShotRootingDuration; // 0x40(0x04)
	float MovementToolingShotRootingFalloffSeconds; // 0x44(0x04)
	float MovementToolingShotRootingFalloffExponent; // 0x48(0x04)
	bool bMovementToolingFastStrafing; // 0x4c(0x01)
	char pad_4D[0x3]; // 0x4d(0x03)
	float MovementToolingFastStrafingStickDeltaThreshold; // 0x50(0x04)
	float MovementToolingFastStrafingApplyYAxisOverride; // 0x54(0x04)
	bool bMovementToolingFastRelease; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	float MovementToolingFastReleasePower; // 0x5c(0x04)
	float MovementToolingFastReleaseMinSpeed; // 0x60(0x04)
	bool bMovementToolingAngularDeadzones; // 0x64(0x01)
	bool bMovementToolingRadialDeadzones; // 0x65(0x01)
	char pad_66[0x2]; // 0x66(0x02)
};

// Class ShooterGame.AresMovementToolingTuningComponent
// Size: 0x118 (Inherited: 0xe8)
struct UAresMovementToolingTuningComponent : UActorComponent {
	int32_t CurrentTuningMode; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FString> TuningModeAssetPaths; // 0xf0(0x10)
	struct UAresMovementToolingTuningAsset* CurrentTuningAsset; // 0x100(0x08)
	char pad_108[0x10]; // 0x108(0x10)

	void OnMovementToolingGameRuleChanged(enum class EGameRuleBoolName RuleName, bool RuleValue); // Function ShooterGame.AresMovementToolingTuningComponent.OnMovementToolingGameRuleChanged // (Final|Native|Protected) // @ game+0x2d44980
	void HandleTuningAssetLoaded(); // Function ShooterGame.AresMovementToolingTuningComponent.HandleTuningAssetLoaded // (Final|Native|Protected) // @ game+0x2d44960
	void HandleMovementToolingTuningModeChanged(enum class EGameFeatureFloatConfigName TuningModeName, float NewValue); // Function ShooterGame.AresMovementToolingTuningComponent.HandleMovementToolingTuningModeChanged // (Final|Native|Protected) // @ game+0x2d446f0
};

// Class ShooterGame.AresNetConnection
// Size: 0x1c28 (Inherited: 0x1bd0)
struct UAresNetConnection : UIpConnection {
	char pad_1BD0[0x58]; // 0x1bd0(0x58)
};

// Class ShooterGame.AresNetDriver
// Size: 0xaa8 (Inherited: 0x850)
struct UAresNetDriver : UIpNetDriver {
	char pad_850[0x34]; // 0x850(0x34)
	float SoftDisconnectTimeout; // 0x884(0x04)
	char pad_888[0x50]; // 0x888(0x50)
	struct FNetworkDegradationSettings SimulatedNetworkDegradation; // 0x8d8(0x3c)
	bool bWasSimulatingBurstLossLastFrame; // 0x914(0x01)
	char pad_915[0x3]; // 0x915(0x03)
	struct TSet<struct FString> PlayersExperiencingBurstLoss; // 0x918(0x50)
	char pad_968[0x140]; // 0x968(0x140)
};

// Class ShooterGame.AresNetworkingGlobals
// Size: 0x48 (Inherited: 0x30)
struct UAresNetworkingGlobals : UObject {
	float TimeBetweenUnreliablePingUpdates; // 0x30(0x04)
	float UnreliablePingAckGiveupTime; // 0x34(0x04)
	int32_t NumUnreliablePingSamples; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UValueDisagreementTimer* DefaultValueDisagreementTimerClass; // 0x40(0x08)
};

// Class ShooterGame.AresOnGroundEquippable
// Size: 0x418 (Inherited: 0x400)
struct AAresOnGroundEquippable : AGameObject {
	struct USphereComponent* Collision; // 0x400(0x08)
	struct AAresEquippable* MyEquippable; // 0x408(0x08)
	struct AShooterCharacter* LastOwner; // 0x410(0x08)

	void OnRep_MyEquippable(); // Function ShooterGame.AresOnGroundEquippable.OnRep_MyEquippable // (Final|Native|Protected) // @ game+0x2d44a50
	void MyEquippableChanged(); // Function ShooterGame.AresOnGroundEquippable.MyEquippableChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	float GetOriginalEquippableCost(); // Function ShooterGame.AresOnGroundEquippable.GetOriginalEquippableCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d444c0
	void AuthPickup(struct AShooterCharacter* TargetCharacter); // Function ShooterGame.AresOnGroundEquippable.AuthPickup // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthInitialize(struct AAresEquippable* OnGroundEquippable, struct AShooterCharacter* LastOwner); // Function ShooterGame.AresOnGroundEquippable.AuthInitialize // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cc3bd0
	void AuthEquippableRemoved(); // Function ShooterGame.AresOnGroundEquippable.AuthEquippableRemoved // (Final|Native|Protected) // @ game+0x1e6e7b0
	void AuthEquippableOwnerChanged(struct AAresEquippable* Equippable, struct AActor* EquippableOwner); // Function ShooterGame.AresOnGroundEquippable.AuthEquippableOwnerChanged // (Final|Native|Protected) // @ game+0x2cc3bd0
	void AuthEquippableDestroyed(struct AActor* Equippable); // Function ShooterGame.AresOnGroundEquippable.AuthEquippableDestroyed // (Final|Native|Protected) // @ game+0x2cb4be0
};

// Class ShooterGame.AresOutlineComponent
// Size: 0x2c0 (Inherited: 0x290)
struct UAresOutlineComponent : USceneComponent {
	struct AAresPlayerStateBase* LastLocalPlayerState; // 0x290(0x08)
	struct AShooterCharacter* ShooterCharacterOwner; // 0x298(0x08)
	char pad_2A0[0x10]; // 0x2a0(0x10)
	enum class EAresOutlineMode AllyOutline; // 0x2b0(0x01)
	enum class EAresOutlineMode EnemyOutline; // 0x2b1(0x01)
	enum class EAresOutlineMode NeutralOutline; // 0x2b2(0x01)
	enum class EAresOutlineMode DeadAllyOutline; // 0x2b3(0x01)
	enum class EAresOutlineMode DeadEnemyOutline; // 0x2b4(0x01)
	char pad_2B5[0x3]; // 0x2b5(0x03)
	float DeathFadeDuration; // 0x2b8(0x04)
	bool bAffectChildren; // 0x2bc(0x01)
	char pad_2BD[0x3]; // 0x2bd(0x03)

	void UpdateOutlineMode(); // Function ShooterGame.AresOutlineComponent.UpdateOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2d458b0
	void SetOutlineModes(enum class EAresOutlineMode AllyOutlineMode, enum class EAresOutlineMode EnemyOutlineMode, enum class EAresOutlineMode NeutralOutlineMode, enum class EAresOutlineMode DeadAllyOutline, enum class EAresOutlineMode DeadEnemyOutline); // Function ShooterGame.AresOutlineComponent.SetOutlineModes // (Final|Native|Public|BlueprintCallable) // @ game+0x2d453f0
	void SetOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2d45370
	void SetNeutralOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetNeutralOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2d452f0
	void SetEnemyOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetEnemyOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2d451f0
	void SetDeadEnemyOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetDeadEnemyOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44e30
	void SetDeadAllyOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetDeadAllyOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44db0
	void SetAllyOutlineMode(enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.SetAllyOutlineMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44d30
	struct UAresOutlineComponent* PushOutlineComponent(); // Function ShooterGame.AresOutlineComponent.PushOutlineComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44bf0
	struct UAresOutlineComponent* PushMeshOutlineComponent(struct UMeshComponent* MeshComponent); // Function ShooterGame.AresOutlineComponent.PushMeshOutlineComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d44b60
	struct UAresOutlineComponent* PushMeshOutline(struct UMeshComponent* MeshComponent, enum class EAresOutlineMode OutlineMode); // Function ShooterGame.AresOutlineComponent.PushMeshOutline // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d44a90
	void PopOutlineComponent(); // Function ShooterGame.AresOutlineComponent.PopOutlineComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44a70
	void HandleOwnerDied(struct UDamageResponse* Response); // Function ShooterGame.AresOutlineComponent.HandleOwnerDied // (Final|Native|Protected) // @ game+0x2d448d0
	void HandleOwnerChanged(struct AAresItem* item, struct AActor* PrevOwner, struct AActor* NewOwner); // Function ShooterGame.AresOutlineComponent.HandleOwnerChanged // (Final|Native|Protected) // @ game+0x2d447c0
	void HandleLocalPlayerStateChanged(struct AAresPlayerStateBase* NewState); // Function ShooterGame.AresOutlineComponent.HandleLocalPlayerStateChanged // (Final|Native|Protected) // @ game+0x2d44660
	struct UAresOutlineComponent* GetTopOutlineComponent(); // Function ShooterGame.AresOutlineComponent.GetTopOutlineComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44630
	enum class EAresOutlineMode GetNeutralOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetNeutralOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44490
	enum class EAresOutlineMode GetEnemyOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetEnemyOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44430
	enum class EAresOutlineMode GetDeadEnemyOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetDeadEnemyOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d44300
	enum class EAresOutlineMode GetDeadAllyOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetDeadAllyOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d442d0
	enum class EAresOutlineMode GetAllyOutlineMode(); // Function ShooterGame.AresOutlineComponent.GetAllyOutlineMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d442a0
	void CopyOutlineModes(struct UAresOutlineComponent* OtherComponent); // Function ShooterGame.AresOutlineComponent.CopyOutlineModes // (Final|Native|Public|BlueprintCallable) // @ game+0x2d44190
};

// Class ShooterGame.ParticleModuleTeamColor
// Size: 0xe8 (Inherited: 0x38)
struct UParticleModuleTeamColor : UParticleModuleCustomColor {
	struct FName MaterialParameter; // 0x38(0x0c)
	struct FLinearColor BaseColor; // 0x44(0x10)
	struct FLinearColor DefaultEnemyColor; // 0x54(0x10)
	struct FLinearColor TritanopiaEnemyColor; // 0x64(0x10)
	struct FLinearColor DeuteranopiaEnemyColor; // 0x74(0x10)
	struct FLinearColor ProtanopiaEnemyColor; // 0x84(0x10)
	struct FLinearColor DefenderColor; // 0x94(0x10)
	struct FLinearColor ExampleCustomColor; // 0xa4(0x10)
	struct FVector MinInputCustomColor; // 0xb4(0x0c)
	struct FVector MaxInputCustomColor; // 0xc0(0x0c)
	struct FVector MinOutputCustomColor; // 0xcc(0x0c)
	struct FVector MaxOutputCustomColor; // 0xd8(0x0c)
	char pad_E4[0x4]; // 0xe4(0x04)
};

// Class ShooterGame.ParticleModuleOutlineMode
// Size: 0x40 (Inherited: 0x38)
struct UParticleModuleOutlineMode : UParticleModuleCustomOutline {
	enum class EAresOutlineMode AllyOutline; // 0x38(0x01)
	enum class EAresOutlineMode EnemyOutline; // 0x39(0x01)
	enum class EAresOutlineMode NeutralOutline; // 0x3a(0x01)
	char pad_3B[0x5]; // 0x3b(0x05)
};

// Class ShooterGame.AresPeakMemoryUsageGauntletController
// Size: 0x130 (Inherited: 0x130)
struct UAresPeakMemoryUsageGauntletController : UAresJoinGameGauntletControllerBase {

	void ToggleMatchTimer(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.ToggleMatchTimer // (Final|Native|Private) // @ game+0x1e6e7b0
	void SuicidePlayer(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.SuicidePlayer // (Final|Native|Private) // @ game+0x1e6e7b0
	void SpawnMannequins(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.SpawnMannequins // (Final|Native|Private) // @ game+0x1e6e7b0
	void SetupTest(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.SetupTest // (Final|Native|Private) // @ game+0x1e6e7b0
	void OnInGame(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.OnInGame // (Native|Protected) // @ game+0x2d569b0
	void OnCloseGame(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.OnCloseGame // (Native|Protected) // @ game+0x2d56550
	void GoToInGamePhase(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GoToInGamePhase // (Final|Native|Private) // @ game+0x1e6e7b0
	struct FString GetControllerName(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GetControllerName // (Native|Protected) // @ game+0x2d55660
	struct FString GenerateMannequinCommand(struct FString MannequinAgentName, struct FString TeamName, struct FString GunName, struct FString SkinName); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GenerateMannequinCommand // (Final|Native|Private) // @ game+0x2d55050
	struct FString GenerateGunSkinSetSkinCommand(struct FString SkinName); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GenerateGunSkinSetSkinCommand // (Final|Native|Private) // @ game+0x2d54f00
	struct FString GenerateFillTexturePoolCommand(bool fillPool); // Function ShooterGame.AresPeakMemoryUsageGauntletController.GenerateFillTexturePoolCommand // (Final|Native|Private) // @ game+0x2d54e10
	void FillTexturePool(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.FillTexturePool // (Final|Native|Private) // @ game+0x1e6e7b0
	void EquipGun(); // Function ShooterGame.AresPeakMemoryUsageGauntletController.EquipGun // (Final|Native|Private) // @ game+0x1e6e7b0
};

// Class ShooterGame.PlatformSpecializedUIGlobalsDataAsset
// Size: 0x98 (Inherited: 0x40)
struct UPlatformSpecializedUIGlobalsDataAsset : UAresPlatformDataAsset {
	int32_t Priority; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	struct TMap<enum class EAresPlatformWidgetFamily, struct TSoftObjectPtr<UPlatformSpecializedWidgetFamily>> PlatformSpecializedWidgetFamilies; // 0x48(0x50)
};

// Class ShooterGame.PlatformSpecializedWidgetFamily
// Size: 0xd8 (Inherited: 0x38)
struct UPlatformSpecializedWidgetFamily : UDataAsset {
	struct TMap<struct FName, struct TSoftClassPtr<UObject>> WidgetBlueprints; // 0x38(0x50)
	struct TMap<struct FName, struct UUserWidget*> CachedWidgetBlueprints; // 0x88(0x50)

	bool TryGetWidgetClassBlocking(struct FName& WidgetID, struct UUserWidget*& OutClass); // Function ShooterGame.PlatformSpecializedWidgetFamily.TryGetWidgetClassBlocking // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d58780
	bool TryGetClassReference(struct FName& WidgetID, struct TSoftClassPtr<UObject>& OutClassRef); // Function ShooterGame.PlatformSpecializedWidgetFamily.TryGetClassReference // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d58640
	bool HasSpecializedWidgetClass(struct FName& WidgetID); // Function ShooterGame.PlatformSpecializedWidgetFamily.HasSpecializedWidgetClass // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d56150
};

// Class ShooterGame.PlatformSpecializedUIBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UPlatformSpecializedUIBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool GetPlatformSpecializedWidgetClassForPlatform(enum class EAresPlatformWidgetFamily WidgetFamily, struct FName& WidgetID, enum class EAresPlatformType DesiredPlatform, struct UUserWidget*& OutClass); // Function ShooterGame.PlatformSpecializedUIBlueprintFunctionLibrary.GetPlatformSpecializedWidgetClassForPlatform // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d55960
	bool GetPlatformSpecializedWidgetClass(struct UObject* ContextObj, enum class EAresPlatformWidgetFamily WidgetFamily, struct FName WidgetID, struct UUserWidget*& OutClass); // Function ShooterGame.PlatformSpecializedUIBlueprintFunctionLibrary.GetPlatformSpecializedWidgetClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2d557f0
};

// Class ShooterGame.AresPlatformBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UAresPlatformBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	void OpenAppPermissionSettings(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.OpenAppPermissionSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d56d50
	bool IsRunningOnBattery(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.IsRunningOnBattery // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d56340
	bool HasActiveWiFiConnection(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.HasActiveWiFiConnection // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d56120
	struct TArray<int32_t> GetRefreshRates(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetRefreshRates // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d55d40
	enum class EAresPlatformType GetPlatformType(struct UObject* WorldContextObject); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetPlatformType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d55ad0
	float GetDeviceTemperatureLevel(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetDeviceTemperatureLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d55720
	enum class EAresDeviceQuality GetDefaultDeviceQuality(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetDefaultDeviceQuality // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d556f0
	enum class EAresNetworkConnectionQuality GetConnectionQuality(struct AShooterGameState* GameState); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetConnectionQuality // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d555a0
	enum class EAresPlatformType GetClientPlatformType(struct UObject* WorldContextObject); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetClientPlatformType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d55510
	int32_t GetBatteryLevel(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetBatteryLevel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d554b0
	enum class EAresNetworkConnectionType GetAresNetworkConnectionType(); // Function ShooterGame.AresPlatformBlueprintFunctionLibrary.GetAresNetworkConnectionType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d55390
};

// Class ShooterGame.AresPlayerAutomation
// Size: 0x3e8 (Inherited: 0x3d0)
struct AAresPlayerAutomation : AActor {
	struct AAresPlayerStateBase* PlayerState; // 0x3d0(0x08)
	char pad_3D8[0x8]; // 0x3d8(0x08)
	bool bReadyToTestFired; // 0x3e0(0x01)
	bool bIsComplete; // 0x3e1(0x01)
	bool bWaitForGameAutomation; // 0x3e2(0x01)
	bool bWaitForShooterCharacter; // 0x3e3(0x01)
	char pad_3E4[0x4]; // 0x3e4(0x04)

	void TryReadyToTest(); // Function ShooterGame.AresPlayerAutomation.TryReadyToTest // (Final|Native|Private) // @ game+0x1e6e7b0
	void Tick(float DeltaSeconds); // Function ShooterGame.AresPlayerAutomation.Tick // (Native|Public) // @ game+0x2cee5e0
	void SimulateMovementInputUp(enum class EAresAutomationMovement Movement); // Function ShooterGame.AresPlayerAutomation.SimulateMovementInputUp // (Final|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void SimulateMovementInputDown(enum class EAresAutomationMovement Movement); // Function ShooterGame.AresPlayerAutomation.SimulateMovementInputDown // (Final|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void SimulateInputUp(enum class EAresAutomationInput Input); // Function ShooterGame.AresPlayerAutomation.SimulateInputUp // (Final|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void SimulateInputDown(enum class EAresAutomationInput Input); // Function ShooterGame.AresPlayerAutomation.SimulateInputDown // (Final|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void SimulateInput(enum class EAresAutomationInput Input); // Function ShooterGame.AresPlayerAutomation.SimulateInput // (Final|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void SetAimingPitch(float NewPitch); // Function ShooterGame.AresPlayerAutomation.SetAimingPitch // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void ServerPostPlayerAutomationComplete(); // Function ShooterGame.AresPlayerAutomation.ServerPostPlayerAutomationComplete // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1e917a0
	void ReceivePostReadyToTestTick(float DeltaSeconds); // Function ShooterGame.AresPlayerAutomation.ReceivePostReadyToTestTick // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ReceiveBeginReadyToTest(); // Function ShooterGame.AresPlayerAutomation.ReceiveBeginReadyToTest // (Native|Event|Public|BlueprintEvent) // @ game+0x2d56e00
	void OnGameAutomationPassed(); // Function ShooterGame.AresPlayerAutomation.OnGameAutomationPassed // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void NotifyPlayerAutomationComplete(); // Function ShooterGame.AresPlayerAutomation.NotifyPlayerAutomationComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x2d56510
	void GrantAllAbilities(); // Function ShooterGame.AresPlayerAutomation.GrantAllAbilities // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	struct AAresPlayerStateBase* GetPlayerState(); // Function ShooterGame.AresPlayerAutomation.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecd40
	struct APlayerController* GetController(); // Function ShooterGame.AresPlayerAutomation.GetController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55630
	struct AShooterCharacter* GetCharacter(); // Function ShooterGame.AresPlayerAutomation.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d554e0
	enum class EAresAutomationInput GetAutomationInputForItemSlot(enum class EAresItemSlot ItemSlot); // Function ShooterGame.AresPlayerAutomation.GetAutomationInputForItemSlot // (Final|Native|Public|BlueprintCallable) // @ game+0x2d55420
	struct AAresPlayerController* GetAresPlayerController(); // Function ShooterGame.AresPlayerAutomation.GetAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d553c0
	void ClientPassTest(); // Function ShooterGame.AresPlayerAutomation.ClientPassTest // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2d53f40
	void ClientNotifyGameAutomationPassed(); // Function ShooterGame.AresPlayerAutomation.ClientNotifyGameAutomationPassed // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x1e917d0
	void ClientFailTest(struct FString Reason); // Function ShooterGame.AresPlayerAutomation.ClientFailTest // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2d53760
	void ClientAutomationLog(struct FString Reason); // Function ShooterGame.AresPlayerAutomation.ClientAutomationLog // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x2d52ed0
	void AuthSetPlayerState(struct AAresPlayerStateBase* NewPlayerState); // Function ShooterGame.AresPlayerAutomation.AuthSetPlayerState // (Final|Native|Public) // @ game+0x2cb4be0
	void AimAtCharacter(struct AShooterCharacter* Target, struct FName BoneName); // Function ShooterGame.AresPlayerAutomation.AimAtCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2d52c10
};

// Class ShooterGame.OwnerExclusivePlayerInfo
// Size: 0x5e8 (Inherited: 0x3d0)
struct AOwnerExclusivePlayerInfo : AInfo {
	struct FMulticastInlineDelegate OnAuthLoadoutFinalized; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnRequestFulfilled; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnRequestRefunded; // 0x3f0(0x10)
	struct FRoundPersistentDataDefinition RoundPersistentData; // 0x400(0x10)
	struct FMulticastInlineDelegate OnPreviousRoundRewardsFinalized; // 0x410(0x10)
	char pad_420[0x10]; // 0x420(0x10)
	struct FMulticastInlineDelegate OnAuthLoadoutReset; // 0x430(0x10)
	struct AController* AresController; // 0x440(0x08)
	struct TArray<float> CurrentResources; // 0x448(0x10)
	int32_t NumDeathStreak; // 0x458(0x04)
	int32_t StartOfRoundMoneyCache; // 0x45c(0x04)
	int32_t StartOfRoundLoadoutValueCache; // 0x460(0x04)
	char pad_464[0x4]; // 0x464(0x04)
	struct TArray<struct FAresTrackedReward> TrackedRewards; // 0x468(0x10)
	int32_t EndOfRoundBeforeRewardsMoney; // 0x478(0x04)
	bool bLoadoutFinalized; // 0x47c(0x01)
	char pad_47D[0x3]; // 0x47d(0x03)
	struct UCombatReportComponent* CombatReportComponentType; // 0x480(0x08)
	struct UCombatReportComponent* CombatReportComponent; // 0x488(0x08)
	struct UKillStreakComponent* KillStreakComponent; // 0x490(0x08)
	struct UPlayerTimelineDebugComponent* PlayerTimelineDebugComponent; // 0x498(0x08)
	struct UPlayerPurchaseablesComponent* PlayerPurchaseablesComponent; // 0x4a0(0x08)
	struct TArray<struct FAresPlayerRoundInfo> RoundInfos; // 0x4a8(0x10)
	enum class EPlayerDebugFlags DebugFlags; // 0x4b8(0x01)
	char pad_4B9[0x7]; // 0x4b9(0x07)
	struct UPersonalizationComponent* PersonalizationComponent; // 0x4c0(0x08)
	struct USprayLoadoutComponent* SprayLoadoutComponent; // 0x4c8(0x08)
	struct TArray<struct FObfuscatedPlayerInformation> AllPlayersObfuscatedPlayerInformation; // 0x4d0(0x10)
	char pad_4E0[0x108]; // 0x4e0(0x108)

	void ServerUpdateReflectedIntPlayerSetting(enum class EAresIntSettingName SettingName, int32_t NewValue); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerUpdateReflectedIntPlayerSetting // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d60010
	void ServerUpdateReflectedFloatPlayerSetting(enum class EAresFloatSettingName SettingName, float NewValue); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerUpdateReflectedFloatPlayerSetting // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d5ff40
	void ServerUpdateReflectedBoolPlayerSetting(enum class EAresBoolSettingName SettingName, bool NewValue); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerUpdateReflectedBoolPlayerSetting // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d5fe60
	void ServerSwapSpawnedCharacter(struct APawn* DesiredClass); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerSwapSpawnedCharacter // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x1e9e750
	void ServerInitializeReflectedPlayerSettings(struct FReflectedSettingsInitializationBlob InitialSettings); // Function ShooterGame.OwnerExclusivePlayerInfo.ServerInitializeReflectedPlayerSettings // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d5fce0
	void PostInitializeComponents(); // Function ShooterGame.OwnerExclusivePlayerInfo.PostInitializeComponents // (Native|Public) // @ game+0x2d5fc80
	void OnRep_TrackedRewardsReplicated(); // Function ShooterGame.OwnerExclusivePlayerInfo.OnRep_TrackedRewardsReplicated // (Final|Native|Private) // @ game+0x2d5f9a0
	void OnRep_ObfuscatedPlayerInformation(); // Function ShooterGame.OwnerExclusivePlayerInfo.OnRep_ObfuscatedPlayerInformation // (Final|Native|Public) // @ game+0x2d5f8f0
	bool IsLoadoutFinalized(); // Function ShooterGame.OwnerExclusivePlayerInfo.IsLoadoutFinalized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f890
	bool IsAlive(); // Function ShooterGame.OwnerExclusivePlayerInfo.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f860
	struct TArray<struct FAresTrackedReward> GetTrackedRewards(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetTrackedRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f820
	int32_t GetTotalLoadoutValue(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetTotalLoadoutValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f270
	int32_t GetStartOfRoundMoneyCache(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetStartOfRoundMoneyCache // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f7d0
	struct USprayLoadoutComponent* GetSprayLoadoutComponent(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetSprayLoadoutComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec7d0
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f770
	struct FString GetShortPlayerName(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetShortPlayerName // (Final|Native|Public|Const) // @ game+0x2d5f670
	struct TArray<struct FAresPlayerRoundInfo> GetRoundInfos(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetRoundInfos // (Final|Native|Public|Const) // @ game+0x2d5f550
	struct AAresRespawnManager* GetRespawnManager(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetRespawnManager // (Final|Native|Public|BlueprintCallable) // @ game+0x2d5f520
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f460
	struct UPlayerPurchaseablesComponent* GetPlayerPurchaseablesComponent(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetPlayerPurchaseablesComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced3f0
	int32_t GetPlayerId(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetPlayerId // (Final|Native|Public|Const) // @ game+0x2d5f430
	struct UPersonalizationComponent* GetPersonalizationComponent(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetPersonalizationComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced450
	int32_t GetLoadoutValue(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetLoadoutValue // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f330
	struct UKillStreakComponent* GetKillStreakComponentMutable(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetKillStreakComponentMutable // (Final|Native|Public|BlueprintCallable) // @ game+0x2d5f2d0
	int32_t GetKills(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetKills // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f300
	int32_t GetKillNumber(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetKillNumber // (Final|Native|Public|Const) // @ game+0x2d5f2a0
	int32_t GetInventoryValue(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetInventoryValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f270
	int32_t GetEndOfRoundBeforeRewardsMoney(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetEndOfRoundBeforeRewardsMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f240
	bool GetDebugFlagIsActive(enum class EPlayerDebugFlags Flag); // Function ShooterGame.OwnerExclusivePlayerInfo.GetDebugFlagIsActive // (Final|Native|Public|Const) // @ game+0x2d5f1b0
	int32_t GetDeaths(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetDeaths // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f180
	struct UCombatReportComponent* GetCombatReportComponent(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetCombatReportComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2ced050
	int32_t GetAssists(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetAssists // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f120
	struct AShooterPlayerController* GetAresPlayerController(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f0f0
	struct AController* GetAresController(); // Function ShooterGame.OwnerExclusivePlayerInfo.GetAresController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced420
	void ClientNotifyReflectedSettingsInitialized(); // Function ShooterGame.OwnerExclusivePlayerInfo.ClientNotifyReflectedSettingsInitialized // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d5f090
	void ClientFinalizePreviousRoundRewards(struct TArray<struct FAresTrackedReward> PreviousRoundRewards); // Function ShooterGame.OwnerExclusivePlayerInfo.ClientFinalizePreviousRoundRewards // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d5efb0
	bool CanShop(); // Function ShooterGame.OwnerExclusivePlayerInfo.CanShop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5ef80
	void AuthSwapSpawnedCharacter(struct APawn* DesiredClass); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSwapSpawnedCharacter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthSetPossessedCharacter(struct AShooterCharacter* PossessedCharacter); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSetPossessedCharacter // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthSetDebugFlag(enum class EPlayerDebugFlags Flag, bool bEnabled); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSetDebugFlag // (Final|Native|Public) // @ game+0x2cdbee0
	void AuthSetController(struct AController* NewController); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthSetController // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthRoundEnded(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthRoundEnded // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthResetTrackedRewards(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthResetTrackedRewards // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthResetRoundLoadout(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthResetRoundLoadout // (Final|Native|Public|BlueprintCallable) // @ game+0x2d5e480
	void AuthResetChargeInfo(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthResetChargeInfo // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5ece0
	void AuthReset(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthReset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5e480
	void AuthOnRoundBegin(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthOnRoundBegin // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthGiveDefaultRewardText(struct FName RewardName, struct FText LocalizedRewardName, struct FAresGameRewardMultiplier Multiplier); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthGiveDefaultRewardText // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5ead0
	void AuthGiveDefaultReward(struct FName RewardName, struct FAresGameRewardMultiplier Multiplier); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthGiveDefaultReward // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5e970
	void AuthGiveCustomRewardText(struct FName RewardName, struct FText LocalizedRewardName, int32_t MoneyAmount, int32_t SignatureAbilityPoints, int32_t UltimatePoints, int32_t HealthAmount, enum class EAresRewardGrantStrategy WhenToGiveReward, enum class EAresRewardShouldIncrementInstances ShouldIncrementInstances); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthGiveCustomRewardText // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5e6c0
	void AuthGiveCustomReward(struct FName RewardName, int32_t MoneyAmount, int32_t SignatureAbilityPoints, int32_t UltimatePoints, int32_t HealthAmount, enum class EAresRewardGrantStrategy WhenToGiveReward, enum class EAresRewardShouldIncrementInstances ShouldIncrementInstances); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthGiveCustomReward // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5e4a0
	void AuthFinalizeRoundLoadout(); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthFinalizeRoundLoadout // (Final|Native|Public|BlueprintCallable) // @ game+0x2d5e480
	void AuthCancelReward(struct FName RewardName); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthCancelReward // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5e3e0
	void AuthAwardSignatureAbilityPoints(int32_t NumPoints); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthAwardSignatureAbilityPoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void AuthApplyReward(struct FAresTrackedReward TrackedReward); // Function ShooterGame.OwnerExclusivePlayerInfo.AuthApplyReward // (Final|Native|Private) // @ game+0x2d5e2b0
};

// Class ShooterGame.AresPlayerInput
// Size: 0x410 (Inherited: 0x3e0)
struct UAresPlayerInput : UPlayerInput {
	char pad_3E0[0x30]; // 0x3e0(0x30)
};

// Class ShooterGame.AresPlayerStateBase
// Size: 0x670 (Inherited: 0x4d8)
struct AAresPlayerStateBase : APlayerState {
	char pad_4D8[0x104]; // 0x4d8(0x104)
	enum class EConnectionStatus ConnectionStatus; // 0x5dc(0x01)
	bool bHasEverConnected; // 0x5dd(0x01)
	char pad_5DE[0x2]; // 0x5de(0x02)
	struct FMulticastInlineDelegate OnPlayersSpectatingUpdated; // 0x5e0(0x10)
	struct FMulticastInlineDelegate ConnectionStatusChangedDelegate; // 0x5f0(0x10)
	char pad_600[0x8]; // 0x600(0x08)
	bool bPendingDisassociate; // 0x608(0x01)
	char pad_609[0x3]; // 0x609(0x03)
	int32_t CompetitiveTier; // 0x60c(0x04)
	struct FAresPlatformParticipantInfo PlatformParticipantInfo; // 0x610(0x10)
	struct UPlatformPlayer* PlatformPlayer; // 0x620(0x08)
	struct UBaseTeamComponent* TeamComponent; // 0x628(0x08)
	struct AAresPlayerStateBase* SpectatedPlayer; // 0x630(0x08)
	struct AAresPlayerAutomation* PlayerAutomation; // 0x638(0x08)
	bool bHasEverBegunConnecting; // 0x640(0x01)
	char pad_641[0xf]; // 0x641(0x0f)
	struct FString AuthMegapacketGameName; // 0x650(0x10)
	struct FString AuthMegapacketTagLine; // 0x660(0x10)

	void UpdateSpectatedPlayer(struct AAresPlayerStateBase* NewSpectateTarget); // Function ShooterGame.AresPlayerStateBase.UpdateSpectatedPlayer // (Final|Native|Public) // @ game+0x2d601c0
	bool ShouldPopulateParticipantMissionResults(); // Function ShooterGame.AresPlayerStateBase.ShouldPopulateParticipantMissionResults // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2d60180
	bool ShouldPopulateParticipantMatchResults(); // Function ShooterGame.AresPlayerStateBase.ShouldPopulateParticipantMatchResults // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2d02aa0
	void SetAutomationClass(struct AAresPlayerAutomation*& AutomationClass); // Function ShooterGame.AresPlayerStateBase.SetAutomationClass // (Final|Native|Public|HasOutParms) // @ game+0x2d600f0
	void ServerSetAutomation(struct UObject* PlayerAutomationClass); // Function ShooterGame.AresPlayerStateBase.ServerSetAutomation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d5fdd0
	void ServerClearAutomation(); // Function ShooterGame.AresPlayerStateBase.ServerClearAutomation // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d5fcb0
	void PopulateParticipantMissionResults(struct FParticipantMissionResults& OutParticpantMatchResults); // Function ShooterGame.AresPlayerStateBase.PopulateParticipantMissionResults // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x2d5fbb0
	void PopulateParticipantMatchResults(struct FParticipantMatchResults& OutParticpantMatchResults); // Function ShooterGame.AresPlayerStateBase.PopulateParticipantMatchResults // (Native|Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x2d5fa80
	void OnTeamChanged(); // Function ShooterGame.AresPlayerStateBase.OnTeamChanged // (Native|Public) // @ game+0x2d5fa50
	void OnRep_UpdateSpectators(struct AAresPlayerStateBase* PrevSpectateTarget); // Function ShooterGame.AresPlayerStateBase.OnRep_UpdateSpectators // (Final|Native|Public) // @ game+0x2d5f9c0
	void OnRep_PendingDisassociate(bool NewPendingDisassociate); // Function ShooterGame.AresPlayerStateBase.OnRep_PendingDisassociate // (Final|Native|Public) // @ game+0x2d5f910
	bool OnObfuscatedPlayerInformationChanged(); // Function ShooterGame.AresPlayerStateBase.OnObfuscatedPlayerInformationChanged // (Final|Native|Public) // @ game+0x2d5f8c0
	bool IsLoadingForDropIn(); // Function ShooterGame.AresPlayerStateBase.IsLoadingForDropIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9a0
	struct UBaseTeamComponent* GetTeamComponent(); // Function ShooterGame.AresPlayerStateBase.GetTeamComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f800
	struct AAresPlayerStateBase* GetSpectatedPlayer(); // Function ShooterGame.AresPlayerStateBase.GetSpectatedPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f7a0
	struct FText GetShortPlayerNameText(); // Function ShooterGame.AresPlayerStateBase.GetShortPlayerNameText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f700
	struct FString GetShortPlayerName(); // Function ShooterGame.AresPlayerStateBase.GetShortPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f5e0
	struct FString GetPlayerSubject(); // Function ShooterGame.AresPlayerStateBase.GetPlayerSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f490
	int32_t GetPlayerCompetitiveTier(); // Function ShooterGame.AresPlayerStateBase.GetPlayerCompetitiveTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f400
	struct AAresPlayerAutomation* GetPlayerAutomation(); // Function ShooterGame.AresPlayerStateBase.GetPlayerAutomation // (Final|Native|Public|Const) // @ game+0x2d5f3d0
	struct FAresPlatformParticipantInfo GetPlatformParticipantInfo(); // Function ShooterGame.AresPlayerStateBase.GetPlatformParticipantInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f390
	float GetNetworkPing(); // Function ShooterGame.AresPlayerStateBase.GetNetworkPing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f360
	enum class EConnectionStatus GetConnectionStatus(); // Function ShooterGame.AresPlayerStateBase.GetConnectionStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f150
	struct AAresPlayerAutomation* GetAutomation(); // Function ShooterGame.AresPlayerStateBase.GetAutomation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x23b2e20
	struct AAresPlayerController* GetAresPlayerController(); // Function ShooterGame.AresPlayerStateBase.GetAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d5f0c0
	void AuthUpdateSingleObfuscatedPlayerInformation(struct FObfuscatedPlayerInformation UpdatedInformation); // Function ShooterGame.AresPlayerStateBase.AuthUpdateSingleObfuscatedPlayerInformation // (Final|Native|Public) // @ game+0x2d5ee80
	void AuthUpdateAllObfuscatedPlayerInformation(struct TArray<struct FObfuscatedPlayerInformation>& AllPlayerInformation); // Function ShooterGame.AresPlayerStateBase.AuthUpdateAllObfuscatedPlayerInformation // (Final|Native|Public|HasOutParms) // @ game+0x2d5eda0
	bool AuthSetCompetitiveTier(int32_t NewCompetitiveTier); // Function ShooterGame.AresPlayerStateBase.AuthSetCompetitiveTier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5ed00
	void AuthOnRoundEnd(); // Function ShooterGame.AresPlayerStateBase.AuthOnRoundEnd // (Native|Public) // @ game+0x2d5ecb0
	void AuthOnRoundBegin(); // Function ShooterGame.AresPlayerStateBase.AuthOnRoundBegin // (Native|Public) // @ game+0x2d5ec80
	void AuthClearAutomation(); // Function ShooterGame.AresPlayerStateBase.AuthClearAutomation // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthCleanAndFetchUpdatedObfuscatedPlayerInformation(); // Function ShooterGame.AresPlayerStateBase.AuthCleanAndFetchUpdatedObfuscatedPlayerInformation // (Final|Native|Public) // @ game+0x1e6e7b0
};

// Class ShooterGame.DamageResponse
// Size: 0xc0 (Inherited: 0x30)
struct UDamageResponse : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct AActor* DamagedActor; // 0x38(0x08)
	struct FNetworkedDamageResponseData DamageResponseData; // 0x40(0x80)

	enum class EAresRegionalDamage GetRegionalDamage(); // Function ShooterGame.DamageResponse.GetRegionalDamage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6deb0
	struct APawn* GetEventInstigatorPawn(); // Function ShooterGame.DamageResponse.GetEventInstigatorPawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6ddb0
	struct AController* GetEventInstigator(); // Function ShooterGame.DamageResponse.GetEventInstigator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dd80
	void GetDestroyedComponentsCopy(struct TArray<struct UDamageSectionComponent*>& Components); // Function ShooterGame.DamageResponse.GetDestroyedComponentsCopy // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dcd0
	struct UDamageType* GetDamageTypeClass(); // Function ShooterGame.DamageResponse.GetDamageTypeClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dbb0
	float GetDamageTaken(); // Function ShooterGame.DamageResponse.GetDamageTaken // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6db80
	struct FVector GetDamageOrigin(); // Function ShooterGame.DamageResponse.GetDamageOrigin // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6db40
	float GetDamageDealt(); // Function ShooterGame.DamageResponse.GetDamageDealt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6db10
	void GetDamagedComponentsCopy(struct TArray<struct UDamageSectionComponent*>& Components); // Function ShooterGame.DamageResponse.GetDamagedComponentsCopy // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dc20
	struct AActor* GetDamagedActor(); // Function ShooterGame.DamageResponse.GetDamagedActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dbf0
	struct AActor* GetDamageCauser(); // Function ShooterGame.DamageResponse.GetDamageCauser // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dae0
	bool DamageWasBlocked(); // Function ShooterGame.DamageResponse.DamageWasBlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6da00
	bool DamageKilledTarget(); // Function ShooterGame.DamageResponse.DamageKilledTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6d9d0
};

// Class ShooterGame.AresPointDamageResponse
// Size: 0x1a8 (Inherited: 0xc0)
struct UAresPointDamageResponse : UDamageResponse {
	char pad_C0[0x18]; // 0xc0(0x18)
	struct FNetworkedPointDamageResponseData PointDamageResponseData; // 0xd8(0xd0)

	bool GetImpactLocationInfo(struct UPrimitiveComponent*& Component, struct FName& Bone, struct FVector& BoneRelativeLocation); // Function ShooterGame.AresPointDamageResponse.GetImpactLocationInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d67020
};

// Class ShooterGame.AresPrespawnedEquippableCacheComponent
// Size: 0x148 (Inherited: 0xe8)
struct UAresPrespawnedEquippableCacheComponent : UActorComponent {
	struct TMap<struct AAresEquippable*, struct AAresEquippable*> InstanceCache; // 0xe8(0x50)
	struct TArray<struct AAresEquippable*> PrespawnedArrayForReplicationOnly; // 0x138(0x10)

	void WarmupCache(bool ForceNewInstances); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.WarmupCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void ResetCache(); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.ResetCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void RemoveClassFromCache(struct UAresPurchasableEquippable* EquippableClass); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.RemoveClassFromCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void PrepareInstance(struct AAresEquippable* EquippableClass, bool ForceReplicationOnSpawn); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.PrepareInstance // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67580
	struct AAresEquippable* GetInstanceFromCache(struct UAresPurchasableEquippable* EquippableClass); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.GetInstanceFromCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b840
	void AddClassToCache(struct UAresPurchasableEquippable* PurchasableEquippableClass); // Function ShooterGame.AresPrespawnedEquippableCacheComponent.AddClassToCache // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
};

// Class ShooterGame.AresPurchasable
// Size: 0x98 (Inherited: 0x30)
struct UAresPurchasable : UObject {
	struct UTexture* NewShopImage; // 0x30(0x08)
	enum class EAresCostType CostType; // 0x38(0x01)
	char pad_39[0x3]; // 0x39(0x03)
	int32_t Cost; // 0x3c(0x04)
	enum class EAresPurchasableType PurchasableType; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TArray<struct UAresPurchasable*> PrerequisitePurchasables; // 0x48(0x10)
	struct FName ShopCategory; // 0x58(0x0c)
	struct FName ShopSubcategory; // 0x64(0x0c)
	struct FText ShopCategoryText; // 0x70(0x18)
	struct FShopGridPosition ShopGridPosition; // 0x88(0x08)
	bool bCostCountsTowardsLoadout; // 0x90(0x01)
	bool bCanBeTrashed; // 0x91(0x01)
	char pad_92[0x6]; // 0x92(0x06)

	struct FName GetShopSubcategory(); // Function ShooterGame.AresPurchasable.GetShopSubcategory // (Final|Native|Public|Const) // @ game+0x2d673f0
	struct FName GetShopCategory(); // Function ShooterGame.AresPurchasable.GetShopCategory // (Final|Native|Public|Const) // @ game+0x2d673b0
	int32_t GetSellPrice(struct AOwnerExclusivePlayerInfo* PlayerInfo); // Function ShooterGame.AresPurchasable.GetSellPrice // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d67300
	struct FText GetPurchasableNameText(struct UObject* WorldContextObject); // Function ShooterGame.AresPurchasable.GetPurchasableNameText // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d67220
	int32_t GetLoadoutValue(struct AShooterCharacter* OwningCharacter); // Function ShooterGame.AresPurchasable.GetLoadoutValue // (Native|Public|Const) // @ game+0x2d67170
	int32_t GetBaseCost(struct AOwnerExclusivePlayerInfo* PlayerInfo); // Function ShooterGame.AresPurchasable.GetBaseCost // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d66f50
	bool CanSell(struct AOwnerExclusivePlayerInfo* PlayerInfo); // Function ShooterGame.AresPurchasable.CanSell // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d66ea0
};

// Class ShooterGame.AresPurchasableEquippable
// Size: 0xb0 (Inherited: 0x98)
struct UAresPurchasableEquippable : UAresPurchasable {
	char pad_98[0x1]; // 0x98(0x01)
	bool bCanAddToStorageSlot; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
	struct AAresItem* EquippableClass; // 0xa0(0x08)
	enum class EModificationType ModificationType; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)

	struct AAresItem* GetEquippableClass(); // Function ShooterGame.AresPurchasableEquippable.GetEquippableClass // (Final|Native|Public|Const) // @ game+0x2d67000
};

// Class ShooterGame.AresPurchasableAdvancement
// Size: 0xb8 (Inherited: 0xb0)
struct UAresPurchasableAdvancement : UAresPurchasableEquippable {
	int32_t ExperiencePurchased; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class ShooterGame.AresPurchasableCharge
// Size: 0xb8 (Inherited: 0xb0)
struct UAresPurchasableCharge : UAresPurchasableEquippable {
	int32_t ChargesAdded; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class ShooterGame.AresPurchasableEnergy
// Size: 0xb0 (Inherited: 0xb0)
struct UAresPurchasableEnergy : UAresPurchasableEquippable {
};

// Class ShooterGame.AresPurchasablePackage
// Size: 0x3e8 (Inherited: 0x3d0)
struct AAresPurchasablePackage : AInfo {
	struct AAresEquippable* AssociatedEquipable; // 0x3d0(0x08)
	struct UMaterialInterface* Material; // 0x3d8(0x08)
	struct USkeletalMesh* SkeletalMesh; // 0x3e0(0x08)
};

// Class ShooterGame.AresPurchasableRank
// Size: 0xc0 (Inherited: 0xb0)
struct UAresPurchasableRank : UAresPurchasableEquippable {
	struct TArray<int32_t> RankCost; // 0xb0(0x10)
};

// Class ShooterGame.AresPurchasableUlt
// Size: 0xb0 (Inherited: 0xb0)
struct UAresPurchasableUlt : UAresPurchasableEquippable {
};

// Class ShooterGame.AresRadialDamageResponse
// Size: 0x1c0 (Inherited: 0xc0)
struct UAresRadialDamageResponse : UDamageResponse {
	char pad_C0[0x8]; // 0xc0(0x08)
	struct FNetworkedRadialDamageResponseData RadialDamageResponseData; // 0xc8(0xf8)
};

// Class ShooterGame.AresRepairModeGameInstance
// Size: 0x1e0 (Inherited: 0x1b0)
struct UAresRepairModeGameInstance : UGameInstance {
	struct UAresClientEvents* AresClientEvents; // 0x1b0(0x08)
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x1b8(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0x1c0(0x08)
	struct URiotProductManager* RiotProductManager; // 0x1c8(0x08)
	struct UApplicationRepairManager* ApplicationRepairManager; // 0x1d0(0x08)
	struct UPlatformInitializerV2* PlatformInitializer; // 0x1d8(0x08)

	void HandleRNetHealthChange(); // Function ShooterGame.AresRepairModeGameInstance.HandleRNetHealthChange // (Final|Native|Private) // @ game+0x2d67540
	void HandleRiotSDKConnectionSuccess(); // Function ShooterGame.AresRepairModeGameInstance.HandleRiotSDKConnectionSuccess // (Final|Native|Private) // @ game+0x2d67560
	void HandlePlatformInitStatusChanged(enum class EAresPlatformInitStatus InitStatus); // Function ShooterGame.AresRepairModeGameInstance.HandlePlatformInitStatusChanged // (Final|Native|Private) // @ game+0x2d674c0
	void HandlePlatformFault(enum class EPlatformFaultReason& Reason); // Function ShooterGame.AresRepairModeGameInstance.HandlePlatformFault // (Final|Native|Private|HasOutParms) // @ game+0x2d67430
};

// Class ShooterGame.AresRespawnManager
// Size: 0x3d0 (Inherited: 0x3d0)
struct AAresRespawnManager : AInfo {

	struct APawn* AuthRespawnPlayer(struct AShooterPlayerState* State, struct UPlayerSpawner* PlayerSpawner); // Function ShooterGame.AresRespawnManager.AuthRespawnPlayer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d6b890
};

// Class ShooterGame.AresScrollBox
// Size: 0x930 (Inherited: 0x928)
struct UAresScrollBox : UScrollBox {
	bool InvertScrolling; // 0x928(0x01)
	char pad_929[0x7]; // 0x929(0x07)
};

// Class ShooterGame.AresServerGameInstance
// Size: 0x50 (Inherited: 0x40)
struct UAresServerGameInstance : UAresBaseGameInstance {
	struct UReflectedPlayerSettingsManager* ReflectedPlayerSettingsManagerClass; // 0x40(0x08)
	struct UReflectedPlayerSettingsManager* ReflectedPlayerSettingsManager; // 0x48(0x08)

	struct UReflectedPlayerSettingsManager* GetReflectedPlayerSettingsManager(); // Function ShooterGame.AresServerGameInstance.GetReflectedPlayerSettingsManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x23b2e20
	struct UAresServerGameInstance* GetAresServerGameInstance(struct UObject* WorldContextObject); // Function ShooterGame.AresServerGameInstance.GetAresServerGameInstance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d6bae0
};

// Class ShooterGame.AresSettingsManager
// Size: 0x430 (Inherited: 0x30)
struct UAresSettingsManager : UObject {
	struct FMulticastInlineDelegate OnSettingsInitialized; // 0x30(0x10)
	struct FDelegate OnAnyFloatSettingChangedEvent; // 0x40(0x14)
	struct FDelegate OnAnyIntSettingChangedEvent; // 0x54(0x14)
	struct FDelegate OnAnyBoolSettingChangedEvent; // 0x68(0x14)
	struct FDelegate OnAnyStringSettingChangedEvent; // 0x7c(0x14)
	struct TMap<struct FName, struct FAresFloatSetting> FloatSettings; // 0x90(0x50)
	struct TMap<struct FName, struct FAresIntSetting> IntSettings; // 0xe0(0x50)
	struct TMap<struct FName, struct FAresBoolSetting> BoolSettings; // 0x130(0x50)
	struct TMap<struct FName, struct FAresStringSetting> StringSettings; // 0x180(0x50)
	struct TMap<struct FName, struct FAresVoidSetting> VoidSettings; // 0x1d0(0x50)
	struct TMap<struct FName, struct FFloatSettingChangedDelegateList> FloatSettingChangedEvents; // 0x220(0x50)
	struct TMap<struct FName, struct FIntSettingChangedDelegateList> IntSettingChangedEvents; // 0x270(0x50)
	struct TMap<struct FName, struct FBoolSettingChangedDelegateList> BoolSettingChangedEvents; // 0x2c0(0x50)
	struct TMap<struct FName, struct FStringSettingChangedDelegateList> StringSettingChangedEvents; // 0x310(0x50)
	struct TArray<enum class EAresFloatSettingName> ReflectedFloatSettings; // 0x360(0x10)
	struct TArray<enum class EAresIntSettingName> ReflectedIntSettings; // 0x370(0x10)
	struct TArray<enum class EAresBoolSettingName> ReflectedBoolSettings; // 0x380(0x10)
	struct TMap<enum class EAresStringSettingName, struct TScriptInterface<IAresStringListSettingModel>> StringListSettingModels; // 0x390(0x50)
	struct UAresSettingsOverrides* SharedSettingOverrides; // 0x3e0(0x08)
	struct UAresSettingsOverrides* PlatformSettingOverrides; // 0x3e8(0x08)
	struct UAresSettingsOverrides* GamepadSettingOverrides; // 0x3f0(0x08)
	char pad_3F8[0x8]; // 0x3f8(0x08)
	struct UNativePlatformSaveSystem* NativePlatformSaveSystem; // 0x400(0x08)
	struct FMulticastInlineDelegate OnAresCrosshairSettingsChanged; // 0x408(0x10)
	struct FCrosshairProfileData CachedCrosshairProfileData; // 0x418(0x18)

	void UpdateCachedCrosshairProfileData(); // Function ShooterGame.AresSettingsManager.UpdateCachedCrosshairProfileData // (Final|Native|Private) // @ game+0x2d6e670
	void SwitchCrosshairProfile(int32_t NewIndex); // Function ShooterGame.AresSettingsManager.SwitchCrosshairProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6e5e0
	bool StealCrosshairAndAddCrosshairProfile(struct FString CrosshairProfileString, struct FText& OutMessage); // Function ShooterGame.AresSettingsManager.StealCrosshairAndAddCrosshairProfile // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6e4c0
	void SetStringSettingFromInputChord(enum class EAresStringSettingName SettingEnum, struct FInputChord Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetStringSettingFromInputChord // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6e2e0
	void SetStringSetting(enum class EAresStringSettingName SettingEnum, struct FString Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetStringSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6e160
	void SetIntSetting(enum class EAresIntSettingName SettingEnum, int32_t Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetIntSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6e050
	void SetFloatSetting(enum class EAresFloatSettingName SettingEnum, float Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetFloatSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6df30
	void SetCurrentCrosshairSettings(struct FCrosshairSettings NewCrosshairSettings); // Function ShooterGame.AresSettingsManager.SetCurrentCrosshairSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6de40
	void SetBoolSetting(enum class EAresBoolSettingName SettingEnum, bool Value, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.SetBoolSetting // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6dd20
	void SaveRoamingSettings(); // Function ShooterGame.AresSettingsManager.SaveRoamingSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6dd00
	void SaveCrosshairSettingsAndProfileData(struct FCrosshairProfileData& CrosshairProfileData); // Function ShooterGame.AresSettingsManager.SaveCrosshairSettingsAndProfileData // (Final|Native|Private|HasOutParms) // @ game+0x2d6dc50
	void SaveCrosshairProfileData(struct FCrosshairProfileData& CrosshairProfileData); // Function ShooterGame.AresSettingsManager.SaveCrosshairProfileData // (Final|Native|Private|HasOutParms) // @ game+0x2d6dba0
	void ResetStringToDefaultValue(enum class EAresStringSettingName SettingEnum, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.ResetStringToDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6dad0
	void ResetIntToDefaultValue(enum class EAresIntSettingName SettingEnum, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.ResetIntToDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6da00
	void ResetFloatToDefaultValue(enum class EAresFloatSettingName SettingEnum, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.ResetFloatToDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6d930
	void ResetBoolToDefaultValue(enum class EAresBoolSettingName SettingEnum, bool bSaveToRoamingServiceImmediately); // Function ShooterGame.AresSettingsManager.ResetBoolToDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6d860
	void RemoveStringSettingChangedEvent(enum class EAresStringSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.RemoveStringSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6d760
	void RemoveIntSettingChangedEvent(enum class EAresIntSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.RemoveIntSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6d660
	void RemoveFloatSettingChangedEvent(enum class EAresFloatSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.RemoveFloatSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6d560
	void RemoveCurrentCrosshairProfile(); // Function ShooterGame.AresSettingsManager.RemoveCurrentCrosshairProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6d540
	void RemoveBoolSettingChangedEvent(enum class EAresBoolSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.RemoveBoolSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6d440
	void OnReflectedIntSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.AresSettingsManager.OnReflectedIntSettingChanged // (Final|Native|Private) // @ game+0x2d6d330
	void OnReflectedFloatSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresSettingsManager.OnReflectedFloatSettingChanged // (Final|Native|Private) // @ game+0x2d6d220
	void OnReflectedBoolSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresSettingsManager.OnReflectedBoolSettingChanged // (Final|Native|Private) // @ game+0x2d6d100
	void OnCrosshairStringSettingUpdated(enum class EAresStringSettingName SettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.AresSettingsManager.OnCrosshairStringSettingUpdated // (Final|Native|Private) // @ game+0x2d6cfa0
	void OnCrosshairFloatSettingUpdated(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresSettingsManager.OnCrosshairFloatSettingUpdated // (Final|Native|Private) // @ game+0x2d6ce90
	void OnCrosshairBoolSettingUpdated(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.AresSettingsManager.OnCrosshairBoolSettingUpdated // (Final|Native|Private) // @ game+0x2d6cd70
	void OnAnyCrosshairSettingsUpdated(); // Function ShooterGame.AresSettingsManager.OnAnyCrosshairSettingsUpdated // (Final|Native|Private) // @ game+0x2d6cd50
	bool IsVoidSettingRelevantForPlatform(enum class EAresVoidSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsVoidSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d6ccc0
	bool IsStringSettingRelevantForPlatform(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsStringSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d6cc30
	bool IsIntSettingRelevantForPlatform(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsIntSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d6cba0
	bool IsFloatSettingRelevantForPlatform(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsFloatSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d6cb10
	bool IsBoolSettingRelevantForPlatform(enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsBoolSettingRelevantForPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d6ca80
	bool IsBoolSettingAllowed(enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.IsBoolSettingAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d6c9f0
	struct FString GetStringSettingDefaultValue(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetStringSettingDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c950
	struct FString GetStringSetting(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetStringSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c8b0
	struct TScriptInterface<IAresStringListSettingModel> GetStringListSettingModel(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetStringListSettingModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c810
	int32_t GetMaxCrosshairProfiles(); // Function ShooterGame.AresSettingsManager.GetMaxCrosshairProfiles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c7e0
	int32_t GetIntSettingMinValue(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetIntSettingMinValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c750
	int32_t GetIntSettingMaxValue(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetIntSettingMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c6c0
	int32_t GetIntSettingDefaultValue(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetIntSettingDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c630
	int32_t GetIntSetting(enum class EAresIntSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetIntSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c5a0
	struct FInputChord GetInputChordFromStringSetting(enum class EAresStringSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetInputChordFromStringSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c470
	float GetFloatSettingNormalizedMinValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingNormalizedMinValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c3e0
	float GetFloatSettingNormalizedMaxValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingNormalizedMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c350
	float GetFloatSettingMinValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingMinValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c2c0
	float GetFloatSettingMaxValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingMaxValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c230
	int32_t GetFloatSettingIncrementCount(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingIncrementCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c1a0
	bool GetFloatSettingDisplayNormalizedValues(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingDisplayNormalizedValues // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c110
	float GetFloatSettingDefaultValue(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSettingDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6c080
	float GetFloatSetting(enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetFloatSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6bff0
	struct FCrosshairSettings GetDefaultCrosshairSettings(); // Function ShooterGame.AresSettingsManager.GetDefaultCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6bf70
	struct FCrosshairSettings GetCurrentCrosshairSettingsFromLooseSettings(); // Function ShooterGame.AresSettingsManager.GetCurrentCrosshairSettingsFromLooseSettings // (Final|Native|Private|Const) // @ game+0x2d6bef0
	struct FCrosshairSettings GetCurrentCrosshairSettings(); // Function ShooterGame.AresSettingsManager.GetCurrentCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6be70
	struct FCrosshairProfileData GetCrosshairProfileData(); // Function ShooterGame.AresSettingsManager.GetCrosshairProfileData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d6bda0
	int32_t GetCrosshairColorPoolIndex(struct FColor Color); // Function ShooterGame.AresSettingsManager.GetCrosshairColorPoolIndex // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2d6bd20
	struct FColor GetCrosshairColorFromPoolIndex(int32_t Index); // Function ShooterGame.AresSettingsManager.GetCrosshairColorFromPoolIndex // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2d6bc90
	bool GetBoolSettingDefaultValue(enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetBoolSettingDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6bc00
	bool GetBoolSetting(enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.AresSettingsManager.GetBoolSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6bb70
	enum class EAresAntiAliasing GetAntiAliasing(); // Function ShooterGame.AresSettingsManager.GetAntiAliasing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d6bab0
	struct FString GenerateShareableCrosshairProfileString(struct FCrosshairSettings CrosshiarSettings); // Function ShooterGame.AresSettingsManager.GenerateShareableCrosshairProfileString // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6b980
	void CopyCurrentShareableCrosshairStringToClipboard(); // Function ShooterGame.AresSettingsManager.CopyCurrentShareableCrosshairStringToClipboard // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6b960
	void ApplyCrosshairSettingsToCrosshairProfileData(struct FCrosshairProfileData& CrosshairProfileData, struct FCrosshairSettings CrosshairSettings, int32_t Index); // Function ShooterGame.AresSettingsManager.ApplyCrosshairSettingsToCrosshairProfileData // (Final|Native|Private|HasOutParms|Const) // @ game+0x2d6b6f0
	void AddStringSettingChangedEvent(enum class EAresStringSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.AddStringSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6b5f0
	void AddIntSettingChangedEvent(enum class EAresIntSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.AddIntSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6b4f0
	void AddFloatSettingChangedEvent(enum class EAresFloatSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.AddFloatSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6b3f0
	void AddBoolSettingChangedEvent(enum class EAresBoolSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.AresSettingsManager.AddBoolSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d6b2f0
	bool AddAndSwitchToNewCrosshairProfileFromString(struct FString CrosshairProfileString); // Function ShooterGame.AresSettingsManager.AddAndSwitchToNewCrosshairProfileFromString // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6b1e0
	void AddAndSwitchToNewCrosshairProfile(struct FCrosshairSettings NewCrosshairSettings); // Function ShooterGame.AresSettingsManager.AddAndSwitchToNewCrosshairProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x2d6b0f0
};

// Class ShooterGame.AresSettingTypes
// Size: 0x30 (Inherited: 0x30)
struct UAresSettingTypes : UObject {
};

// Class ShooterGame.AresSettingsOverrides
// Size: 0x170 (Inherited: 0x30)
struct UAresSettingsOverrides : UObject {
	struct TMap<enum class EAresFloatSettingName, struct FAresFloatSetting> FloatSettingsOverrides; // 0x30(0x50)
	struct TMap<enum class EAresIntSettingName, struct FAresIntSetting> IntSettingsOverrides; // 0x80(0x50)
	struct TMap<enum class EAresBoolSettingName, bool> BoolSettingsOverrides; // 0xd0(0x50)
	struct TMap<enum class EAresStringSettingName, struct FString> StringSettingsOverrides; // 0x120(0x50)
};

// Class ShooterGame.AresSettingsPresetsDataAsset
// Size: 0x48 (Inherited: 0x38)
struct UAresSettingsPresetsDataAsset : UDataAsset {
	struct TArray<struct FAresSettingsPresetsOption> PresetOptions; // 0x38(0x10)
};

// Class ShooterGame.AresSkinCatalog
// Size: 0x460 (Inherited: 0x3d0)
struct AAresSkinCatalog : AInfo {
	struct TSoftClassPtr<UObject> GunSkinComponentBase; // 0x3d0(0x30)
	struct TSoftClassPtr<UObject> GunSkinChromaComponentBase; // 0x400(0x30)
	struct TSoftClassPtr<UObject> MeleeSkinComponentBase; // 0x430(0x30)
};

// Class ShooterGame.AresSlashCommands
// Size: 0x30 (Inherited: 0x30)
struct UAresSlashCommands : UObject {
};

// Class ShooterGame.AresSlateGlobals
// Size: 0x300 (Inherited: 0x30)
struct UAresSlateGlobals : UObject {
	struct FSlateBrush RedBrush; // 0x30(0x90)
	struct FSlateBrush GreenBrush; // 0xc0(0x90)
	struct FSlateBrush BlueBrush; // 0x150(0x90)
	struct FSlateBrush BlackBrush; // 0x1e0(0x90)
	struct FSlateBrush WhiteBrush; // 0x270(0x90)
};

// Class ShooterGame.AresSoundHandler
// Size: 0x430 (Inherited: 0x3d0)
struct AAresSoundHandler : AActor {
	struct UAresAudioComponent* Reusable2DAudioComponent; // 0x3d0(0x08)
	struct UAresAudioComponent* TemporaryReusableAudioComponent; // 0x3d8(0x08)
	char pad_3E0[0x50]; // 0x3e0(0x50)

	void TriggerWorldImpactEffectSound(struct AActor* InstigatorActor, struct UWorld* World, struct UAkAudioEvent* Event, struct FVector& ImpactPoint, struct FString Perspective, enum class EAresSurfaceType SurfaceType, bool bEnableOcclusion, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerWorldImpactEffectSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void TriggerWorldEquippableSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct USceneComponent* AttachComponent, struct FName AttachPoint, struct FString Perspective, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerWorldEquippableSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void TriggerHUDPing(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct FVector& Location, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerHUDPing // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void TriggerHUDKillConfirmSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, int32_t MultikillLevel, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerHUDKillConfirmSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void TriggerHUDError(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerHUDError // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void TriggerExplosionEffectSound(struct AShooterExplosionEffect* ExplosionEffect, struct UAkAudioEvent* Event, struct FVector& Location, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerExplosionEffectSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void TriggerEquippablePickupSound(struct AActor* OwnerActor, struct AAresEquippable* NewEquippable, struct UAkAudioEvent* Event, struct USceneComponent* AttachComponent, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerEquippablePickupSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void TriggerEjectableBounceSound(struct AAresEjectable* Ejectable, struct UAkAudioEvent* Event, struct FVector& Location, enum class EAresSurfaceType SurfaceType, int32_t NumBounces, float BounceSpeed, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerEjectableBounceSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void TriggerCharacterRespawnSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct FVector& RespawnLocation, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterRespawnSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void TriggerCharacterImpactEffectSound(struct AActor* InstigatorActor, struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct FVector& ImpactPoint, enum class EAresImpactEffectHitspace HitSpace, enum class EAresRegionalDamage RegionalDamage, enum class EAresImpactEffectWithArmor HitImpactArmor, enum class EAresImpactEffectAllies Allies, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterImpactEffectSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void TriggerCharacterHitConfirmSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct USkeletalMeshComponent* AttachComponent, enum class EAresHitConfirmLocality HitLocality, enum class EAresRegionalDamage RegionalDamage, float FalloffMultiplier, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterHitConfirmSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void TriggerCharacterGroundSound(struct AShooterCharacter* ShooterCharacter, struct TArray<struct UAkAudioEvent*>& Events, struct FVector& SoundLocation, struct FRotator& SoundRotation, struct FString Perspective, enum class EAresSurfaceType SurfaceType, float VolumeMultiplier, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterGroundSound // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void TriggerCharacterEquippableSound(struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct USceneComponent* AttachComponent, struct FName AttachPoint, struct FString Perspective, bool& Result, struct UAresAudioComponent*& AudioComponent); // Function ShooterGame.AresSoundHandler.TriggerCharacterEquippableSound // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void TriggerBulletWhizSound(struct UBulletWhizByComponent* WhizByComponent, struct FAresWhizBySoundTuning& WhizByTuning, struct FVector& ShotStart, struct FVector& ShotEnd, struct FVector& ClosestPoint, float ClosestPointDistance, struct FVector& ListenerPoint, struct AShooterCharacter* InstigatorShooterCharacter, struct AShooterCharacter* LocalShooterCharacter, bool bIsFriendlyFire, enum class EAresImpactOrder ImpactOrder); // Function ShooterGame.AresSoundHandler.TriggerBulletWhizSound // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	bool OnWorldImpactSound(struct AActor* InstigatingActor, struct AActor* WorldContext, struct UAkAudioEvent* Event, struct FVector& ImpactPoint, float MaxDistanceToListener, bool bRequiresLineOfSightToListener, struct FString Perspective, enum class EAresSurfaceType SurfaceType, struct UAresAudioComponent* ReuseAudioComponent, struct UAresAudioComponent*& ReturnAudioComponent); // Function ShooterGame.AresSoundHandler.OnWorldImpactSound // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d96630
	bool OnCharacterImpactSound(struct AActor* InstigatingActor, struct AShooterCharacter* ShooterCharacter, struct UAkAudioEvent* Event, struct FVector& ImpactPoint, enum class EAresImpactEffectHitspace HitSpace, enum class EAresRegionalDamage RegionalDamage, enum class EAresImpactEffectWithArmor HitImpactArmor, enum class EAresImpactEffectAllies Allies); // Function ShooterGame.AresSoundHandler.OnCharacterImpactSound // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d96340
	bool OnCharacterGroundSound(struct AShooterCharacter* ShooterCharacter, struct TArray<struct UAkAudioEvent*>& Events, struct FVector& SoundLocation, struct FRotator& SoundRotation, struct FString Perspective, enum class EAresSurfaceType SurfaceType, float VolumeMultiplier, struct UAresAudioComponent* ReuseAudioComponent); // Function ShooterGame.AresSoundHandler.OnCharacterGroundSound // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d96080
};

// Class ShooterGame.AresSoundActor
// Size: 0x430 (Inherited: 0x430)
struct AAresSoundActor : AAresSoundHandler {
};

// Class ShooterGame.AresSpray
// Size: 0x488 (Inherited: 0x3d0)
struct AAresSpray : AActor {
	struct TSet<struct TSoftClassPtr<UObject>> Sockets; // 0x3d0(0x50)
	struct TArray<struct AEffectContainer*> SprayEffects; // 0x420(0x10)
	struct FEffectData CommonSprayEffectData; // 0x430(0x58)

	void AuthTriggerSprayEffect(struct AEffectContainer* SprayFXC, struct AActor* HitActor, struct FVector HitLocation, struct FRotator HitRotation, struct AShooterCharacter* SprayingCharacter, struct FEffectData& EffectData); // Function ShooterGame.AresSpray.AuthTriggerSprayEffect // (Final|BlueprintAuthorityOnly|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d955e0
	void AuthSprayAtLocation(struct AActor* HitActor, struct FVector HitLocation, struct FRotator HitRotation, struct AShooterCharacter* SprayingCharacter); // Function ShooterGame.AresSpray.AuthSprayAtLocation // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0x2d95440
	struct FEffectData AuthModifyEffectDataForSprayAttempt(struct FEffectData CommonEffectData, struct AActor* HitActor, struct FVector HitLocation, struct FRotator HitRotation, struct AShooterCharacter* SprayingCharacter); // Function ShooterGame.AresSpray.AuthModifyEffectDataForSprayAttempt // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d95180
};

// Class ShooterGame.AresStore
// Size: 0xb0 (Inherited: 0x30)
struct UAresStore : UObject {
	struct TArray<struct TSoftClassPtr<UObject>> PurchasableAssets; // 0x30(0x10)
	struct FSoftObjectPath PurchasableAssetsDevOnlyDataTable; // 0x40(0x20)
	float SellbackPercent; // 0x60(0x04)
	uint32_t ArmorSellPriceRoundingValue; // 0x64(0x04)
	struct FPurchasableList CachedPurchasables; // 0x68(0x10)
	struct FPurchasableList CachedCombinedPurchasables; // 0x78(0x10)
	char pad_88[0x28]; // 0x88(0x28)

	struct FPurchasableList GetPurchasables(struct UObject* WorldContextObject); // Function ShooterGame.AresStore.GetPurchasables // (Final|Native|Public|BlueprintCallable) // @ game+0x2d95c00
};

// Class ShooterGame.AresStringListSettingModel
// Size: 0x30 (Inherited: 0x30)
struct UAresStringListSettingModel : UInterface {

	void UnbindOnStringListSettingChanged(struct FDelegate& Event); // Function ShooterGame.AresStringListSettingModel.UnbindOnStringListSettingChanged // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x2d96a30
	void RemoveFromStringSettingList(struct FString StringSetting); // Function ShooterGame.AresStringListSettingModel.RemoveFromStringSettingList // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d96970
	struct TScriptInterface<IOrderedListModel> GetStringSettingListModel(); // Function ShooterGame.AresStringListSettingModel.GetStringSettingListModel // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d95e00
	struct TArray<struct FString> GetStringSettingList(); // Function ShooterGame.AresStringListSettingModel.GetStringSettingList // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d95d70
	struct FUnicodeStringLength GetMaxStringSize(); // Function ShooterGame.AresStringListSettingModel.GetMaxStringSize // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d95bc0
	int32_t GetMaxListSize(); // Function ShooterGame.AresStringListSettingModel.GetMaxListSize // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2d95b80
	void BindOnStringListSettingChanged(struct FDelegate& Event); // Function ShooterGame.AresStringListSettingModel.BindOnStringListSettingChanged // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|Const) // @ game+0x2d95860
	enum class EAddToStringSettingListResult AddToStringSettingList(struct FString StringSetting); // Function ShooterGame.AresStringListSettingModel.AddToStringSettingList // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d950b0
};

// Class ShooterGame.AresTestGlobals
// Size: 0x40 (Inherited: 0x30)
struct UAresTestGlobals : UObject {
	struct TArray<struct FBlueprintAutomatedTest> BlueprintAutomatedTests; // 0x30(0x10)
};

// Class ShooterGame.TestGlobalsDataAsset
// Size: 0x78 (Inherited: 0x38)
struct UTestGlobalsDataAsset : UPrimaryDataAsset {
	struct TSoftClassPtr<UObject> AresTestGlobals; // 0x38(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> BlueprintsToIncludeInRemoting; // 0x68(0x10)
};

// Class ShooterGame.AresTestLogic
// Size: 0xd0 (Inherited: 0x30)
struct UAresTestLogic : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	bool bReadyToTest; // 0x48(0x01)
	enum class EGameFlowStateType CurrentGameFlowStateType; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct FString CurrentMatchID; // 0x50(0x10)
	char pad_60[0x18]; // 0x60(0x18)
	struct TArray<struct FAresAutomationEvent> Events; // 0x78(0x10)
	struct TArray<struct FString> Logs; // 0x88(0x10)
	struct FString FailureReason; // 0x98(0x10)
	enum class EAresTestAutomationStatus Status; // 0xa8(0x01)
	char ClientId; // 0xa9(0x01)
	bool bIsServer; // 0xaa(0x01)
	bool bCrashOnVoteFail; // 0xab(0x01)
	char pad_AC[0x4]; // 0xac(0x04)
	struct FString TestCategory; // 0xb0(0x10)
	char pad_C0[0x10]; // 0xc0(0x10)

	void WaitForLocalPlayerControllerOfType(struct UObject* WorldContextObject, struct APlayerController* Type, float MaxWaitSeconds, struct APlayerController*& FoundController, struct FLatentActionInfo LatentInfo); // Function ShooterGame.AresTestLogic.WaitForLocalPlayerControllerOfType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d96af0
	void VotePassTest(); // Function ShooterGame.AresTestLogic.VotePassTest // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void VoteFailTest(struct FString Reason); // Function ShooterGame.AresTestLogic.VoteFailTest // (Final|Native|Public|BlueprintCallable) // @ game+0x2d0cd00
	void TestRunningTick(float DeltaSeconds); // Function ShooterGame.AresTestLogic.TestRunningTick // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void Shutdown(); // Function ShooterGame.AresTestLogic.Shutdown // (Final|Native|Public) // @ game+0x1e6e7b0
	void RunLocalPlayerAutomation(struct AAresPlayerAutomation* Type); // Function ShooterGame.AresTestLogic.RunLocalPlayerAutomation // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void OnTestLoaded(); // Function ShooterGame.AresTestLogic.OnTestLoaded // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnPlayerAutomationComplete(struct AAresPlayerAutomation* PlayerAutomation); // Function ShooterGame.AresTestLogic.OnPlayerAutomationComplete // (Native|Event|Public|BlueprintEvent) // @ game+0x2d965a0
	void OnLeftMatch(struct FString MatchID); // Function ShooterGame.AresTestLogic.OnLeftMatch // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnJoinedMatch(struct FString MatchID); // Function ShooterGame.AresTestLogic.OnJoinedMatch // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnGameFlowStateChanged(enum class EGameFlowStateType OldState, enum class EGameFlowStateType NewState); // Function ShooterGame.AresTestLogic.OnGameFlowStateChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnBeginTest(); // Function ShooterGame.AresTestLogic.OnBeginTest // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	struct TArray<struct FString> LoadTestableCharactersWithFilter(struct TArray<struct FString>& PathsToIgnore); // Function ShooterGame.AresTestLogic.LoadTestableCharactersWithFilter // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d95f50
	struct TArray<struct FString> LoadTestableCharacters(); // Function ShooterGame.AresTestLogic.LoadTestableCharacters // (Final|Native|Public|BlueprintCallable) // @ game+0x2d95ec0
	bool IsReadyToBeginTest(); // Function ShooterGame.AresTestLogic.IsReadyToBeginTest // (Native|Event|Public|BlueprintEvent) // @ game+0x2034820
	bool HasTestFailed(); // Function ShooterGame.AresTestLogic.HasTestFailed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d95e90
	void HandleOnStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.AresTestLogic.HandleOnStateChanged // (Final|Native|Public) // @ game+0x2cedcd0
	void HandleCurrentMatchUpdated(); // Function ShooterGame.AresTestLogic.HandleCurrentMatchUpdated // (Final|Native|Public) // @ game+0x1e6e7b0
	struct UWorld* GetWorld(); // Function ShooterGame.AresTestLogic.GetWorld // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d95e50
	struct FString GetStatusString(); // Function ShooterGame.AresTestLogic.GetStatusString // (Final|Native|Public|Const) // @ game+0x2d95ce0
	struct UGameInstance* GetGameInstance(); // Function ShooterGame.AresTestLogic.GetGameInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d95b50
	struct FString GetFailureReason(); // Function ShooterGame.AresTestLogic.GetFailureReason // (Final|Native|Public|Const) // @ game+0x2d95ac0
	struct TArray<struct FString> DequeueLogs(); // Function ShooterGame.AresTestLogic.DequeueLogs // (Final|Native|Public) // @ game+0x2d95a30
	struct TArray<struct FAresAutomationEvent> DequeueEvents(); // Function ShooterGame.AresTestLogic.DequeueEvents // (Final|Native|Public) // @ game+0x2d95920
	void AutomationLog(struct FString Log); // Function ShooterGame.AresTestLogic.AutomationLog // (Final|Native|Public|BlueprintCallable) // @ game+0x2d0cd00
	void AuthRunGameAutomation(struct AAresGameAutomation* Type); // Function ShooterGame.AresTestLogic.AuthRunGameAutomation // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
};

// Class ShooterGame.AresTextBlock
// Size: 0x388 (Inherited: 0x310)
struct UAresTextBlock : UTextBlock {
	bool bOverride_FontStyle; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct UFontStyleDataAsset* FontStyle; // 0x318(0x08)
	struct FAresFontStyle FontStyleOverride; // 0x320(0x68)

	void SetFontStyleOverride(struct FAresFontStyle InFontStyleOverride); // Function ShooterGame.AresTextBlock.SetFontStyleOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9d7d0
	void SetFontStyle(struct UFontStyleDataAsset* InFontStyle); // Function ShooterGame.AresTextBlock.SetFontStyle // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9d740
	bool HasSelectedFontStyle(); // Function ShooterGame.AresTextBlock.HasSelectedFontStyle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d9c970
};

// Class ShooterGame.AresTextRenderComponent
// Size: 0x5a0 (Inherited: 0x5a0)
struct UAresTextRenderComponent : UTextRenderComponent {

	void SetYScaleCached(float Value); // Function ShooterGame.AresTextRenderComponent.SetYScaleCached // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9df00
	void SetXScaleCached(float Value); // Function ShooterGame.AresTextRenderComponent.SetXScaleCached // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9de80
	void SetWorldSizeCached(float Value); // Function ShooterGame.AresTextRenderComponent.SetWorldSizeCached // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9de00
	void SetTextRenderColorCached(struct FColor Value); // Function ShooterGame.AresTextRenderComponent.SetTextRenderColorCached // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d9dd80
	void SetTextMaterialCached(struct UMaterialInterface* Material); // Function ShooterGame.AresTextRenderComponent.SetTextMaterialCached // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9dcf0
	void SetTextCached(struct FString Value); // Function ShooterGame.AresTextRenderComponent.SetTextCached // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9dc40
	void SetLocalizedTextCached(struct FText& Value); // Function ShooterGame.AresTextRenderComponent.SetLocalizedTextCached // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d9da70
	void SetHorizSpacingAdjustCached(float Value); // Function ShooterGame.AresTextRenderComponent.SetHorizSpacingAdjustCached // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9d8f0
	void SetHorizontalAlignmentCached(enum class EHorizTextAligment Value); // Function ShooterGame.AresTextRenderComponent.SetHorizontalAlignmentCached // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9d970
	void SetFontCached(struct UFont* Value); // Function ShooterGame.AresTextRenderComponent.SetFontCached // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9d6b0
};

// Class ShooterGame.AresTouchAnimationComponent
// Size: 0x48 (Inherited: 0x30)
struct UAresTouchAnimationComponent : UObject {
	struct FTimerHandle RenderTickTimer; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)

	void RenderTick(); // Function ShooterGame.AresTouchAnimationComponent.RenderTick // (Final|Native|Private) // @ game+0x1e6e7b0
	void OnActiveAnimationFinished(); // Function ShooterGame.AresTouchAnimationComponent.OnActiveAnimationFinished // (Final|Native|Private) // @ game+0x1e6e7b0
	void AddActiveAnimation(struct UUserWidget* WidgetToAnimate, struct UWidgetAnimation* Animation, float RenderTickTime); // Function ShooterGame.AresTouchAnimationComponent.AddActiveAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9c710
};

// Class ShooterGame.AresTouchBounds
// Size: 0x160 (Inherited: 0x148)
struct UAresTouchBounds : UWidget {
	enum class EAresTouchBoundsShape BoundsShape; // 0x148(0x01)
	char pad_149[0x17]; // 0x149(0x17)

	void SetBoundsShape(enum class EAresTouchBoundsShape InBoundsShape); // Function ShooterGame.AresTouchBounds.SetBoundsShape // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9d630
	enum class EAresTouchBoundsShape GetBoundsShape(); // Function ShooterGame.AresTouchBounds.GetBoundsShape // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d9c850
};

// Class ShooterGame.AresTouchComponent
// Size: 0x140 (Inherited: 0x30)
struct UAresTouchComponent : UObject {
	char pad_30[0x40]; // 0x30(0x40)
	struct FMulticastInlineDelegate OnTouchPress; // 0x70(0x10)
	struct FMulticastInlineDelegate OnTouchMove; // 0x80(0x10)
	struct FMulticastInlineDelegate OnTouchRelease; // 0x90(0x10)
	struct FMulticastInlineDelegate OnTouchEnter; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnTouchExit; // 0xb0(0x10)
	char pad_C0[0x30]; // 0xc0(0x30)
	struct TSet<struct TWeakObjectPtr<struct UAresTouchGesture>> Gestures; // 0xf0(0x50)

	void UnregisterGesture(struct UAresTouchGesture* TouchGesture); // Function ShooterGame.AresTouchComponent.UnregisterGesture // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2d9df80
	void SetMaxFingersSupported(int32_t InMaxFingersSupported); // Function ShooterGame.AresTouchComponent.SetMaxFingersSupported // (Native|Public|BlueprintCallable) // @ game+0x2d9db20
	void SetIgnoreTouchIndex(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchComponent.SetIgnoreTouchIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9d9f0
	void RegisterGesture(struct UAresTouchGesture* TouchGesture); // Function ShooterGame.AresTouchComponent.RegisterGesture // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2d9d570
	bool IsIgnoreTouchIndex(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchComponent.IsIgnoreTouchIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d9caf0
	void ClearIgnoreTouchIndex(); // Function ShooterGame.AresTouchComponent.ClearIgnoreTouchIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9c830
};

// Class ShooterGame.AresTouchButtonComponent
// Size: 0x1a0 (Inherited: 0x140)
struct UAresTouchButtonComponent : UAresTouchComponent {
	struct FMulticastInlineDelegate OnTouchPressed; // 0x140(0x10)
	struct FMulticastInlineDelegate OnTouchReleased; // 0x150(0x10)
	struct FMulticastInlineDelegate OnTouchEntered; // 0x160(0x10)
	struct FMulticastInlineDelegate OnTouchExited; // 0x170(0x10)
	struct FMulticastInlineDelegate OnTouchMoved; // 0x180(0x10)
	struct FMulticastInlineDelegate OnTouchReset; // 0x190(0x10)
};

// Class ShooterGame.AresTouchBoundsDebugWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UAresTouchBoundsDebugWidget : UUserWidget {
	char pad_2C8[0x18]; // 0x2c8(0x18)
};

// Class ShooterGame.AresTouchJoystickDebugWidget
// Size: 0x2f8 (Inherited: 0x2e0)
struct UAresTouchJoystickDebugWidget : UAresTouchBoundsDebugWidget {
	char pad_2E0[0x18]; // 0x2e0(0x18)
};

// Class ShooterGame.AresTouchTrackPadDebugWidget
// Size: 0x2f8 (Inherited: 0x2e0)
struct UAresTouchTrackPadDebugWidget : UAresTouchBoundsDebugWidget {
	char pad_2E0[0x18]; // 0x2e0(0x18)
};

// Class ShooterGame.AresTouchSwipeDebugWidget
// Size: 0x300 (Inherited: 0x2e0)
struct UAresTouchSwipeDebugWidget : UAresTouchBoundsDebugWidget {
	char pad_2E0[0x20]; // 0x2e0(0x20)
};

// Class ShooterGame.AresTouchDoubleTapFilter
// Size: 0x70 (Inherited: 0x30)
struct UAresTouchDoubleTapFilter : UObject {
	struct FMulticastInlineDelegate OnDoubleTap; // 0x30(0x10)
	struct FMulticastInlineDelegate OnDoubleTapAtLocation; // 0x40(0x10)
	char pad_50[0x20]; // 0x50(0x20)

	void SetOwningWidget(struct UAresTouchWidget* InOwningWidget); // Function ShooterGame.AresTouchDoubleTapFilter.SetOwningWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9dbb0
	void OnTouchStarted(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchDoubleTapFilter.OnTouchStarted // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d9d300
	void OnTouchReleased(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchDoubleTapFilter.OnTouchReleased // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d9d230
	void OnTouchMoved(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchDoubleTapFilter.OnTouchMoved // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2d9d160
	void OnDistanceSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.AresTouchDoubleTapFilter.OnDistanceSettingChanged // (Final|Native|Public) // @ game+0x2d9cb80
	struct UAresTouchWidget* GetOwningWidget(); // Function ShooterGame.AresTouchDoubleTapFilter.GetOwningWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2d9c940
};

// Class ShooterGame.AresTouchGesture
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchGesture : UObject {

	void Reset(); // Function ShooterGame.AresTouchGesture.Reset // (Native|Public|BlueprintCallable) // @ game+0x2d9d600
};

// Class ShooterGame.AresTouchDoubleTapGesture
// Size: 0x1d0 (Inherited: 0x30)
struct UAresTouchDoubleTapGesture : UAresTouchGesture {
	struct FMulticastInlineDelegate OnDoubleTapStart; // 0x30(0x10)
	struct FMulticastInlineDelegate OnDoubleTapHoldStart; // 0x40(0x10)
	struct FMulticastInlineDelegate OnDoubleTapHoldChargeInterrupted; // 0x50(0x10)
	struct FMulticastInlineDelegate OnDoubleTapEnd; // 0x60(0x10)
	float MaxTimeBetweenTaps; // 0x70(0x04)
	float MaxDistanceBetweenTapsInInches; // 0x74(0x04)
	struct FAresTouchHoldGestureProperties InitialHoldProperties; // 0x78(0x0c)
	char pad_84[0x4]; // 0x84(0x04)
	struct UAresTouchHoldGesture* HoldGesture; // 0x88(0x08)
	char pad_90[0x140]; // 0x90(0x140)

	void OnHoldStart(struct FAresTouchHoldGestureData HoldGestureData); // Function ShooterGame.AresTouchDoubleTapGesture.OnHoldStart // (Final|Native|Private) // @ game+0x2d9ce50
	void OnHoldEnd(struct FAresTouchHoldGestureData HoldGestureData); // Function ShooterGame.AresTouchDoubleTapGesture.OnHoldEnd // (Final|Native|Private) // @ game+0x2d9cd70
	void OnHoldChargeInterrupted(struct FAresTouchHoldGestureData HoldGestureData); // Function ShooterGame.AresTouchDoubleTapGesture.OnHoldChargeInterrupted // (Final|Native|Private) // @ game+0x2d9cc90
	void Initialize(struct FAresTouchDoubleTapGestureProperties& InitData); // Function ShooterGame.AresTouchDoubleTapGesture.Initialize // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d9c9a0
};

// Class ShooterGame.AresTouchGesturesBase
// Size: 0x960 (Inherited: 0x960)
struct UAresTouchGesturesBase : UAresTouchWidget {

	enum class EAresIntSettingName GetCorrespondingRegion(int32_t XRegion, int32_t YRegion); // Function ShooterGame.AresTouchGesturesBase.GetCorrespondingRegion // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d9c870
};

// Class ShooterGame.AresTouchHoldGesture
// Size: 0xc0 (Inherited: 0x30)
struct UAresTouchHoldGesture : UAresTouchGesture {
	struct FMulticastInlineDelegate OnHoldStart; // 0x30(0x10)
	struct FMulticastInlineDelegate OnHoldEnd; // 0x40(0x10)
	struct FMulticastInlineDelegate OnHoldChargeInterrupted; // 0x50(0x10)
	float MinimumTimeToHold; // 0x60(0x04)
	float MaximumMoveDistanceInInches; // 0x64(0x04)
	char MaxTouchesTracked; // 0x68(0x01)
	bool bRestartChargeOnInterrupt; // 0x69(0x01)
	char pad_6A[0x56]; // 0x6a(0x56)

	void Initialize(struct FAresTouchHoldGestureProperties& InitData); // Function ShooterGame.AresTouchHoldGesture.Initialize // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d9ca40
};

// Class ShooterGame.AresTouchJoystick
// Size: 0x9d8 (Inherited: 0x960)
struct UAresTouchJoystick : UAresTouchWidget {
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x960(0x10)
	struct FMulticastInlineDelegate OnThumbstickLocationChanged; // 0x970(0x10)
	struct FMulticastInlineDelegate OnJoystickPressLocationNormalized; // 0x980(0x10)
	struct FMulticastInlineDelegate OnJoystickReleased; // 0x990(0x10)
	struct FMulticastInlineDelegate OnJoystickIndexPressed; // 0x9a0(0x10)
	struct FMulticastInlineDelegate OnJoystickIndexMoved; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnJoystickIndexReleased; // 0x9c0(0x10)
	struct TWeakObjectPtr<struct UAresTouchJoystickComponent> TouchJoystickComponent; // 0x9d0(0x08)

	void OnTouchThumbstickLocationChanged(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchThumbstickLocationChanged // (Native|Protected|HasDefaults) // @ game+0x2d9d4a0
	void OnTouchThumbstickAbsoluteLocationChanged(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchThumbstickAbsoluteLocationChanged // (Native|Protected|HasDefaults) // @ game+0x2d9d3d0
	void OnTouchJoystickReleased(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchJoystickReleased // (Native|Protected|HasDefaults) // @ game+0x2d9d090
	void OnTouchJoystickPressLocationNormalized(struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchJoystickPressLocationNormalized // (Native|Protected|HasDefaults) // @ game+0x2d9cf30
	void OnTouchJoystickPressed(enum class ETouchIndex TouchIndex, struct FVector2D Location); // Function ShooterGame.AresTouchJoystick.OnTouchJoystickPressed // (Native|Protected|HasDefaults) // @ game+0x2d9cfc0
};

// Class ShooterGame.AresTouchJoystickComponent
// Size: 0x270 (Inherited: 0x140)
struct UAresTouchJoystickComponent : UAresTouchComponent {
	float JoystickSize; // 0x140(0x04)
	float RecenteringSpeed; // 0x144(0x04)
	float DeadZoneThreshold; // 0x148(0x04)
	float SprintZoneMinDistance; // 0x14c(0x04)
	float SprintZoneMaxAngle; // 0x150(0x04)
	bool bAbsoluteMode; // 0x154(0x01)
	char pad_155[0x3]; // 0x155(0x03)
	float DPIScaleDownFactor; // 0x158(0x04)
	struct FVector2D JoystickLocation; // 0x15c(0x08)
	char pad_164[0x4]; // 0x164(0x04)
	struct UWidget* VisualJoystick; // 0x168(0x08)
	struct FMulticastInlineDelegate OnXAxisChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnYAxisChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnAxesChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnJoystickPressed; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnJoystickReleased; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnThumbstickLocation; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnThumbstickAbsoluteLocation; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnPressLocationNormalized; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnThumbstickNeutral; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnEnterSprintZone; // 0x200(0x10)
	struct FMulticastInlineDelegate OnExitSprintZone; // 0x210(0x10)
	char pad_220[0x50]; // 0x220(0x50)

	void SetDPIScaleDownFactor(float DPIScaleDownFactor); // Function ShooterGame.AresTouchJoystickComponent.SetDPIScaleDownFactor // (Final|Native|Public|BlueprintCallable) // @ game+0x2da3fa0
	float GetTouchVelocitySquared(); // Function ShooterGame.AresTouchJoystickComponent.GetTouchVelocitySquared // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2da3000
	enum class ETouchIndex GetCurrentTouchIndex(); // Function ShooterGame.AresTouchJoystickComponent.GetCurrentTouchIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2da2c30
};

// Class ShooterGame.AresTouchLongPressFilter
// Size: 0x80 (Inherited: 0x30)
struct UAresTouchLongPressFilter : UObject {
	struct FMulticastInlineDelegate OnLongPress; // 0x30(0x10)
	struct FMulticastInlineDelegate OnLongPressCancelled; // 0x40(0x10)
	float MinimumTimeToHold; // 0x50(0x04)
	float MaximumMoveDistanceInInches; // 0x54(0x04)
	bool bMovementCancelsLongPressTimer; // 0x58(0x01)
	char pad_59[0x27]; // 0x59(0x27)

	void UpdateMovementCancelsTimer(bool CancelsTimer); // Function ShooterGame.AresTouchLongPressFilter.UpdateMovementCancelsTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x2da41b0
	void UpdateHoldTime(float HoldTime); // Function ShooterGame.AresTouchLongPressFilter.UpdateHoldTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2da4130
	void OnTouchStarted(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchLongPressFilter.OnTouchStarted // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2da3930
	void OnTouchMoved(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchLongPressFilter.OnTouchMoved // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2da36a0
	void OnTouchEnded(int32_t TouchIndex, struct FVector2D& Location); // Function ShooterGame.AresTouchLongPressFilter.OnTouchEnded // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2da35d0
	bool GetMovementCancelsTimer(); // Function ShooterGame.AresTouchLongPressFilter.GetMovementCancelsTimer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2da2d60
	float GetMinimumTimeToHold(); // Function ShooterGame.AresTouchLongPressFilter.GetMinimumTimeToHold // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2da2d40
};

// Class ShooterGame.AresTouchWidgetIndicatorInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchWidgetIndicatorInterface : UInterface {

	void SetTouchIndex(int32_t TouchIndex); // Function ShooterGame.AresTouchWidgetIndicatorInterface.SetTouchIndex // (BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AresTouchManager
// Size: 0x170 (Inherited: 0x80)
struct UAresTouchManager : UInitSystem {
	struct FMulticastInlineDelegate OnTouchModeChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnTouchPressed; // 0x90(0x10)
	struct FMulticastInlineDelegate OnTouchReleased; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnTouchMoved; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnForwardedTouchPressed; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnForwardedTouchReleased; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnForwardedTouchMoved; // 0xe0(0x10)
	enum class EAresTouchMode TouchMode; // 0xf0(0x01)
	char pad_F1[0x27]; // 0xf1(0x27)
	struct UUserWidget* TouchIndicatorClass; // 0x118(0x08)
	struct TMap<enum class ETouchIndex, struct UUserWidget*> TouchIndicatorMap; // 0x120(0x50)

	void SetTouchMode(enum class EAresTouchMode InTouchMode); // Function ShooterGame.AresTouchManager.SetTouchMode // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2da40b0
	void SetInputPreProcessorActive(bool bActive); // Function ShooterGame.AresTouchManager.SetInputPreProcessorActive // (Final|Native|Public|BlueprintCallable) // @ game+0x2da4020
	void ResetActiveTouches(); // Function ShooterGame.AresTouchManager.ResetActiveTouches // (Final|Native|Public|BlueprintCallable) // @ game+0x2da3de0
	void ResetActiveTouch(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchManager.ResetActiveTouch // (Final|Native|Public|BlueprintCallable) // @ game+0x2da3d60
	void RegisterForwardedTouchInputWidget(struct FAresTouchEventInfo& TouchInfo, struct UUserWidget* Widget); // Function ShooterGame.AresTouchManager.RegisterForwardedTouchInputWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2da3be0
	struct UUserWidget* QueryForwardedInputRegistry(enum class ETouchIndex TouchIndex, int32_t RegistryNumber); // Function ShooterGame.AresTouchManager.QueryForwardedInputRegistry // (Final|Native|Public|BlueprintCallable) // @ game+0x2da3a80
	void PopSpecificTouchRegistry(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchManager.PopSpecificTouchRegistry // (Final|Native|Public|BlueprintCallable) // @ game+0x2da3a00
	bool IsInputPreProcessorActive(); // Function ShooterGame.AresTouchManager.IsInputPreProcessorActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2da35a0
	void IndicatorOnTouchReleased(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchManager.IndicatorOnTouchReleased // (Final|Native|Protected|HasOutParms) // @ game+0x2da3390
	void IndicatorOnTouchPressed(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchManager.IndicatorOnTouchPressed // (Final|Native|Protected|HasOutParms) // @ game+0x2da3250
	void IndicatorOnTouchMoved(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchManager.IndicatorOnTouchMoved // (Final|Native|Protected|HasOutParms) // @ game+0x2da3110
	enum class EAresTouchMode GetTouchMode(); // Function ShooterGame.AresTouchManager.GetTouchMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2da2fe0
	struct TArray<struct UUserWidget*> GetTouchIndexRegistryEntries(enum class ETouchIndex TouchIndex); // Function ShooterGame.AresTouchManager.GetTouchIndexRegistryEntries // (Final|Native|Public|BlueprintCallable) // @ game+0x2da2f00
	bool GetTouchEventInfo(enum class ETouchIndex TouchIndex, struct FAresTouchEventInfo& OutTouchInfo); // Function ShooterGame.AresTouchManager.GetTouchEventInfo // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2da2d80
	struct UAresTouchManager* Get(struct UObject* WorldContextObject); // Function ShooterGame.AresTouchManager.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2da2ba0
	void ClearSpecificTouchRegistry(struct FAresTouchEventInfo& TouchInfo); // Function ShooterGame.AresTouchManager.ClearSpecificTouchRegistry // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2da2a40
	void ClearAllRegistries(); // Function ShooterGame.AresTouchManager.ClearAllRegistries // (Final|Native|Public|BlueprintCallable) // @ game+0x2da2a20
};

// Class ShooterGame.AresTouchScreenChildInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchScreenChildInterface : UInterface {
};

// Class ShooterGame.AresTouchScreen
// Size: 0x2f8 (Inherited: 0x2d8)
struct UAresTouchScreen : UCoordinatedHUDElement {
	struct TArray<struct UAresTouchWidgetWrapper*> ChildWrapperWidgets; // 0x2d8(0x10)
	double TouchSwipeAverageSpeed; // 0x2e8(0x08)
	double TouchSwipeTimeToMaintainInSeconds; // 0x2f0(0x08)

	void RegisterChildWidgetsForUserWidget(struct UUserWidget* UserWidget); // Function ShooterGame.AresTouchScreen.RegisterChildWidgetsForUserWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2da3b50
	void RegisterChildWidgets(); // Function ShooterGame.AresTouchScreen.RegisterChildWidgets // (BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2d5fc80
	void OnShowTelButton(); // Function ShooterGame.AresTouchScreen.OnShowTelButton // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnShowDevButton(); // Function ShooterGame.AresTouchScreen.OnShowDevButton // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void InitializeChildWrapperWidgets(struct UCoordinatedHUDModel* HUDModel, struct UCoordinatedShooterUIModel* ShooterUIModel); // Function ShooterGame.AresTouchScreen.InitializeChildWrapperWidgets // (Final|BlueprintCosmetic|Native|Protected|BlueprintCallable) // @ game+0x2da34d0
	bool GetVisibilityStateOverrideForWidget(struct UAresTouchWidget* Widget, enum class EWidgetVisibilityState& OutVisibilityStateOverride); // Function ShooterGame.AresTouchScreen.GetVisibilityStateOverrideForWidget // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2da3030
	bool GetEnabledStateOverrideForWidget(struct UAresTouchWidget* Widget, enum class EWidgetEnabledState& OutEnabledStateOverride); // Function ShooterGame.AresTouchScreen.GetEnabledStateOverrideForWidget // (Native|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x2da2c60
};

// Class ShooterGame.AresTouchSettingsNormalizationInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchSettingsNormalizationInterface : UInterface {

	void OnNormalizationModeEnabled(bool bEnabled); // Function ShooterGame.AresTouchSettingsNormalizationInterface.OnNormalizationModeEnabled // (Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AresTouchSettingsList
// Size: 0x2c8 (Inherited: 0x2c8)
struct UAresTouchSettingsList : UUserWidget {

	void OnNormalizationModeEnabled(bool bEnabled); // Function ShooterGame.AresTouchSettingsList.OnNormalizationModeEnabled // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnDevModeEnabled(bool bEnabled); // Function ShooterGame.AresTouchSettingsList.OnDevModeEnabled // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AresTouchSwipeComponent
// Size: 0x190 (Inherited: 0x140)
struct UAresTouchSwipeComponent : UAresTouchComponent {
	struct FMulticastInlineDelegate OnSwipeGesture; // 0x140(0x10)
	struct FMulticastInlineDelegate OnSwipeDirection; // 0x150(0x10)
	float ConstraintAngle; // 0x160(0x04)
	float ConstraintRange; // 0x164(0x04)
	float SwipeRadius; // 0x168(0x04)
	char pad_16C[0x24]; // 0x16c(0x24)
};

// Class ShooterGame.AresTouchTrackPadComponent
// Size: 0x2b8 (Inherited: 0x140)
struct UAresTouchTrackPadComponent : UAresTouchComponent {
	struct UCurveFloat* AimingDeltaXScalingCurve; // 0x140(0x08)
	struct UCurveFloat* AimingDeltaYScalingCurve; // 0x148(0x08)
	struct UCurveFloat* AimingDeltaXScalingCurveADS; // 0x150(0x08)
	struct UCurveFloat* AimingDeltaYScalingCurveADS; // 0x158(0x08)
	struct UCurveFloat* AimingDeltaXScalingCurveSniper; // 0x160(0x08)
	struct UCurveFloat* AimingDeltaYScalingCurveSniper; // 0x168(0x08)
	float ScreenDensityInputAdjustment; // 0x170(0x04)
	bool bContinuesFilteringAfterRelease; // 0x174(0x01)
	char pad_175[0x3]; // 0x175(0x03)
	struct FMulticastInlineDelegate OnDeltaXChanged; // 0x178(0x10)
	struct FMulticastInlineDelegate OnDeltaYChanged; // 0x188(0x10)
	struct FMulticastInlineDelegate OnPressed; // 0x198(0x10)
	struct FMulticastInlineDelegate OnReleased; // 0x1a8(0x10)
	struct FMulticastInlineDelegate OnMoved; // 0x1b8(0x10)
	struct TArray<struct UCurveFloat*> AccelerationCurvesX; // 0x1c8(0x10)
	struct TArray<struct UCurveFloat*> AccelerationCurvesY; // 0x1d8(0x10)
	struct FMulticastInlineDelegate OnMinCutOffChanged; // 0x1e8(0x10)
	struct FMulticastInlineDelegate OnDeltaCutOffChanged; // 0x1f8(0x10)
	struct FMulticastInlineDelegate OnCutOffSlopeChanged; // 0x208(0x10)
	bool bSupportsTrackballMode; // 0x218(0x01)
	char pad_219[0x7]; // 0x219(0x07)
	struct UCurveFloat* TrackballDecelerationCurve; // 0x220(0x08)
	float TrackballVerticalAngleClearZone; // 0x228(0x04)
	bool bTrackballModeXAxis; // 0x22c(0x01)
	bool bTrackballModeYAxis; // 0x22d(0x01)
	char pad_22E[0x2]; // 0x22e(0x02)
	float TrackballTimeActive; // 0x230(0x04)
	struct FVector2D TrackballVelocityDirection; // 0x234(0x08)
	float TrackballVelocityMagnitude; // 0x23c(0x04)
	struct FVector2D TrackballVelocityMagnitudeVector; // 0x240(0x08)
	struct FVector2D TrackballPhysicalMagnitudeVector; // 0x248(0x08)
	struct FVector2D TrackballInitialDirection; // 0x250(0x08)
	float TimeSinceAccelerationStart; // 0x258(0x04)
	char pad_25C[0x5c]; // 0x25c(0x5c)

	void ClearTrackballVelocity(); // Function ShooterGame.AresTouchTrackPadComponent.ClearTrackballVelocity // (Final|Native|Public|BlueprintCallable) // @ game+0x2da2b80
};

// Class ShooterGame.AresTouchWheelSegment
// Size: 0x60 (Inherited: 0x30)
struct UAresTouchWheelSegment : UObject {
	struct FText SegmentText; // 0x30(0x18)
	struct UTexture2D* SegmentIconTexture; // 0x48(0x08)
	struct TArray<struct UAresTouchWheelSegment*> SegmentSuboptions; // 0x50(0x10)

	void DoWork(struct UAresTouchWheelMenu* WheelMenuContext); // Function ShooterGame.AresTouchWheelSegment.DoWork // (Native|Event|Public|BlueprintEvent) // @ game+0x2dac320
};

// Class ShooterGame.AresTouchWheelMenu
// Size: 0x9d8 (Inherited: 0x960)
struct UAresTouchWheelMenu : UAresTouchWidget {
	struct TWeakObjectPtr<struct UAresTouchWheelMenuComponent> TouchWheelComponent; // 0x960(0x08)
	float TouchMoveScale; // 0x968(0x04)
	float SelectionDeadzoneThreshold; // 0x96c(0x04)
	float SelectionInputBufferWidth; // 0x970(0x04)
	float SegmentWidth; // 0x974(0x04)
	float SelectionConfirmDelay; // 0x978(0x04)
	float SwitchSuboptionsDelay; // 0x97c(0x04)
	float ResetSuboptionsOnNoSelectionDelay; // 0x980(0x04)
	bool bDisableResetSuboptionsOnNoSelection; // 0x984(0x01)
	bool bCanTapToSelectSegments; // 0x985(0x01)
	char pad_986[0x2]; // 0x986(0x02)
	float StaticSectionSize; // 0x988(0x04)
	char pad_98C[0x4]; // 0x98c(0x04)
	struct UDataTable* SegmentDataTable; // 0x990(0x08)
	struct TArray<struct UAresTouchWheelSegment*> StaticSegmentData; // 0x998(0x10)
	struct TArray<struct UAresTouchWheelSegment*> DynamicSegmentData; // 0x9a8(0x10)
	int32_t SelectionIndex; // 0x9b8(0x04)
	int32_t SuboptionsParentIndex; // 0x9bc(0x04)
	char pad_9C0[0x18]; // 0x9c0(0x18)

	void ShowWheelMenuInternal(); // Function ShooterGame.AresTouchWheelMenu.ShowWheelMenuInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x2cc86f0
	void ShowWheelMenu(int32_t StartingTouchIndex); // Function ShooterGame.AresTouchWheelMenu.ShowWheelMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x2daeeb0
	void RebuildDynamicSectionSegments(struct TArray<float>& SegmentStartOffsets, struct FVector2D StaticStartDirection); // Function ShooterGame.AresTouchWheelMenu.RebuildDynamicSectionSegments // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void OnTouchWheelTapReleased(int32_t Index); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelTapReleased // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnTouchWheelTapPressed(int32_t Index); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelTapPressed // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnTouchWheelTapBoundsChanged(int32_t Index, bool IsInBounds); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelTapBoundsChanged // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnTouchWheelReleased(struct FVector2D AbsoluteWidgetLocation); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelReleased // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void OnTouchWheelPressed(struct FVector2D AbsoluteWidgetLocation); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelPressed // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void OnTouchWheelMoved(struct FVector2D AbsoluteWidgetLocation, float Angle); // Function ShooterGame.AresTouchWheelMenu.OnTouchWheelMoved // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	void OnSelectionChangedInternal(int32_t SelectedIndex); // Function ShooterGame.AresTouchWheelMenu.OnSelectionChangedInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dade00
	void NativeOnTouchWheelTapReleased(int32_t Index); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelTapReleased // (Native|Protected) // @ game+0x2dadb60
	void NativeOnTouchWheelTapPressed(int32_t Index); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelTapPressed // (Native|Protected) // @ game+0x2dadad0
	void NativeOnTouchWheelTapBoundsChanged(int32_t Index, bool IsInBounds); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelTapBoundsChanged // (Native|Protected) // @ game+0x2dad9f0
	void NativeOnTouchWheelReleased(struct FVector2D Location); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelReleased // (Native|Protected|HasDefaults) // @ game+0x2dad960
	void NativeOnTouchWheelPressed(struct FVector2D Location); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelPressed // (Native|Protected|HasDefaults) // @ game+0x2d9cf30
	void NativeOnTouchWheelMoved(struct FVector2D Location, float Angle); // Function ShooterGame.AresTouchWheelMenu.NativeOnTouchWheelMoved // (Native|Protected|HasDefaults) // @ game+0x2dad890
	void NativeOnSelectionChanged(int32_t SelectedIndex); // Function ShooterGame.AresTouchWheelMenu.NativeOnSelectionChanged // (Final|Native|Protected) // @ game+0x2dad800
	void HideWheelMenuInternal(); // Function ShooterGame.AresTouchWheelMenu.HideWheelMenuInternal // (Native|Event|Protected|BlueprintEvent) // @ game+0x2cad9f0
	void HideWheelMenu(); // Function ShooterGame.AresTouchWheelMenu.HideWheelMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x2dad290
	struct UAresTouchWheelSegment* GetSuboptionsParentSegmentData(); // Function ShooterGame.AresTouchWheelMenu.GetSuboptionsParentSegmentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dad0d0
	struct UAresTouchWheelSegment* GetSelectedSegmentData(); // Function ShooterGame.AresTouchWheelMenu.GetSelectedSegmentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dacee0
	struct UAresTouchWheelSegment* GetSegmentDataFromIndex(int32_t Index, bool bIgnoreSuboptions); // Function ShooterGame.AresTouchWheelMenu.GetSegmentDataFromIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dace10
	int32_t GetAlternateSelectionIndex(); // Function ShooterGame.AresTouchWheelMenu.GetAlternateSelectionIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dac8b0
	bool DoesHaveSelection(); // Function ShooterGame.AresTouchWheelMenu.DoesHaveSelection // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dac3e0
	void BuildWidgetSegments(struct TArray<float>& SegmentStartOffsets, struct FVector2D StaticStartDirection); // Function ShooterGame.AresTouchWheelMenu.BuildWidgetSegments // (Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AresTouchWheelMenuComponent
// Size: 0x250 (Inherited: 0x140)
struct UAresTouchWheelMenuComponent : UAresTouchComponent {
	struct FMulticastInlineDelegate OnWheelPressed; // 0x140(0x10)
	struct FMulticastInlineDelegate OnWheelReleased; // 0x150(0x10)
	struct FMulticastInlineDelegate OnWheelLocation; // 0x160(0x10)
	struct FMulticastInlineDelegate OnInDeadzoneChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnWheelSelectionChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnWheelTapPress; // 0x190(0x10)
	struct FMulticastInlineDelegate OnWheelTapBoundsChange; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnWheelTapRelease; // 0x1b0(0x10)
	struct UWidget* VisualWheelMenu; // 0x1c0(0x08)
	char pad_1C8[0x88]; // 0x1c8(0x88)
};

// Class ShooterGame.AresTouchWidgetComponentInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchWidgetComponentInterface : UInterface {

	void SetParentTouchWidget(struct UAresTouchWidget* ParentTouchWidget); // Function ShooterGame.AresTouchWidgetComponentInterface.SetParentTouchWidget // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2dbbb90
	void GetParentTouchWidget(struct UAresTouchWidget*& Result); // Function ShooterGame.AresTouchWidgetComponentInterface.GetParentTouchWidget // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2db8ea0
};

// Class ShooterGame.AresTouchWidgetCTAInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresTouchWidgetCTAInterface : UInterface {

	void SetWidgetCallToActionState(enum class EWidgetCallToActionState CallToActionState); // Function ShooterGame.AresTouchWidgetCTAInterface.SetWidgetCallToActionState // (BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2dbc3d0
	void BindWidgetCallToActionEvents(bool bBindEvents); // Function ShooterGame.AresTouchWidgetCTAInterface.BindWidgetCallToActionEvents // (BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2db8490
};

// Class ShooterGame.AresTouchWidgetWrapper
// Size: 0x970 (Inherited: 0x960)
struct UAresTouchWidgetWrapper : UAresTouchWidget {
	struct UCoordinatedHUDModel* HUDModel; // 0x960(0x08)
	struct UCoordinatedShooterUIModel* ShooterUIModel; // 0x968(0x08)

	void OnWrapperInitialized(); // Function ShooterGame.AresTouchWidgetWrapper.OnWrapperInitialized // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AresTracer
// Size: 0x630 (Inherited: 0x620)
struct AAresTracer : AAresTracerInterface {
	float BeamLength; // 0x618(0x04)
	float LastTickTime; // 0x61c(0x04)
	bool bImpacted; // 0x620(0x01)
	float EndDistance; // 0x624(0x04)
	char pad_62D[0x3]; // 0x62d(0x03)
};

// Class ShooterGame.AresTrailComponent
// Size: 0x128 (Inherited: 0xe8)
struct UAresTrailComponent : UActorComponent {
	struct UParticleSystem* TrailBeamParticleTemplate; // 0xe8(0x08)
	struct FLinearColor TrailColor; // 0xf0(0x10)
	float MinimumSegmentLength; // 0x100(0x04)
	float TrailFadeTime; // 0x104(0x04)
	enum class ETrailDrawRule DrawRule; // 0x108(0x01)
	bool bDrawInLoS; // 0x109(0x01)
	char pad_10A[0x2]; // 0x10a(0x02)
	float MaxTrailDistance; // 0x10c(0x04)
	char pad_110[0x18]; // 0x110(0x18)
};

// Class ShooterGame.AresUIDirector
// Size: 0x58 (Inherited: 0x30)
struct UAresUIDirector : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	bool bUIStarted; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct UAresUIManager* UIManager; // 0x50(0x08)
};

// Class ShooterGame.UIGlobalsDataAsset
// Size: 0x148 (Inherited: 0x40)
struct UUIGlobalsDataAsset : UAresPlatformDataAsset {
	struct UCurveFloat* DPICurve; // 0x40(0x08)
	struct UAresUIDirector* UIDirector; // 0x48(0x08)
	struct UAresUIManager* UIManager; // 0x50(0x08)
	struct UAresDeveloperMenuScreen* DeveloperMenuScreen; // 0x58(0x08)
	struct TSoftClassPtr<UObject> SettingsScreenAsset; // 0x60(0x30)
	struct TSoftClassPtr<UObject> ExitGameScreenAsset; // 0x90(0x30)
	struct TArray<struct FAresUserWidgetAsset> AdditionalUserWidgets; // 0xc0(0x10)
	struct TArray<struct FAresGenericAsset> AdditionalAssets; // 0xd0(0x10)
	struct FAresFontStyle AresFontStyle; // 0xe0(0x68)
};

// Class ShooterGame.AresUIManager
// Size: 0x70 (Inherited: 0x30)
struct UAresUIManager : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	enum class EUIFocus OldFocus; // 0x48(0x01)
	enum class EUIMouseMode OldMouseMode; // 0x49(0x01)
	char pad_4A[0x6]; // 0x4a(0x06)
	struct UAresUIScreen* Channels[0x3]; // 0x50(0x18)
	struct UShooterUICoordinator* UICoordinator; // 0x68(0x08)

	void UpdateFocus(); // Function ShooterGame.AresUIManager.UpdateFocus // (Final|Native|Private) // @ game+0x2dbc8d0
	void TickHighPrecisionMouse(); // Function ShooterGame.AresUIManager.TickHighPrecisionMouse // (Final|Native|Private) // @ game+0x2dbc5a0
	struct FString TickDebugRawMouse(); // Function ShooterGame.AresUIManager.TickDebugRawMouse // (Final|Native|Private) // @ game+0x2dbc510
	struct FString TickDebugFocus(); // Function ShooterGame.AresUIManager.TickDebugFocus // (Final|Native|Private) // @ game+0x2dbc480
	void TickDebug(); // Function ShooterGame.AresUIManager.TickDebug // (Final|Native|Private) // @ game+0x2dbc460
};

// Class ShooterGame.AresUIPropertyRegistry
// Size: 0x5d0 (Inherited: 0x30)
struct UAresUIPropertyRegistry : UObject {
	char pad_30[0x5a0]; // 0x30(0x5a0)

	void UpdateVector2DPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateVector2DPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbcd10
	void UpdateTexture2DPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateTexture2DPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbcc60
	void UpdateTextPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateTextPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbcbb0
	void UpdateMaterialInterfacePropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateMaterialInterfacePropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbcb00
	void UpdateMaterialInstancePropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateMaterialInstancePropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbca50
	void UpdateLinearColorPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateLinearColorPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbc9a0
	void UpdateIntPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateIntPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbc8f0
	void UpdateFloatPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateFloatPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbc820
	void UpdateBoolPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.UpdateBoolPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbc770
	void UpdateAllDefaultValues(); // Function ShooterGame.AresUIPropertyRegistry.UpdateAllDefaultValues // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbc750
	void SetVector2DPropertyValue(struct FString PropertyID, struct FVector2D NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetVector2DPropertyValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2dbc2e0
	void SetVector2DPropertyDefaultValue(struct FString PropertyID, struct FVector2D NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetVector2DPropertyDefaultValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2dbc1f0
	void SetTexture2DPropertyValue(struct FString PropertyID, struct UTexture2D* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetTexture2DPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbc0f0
	void SetTexture2DPropertyDefaultValue(struct FString PropertyID, struct UTexture2D* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetTexture2DPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbbff0
	void SetTextPropertyValue(struct FString PropertyID, struct FText NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetTextPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbbec0
	void SetTextPropertyDefaultValue(struct FString PropertyID, struct FText NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetTextPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbbd90
	void SetPropertyValues(struct FAresUIPropertyMap& NewPropertyValues, bool bOnlyUpdateExistingKeys, bool bRemoveMissingKeys); // Function ShooterGame.AresUIPropertyRegistry.SetPropertyValues // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dbbc20
	void SetMaterialInterfacePropertyValue(struct FString PropertyID, struct UMaterialInterface* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetMaterialInterfacePropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbba90
	void SetMaterialInterfacePropertyDefaultValue(struct FString PropertyID, struct UMaterialInterface* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetMaterialInterfacePropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbb990
	void SetMaterialInstancePropertyValue(struct FString PropertyID, struct UMaterialInstance* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetMaterialInstancePropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbb890
	void SetMaterialInstancePropertyDefaultValue(struct FString PropertyID, struct UMaterialInstance* NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetMaterialInstancePropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbb790
	void SetLinearColorPropertyValue(struct FString PropertyID, struct FLinearColor NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetLinearColorPropertyValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2dbb690
	void SetLinearColorPropertyDefaultValue(struct FString PropertyID, struct FLinearColor NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetLinearColorPropertyDefaultValue // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2dbb590
	void SetIntPropertyValue(struct FString PropertyID, int32_t NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetIntPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbb490
	void SetIntPropertyDefaultValue(struct FString PropertyID, int32_t NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetIntPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbb390
	void SetFloatPropertyValue(struct FString PropertyID, float NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetFloatPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbb290
	void SetFloatPropertyDefaultValue(struct FString PropertyID, float NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetFloatPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbb190
	void SetBoolPropertyValue(struct FString PropertyID, bool NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetBoolPropertyValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbb090
	void SetBoolPropertyDefaultValue(struct FString PropertyID, bool NewValue); // Function ShooterGame.AresUIPropertyRegistry.SetBoolPropertyDefaultValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbaf90
	void ResetVector2DPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetVector2DPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbaee0
	void ResetTexture2DPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetTexture2DPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbae30
	void ResetTextPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetTextPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbad80
	void ResetMaterialInterfacePropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetMaterialInterfacePropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbacd0
	void ResetMaterialInstancePropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetMaterialInstancePropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbac20
	void ResetLinearColorPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetLinearColorPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbab70
	void ResetIntPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetIntPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbaac0
	void ResetFloatPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetFloatPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dbaa10
	void ResetBoolPropertyToDefault(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.ResetBoolPropertyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2dba960
	void RemoveVector2DPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveVector2DPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dba840
	void RemoveTexture2DPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveTexture2DPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dba720
	void RemoveTextPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveTextPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dba600
	void RemoveMaterialInterfacePropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveMaterialInterfacePropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dba4e0
	void RemoveMaterialInstancePropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveMaterialInstancePropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dba3c0
	void RemoveLinearColorPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveLinearColorPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dba2a0
	void RemoveIntPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveIntPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dba180
	void RemoveFloatPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveFloatPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dba060
	void RemoveBoolPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event); // Function ShooterGame.AresUIPropertyRegistry.RemoveBoolPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db9f40
	bool HasVector2DProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasVector2DProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db9ad0
	bool HasTexture2DProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasTexture2DProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db9a10
	bool HasTextProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasTextProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db9950
	bool HasMaterialInterfaceProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasMaterialInterfaceProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db9890
	bool HasMaterialInstanceProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasMaterialInstanceProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db97d0
	bool HasLinearColorProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasLinearColorProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db9710
	bool HasIntProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasIntProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db9650
	bool HasFloatProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasFloatProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db9590
	bool HasBoolProperty(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.HasBoolProperty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db94d0
	struct FVector2D GetVector2DPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetVector2DPropertyValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2db9400
	struct FVector2D GetVector2DPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetVector2DPropertyDefaultValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2db9330
	struct UTexture2D* GetTexture2DPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetTexture2DPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db91e0
	struct UTexture2D* GetTexture2DPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetTexture2DPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db9120
	struct FText GetTextPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetTextPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db9030
	struct FText GetTextPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetTextPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db8f40
	struct UMaterialInterface* GetMaterialInterfacePropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetMaterialInterfacePropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db8de0
	struct UMaterialInterface* GetMaterialInterfacePropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetMaterialInterfacePropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db8d20
	struct UMaterialInstance* GetMaterialInstancePropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetMaterialInstancePropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db8c60
	struct UMaterialInstance* GetMaterialInstancePropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetMaterialInstancePropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db8ba0
	struct FLinearColor GetLinearColorPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetLinearColorPropertyValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2db8ae0
	struct FLinearColor GetLinearColorPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetLinearColorPropertyDefaultValue // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2db8a20
	int32_t GetIntPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetIntPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db8960
	int32_t GetIntPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetIntPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db88a0
	float GetFloatPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetFloatPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db87e0
	float GetFloatPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetFloatPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db8720
	bool GetBoolPropertyValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetBoolPropertyValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db8660
	bool GetBoolPropertyDefaultValue(struct FString PropertyID); // Function ShooterGame.AresUIPropertyRegistry.GetBoolPropertyDefaultValue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2db85a0
	struct FAresUIPropertyMap GeneratePropertyMap(); // Function ShooterGame.AresUIPropertyRegistry.GeneratePropertyMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2db8520
	void AddVector2DPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddVector2DPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db8310
	void AddTexture2DPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddTexture2DPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db8190
	void AddTextPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddTextPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db8010
	void AddMaterialInterfacePropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddMaterialInterfacePropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db7e90
	void AddMaterialInstancePropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddMaterialInstancePropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db7d10
	void AddLinearColorPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddLinearColorPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db7b90
	void AddIntPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddIntPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db7a10
	void AddFloatPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddFloatPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db7890
	void AddBoolPropertyChangedEvent(struct FString PropertyID, struct FDelegate& Event, bool bDispatchImmediate); // Function ShooterGame.AresUIPropertyRegistry.AddBoolPropertyChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2db7710
};

// Class ShooterGame.AresUniversalButtonWidget
// Size: 0x320 (Inherited: 0x2c8)
struct UAresUniversalButtonWidget : UUserWidget {
	struct FMulticastInlineDelegate OnClicked; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnButtonPressed; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnButtonReleased; // 0x2e8(0x10)
	struct FMulticastInlineDelegate OnButtonEntered; // 0x2f8(0x10)
	struct FMulticastInlineDelegate OnButtonExited; // 0x308(0x10)
	bool bAnyMouseButtonCanTriggerClickEvent; // 0x318(0x01)
	bool bEnabled; // 0x319(0x01)
	char pad_31A[0x6]; // 0x31a(0x06)

	void SetEnabled(bool bInValue); // Function ShooterGame.AresUniversalButtonWidget.SetEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2dc3fc0
	void SetDisabled(bool bIsDisabled); // Function ShooterGame.AresUniversalButtonWidget.SetDisabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2dc3f30
	void HandleEnabledChanged(bool bNowEnabled); // Function ShooterGame.AresUniversalButtonWidget.HandleEnabledChanged // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void HandleButtonReleased(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonReleased // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void HandleButtonPressed(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonPressed // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void HandleButtonExited(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonExited // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void HandleButtonEntered(); // Function ShooterGame.AresUniversalButtonWidget.HandleButtonEntered // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.AresVisionConesWidget
// Size: 0x340 (Inherited: 0x2c8)
struct UAresVisionConesWidget : UUserWidget {
	struct UMaterialInterface* Material; // 0x2c8(0x08)
	struct UMaterialInterface* ObserverMaterial; // 0x2d0(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x2d8(0x08)
	char pad_2E0[0x60]; // 0x2e0(0x60)
};

// Class ShooterGame.AresWallPenetration
// Size: 0x48 (Inherited: 0x30)
struct UAresWallPenetration : UObject {
	float EnergyReductionMultiplier; // 0x30(0x04)
	bool bParticipatesInAirDropoff; // 0x34(0x01)
	bool bShowsRicochet; // 0x35(0x01)
	char pad_36[0x2]; // 0x36(0x02)
	struct FString DebugWallPenetrationTypeName; // 0x38(0x10)
};

// Class ShooterGame.AresWallPenetrationGlobals
// Size: 0x868 (Inherited: 0x30)
struct UAresWallPenetrationGlobals : UObject {
	bool bShowWallPenHitConfirms; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TSoftClassPtr<UObject> WallPenetrationType[0x23]; // 0x38(0x690)
	struct UAresWallPenetration* WallPenetrationTypeCDOCached[0x23]; // 0x6c8(0x118)
	struct FRuntimeFloatCurve GlobalPenetrationCurve; // 0x7e0(0x88)
};

// Class ShooterGame.AresWatermarkManager
// Size: 0xe8 (Inherited: 0x80)
struct UAresWatermarkManager : UInitSystem {
	struct URSOManager* RSOManager; // 0x80(0x08)
	struct UConfigManager* ConfigManager; // 0x88(0x08)
	struct UMaterialInstanceDynamic* MaterialInstance; // 0x90(0x08)
	struct UMaterialInstanceDynamic* UIMaterialInstance; // 0x98(0x08)
	struct UCanvasRenderTarget2D* CanvasRenderTarget; // 0xa0(0x08)
	struct FString WatermarkString; // 0xa8(0x10)
	bool bWatermarkEnabled; // 0xb8(0x01)
	char pad_B9[0x3]; // 0xb9(0x03)
	float MinOpacity; // 0xbc(0x04)
	float MaxOpacity; // 0xc0(0x04)
	float MinUIOpacity; // 0xc4(0x04)
	float MaxUIOpacity; // 0xc8(0x04)
	float TilingFactor; // 0xcc(0x04)
	bool bInitialized; // 0xd0(0x01)
	char pad_D1[0x17]; // 0xd1(0x17)

	void RenderWatermark(struct UCanvas* Canvas, int32_t Width, int32_t Height); // Function ShooterGame.AresWatermarkManager.RenderWatermark // (Final|Native|Protected) // @ game+0x2dc3e20
	void OnWatermarkConfigChanged(); // Function ShooterGame.AresWatermarkManager.OnWatermarkConfigChanged // (Final|Native|Public) // @ game+0x2dc3cd0
	void OnLevelLoaded(struct UWorld* World); // Function ShooterGame.AresWatermarkManager.OnLevelLoaded // (Final|Native|Public) // @ game+0x2dc39c0
	void OnGameFlowStateChanged(enum class EGameFlowStateType State); // Function ShooterGame.AresWatermarkManager.OnGameFlowStateChanged // (Final|Native|Public) // @ game+0x2dc3940
};

// Class ShooterGame.AresWeaponAttachmentComponent
// Size: 0x118 (Inherited: 0xe8)
struct UAresWeaponAttachmentComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	int32_t AttachmentCost; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct UMeshComponent*> AddedMeshes; // 0xf8(0x10)
	struct UAresBasePrimaryDataAsset* DataAsset; // 0x108(0x08)
	struct UBaseInventoryModel* UIModel; // 0x110(0x08)

	void RemoveMeshFromParent(struct UStaticMeshComponent* MeshComponent); // Function ShooterGame.AresWeaponAttachmentComponent.RemoveMeshFromParent // (Final|Native|Public|BlueprintCallable) // @ game+0x2dc3d90
	void OnUIModelRecieved(struct UBaseInventoryModel* Model); // Function ShooterGame.AresWeaponAttachmentComponent.OnUIModelRecieved // (Final|Native|Public) // @ game+0x2dc3ae0
	void K2_OnAssetsLoaded(int32_t AssetTypes); // Function ShooterGame.AresWeaponAttachmentComponent.K2_OnAssetsLoaded // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void K2_GetPreloadAssetPaths(int32_t AssetTypes, struct TArray<struct FSoftObjectPath>& AssetPathsToPreload); // Function ShooterGame.AresWeaponAttachmentComponent.K2_GetPreloadAssetPaths // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	struct UBaseInventoryModel* GetUIModel(); // Function ShooterGame.AresWeaponAttachmentComponent.GetUIModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dc38a0
	struct USkeletalMeshComponent* AddSkeletalMeshToMesh(struct UMeshComponent* Parent, struct USkeletalMesh* MeshToSpawn, struct FName SocketName, bool bDisableCollision); // Function ShooterGame.AresWeaponAttachmentComponent.AddSkeletalMeshToMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x2dc2430
	struct UStaticMeshComponent* AddMeshToMesh(struct UMeshComponent* Parent, struct UStaticMesh* MeshToSpawn, struct FName SocketName, bool bDisableCollision); // Function ShooterGame.AresWeaponAttachmentComponent.AddMeshToMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x2dc22a0
};

// Class ShooterGame.AresWeaponSkinInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresWeaponSkinInterface : UInterface {
};

// Class ShooterGame.AresWidgetComponent
// Size: 0x880 (Inherited: 0x6b0)
struct UAresWidgetComponent : UWidgetComponent {
	enum class EAresWidgetPlayerVisibility PlayerVisibility; // 0x6b0(0x01)
	bool bAliveOnly; // 0x6b1(0x01)
	char pad_6B2[0x2]; // 0x6b2(0x02)
	struct FNormalizedScreenDistanceCheck VisibleScreenDistanceCheck; // 0x6b4(0x08)
	char pad_6BC[0x4]; // 0x6bc(0x04)
	struct FRuntimeFloatCurve OpacityWorldDistanceCurve; // 0x6c0(0x88)
	struct FRuntimeFloatCurve OpacityScreenDistanceCurve; // 0x748(0x88)
	struct FRuntimeFloatCurve ScaleDistanceCurve; // 0x7d0(0x88)
	char pad_858[0xb]; // 0x858(0x0b)
	bool bAllowTeamComponentCachingOptimization; // 0x863(0x01)
	char pad_864[0x4]; // 0x864(0x04)
	struct UBaseTeamComponent* CachedOwnerTeamComponent; // 0x868(0x08)
	struct UBaseTeamComponent* CachedLocalPlayerControllerTeamComponent; // 0x870(0x08)
	char pad_878[0x8]; // 0x878(0x08)

	void RefreshViewTargetValues(); // Function ShooterGame.AresWidgetComponent.RefreshViewTargetValues // (Final|Native|Private) // @ game+0x2dc3d50
	void RefreshOwnerAlive(); // Function ShooterGame.AresWidgetComponent.RefreshOwnerAlive // (Final|Native|Private) // @ game+0x2dc3d30
	void RefreshObserverOutlines(); // Function ShooterGame.AresWidgetComponent.RefreshObserverOutlines // (Final|Native|Private) // @ game+0x2dc3d10
	void RefreshLocalAlliance(); // Function ShooterGame.AresWidgetComponent.RefreshLocalAlliance // (Final|Native|Private) // @ game+0x2dc3cf0
	void OnViewTargetChanged(struct FViewTargetInfo& Info); // Function ShooterGame.AresWidgetComponent.OnViewTargetChanged // (Final|Native|Private|HasOutParms) // @ game+0x2dc3b70
	void OnOwnerDamageableComponentAliveStateChanged(bool bAlive); // Function ShooterGame.AresWidgetComponent.OnOwnerDamageableComponentAliveStateChanged // (Final|Native|Private) // @ game+0x2dc3a50
	bool GetDesiredVisibility(struct APlayerController* LocalPlayerController, struct FVector2D& ScreenDistanceToViewpointNormalized01, float AspectRatio); // Function ShooterGame.AresWidgetComponent.GetDesiredVisibility // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0x2dc3690
	struct FVector2D GetDesiredScale(float InWorldDistanceToViewpoint); // Function ShooterGame.AresWidgetComponent.GetDesiredScale // (Native|Event|Public|HasDefaults|BlueprintEvent|Const) // @ game+0x2dc35e0
	float GetDesiredOpacity(float InWorldDistanceToViewpoint, struct FVector2D& ScreenDistanceToViewpointNormalized01); // Function ShooterGame.AresWidgetComponent.GetDesiredOpacity // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent|Const) // @ game+0x2dc34f0
};

// Class ShooterGame.AresWidgetOwningCharacterInterface
// Size: 0x30 (Inherited: 0x30)
struct UAresWidgetOwningCharacterInterface : UInterface {

	void UnbindEventFromOwningCharacterChanged(struct FDelegate& Event); // Function ShooterGame.AresWidgetOwningCharacterInterface.UnbindEventFromOwningCharacterChanged // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2cb9a00
	struct AShooterCharacter* FetchOwningCharacter(); // Function ShooterGame.AresWidgetOwningCharacterInterface.FetchOwningCharacter // (BlueprintCosmetic|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2dc3450
	void BindEventToOwningCharacterChanged(struct FDelegate& Event); // Function ShooterGame.AresWidgetOwningCharacterInterface.BindEventToOwningCharacterChanged // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2cb9060
};

// Class ShooterGame.AresWidgetRegistry
// Size: 0x90 (Inherited: 0x30)
struct UAresWidgetRegistry : UObject {
	struct TMap<struct UUserWidget*, struct TSoftObjectPtr<UUserWidget>> WidgetLookup; // 0x30(0x50)
	struct FName WorldContextHandle; // 0x80(0x0c)
	char pad_8C[0x4]; // 0x8c(0x04)

	void Reset(); // Function ShooterGame.AresWidgetRegistry.Reset // (Final|Native|Protected) // @ game+0x2dcc610
	void RemoveWidgetLookup(struct UUserWidget* Widget, struct UObject* OverrideClassKey); // Function ShooterGame.AresWidgetRegistry.RemoveWidgetLookup // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dcc540
	struct UUserWidget* LookupWidget(struct UUserWidget* WidgetClass); // Function ShooterGame.AresWidgetRegistry.LookupWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dcc0e0
	struct UAresWidgetRegistry* Get(struct UObject* WorldContextObject); // Function ShooterGame.AresWidgetRegistry.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2dcbcd0
	void AddWidgetLookup(struct UUserWidget* Widget, struct UObject* OverrideClassKey); // Function ShooterGame.AresWidgetRegistry.AddWidgetLookup // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2dcae10
};

// Class ShooterGame.AresWidgetSwitcher
// Size: 0x188 (Inherited: 0x178)
struct UAresWidgetSwitcher : UWidgetSwitcher {
	char pad_178[0x10]; // 0x178(0x10)
};

// Class ShooterGame.AresWorldSettings
// Size: 0x6b8 (Inherited: 0x598)
struct AAresWorldSettings : AWorldSettings {
	bool bDrawMinimapForThisLevel; // 0x598(0x01)
	char pad_599[0x7]; // 0x599(0x07)
	struct UTexture2D* MinimapOverlay; // 0x5a0(0x08)
	struct UTexture2D* MegamapOverlay; // 0x5a8(0x08)
	struct UTexture2D* MinimapVisionOverlay; // 0x5b0(0x08)
	struct UTexture2D* MinimapDangerZoneOverlay; // 0x5b8(0x08)
	struct UTexture2D* MinimapDangerZoneLUT; // 0x5c0(0x08)
	struct UDataTable* MinimapVisionOccluders; // 0x5c8(0x08)
	float DefaultMinimapRotation; // 0x5d0(0x04)
	float DefaultTeamMinimapRotation; // 0x5d4(0x04)
	float OtherTeamMinimapRotation; // 0x5d8(0x04)
	char pad_5DC[0x4]; // 0x5dc(0x04)
	struct TArray<struct FVisionOccluderGroup> VisionOccluderGroups; // 0x5e0(0x10)
	bool bOverlayOverridesMinimap; // 0x5f0(0x01)
	bool bProceduralOverlayOverridesMinimap; // 0x5f1(0x01)
	char pad_5F2[0x6]; // 0x5f2(0x06)
	struct TMap<struct FString, struct FCalloutRegion> CalloutRegions; // 0x5f8(0x50)
	bool bDeathCamEnabledOnMap; // 0x648(0x01)
	char pad_649[0x7]; // 0x649(0x07)
	struct TArray<struct FGameModeSpecificSublevelsByKey> GameModeSpecificSublevelsByKey; // 0x650(0x10)
	struct TArray<struct TSoftObjectPtr<UWorld>> ClientOnlySublevels; // 0x660(0x10)
	struct FMulticastInlineDelegate OnVisionOccludersGenerated; // 0x670(0x10)
	struct FMaterialParamCollectionOverrides MaterialParamCollectionOverrides; // 0x680(0x10)
	struct URPCManager* RPCManager; // 0x690(0x08)
	struct UGameFeatureTogglesComponent* GameFeatureTogglesComponent; // 0x698(0x08)
	struct AShooterHUD* LocalShooterHUD; // 0x6a0(0x08)
	struct TArray<struct FDelegate> OnShooterHUDCreatedCallbacks; // 0x6a8(0x10)

	void OnLocalShooterHUDEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function ShooterGame.AresWorldSettings.OnLocalShooterHUDEndPlay // (Final|Native|Private) // @ game+0x2dcc220
	struct TSet<struct TSoftObjectPtr<UWorld>> GetSublevelsToStreamForGameMode(struct AShooterGameMode* GameMode, struct TSet<enum class EGameModeSublevelKey> SubLevelKeys); // Function ShooterGame.AresWorldSettings.GetSublevelsToStreamForGameMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcbe80
	void GenerateVisionOccluders(); // Function ShooterGame.AresWorldSettings.GenerateVisionOccluders // (Final|Native|Public) // @ game+0x2dcbcb0
	void CallNowOrWhenShooterHUDCreated(struct UObject* WorldContextObject, struct FDelegate Callback); // Function ShooterGame.AresWorldSettings.CallNowOrWhenShooterHUDCreated // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2dcb580
};

// Class ShooterGame.ArmorUIData
// Size: 0xa8 (Inherited: 0x90)
struct UArmorUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.ArmorDataAsset
// Size: 0xb0 (Inherited: 0x50)
struct UArmorDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> item; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
};

// Class ShooterGame.OrderedListModelBase
// Size: 0x48 (Inherited: 0x30)
struct UOrderedListModelBase : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.ArrayListModel
// Size: 0x68 (Inherited: 0x48)
struct UArrayListModel : UOrderedListModelBase {
	struct TArray<struct FWildcard> Items; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)

	void SwapRanges(struct FIndexRange& RangeA, struct FIndexRange& RangeB); // Function ShooterGame.ArrayListModel.SwapRanges // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcc8a0
	void RemoveItems(struct FIndexRange& Range); // Function ShooterGame.ArrayListModel.RemoveItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcc410
	void RemoveItemAt(int32_t IndexToRemove); // Function ShooterGame.ArrayListModel.RemoveItemAt // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcc380
	void NotifyItemsReplaced(struct FIndexRange& Range); // Function ShooterGame.ArrayListModel.NotifyItemsReplaced // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcc180
	bool KeyMatchDynamicDelegate__DelegateSignature(struct FWildcard& item, struct FWildcard& Key); // DelegateFunction ShooterGame.ArrayListModel.KeyMatchDynamicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x3520f50
	struct UArrayListModel* Create(struct TArray<struct FWildcard>& InitialItems, struct FDelegate& KeyMatchDelegate, struct UObject* Outer); // Function ShooterGame.ArrayListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcb680
	void Clear(); // Function ShooterGame.ArrayListModel.Clear // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcb660
	void BP_SetKeyMatchFunction(struct FDelegate& NewValue); // Function ShooterGame.ArrayListModel.BP_SetKeyMatchFunction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcb4c0
	void BP_SetItems(struct TArray<struct FWildcard>& NewValue); // Function ShooterGame.ArrayListModel.BP_SetItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcb3d0
	void BP_ReplaceItems(int32_t StartIndex, struct TArray<struct FWildcard>& NewItems); // Function ShooterGame.ArrayListModel.BP_ReplaceItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcb2a0
	bool BP_RemoveItem(int32_t ItemToRemove); // Function ShooterGame.ArrayListModel.BP_RemoveItem // (Final|Native|Public|BlueprintCallable) // @ game+0x2c2b2b0
	void BP_InsertItems(int32_t StartIndex, struct TArray<struct FWildcard>& NewItems); // Function ShooterGame.ArrayListModel.BP_InsertItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcb170
	void BP_InsertItem(int32_t StartIndex, int32_t NewItem); // Function ShooterGame.ArrayListModel.BP_InsertItem // (Final|Native|Public|BlueprintCallable) // @ game+0x2c2b0a0
	struct FIndexRange BP_AppendItems(struct TArray<struct FWildcard>& NewItems); // Function ShooterGame.ArrayListModel.BP_AppendItems // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dcb070
	int32_t BP_AddItem(int32_t NewItem); // Function ShooterGame.ArrayListModel.BP_AddItem // (Final|Native|Public|BlueprintCallable) // @ game+0x2c2ae90
};

// Class ShooterGame.ArsenalViewController
// Size: 0xb0 (Inherited: 0x80)
struct UArsenalViewController : UInitSystem {
	struct UArsenalViewModel* ViewModel; // 0x80(0x08)
	struct UInventoryManager* InventoryManager; // 0x88(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0x90(0x08)
	struct TArray<struct UEquippableInventoryModel*> GunModels; // 0x98(0x10)
	struct UConfigManager* ConfigManager; // 0xa8(0x08)

	void UnequipSpray(struct USprayEquipSlotDataAsset* SprayEquipSlot); // Function ShooterGame.ArsenalViewController.UnequipSpray // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcca20
	void UnequipBuddy(struct UEquippableDataAsset* Equippable); // Function ShooterGame.ArsenalViewController.UnequipBuddy // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcc990
	void SetSkinWithLevelAndChromaForGun(struct UEquippableDataAsset* Equippable, struct UEquippableSkinDataAsset* Skin, struct UEquippableSkinLevelDataAsset* SkinLevel, struct UEquippableSkinChromaDataAsset* Chroma); // Function ShooterGame.ArsenalViewController.SetSkinWithLevelAndChromaForGun // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcc740
	void SetSkinAndChromaForGun(struct UEquippableDataAsset* Equippable, struct UEquippableSkinDataAsset* Skin, struct UEquippableSkinChromaDataAsset* Chroma); // Function ShooterGame.ArsenalViewController.SetSkinAndChromaForGun // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcc630
	void RemoveSkin(struct UEquippableInventoryModel* Value); // Function ShooterGame.ArsenalViewController.RemoveSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcc4b0
	void RemoveAttachment(struct UEquippableAttachmentInventoryModel* AttachmentModel); // Function ShooterGame.ArsenalViewController.RemoveAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcc2f0
	void HandleOnEquippedContentChanged(); // Function ShooterGame.ArsenalViewController.HandleOnEquippedContentChanged // (Final|Native|Private) // @ game+0x2dcc0c0
	void HandleDisableSkinUpgradesChanged(); // Function ShooterGame.ArsenalViewController.HandleDisableSkinUpgradesChanged // (Final|Native|Private) // @ game+0x2dcc0a0
	struct UArsenalViewModel* GetViewModel(); // Function ShooterGame.ArsenalViewController.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2dcc080
	void EquipSpray(struct USprayEquipSlotDataAsset* SprayEquipSlot, struct USprayDataAsset* Spray); // Function ShooterGame.ArsenalViewController.EquipSpray // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcbbe0
	void EquipSkin(struct UEquippableSkinInventoryModel* Value); // Function ShooterGame.ArsenalViewController.EquipSkin // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcbb50
	void EquipPlayerTitle(struct UPlayerTitleDataAsset* PlayerTitle); // Function ShooterGame.ArsenalViewController.EquipPlayerTitle // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcbac0
	void EquipPlayerCard(struct UPlayerCardDataAsset* PlayerCard); // Function ShooterGame.ArsenalViewController.EquipPlayerCard // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcba30
	void EquipLevelBorder(struct ULevelBorderDataAsset* LevelBorder); // Function ShooterGame.ArsenalViewController.EquipLevelBorder // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcb9a0
	void EquipBuddy(struct UEquippableDataAsset* Equippable, struct UEquippableCharmInstanceInventoryModel* CharmInstance); // Function ShooterGame.ArsenalViewController.EquipBuddy // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcb8d0
	void EquipAttachment(struct UEquippableAttachmentInventoryModel* AttachmentModel); // Function ShooterGame.ArsenalViewController.EquipAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcb840
};

// Class ShooterGame.ArsenalViewModel
// Size: 0xb0 (Inherited: 0x30)
struct UArsenalViewModel : UObject {
	struct FMulticastInlineDelegate OnGunModelsChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnEquippedPlayerCardChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnEquippedPlayerTitleChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnEquippedLevelBorderChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnSkinUpgradesDisabledChanged; // 0x70(0x10)
	struct TArray<struct UEquippableInventoryModel*> GunModels; // 0x80(0x10)
	struct UPlayerCardInventoryModel* EquippedPlayerCard; // 0x90(0x08)
	struct UPlayerTitleInventoryModel* EquippedPlayerTitle; // 0x98(0x08)
	struct ULevelBorderInventoryModel* EquippedLevelBorder; // 0xa0(0x08)
	bool bAreSkinUpgradesDisabled; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)

	struct TArray<struct UEquippableInventoryModel*> GetGunModels(); // Function ShooterGame.ArsenalViewModel.GetGunModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcbdf0
	struct UPlayerTitleInventoryModel* GetEquippedPlayerTitle(); // Function ShooterGame.ArsenalViewModel.GetEquippedPlayerTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcbdc0
	struct UPlayerCardInventoryModel* GetEquippedPlayerCard(); // Function ShooterGame.ArsenalViewModel.GetEquippedPlayerCard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcbd90
	struct ULevelBorderInventoryModel* GetEquippedLevelBorder(); // Function ShooterGame.ArsenalViewModel.GetEquippedLevelBorder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcbd60
	bool AreSkinUpgradesDisabled(); // Function ShooterGame.ArsenalViewModel.AreSkinUpgradesDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcaee0
};

// Class ShooterGame.AssistTrackingComponent
// Size: 0x238 (Inherited: 0xe8)
struct UAssistTrackingComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float DamageRequiredForAssist; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct FGameplayTag> BuffAssistTags; // 0xf8(0x10)
	struct TArray<struct FGameplayTag> DebuffAssistTags; // 0x108(0x10)
	struct TArray<struct FDamagingAssistThreshold> DamagingAssistThresholds; // 0x118(0x10)
	struct FSoftObjectPath DevOnlyAssistDefinitionDataTable; // 0x128(0x20)
	struct TMap<struct FGameplayTag, enum class EAresAssistType> AssistDefinitions; // 0x148(0x50)
	struct TMap<struct AShooterPlayerState*, float> DamageTracking; // 0x198(0x50)
	struct TMap<struct AShooterPlayerState*, struct FDamageTrackingEntry> TimedDamageTracking; // 0x1e8(0x50)

	void AuthOnOwningCharacterTookDamage(struct AShooterCharacter* VictimCharacter, struct AController* DamageInstigator, struct AActor* DamageCauser, float Damage); // Function ShooterGame.AssistTrackingComponent.AuthOnOwningCharacterTookDamage // (Final|Native|Private) // @ game+0x2dcaf10
};

// Class ShooterGame.DamageSectionComponent
// Size: 0x148 (Inherited: 0xe8)
struct UDamageSectionComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate AuthOnSectionDamaged; // 0xf0(0x10)
	struct FMulticastInlineDelegate AuthOnSectionDestroyed; // 0x100(0x10)
	struct FMulticastInlineDelegate AuthOnSectionHealed; // 0x110(0x10)
	struct UDamageableComponent* DamageOwner; // 0x120(0x08)
	enum class DamageSectionType Type; // 0x128(0x01)
	bool bCanBeDestroyed; // 0x129(0x01)
	char pad_12A[0x2]; // 0x12a(0x02)
	uint32_t Priority; // 0x12c(0x04)
	bool bAlive; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	float Life; // 0x134(0x04)
	float MaximumLife; // 0x138(0x04)
	float DamageScale; // 0x13c(0x04)
	bool bAllowDamagePenetration; // 0x140(0x01)
	bool bCanBeHealed; // 0x141(0x01)
	char pad_142[0x6]; // 0x142(0x06)

	void OnRep_MaximumLife(); // Function ShooterGame.DamageSectionComponent.OnRep_MaximumLife // (Final|Native|Private) // @ game+0x2e6e2d0
	void OnRep_Life(); // Function ShooterGame.DamageSectionComponent.OnRep_Life // (Final|Native|Private) // @ game+0x2e6e2d0
	void MulticastNotifySetLife(float NewLife, bool bNewAlive); // Function ShooterGame.DamageSectionComponent.MulticastNotifySetLife // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2e6e040
	bool IsAlive(); // Function ShooterGame.DamageSectionComponent.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2302070
	enum class DamageSectionType GetType(); // Function ShooterGame.DamageSectionComponent.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dee0
	float GetNormalizedLife(); // Function ShooterGame.DamageSectionComponent.GetNormalizedLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6de80
	float GetMaximumLife(); // Function ShooterGame.DamageSectionComponent.GetMaximumLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6de50
	float GetLife(); // Function ShooterGame.DamageSectionComponent.GetLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dde0
	void AuthSetMaximumLife(float NewMaximumLife); // Function ShooterGame.DamageSectionComponent.AuthSetMaximumLife // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AuthSetLife(float NewLife); // Function ShooterGame.DamageSectionComponent.AuthSetLife // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	float AuthRestore(struct AController* EventInstigator, struct AActor* HealCauser); // Function ShooterGame.DamageSectionComponent.AuthRestore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2e6d900
	float AuthDestroy(struct FDamageEvent& DamageEvent, struct AController* EventInstigator, struct AActor* DamageCauser, bool bForceDie); // Function ShooterGame.DamageSectionComponent.AuthDestroy // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e6d760
	float AuthApplyDamage(float Damage, struct UDamageType* DamageType, struct AController* EventInstigator, struct AActor* DamageCauser, struct ADamageSource* DamageSource, enum class EAresRegionalDamage RegionalDamage, float& DamageApplied, float& DamageRemaining, bool bSimulation); // Function ShooterGame.DamageSectionComponent.AuthApplyDamage // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x2e6d480
};

// Class ShooterGame.AttachedDamageSectionComponent
// Size: 0x150 (Inherited: 0x148)
struct UAttachedDamageSectionComponent : UDamageSectionComponent {
	struct UDamageableComponent* LastKnownDamageOwner; // 0x148(0x08)

	void OnRep_LastKnownDamageOwner(struct UDamageableComponent* OldValue); // Function ShooterGame.AttachedDamageSectionComponent.OnRep_LastKnownDamageOwner // (Final|Native|Protected) // @ game+0x2dd6e50
	void MulticastSetNewDamageOwner(struct UDamageableComponent* NewDamageOwner); // Function ShooterGame.AttachedDamageSectionComponent.MulticastSetNewDamageOwner // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2dd6dc0
	void MulticastClearDamageOwner(); // Function ShooterGame.AttachedDamageSectionComponent.MulticastClearDamageOwner // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2dd6d90
	void AuthDetachDamageSection(); // Function ShooterGame.AttachedDamageSectionComponent.AuthDetachDamageSection // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2dd5e50
	void AuthAttachDamageSection(struct UDamageableComponent* Component); // Function ShooterGame.AttachedDamageSectionComponent.AuthAttachDamageSection // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2dd5dc0
};

// Class ShooterGame.AttachmentControllerComponent
// Size: 0x2c0 (Inherited: 0x290)
struct UAttachmentControllerComponent : USceneComponent {
	struct TArray<struct USceneComponent*> ManagedAttachments; // 0x288(0x10)
	bool bShowInFirstPerson; // 0x298(0x01)
	struct FAttachmentSettings FirstPersonSettings; // 0x29c(0x0c)
	bool bShowInThirdPerson; // 0x2a8(0x01)
	struct FAttachmentSettings ThirdPersonSettings; // 0x2ac(0x0c)
	char pad_2BA[0x6]; // 0x2ba(0x06)

	struct FAttachmentSettings GetAttachmentSettings(enum class EAttachmentPerspective AttachmentPerspective); // Function ShooterGame.AttachmentControllerComponent.GetAttachmentSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dd66e0
};

// Class ShooterGame.AudioOccluderMaterial
// Size: 0x118 (Inherited: 0x88)
struct UAudioOccluderMaterial : UPhysicalMaterial {
	enum class EAudioOcclusionOperation OcclusionOperation; // 0x88(0x01)
	enum class EAudioOcclusionType OcclusionType; // 0x89(0x01)
	char pad_8A[0x2]; // 0x8a(0x02)
	float FixedOcclusionAmount; // 0x8c(0x04)
	struct FRuntimeFloatCurve DistanceToOcclusionCurve; // 0x90(0x88)
};

// Class ShooterGame.AudioVisualizationDispatcherComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UAudioVisualizationDispatcherComponent : UActorComponent {
	struct FMulticastInlineDelegate HandleAudioVisualization; // 0xe8(0x10)

	bool GetAudioVisEnabled(); // Function ShooterGame.AudioVisualizationDispatcherComponent.GetAudioVisEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dd6780
};

// Class ShooterGame.AudioVisualizerWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UAudioVisualizerWidget : UUserWidget {

	void VisualizeSound(enum class EVisualizedSoundTypes SoundType, struct AActor* OwningActor, struct FVector Location, float SoundFacingAngle); // Function ShooterGame.AudioVisualizerWidget.VisualizeSound // (Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.CountdownTimerComponent
// Size: 0x108 (Inherited: 0xe8)
struct UCountdownTimerComponent : UActorComponent {
	float AuthTime; // 0xe8(0x04)
	float AuthInitTime; // 0xec(0x04)
	struct FTimerState AuthTimerState; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	float ClientPredictedTime; // 0xf4(0x04)
	float ClientInitTime; // 0xf8(0x04)
	struct FTimerState ClientTimerState; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float AllowedClientPredictionTimeDrift; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void OnRep_AuthTimerState(struct FTimerState PreviousAuthTimerState); // Function ShooterGame.CountdownTimerComponent.OnRep_AuthTimerState // (Final|Native|Private) // @ game+0x2e522c0
	void OnRep_AuthTime(float PreviousAuthTime); // Function ShooterGame.CountdownTimerComponent.OnRep_AuthTime // (Final|Native|Private) // @ game+0x2e52240
	void OnRep_AuthInitTime(float PreviousAuthInitTime); // Function ShooterGame.CountdownTimerComponent.OnRep_AuthInitTime // (Final|Native|Private) // @ game+0x2e521c0
};

// Class ShooterGame.AutoCountdownTimerComponent
// Size: 0x108 (Inherited: 0x108)
struct UAutoCountdownTimerComponent : UCountdownTimerComponent {
};

// Class ShooterGame.AutoEquipTransitionContext
// Size: 0x38 (Inherited: 0x30)
struct UAutoEquipTransitionContext : UStateTransitionContext {
	enum class EEquipSpeed AutoEquipSpeed; // 0x30(0x01)
	enum class EEquipSource EquipSource; // 0x31(0x01)
	char pad_32[0x6]; // 0x32(0x06)

	void SetupAutoEquipTransition(enum class EEquipSpeed EquipSpeed, enum class EEquipSource Source); // Function ShooterGame.AutoEquipTransitionContext.SetupAutoEquipTransition // (Final|Native|Public|BlueprintCallable) // @ game+0x2dd73d0
	enum class EEquipSpeed GetAutoEquipSpeed(); // Function ShooterGame.AutoEquipTransitionContext.GetAutoEquipSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dd67b0
};

// Class ShooterGame.AutomationHelpers
// Size: 0x30 (Inherited: 0x30)
struct UAutomationHelpers : UObject {

	bool IsAutomationEnabled(); // Function ShooterGame.AutomationHelpers.IsAutomationEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21ac3c0
	struct UAresTestLogic* GetTestLogic(struct UObject* WorldContextObject); // Function ShooterGame.AutomationHelpers.GetTestLogic // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d6bae0
};

// Class ShooterGame.AutomationTestProgressModelWatcher
// Size: 0x80 (Inherited: 0x30)
struct UAutomationTestProgressModelWatcher : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct TScriptInterface<IProgressModel> ObservedObject; // 0x38(0x10)
	char pad_48[0x38]; // 0x48(0x38)

	void HandleProgressValueChanged(struct UObject* Source); // Function ShooterGame.AutomationTestProgressModelWatcher.HandleProgressValueChanged // (Final|Native|Protected) // @ game+0x2dd6be0
	void HandleProgressStateChanged(struct UObject* Source); // Function ShooterGame.AutomationTestProgressModelWatcher.HandleProgressStateChanged // (Final|Native|Protected) // @ game+0x2dd6b50
	void HandleProgressCompleted(struct UObject* Source); // Function ShooterGame.AutomationTestProgressModelWatcher.HandleProgressCompleted // (Final|Native|Protected) // @ game+0x2dd6ac0
};

// Class ShooterGame.AutomationTestAnimationConductorNodeWatcher
// Size: 0x98 (Inherited: 0x80)
struct UAutomationTestAnimationConductorNodeWatcher : UAutomationTestProgressModelWatcher {
	char pad_80[0x18]; // 0x80(0x18)

	void HandleCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.AutomationTestAnimationConductorNodeWatcher.HandleCueEvent // (Final|Native|Protected) // @ game+0x2dd69e0
};

// Class ShooterGame.DebugListModelWatcherBase
// Size: 0x48 (Inherited: 0x30)
struct UDebugListModelWatcherBase : UObject {
	struct TScriptInterface<IOrderedListModel> ListModel; // 0x30(0x10)
	char pad_40[0x8]; // 0x40(0x08)

	void SetListModel(struct TScriptInterface<IOrderedListModel>& NewValue); // Function ShooterGame.DebugListModelWatcherBase.SetListModel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e6e2f0
	void HandleListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.DebugListModelWatcherBase.HandleListModelChange // (Native|Protected|HasOutParms) // @ game+0x2e6df10
	struct TScriptInterface<IOrderedListModel> GetListModel(); // Function ShooterGame.DebugListModelWatcherBase.GetListModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6de10
};

// Class ShooterGame.AutomationTestDebugListModelWatcher
// Size: 0x70 (Inherited: 0x48)
struct UAutomationTestDebugListModelWatcher : UDebugListModelWatcherBase {
	char pad_48[0x28]; // 0x48(0x28)
};

// Class ShooterGame.AutoResetAnimationConductorNode
// Size: 0xd8 (Inherited: 0xa8)
struct UAutoResetAnimationConductorNode : UAnimationConductorNodeBase {
	struct TScriptInterface<IAnimationConductorNode> ChildNode; // 0xa8(0x10)
	struct FAnimationConductorNodeSignalCondition ChildNodeSettings; // 0xb8(0x14)
	char pad_CC[0xc]; // 0xcc(0x0c)

	void SetSettings(struct FAnimationConductorNodeSignalCondition InChildNodeSettings); // Function ShooterGame.AutoResetAnimationConductorNode.SetSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x2dd7320
	void SetChildNode(struct TScriptInterface<IAnimationConductorNode> InChildNode); // Function ShooterGame.AutoResetAnimationConductorNode.SetChildNode // (Final|Native|Public|BlueprintCallable) // @ game+0x2dd7280
	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.AutoResetAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x2dd6950
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.AutoResetAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x2dd6870
	struct UAutoResetAnimationConductorNode* Create(struct TScriptInterface<IAnimationConductorNode> ChildNode, struct FAnimationConductorNodeSignalCondition& ChildNodeSettings, struct UObject* Outer); // Function ShooterGame.AutoResetAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2dd61b0
};

// Class ShooterGame.AVSManager
// Size: 0x108 (Inherited: 0x80)
struct UAVSManager : UInitSystem {
	struct FMulticastInlineDelegate OnAVSStatusChanged; // 0x80(0x10)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct URMSManager* RMSManager; // 0xa0(0x08)
	struct UAVSService* AVSService; // 0xa8(0x08)
	struct TMap<struct FString, struct FAVSResponseCallback> ActiveRequests; // 0xb0(0x50)
	char pad_100[0x8]; // 0x100(0x08)

	bool IsEnabled(struct FString Country); // Function ShooterGame.AVSManager.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2dd6ca0
	bool IsAccountVerified(); // Function ShooterGame.AVSManager.IsAccountVerified // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2dd6c70
	struct UAVSManager* Get(struct UWorld* FromWorld); // Function ShooterGame.AVSManager.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2dd6650
};

// Class ShooterGame.AVSScreenV1
// Size: 0x2d0 (Inherited: 0x2c8)
struct UAVSScreenV1 : UUserWidget {
	struct UAVSViewController* AVSViewController; // 0x2c8(0x08)
};

// Class ShooterGame.AVSService
// Size: 0x38 (Inherited: 0x30)
struct UAVSService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.AVSViewController
// Size: 0x48 (Inherited: 0x30)
struct UAVSViewController : UObject {
	struct FMulticastInlineDelegate OnVerificationStatusChanged; // 0x30(0x10)
	struct UAVSManager* AVSManager; // 0x40(0x08)

	void SendDeactivationPin(struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.SendDeactivationPin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dd7140
	void SendActivationPin(struct FString CountryCode, struct FString PhoneNumber, struct FString Locale, struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.SendActivationPin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dd6ee0
	bool IsVerified(); // Function ShooterGame.AVSViewController.IsVerified // (Final|Native|Public|BlueprintCallable) // @ game+0x2dd6d60
	void HandleAVSStatusUpdated(bool IsVerified); // Function ShooterGame.AVSViewController.HandleAVSStatusUpdated // (Final|Native|Private) // @ game+0x2dd67e0
	void DebugVerifyAccount(struct FString CountryCode, struct FString PhoneNumber, struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.DebugVerifyAccount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dd6450
	void DebugUnverifyAccount(struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.DebugUnverifyAccount // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dd6310
	void ConfirmDeactivationPin(struct FString OneTimePin, struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.ConfirmDeactivationPin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dd6010
	void ConfirmActivationPin(struct FString OneTimePin, struct FDelegate& OnComplete, struct FDelegate& OnError); // Function ShooterGame.AVSViewController.ConfirmActivationPin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2dd5e70
};

// Class ShooterGame.BaseConcussComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UBaseConcussComponent : UActorComponent {
	bool ConcussActive; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class ShooterGame.BaseCrosshairHudElement
// Size: 0x178 (Inherited: 0x58)
struct UBaseCrosshairHudElement : UAresHudElement {
	char pad_58[0x4]; // 0x58(0x04)
	float MinAngleBetweenCrosshairPoints; // 0x5c(0x04)
	bool bApplyAngleOvershootInterpolation; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float OvershootPercentOfTimeToNextShot; // 0x64(0x04)
	float OvershootMaxTimeSeconds; // 0x68(0x04)
	float OvershootPercentOfAngle; // 0x6c(0x04)
	float MinOvershootAngle; // 0x70(0x04)
	float FallbackPercentOfTimeToNextShot; // 0x74(0x04)
	float FallbackMaxTimeSeconds; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	struct FAresHitConfirmTuning HitConfirmTuning; // 0x80(0x58)
	struct FAresHitConfirmTuning KillConfirmTuning; // 0xd8(0x58)
	char pad_130[0x18]; // 0x130(0x18)
	struct TArray<struct FCrosshairShape> NewSystem_CrosshairShapes; // 0x148(0x10)
	char pad_158[0x20]; // 0x158(0x20)
};

// Class ShooterGame.BaseGameStateComponent
// Size: 0x170 (Inherited: 0xf8)
struct UBaseGameStateComponent : UStateComponent {
	bool bControlsGameModePhase; // 0xf8(0x01)
	enum class EAresGamePhase GamePhase; // 0xf9(0x01)
	bool bShouldPerformanceInstabilityTrackingBeEnabledInThisState; // 0xfa(0x01)
	char pad_FB[0x5]; // 0xfb(0x05)
	struct FQueuedStateTransition QueuedStateTransition; // 0x100(0x38)
	struct FMulticastInlineDelegate OnStateEnter; // 0x138(0x10)
	struct FMulticastInlineDelegate OnStateExit; // 0x148(0x10)
	struct FMulticastInlineDelegate OnStateTick; // 0x158(0x10)
	struct UGameStateHUDConfig* DefaultHUDConfig; // 0x168(0x08)

	void OnStateTickImplementation(); // Function ShooterGame.BaseGameStateComponent.OnStateTickImplementation // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnStateExitImplementation(); // Function ShooterGame.BaseGameStateComponent.OnStateExitImplementation // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnStateEnterImplementation(); // Function ShooterGame.BaseGameStateComponent.OnStateEnterImplementation // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void GoToStateWithContext(struct UStateComponent* NewState, struct UStateTransitionContext* Context, float TimeUntilTransition); // Function ShooterGame.BaseGameStateComponent.GoToStateWithContext // (Native|Public|BlueprintCallable) // @ game+0x2ddf660
	void GoToState(struct UStateComponent* NewState, float TimeUntilTransition); // Function ShooterGame.BaseGameStateComponent.GoToState // (Native|Public|BlueprintCallable) // @ game+0x2ddf580
	void EndGamePhase(); // Function ShooterGame.BaseGameStateComponent.EndGamePhase // (Final|Native|Public|BlueprintCallable) // @ game+0x2ddece0
};

// Class ShooterGame.BaseHitScanEffectComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UBaseHitScanEffectComponent : UActorComponent {

	void TriggerHitEffect(struct FHitResult& ImpactHit); // Function ShooterGame.BaseHitScanEffectComponent.TriggerHitEffect // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void OnEntranceHit(struct FHitResult& LastHitResult, struct FHitResult& EntranceHit); // Function ShooterGame.BaseHitScanEffectComponent.OnEntranceHit // (Final|Native|Public|HasOutParms) // @ game+0x2de0190
};

// Class ShooterGame.BaseMainMenuPlayerController
// Size: 0x770 (Inherited: 0x738)
struct ABaseMainMenuPlayerController : ABasePlayerController {
	struct UPlayerUIAutomationBase* UIAutomation; // 0x738(0x08)
	struct FMulticastInlineDelegate OnMainMenuViewControllerInitCompleted; // 0x740(0x10)
	struct UMainMenuParentWidget* MainMenuParentWidget; // 0x750(0x08)
	struct UMainMenuViewModel* ViewModel; // 0x758(0x08)
	struct UMainMenuViewController* ViewController; // 0x760(0x08)
	char pad_768[0x8]; // 0x768(0x08)

	void InitializePlayerAutomation(struct UPlayerUIAutomationBase* PlayerUIAutomationClass, struct UMainMenuAutomationBase* MenuAutomationClass, struct UHUDAutomationBase* HUDAutomationClass); // Function ShooterGame.BaseMainMenuPlayerController.InitializePlayerAutomation // (Final|Native|Public|BlueprintCallable) // @ game+0x2ddf8e0
	void HandleStateManagerOnEnterTransitionToInGame(); // Function ShooterGame.BaseMainMenuPlayerController.HandleStateManagerOnEnterTransitionToInGame // (Final|Native|Private) // @ game+0x2ddf770
	void EndMenus(); // Function ShooterGame.BaseMainMenuPlayerController.EndMenus // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ClientSaveRiotProfiling(); // Function ShooterGame.BaseMainMenuPlayerController.ClientSaveRiotProfiling // (Final|Native|Private) // @ game+0x1e6e7b0
	void CheatUnlockAllSprays(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllSprays // (Final|Native|Public) // @ game+0x1e6e7b0
	void CheatUnlockAllSkins(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllSkins // (Final|Native|Public) // @ game+0x1e6e7b0
	void CheatUnlockAllPlayerTitles(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllPlayerTitles // (Final|Native|Public) // @ game+0x1e6e7b0
	void CheatUnlockAllPlayerCards(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllPlayerCards // (Final|Native|Public) // @ game+0x1e6e7b0
	void CheatUnlockAllBuddies(); // Function ShooterGame.BaseMainMenuPlayerController.CheatUnlockAllBuddies // (Final|Native|Public) // @ game+0x1e6e7b0
	void AddRiotProfileInstantMarker(); // Function ShooterGame.BaseMainMenuPlayerController.AddRiotProfileInstantMarker // (Final|Native|Private) // @ game+0x1e6e7b0
};

// Class ShooterGame.BasePerformanceMonitoringComponent
// Size: 0x118 (Inherited: 0xe8)
struct UBasePerformanceMonitoringComponent : UActorComponent {
	struct UMetricInstabilityTrackingDetails* LocalFrameRateInstability; // 0xe8(0x08)
	char pad_F0[0x28]; // 0xf0(0x28)
};

// Class ShooterGame.BasePlayerStateTelemetryComponent
// Size: 0x100 (Inherited: 0xe8)
struct UBasePlayerStateTelemetryComponent : UActorComponent {
	struct UTelemetrySampler* TelemetrySampler; // 0xe8(0x08)
	struct UTelemetryManager* TelemetryManager; // 0xf0(0x08)
	char pad_F8[0x8]; // 0xf8(0x08)

	void OnGameStatePhaseChanged(enum class EAresGamePhase NewGamePhase, int32_t RoundNumberEnded); // Function ShooterGame.BasePlayerStateTelemetryComponent.OnGameStatePhaseChanged // (Final|Native|Protected) // @ game+0x2de0460
	void Init(struct AShooterPlayerState* ShooterPlayerState, struct UTelemetrySampler* InTelemetrySampler, struct UTelemetryManager* InTelemetryManager); // Function ShooterGame.BasePlayerStateTelemetryComponent.Init // (Native|Public) // @ game+0x2ddf7d0
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.BasePlayerStateTelemetryComponent.GetPlayerState // (Final|Native|Protected|Const) // @ game+0x2cecf50
	void BeginPlay(); // Function ShooterGame.BasePlayerStateTelemetryComponent.BeginPlay // (Native|Public) // @ game+0x2ddecb0
};

// Class ShooterGame.GameModifierComponent
// Size: 0x158 (Inherited: 0xe8)
struct UGameModifierComponent : UActorComponent {
	struct FMulticastInlineDelegate OnGameModifierAllowedChanged; // 0xe8(0x10)
	int32_t AllowedRoleConditions; // 0xf8(0x04)
	int32_t AllowedUseConditions; // 0xfc(0x04)
	struct TSoftClassPtr<UObject> DisplayWidgetClass; // 0x100(0x30)
	struct FText ModifierName; // 0x130(0x18)
	bool bIsUniquePerPlayer; // 0x148(0x01)
	bool bIsAvailableToObservers; // 0x149(0x01)
	char pad_14A[0xe]; // 0x14a(0x0e)

	bool Validate(struct AAresPlayerController* CallingPlayer, struct FString Argument); // Function ShooterGame.GameModifierComponent.Validate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed78a0
	void TryActivateOnClient(struct FString Argument); // Function ShooterGame.GameModifierComponent.TryActivateOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x2ed77d0
	bool IsRoleAllowed(struct AAresPlayerController* CallingPlayer); // Function ShooterGame.GameModifierComponent.IsRoleAllowed // (Final|Native|Protected|Const) // @ game+0x2ed7100
	bool IsModifierShownInMenuForPlayer(struct AAresPlayerController* CallingPlayer); // Function ShooterGame.GameModifierComponent.IsModifierShownInMenuForPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed7060
	bool IsModifierAllowedThisGame(struct AAresPlayerController* CallingPlayer); // Function ShooterGame.GameModifierComponent.IsModifierAllowedThisGame // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2ed6fb0
	bool IsModifierAllowed(struct AAresPlayerController* CallingPlayer, struct FString Argument); // Function ShooterGame.GameModifierComponent.IsModifierAllowed // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2ed6ea0
	bool IsGameConditionsMet(); // Function ShooterGame.GameModifierComponent.IsGameConditionsMet // (Final|Native|Protected|Const) // @ game+0x2ed6de0
	bool IsBasicModifierRequirementsMet(struct AAresPlayerController* CallingPlayer); // Function ShooterGame.GameModifierComponent.IsBasicModifierRequirementsMet // (Final|Native|Protected|Const) // @ game+0x2ed6d40
	struct FText GetModifierName(); // Function ShooterGame.GameModifierComponent.GetModifierName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6ae0
	void AuthActivate(struct AAresPlayerController* CallingPlayer, struct FString Argument); // Function ShooterGame.GameModifierComponent.AuthActivate // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent) // @ game+0x2ed6080
};

// Class ShooterGame.BaseScoreboardModifier
// Size: 0x158 (Inherited: 0x158)
struct UBaseScoreboardModifier : UGameModifierComponent {

	void TrySetUltimatePointsOnClient(struct AShooterPlayerState* PlayerState, int32_t NewPoints); // Function ShooterGame.BaseScoreboardModifier.TrySetUltimatePointsOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x2de0b00
	void TrySetStatOnClient(struct AShooterPlayerState* PlayerState, enum class EScoreboardModifierStatType Stat, int32_t NewValue); // Function ShooterGame.BaseScoreboardModifier.TrySetStatOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x2de09f0
	void TrySetMoneyOnClient(struct AShooterPlayerState* PlayerState, int32_t NewMoney); // Function ShooterGame.BaseScoreboardModifier.TrySetMoneyOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x2de0920
	void TrySetArmorOnClient(struct AShooterPlayerState* PlayerState, int32_t NewArmorValue); // Function ShooterGame.BaseScoreboardModifier.TrySetArmorOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x2de0850
	void TryRestartGameOnClient(struct TArray<struct FAresRoundResult>& RoundResults, bool bShouldSwapRoles); // Function ShooterGame.BaseScoreboardModifier.TryRestartGameOnClient // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2de0720
	void TryFinalizePlayerOnClient(struct AShooterPlayerState* PlayerState); // Function ShooterGame.BaseScoreboardModifier.TryFinalizePlayerOnClient // (Final|Native|Public|BlueprintCallable) // @ game+0x2de0690
	void AuthHandleRestartGameCommand(struct TArray<struct FAresRoundResult>& RoundResults, bool bShouldSwapRoles); // Function ShooterGame.BaseScoreboardModifier.AuthHandleRestartGameCommand // (BlueprintAuthorityOnly|Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.BaseSettingsWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UBaseSettingsWidget : UDesignableUserWidget {

	void TryDisplay(); // Function ShooterGame.BaseSettingsWidget.TryDisplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	bool ShouldDisplay(); // Function ShooterGame.BaseSettingsWidget.ShouldDisplay // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void SaveSetting(); // Function ShooterGame.BaseSettingsWidget.SaveSetting // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.BaseSettingsWidgetGamepad
// Size: 0x2e0 (Inherited: 0x2c8)
struct UBaseSettingsWidgetGamepad : UBaseSettingsWidget {
	struct FMulticastInlineDelegate OnNavigation; // 0x2c8(0x10)
	struct UWidget* NavigationWidget; // 0x2d8(0x08)

	void SetNavigationWidget(struct UWidget* InternalWidget); // Function ShooterGame.BaseSettingsWidgetGamepad.SetNavigationWidget // (Final|Native|Protected|BlueprintCallable) // @ game+0x2de0570
	struct FKey GetVirtualBackKey(); // Function ShooterGame.BaseSettingsWidgetGamepad.GetVirtualBackKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddf4d0
	struct FKey GetVirtualAcceptKey(); // Function ShooterGame.BaseSettingsWidgetGamepad.GetVirtualAcceptKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddf420
	struct UWidget* GetNavigationWidget(); // Function ShooterGame.BaseSettingsWidgetGamepad.GetNavigationWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddefc0
};

// Class ShooterGame.BaseSpawnBarrier
// Size: 0x400 (Inherited: 0x400)
struct ABaseSpawnBarrier : AGameObject {

	void OnControllerAdded(struct AController* Controller); // Function ShooterGame.BaseSpawnBarrier.OnControllerAdded // (Final|Native|Private) // @ game+0x2de0100
	void InitializeSpawnBarrier(); // Function ShooterGame.BaseSpawnBarrier.InitializeSpawnBarrier // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x1e917a0
};

// Class ShooterGame.BaseTeamComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UBaseTeamComponent : UActorComponent {
	struct FMulticastInlineDelegate OnTeamChanged; // 0xe8(0x10)

	bool UseEnemyColoring(struct UObject* Object); // Function ShooterGame.BaseTeamComponent.UseEnemyColoring // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2de0c60
	bool UseEnemyAudio(struct UObject* Object); // Function ShooterGame.BaseTeamComponent.UseEnemyAudio // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2de0bd0
	bool ShowAllyInformation(struct UObject* Object); // Function ShooterGame.BaseTeamComponent.ShowAllyInformation // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2de0600
	bool LocalTeamIsValid(struct UObject* WorldContextObject); // Function ShooterGame.BaseTeamComponent.LocalTeamIsValid // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddffe0
	bool LocalTeamIsObserver(struct UObject* WorldContextObject); // Function ShooterGame.BaseTeamComponent.LocalTeamIsObserver // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddff50
	bool IsTeamEnemy(struct UBaseTeamComponent* TargetTeam); // Function ShooterGame.BaseTeamComponent.IsTeamEnemy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddfeb0
	bool IsTeamAlly(struct UBaseTeamComponent* TargetTeam); // Function ShooterGame.BaseTeamComponent.IsTeamAlly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddfe10
	bool IsObserver(); // Function ShooterGame.BaseTeamComponent.IsObserver // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddfdd0
	bool IsObjectEnemy(struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsObjectEnemy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddfd30
	bool IsObjectAlly(struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsObjectAlly // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddfc90
	bool IsObjectAlliance(enum class EAresAlliance Alliance, struct UObject* SourceObject, struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsObjectAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddfb90
	bool IsEnemy(struct UObject* SourceObject, struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsEnemy // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddfac0
	bool IsAlly(struct UObject* SourceObject, struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.IsAlly // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddf9f0
	bool HasValidTeam(); // Function ShooterGame.BaseTeamComponent.HasValidTeam // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddf790
	enum class EAresTeamRole GetTeamRole(); // Function ShooterGame.BaseTeamComponent.GetTeamRole // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddf3b0
	struct FName GetTeamName(); // Function ShooterGame.BaseTeamComponent.GetTeamName // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddf360
	struct UBaseTeamComponent* GetTeamComponent(struct UObject* SourceActor); // Function ShooterGame.BaseTeamComponent.GetTeamComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddf2d0
	struct FColor GetTeamColoring(struct UObject* Object); // Function ShooterGame.BaseTeamComponent.GetTeamColoring // (Final|BlueprintCosmetic|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2ddf240
	enum class EAresAlliance GetTeamAlliance(struct UBaseTeamComponent* SourceTeamComponent, struct UBaseTeamComponent* TargetTeamComponent); // Function ShooterGame.BaseTeamComponent.GetTeamAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddf170
	enum class EAresAlliance GetRoleAlliance(struct UBaseTeamComponent* TargetTeamComponent); // Function ShooterGame.BaseTeamComponent.GetRoleAlliance // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddf0c0
	enum class EAresAlliance GetObjectAlliance(struct UObject* SourceObject, struct UObject* TargetObject); // Function ShooterGame.BaseTeamComponent.GetObjectAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddeff0
	enum class EAresAlliance GetAllianceWithRole(enum class EAresTeamRole TargetRole); // Function ShooterGame.BaseTeamComponent.GetAllianceWithRole // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddef20
	enum class EAresAlliance GetAllianceFromTeamName(struct FName& TeamName); // Function ShooterGame.BaseTeamComponent.GetAllianceFromTeamName // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ddee70
	enum class EAresAlliance GetAllianceBetweenRoles(enum class EAresTeamRole SourceRole, enum class EAresTeamRole TargetRole); // Function ShooterGame.BaseTeamComponent.GetAllianceBetweenRoles // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ddedb0
	enum class EAresAlliance GetAlliance(struct UBaseTeamComponent* TargetTeamComponent); // Function ShooterGame.BaseTeamComponent.GetAlliance // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dded00
	bool AuthSetTeamFromTeamName(struct FName& TeamName); // Function ShooterGame.BaseTeamComponent.AuthSetTeamFromTeamName // (Native|Public|HasOutParms) // @ game+0x2ddec00
	void AuthCopyTeam(struct UBaseTeamComponent* TeamToDuplicate); // Function ShooterGame.BaseTeamComponent.AuthCopyTeam // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ddeb70
};

// Class ShooterGame.BasicCombatStatsComponent
// Size: 0x100 (Inherited: 0xe8)
struct UBasicCombatStatsComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	int32_t AggregateKills; // 0xf0(0x04)
	int32_t AggregateDeaths; // 0xf4(0x04)
	int32_t AggregateAssists; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)

	int32_t GetKills(); // Function ShooterGame.BasicCombatStatsComponent.GetKills // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4ce0
	int32_t GetDeaths(); // Function ShooterGame.BasicCombatStatsComponent.GetDeaths // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dea830
	int32_t GetAssists(); // Function ShooterGame.BasicCombatStatsComponent.GetAssists // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dea500
	void AuthSetCombatStatsPaused(bool bPaused); // Function ShooterGame.BasicCombatStatsComponent.AuthSetCombatStatsPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x2dea2f0
};

// Class ShooterGame.BehaviorScoreTracker
// Size: 0x450 (Inherited: 0x3d0)
struct ABehaviorScoreTracker : AInfo {
	char pad_3D0[0x70]; // 0x3d0(0x70)
	struct FString FactorName; // 0x440(0x10)

	void SetSpawnedCharacter(struct AShooterCharacter* Character); // Function ShooterGame.BehaviorScoreTracker.SetSpawnedCharacter // (Final|Native|Public) // @ game+0x2debb10
	void SetFactorName(struct FString InFactorName); // Function ShooterGame.BehaviorScoreTracker.SetFactorName // (Final|Native|Public|BlueprintCallable) // @ game+0x2deb7c0
	void SendMetricsEvent(struct FBehaviorScoreTrackerMouseMovementTelemetry InMouseMovementTelemetry); // Function ShooterGame.BehaviorScoreTracker.SendMetricsEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2deb720
	void OnSpawnedCharacterChanged(struct AShooterCharacter* Character); // Function ShooterGame.BehaviorScoreTracker.OnSpawnedCharacterChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.BehaviorScoreTracker.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deb0a0
	struct AShooterPlayerState* GetOwningPlayerState(); // Function ShooterGame.BehaviorScoreTracker.GetOwningPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecd40
	struct UBehaviorScoreTrackerManagerComponent* GetManager(); // Function ShooterGame.BehaviorScoreTracker.GetManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cebf80
	struct FString GetFactorName(); // Function ShooterGame.BehaviorScoreTracker.GetFactorName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deaad0
	float GetFactor(); // Function ShooterGame.BehaviorScoreTracker.GetFactor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deaaa0
	struct TMap<struct AShooterPlayerState*, struct ABehaviorScoreTracker*> GetAllSameTypeTrackers(); // Function ShooterGame.BehaviorScoreTracker.GetAllSameTypeTrackers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dea420
	float CalculateFactor(enum class EMatchCompletionState CompletionState); // Function ShooterGame.BehaviorScoreTracker.CalculateFactor // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginTracking(); // Function ShooterGame.BehaviorScoreTracker.BeginTracking // (Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.BehaviorScoreTrackerManagerComponent
// Size: 0x150 (Inherited: 0xe8)
struct UBehaviorScoreTrackerManagerComponent : UActorComponent {
	struct TArray<struct ABehaviorScoreTracker*> ActiveTrackerClasses; // 0xe8(0x10)
	char pad_F8[0x58]; // 0xf8(0x58)
};

// Class ShooterGame.ProjectileCollisionResponseComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UProjectileCollisionResponseComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	int32_t Priority; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)

	void SetPriority(int32_t NewPriority); // Function ShooterGame.ProjectileCollisionResponseComponent.SetPriority // (Final|Native|Public|BlueprintCallable) // @ game+0x2ffae60
	int32_t GetPriority(); // Function ShooterGame.ProjectileCollisionResponseComponent.GetPriority // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4ce0
};

// Class ShooterGame.BlueprintProjectileCollisionComponent
// Size: 0x108 (Inherited: 0xf8)
struct UBlueprintProjectileCollisionComponent : UProjectileCollisionResponseComponent {
	char pad_F8[0x10]; // 0xf8(0x10)

	void SetProjectileVelocity(struct FVector& NewVelocity); // Function ShooterGame.BlueprintProjectileCollisionComponent.SetProjectileVelocity // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2deb9f0
	enum class EProjectileCollisionProcessInstruction RespondToCollision(struct FHitResult& Collision); // Function ShooterGame.BlueprintProjectileCollisionComponent.RespondToCollision // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.BlueprintResourceComponent
// Size: 0x138 (Inherited: 0x138)
struct UBlueprintResourceComponent : UAbilityResourceComponent {

	void ReplenishResource(); // Function ShooterGame.BlueprintResourceComponent.ReplenishResource // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool ConsumeResource(); // Function ShooterGame.BlueprintResourceComponent.ConsumeResource // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool CanConsumeResource(); // Function ShooterGame.BlueprintResourceComponent.CanConsumeResource // (Event|Public|BlueprintEvent|Const) // @ game+0x3520f50
};

// Class ShooterGame.BombMinimapComponent
// Size: 0x580 (Inherited: 0x500)
struct UBombMinimapComponent : UAresMinimapComponent {
	struct UUserWidget* MissingWidgetClass; // 0x4f8(0x08)
	bool bNeedsBombUpdate; // 0x500(0x01)
	float LastSeen; // 0x504(0x04)
	bool bIsEnemy; // 0x508(0x01)
	bool bOnGround; // 0x509(0x01)
	char pad_50F[0x1]; // 0x50f(0x01)
	struct UVisibilityComponent* VisibilityComponent; // 0x510(0x08)
	struct UUserWidget* OriginalWidgetClass; // 0x518(0x08)
	struct TSet<struct UShooterCharacterMinimapComponent*> HoldingBombComponents; // 0x520(0x50)
	bool bBeingDestroyed; // 0x570(0x01)
	bool bInFogOfWar; // 0x571(0x01)
	bool bLocalObserver; // 0x572(0x01)
	char pad_573[0xd]; // 0x573(0x0d)

	void SetNeedsBombParameterUpdate(); // Function ShooterGame.BombMinimapComponent.SetNeedsBombParameterUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x2deb940
	void HandleOwnerSetOwner(struct AAresEquippable* Equippable, struct AActor* Owner); // Function ShooterGame.BombMinimapComponent.HandleOwnerSetOwner // (Final|Native|Protected) // @ game+0x2deb410
	void HandleOwnerHiddenChanged(struct AActor* Actor); // Function ShooterGame.BombMinimapComponent.HandleOwnerHiddenChanged // (Final|Native|Protected) // @ game+0x2deb380
	void HandleOwnerExitedTeamSight(struct AActor* Actor); // Function ShooterGame.BombMinimapComponent.HandleOwnerExitedTeamSight // (Final|Native|Protected) // @ game+0x2deb2f0
	void HandleOwnerEnteredTeamSight(struct AActor* Actor, struct TArray<struct AShooterCharacter*>& CharactersWithVisibility); // Function ShooterGame.BombMinimapComponent.HandleOwnerEnteredTeamSight // (Final|Native|Protected|HasOutParms) // @ game+0x2deb1f0
	void HandleOwnerDropped(struct AAresEquippable* DroppedEquippable); // Function ShooterGame.BombMinimapComponent.HandleOwnerDropped // (Final|Native|Protected) // @ game+0x2deb160
	void HandleOwnerDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.BombMinimapComponent.HandleOwnerDestroyed // (Final|Native|Protected) // @ game+0x2deb0d0
};

// Class ShooterGame.BombTeamComponent
// Size: 0x100 (Inherited: 0xf8)
struct UBombTeamComponent : UBaseTeamComponent {
	enum class EAresTeam Team; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void OnRep_TeamChanged(); // Function ShooterGame.BombTeamComponent.OnRep_TeamChanged // (Final|Native|Protected) // @ game+0x2deb6b0
	bool IsEnemyTeam(enum class EAresTeam OtherTeam); // Function ShooterGame.BombTeamComponent.IsEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deb570
	bool IsAllyTeam(enum class EAresTeam OtherTeam); // Function ShooterGame.BombTeamComponent.IsAllyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deb4e0
	void AuthToggleTeam(); // Function ShooterGame.BombTeamComponent.AuthToggleTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2dea400
	void AuthSetTeam(enum class EAresTeam NewTeam); // Function ShooterGame.BombTeamComponent.AuthSetTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
};

// Class ShooterGame.ListEntrySlotConfigurerFactoryBase
// Size: 0x38 (Inherited: 0x30)
struct UListEntrySlotConfigurerFactoryBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.ListEntrySlotConfigurerBase
// Size: 0x50 (Inherited: 0x38)
struct UListEntrySlotConfigurerBase : UListEntrySlotConfigurerFactoryBase {
	char pad_38[0x18]; // 0x38(0x18)

	void BroadcastSlotSettingsChanged(); // Function ShooterGame.ListEntrySlotConfigurerBase.BroadcastSlotSettingsChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f204e0
};

// Class ShooterGame.BoxSlotConfigurer
// Size: 0x70 (Inherited: 0x50)
struct UBoxSlotConfigurer : UListEntrySlotConfigurerBase {
	struct FMargin Padding; // 0x50(0x10)
	struct FSlateChildSize Size; // 0x60(0x08)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x68(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.BoxSlotConfigurer.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2debba0
	void SetSize(struct FSlateChildSize InSize); // Function ShooterGame.BoxSlotConfigurer.SetSize // (Final|Native|Public|BlueprintCallable) // @ game+0x2deba80
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.BoxSlotConfigurer.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x2deb960
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.BoxSlotConfigurer.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2deb8c0
};

// Class ShooterGame.BTDecorator_NearNavMesh
// Size: 0xb8 (Inherited: 0x70)
struct UBTDecorator_NearNavMesh : UBTDecorator {
	float AbortTestTickRate; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	struct FBlackboardKeySelector TestLocationKey; // 0x78(0x30)
	struct FVector NavQueryExtents; // 0xa8(0x0c)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class ShooterGame.BTTask_FollowCustomPath
// Size: 0xb8 (Inherited: 0x78)
struct UBTTask_FollowCustomPath : UBTTaskNode {
	float ReachedNodeAcceptDistXY; // 0x78(0x04)
	float ReachedNodeAcceptDistZ; // 0x7c(0x04)
	enum class ECustomPathFollowStartBehavior StartBehavior; // 0x80(0x01)
	enum class ECustomPathFollowMoveType MoveType; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
	struct FBlackboardKeySelector CustomPath; // 0x88(0x30)
};

// Class ShooterGame.BulletWhizByComponent
// Size: 0x120 (Inherited: 0xf8)
struct UBulletWhizByComponent : UBaseProjectileEffectComponent {
	struct UAkAudioEvent* WhizByAudioEvent; // 0xf8(0x08)
	struct FAresWhizBySoundTuning WhizByTuning; // 0x100(0x14)
	struct FName StartBoneName; // 0x114(0x0c)

	void OnStop(); // Function ShooterGame.BulletWhizByComponent.OnStop // (Final|Native|Public) // @ game+0x2deb6d0
};

// Class ShooterGame.CanDisarmComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UCanDisarmComponent : UActorComponent {
};

// Class ShooterGame.CapConstants
// Size: 0x30 (Inherited: 0x30)
struct UCapConstants : UObject {
};

// Class ShooterGame.CausedDamageListener
// Size: 0x30 (Inherited: 0x30)
struct UCausedDamageListener : UInterface {
};

// Class ShooterGame.CellularPatch
// Size: 0x6b0 (Inherited: 0x3d0)
struct ACellularPatch : AActor {
	struct URoundPersistenceComponent* Persistence; // 0x3d0(0x08)
	struct USceneComponent* SceneRoot; // 0x3d8(0x08)
	struct UBoxComponent* BoxOverlap; // 0x3e0(0x08)
	float CellSize; // 0x3e8(0x04)
	bool bAxisAligned; // 0x3ec(0x01)
	char pad_3ED[0x3]; // 0x3ed(0x03)
	int32_t MaxNumberOfCells; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	float StepUp; // 0x3f8(0x04)
	float StepDown; // 0x3fc(0x04)
	float InitialFloorSearchRadius; // 0x400(0x04)
	enum class ECollisionChannel CollisionChannel; // 0x404(0x01)
	char pad_405[0x3]; // 0x405(0x03)
	struct FName IgnoreObjectsWithTag; // 0x408(0x0c)
	enum class EPatchType PatchType; // 0x414(0x01)
	bool bDilateHeights; // 0x415(0x01)
	char pad_416[0x2]; // 0x416(0x02)
	int32_t MinimumValidVolume; // 0x418(0x04)
	bool bExtendIntoWalls; // 0x41c(0x01)
	bool bReportSpawnFailure; // 0x41d(0x01)
	bool bTrackPatchOverlaps; // 0x41e(0x01)
	char pad_41F[0x1]; // 0x41f(0x01)
	float PatchOverlapExtent; // 0x420(0x04)
	char pad_424[0x4]; // 0x424(0x04)
	struct FClassInclusionExclusionFilter OverlapFilter; // 0x428(0x50)
	char pad_478[0x8]; // 0x478(0x08)
	struct TArray<struct AActor*> OverlappingActors; // 0x480(0x10)
	struct TMap<struct FIntPoint, struct FPatchNode> NodeMap; // 0x490(0x50)
	struct FVector ForwardVector; // 0x4e0(0x0c)
	struct FVector RightVector; // 0x4ec(0x0c)
	char pad_4F8[0x8]; // 0x4f8(0x08)
	struct FTransform GridTransform; // 0x500(0x30)
	struct FNodeGrid NodeGrid; // 0x530(0x38)
	float OverlapHeight; // 0x568(0x04)
	char pad_56C[0x144]; // 0x56c(0x144)

	bool PatchBuilt(); // Function ShooterGame.CellularPatch.PatchBuilt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deb6f0
	void OnNodeGridFailed(); // Function ShooterGame.CellularPatch.OnNodeGridFailed // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnNodeGridCreated(); // Function ShooterGame.CellularPatch.OnNodeGridCreated // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnActorEndOverlapPatch(struct AActor* Actor); // Function ShooterGame.CellularPatch.OnActorEndOverlapPatch // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnActorBeginOverlapPatch(struct AActor* Actor); // Function ShooterGame.CellularPatch.OnActorBeginOverlapPatch // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void NetMulticastUpdateNodeGrid(struct FNodeGrid NewGrid); // Function ShooterGame.CellularPatch.NetMulticastUpdateNodeGrid // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2deb600
	void GetSortedInsideNodeList(struct TArray<struct FSortedNode>& Nodes); // Function ShooterGame.CellularPatch.GetSortedInsideNodeList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2deaff0
	struct FString GetPatchDebugString(); // Function ShooterGame.CellularPatch.GetPatchDebugString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deaf60
	float GetNodeScore(struct FIntPoint Location, float NodeDistance, bool& bValidNode); // Function ShooterGame.CellularPatch.GetNodeScore // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2deae30
	struct FVector GetNodeLocation(struct FIntPoint Coords); // Function ShooterGame.CellularPatch.GetNodeLocation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dead90
	bool GetNodeAt(struct FIntPoint& Location, struct FPatchNode& FoundNode); // Function ShooterGame.CellularPatch.GetNodeAt // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2deac60
	float GetMaxNodeDistance(); // Function ShooterGame.CellularPatch.GetMaxNodeDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deac30
	void GetGridSize(struct FIntPoint& GridMin, struct FIntPoint& GridMax); // Function ShooterGame.CellularPatch.GetGridSize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2deab60
	enum class EEdgeStatus GetEdgesInCell(struct FIntPoint OriginNode, struct TArray<struct FCellEdge>& Edges); // Function ShooterGame.CellularPatch.GetEdgesInCell // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2dea9a0
	float GetDistanceToEdgeOfPatch(struct FVector& Location); // Function ShooterGame.CellularPatch.GetDistanceToEdgeOfPatch // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2dea900
	float GetDistanceToCenterOfPatch(struct FVector& Location); // Function ShooterGame.CellularPatch.GetDistanceToCenterOfPatch // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2dea860
	struct FIntPoint GetClosestGridPoint(struct FVector& Location, struct FVector& GridOffset); // Function ShooterGame.CellularPatch.GetClosestGridPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dea740
	bool GetCellHeight(struct FVector& Location, float& OutMinHeight, float& OutMaxHeight, float& BlendedFloorHeight, float& BlendedCeilingHeight); // Function ShooterGame.CellularPatch.GetCellHeight // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2dea530
	void AuthSetPatchOverlapExtent(float NewPatchOverlapExtent); // Function ShooterGame.CellularPatch.AuthSetPatchOverlapExtent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2dea380
};

// Class ShooterGame.CeremonyUIData
// Size: 0x90 (Inherited: 0x90)
struct UCeremonyUIData : UBaseContentUIData {
};

// Class ShooterGame.CeremonyDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UCeremonyDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.CharacterAbilityWidget
// Size: 0x358 (Inherited: 0x338)
struct UCharacterAbilityWidget : UAresTouchWidgetComponent {
	struct AShooterCharacter* OwningCharacter; // 0x338(0x08)
	struct AAresEquippable* Equippable; // 0x340(0x08)
	char pad_348[0x10]; // 0x348(0x10)

	void StopWidget(bool bForceStop); // Function ShooterGame.CharacterAbilityWidget.StopWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2df4840
	struct UPanelSlot* StartWidget(struct AShooterCharacter* WidgetCharacter, struct AAresEquippable* WidgetEquippable, struct UPanelWidget* Parent); // Function ShooterGame.CharacterAbilityWidget.StartWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2df4730
	void OverrideIcon(struct UTexture* OverrideTexture); // Function ShooterGame.CharacterAbilityWidget.OverrideIcon // (BlueprintCosmetic|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void OnStopWidget(); // Function ShooterGame.CharacterAbilityWidget.OnStopWidget // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnStartWidget(); // Function ShooterGame.CharacterAbilityWidget.OnStartWidget // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnDeactivateWidget(); // Function ShooterGame.CharacterAbilityWidget.OnDeactivateWidget // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnActivateWidget(); // Function ShooterGame.CharacterAbilityWidget.OnActivateWidget // (BlueprintCosmetic|Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void DeactivateWidget(); // Function ShooterGame.CharacterAbilityWidget.DeactivateWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2df2fb0
	void ActivateWidget(); // Function ShooterGame.CharacterAbilityWidget.ActivateWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2df27c0
};

// Class ShooterGame.CharacterAdvancementComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UCharacterAdvancementComponent : UActorComponent {
	int32_t MaxEnergyForAbilities; // 0xe8(0x04)
	int32_t MaxExperience; // 0xec(0x04)

	void AuthExperienceChanged(int32_t OldExperience, int32_t NewExperience); // Function ShooterGame.CharacterAdvancementComponent.AuthExperienceChanged // (Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.CharacterHudComponent
// Size: 0x100 (Inherited: 0xe8)
struct UCharacterHudComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	bool bDisplayInHud; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	uint32_t DisplayPriority; // 0xfc(0x04)

	bool ShouldDisplay(); // Function ShooterGame.CharacterHudComponent.ShouldDisplay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df4550
	void GetCharacterHudDrawValues(struct FCharacterHudDrawValues& Out); // Function ShooterGame.CharacterHudComponent.GetCharacterHudDrawValues // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3520f50
};

// Class ShooterGame.CharacterHudManagerComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UCharacterHudManagerComponent : UActorComponent {
	struct TArray<struct UCharacterHudComponent*> RegisteredComponents; // 0xe8(0x10)

	void UnregisterComponent(struct UCharacterHudComponent* Component); // Function ShooterGame.CharacterHudManagerComponent.UnregisterComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2df49c0
	void RegisterComponent(struct UCharacterHudComponent* Component); // Function ShooterGame.CharacterHudManagerComponent.RegisterComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2df4320
};

// Class ShooterGame.AresCharacterHUDUIDataAsset
// Size: 0x88 (Inherited: 0x38)
struct UAresCharacterHUDUIDataAsset : UDataAsset {
	struct TMap<struct TSoftClassPtr<UObject>, struct FCharacterHUDUIDataStruct> HUDData; // 0x38(0x50)
};

// Class ShooterGame.CharacterSelectScreen
// Size: 0x2c8 (Inherited: 0x2c8)
struct UCharacterSelectScreen : UDesignableUserWidget {
};

// Class ShooterGame.CharacterShopResponseComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UCharacterShopResponseComponent : UActorComponent {

	void SetShopVisibility(bool bIsVisible); // Function ShooterGame.CharacterShopResponseComponent.SetShopVisibility // (Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.CharacterSprayComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UCharacterSprayComponent : UActorComponent {
	float MaxSprayDistance; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)

	bool AuthValidateAndTriggerSpray(struct AAresSpray* SprayToTrigger, struct USprayEquipSlotDataAsset* Context); // Function ShooterGame.CharacterSprayComponent.AuthValidateAndTriggerSpray // (Final|Native|Public) // @ game+0x2df2c10
	bool AuthTraceSpray(struct FVector& TraceStart, struct FVector& TraceEnd, struct FHitResult& OutHit); // Function ShooterGame.CharacterSprayComponent.AuthTraceSpray // (BlueprintAuthorityOnly|Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2df2a60
	bool AuthTracePawnChannel(struct FVector& TraceStart, struct FVector& TraceEnd, struct FHitResult& OutHit); // Function ShooterGame.CharacterSprayComponent.AuthTracePawnChannel // (Final|BlueprintAuthorityOnly|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2df28c0
	void AuthOnCharacterSprayed(struct AAresSpray* UsedSpray, struct USprayEquipSlotDataAsset* Context); // Function ShooterGame.CharacterSprayComponent.AuthOnCharacterSprayed // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent) // @ game+0x2df27e0
	bool AuthCanCharacterSpray(); // Function ShooterGame.CharacterSprayComponent.AuthCanCharacterSpray // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintEvent) // @ game+0x2ddf790
};

// Class ShooterGame.ChatFriendsMetadataManager
// Size: 0x128 (Inherited: 0x80)
struct UChatFriendsMetadataManager : UInitSystem {
	struct FMulticastInlineDelegate OnChatFriendsMetadataUpdated; // 0x80(0x10)
	bool bInitialized; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct UChatFriendsMetadataService* ChatFriendsMetadataService; // 0x98(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0xa0(0x08)
	char pad_A8[0x30]; // 0xa8(0x30)
	struct TMap<struct FString, struct FChatFriendMetadata> FriendMetadataByPuuid; // 0xd8(0x50)

	void SetChatFriendNote(struct FString Subject, struct FString Note); // Function ShooterGame.ChatFriendsMetadataManager.SetChatFriendNote // (Final|Native|Public|BlueprintCallable) // @ game+0x2df43b0
	void HandleChatSessionDisconnected(); // Function ShooterGame.ChatFriendsMetadataManager.HandleChatSessionDisconnected // (Final|Native|Private) // @ game+0x2df3b40
	void HandleChatSessionConnected(); // Function ShooterGame.ChatFriendsMetadataManager.HandleChatSessionConnected // (Final|Native|Private) // @ game+0x2df3b20
	struct UChatFriendsMetadataManager* GetChatFriendsMetadataManager(struct UObject* WorldContextObject); // Function ShooterGame.ChatFriendsMetadataManager.GetChatFriendsMetadataManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2df3380
	struct FChatFriendMetadata GetChatFriendMetadata(struct FString Subject); // Function ShooterGame.ChatFriendsMetadataManager.GetChatFriendMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df3250
};

// Class ShooterGame.ChatFriendsMetadataService
// Size: 0x38 (Inherited: 0x30)
struct UChatFriendsMetadataService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.ChatSessionManager
// Size: 0x178 (Inherited: 0x80)
struct UChatSessionManager : UInitSystem {
	struct FMulticastInlineDelegate OnChatSessionConnected; // 0x80(0x10)
	struct FMulticastInlineDelegate OnChatSessionDisconnected; // 0x90(0x10)
	struct FMulticastInlineDelegate OnChatSessionLoaded; // 0xa0(0x10)
	char pad_B0[0x20]; // 0xb0(0x20)
	struct UChatSessionService* ChatSessionService; // 0xd0(0x08)
	char pad_D8[0xa0]; // 0xd8(0xa0)

	bool IsChatSessionLoaded(); // Function ShooterGame.ChatSessionManager.IsChatSessionLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df3b90
	bool IsChatSessionConnected(); // Function ShooterGame.ChatSessionManager.IsChatSessionConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df3b60
	struct UChatSessionManager* GetChatSessionManager(struct UObject* WorldContextObject); // Function ShooterGame.ChatSessionManager.GetChatSessionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2df3410
};

// Class ShooterGame.ChatSessionService
// Size: 0x38 (Inherited: 0x30)
struct UChatSessionService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.ChatUtils
// Size: 0x30 (Inherited: 0x30)
struct UChatUtils : UObject {

	struct FString SubjectToChatPid(struct FString InSubject); // Function ShooterGame.ChatUtils.SubjectToChatPid // (Final|Native|Static|Public) // @ game+0x2df48d0
	struct TArray<struct FString> SortStringList(struct TArray<struct FString>& Input); // Function ShooterGame.ChatUtils.SortStringList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2df4580
	void ParseMessageParts(struct FString Message, struct UEmojiMapping* EmojiMapping, enum class EMessagePartType PartType, struct TArray<struct FMessagePart>& Out); // Function ShooterGame.ChatUtils.ParseMessageParts // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2df4150
	struct FString MessagePartsToRichText(struct TArray<struct FMessagePart>& Parts); // Function ShooterGame.ChatUtils.MessagePartsToRichText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2df4010
	bool IsFromObserver(struct FUnifiedChatMessage& UnifiedChatMessage); // Function ShooterGame.ChatUtils.IsFromObserver // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2df3ee0
	bool IsFromLocalPlayer(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.IsFromLocalPlayer // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2df3d50
	bool IsFromEnemyTeam(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.IsFromEnemyTeam // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2df3bc0
	struct FText GetUnformattedChatMessageText(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.GetUnformattedChatMessageText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2df3960
	struct FTextBlockStyle GetStyle(struct FRichTextStyleRow& Input); // Function ShooterGame.ChatUtils.GetStyle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2df3810
	int64_t GetMUCMessageUnixTime(struct FMUCMessage& MUCMessage); // Function ShooterGame.ChatUtils.GetMUCMessageUnixTime // (Final|Native|Static|Public|HasOutParms) // @ game+0x2df3750
	struct FDateTime GetMUCMessageTimeStamp(struct FMUCMessage& MUCMessage); // Function ShooterGame.ChatUtils.GetMUCMessageTimeStamp // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x2df3690
	struct FText GetFormattedChatMessageText(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.GetFormattedChatMessageText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2df34d0
	struct UEmojiMapping* GetEmojiMapping(); // Function ShooterGame.ChatUtils.GetEmojiMapping // (Final|Native|Static|Public) // @ game+0x2df34a0
	struct FText GetChannelText(enum class EChatRoomType ChatRoomType); // Function ShooterGame.ChatUtils.GetChannelText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2df3190
	struct FText GetAuthorText(struct FUnifiedChatMessage& UnifiedChatMessage, struct UObject* WorldContextObject); // Function ShooterGame.ChatUtils.GetAuthorText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2df2fd0
	bool CompareStrings(struct FString LHS, struct FString Rhs); // Function ShooterGame.ChatUtils.CompareStrings // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2df2ea0
	bool ChatPidToSubject(struct FString InPid, struct FString& Out); // Function ShooterGame.ChatUtils.ChatPidToSubject // (Final|Native|Static|Public|HasOutParms) // @ game+0x2df2d80
	void CachePid(struct FString Pid); // Function ShooterGame.ChatUtils.CachePid // (Final|Native|Static|Public) // @ game+0x2df2ce0
};

// Class ShooterGame.ResourceInteractionStateComponent
// Size: 0x2d0 (Inherited: 0x2c8)
struct UResourceInteractionStateComponent : UScriptStateComponent {
	struct UResourceComponent* ExplicitResourceComponent; // 0x2c8(0x08)

	void SetResourceComponent(struct UResourceComponent* ResourceComponent); // Function ShooterGame.ResourceInteractionStateComponent.SetResourceComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3019440
	struct UResourceComponent* GetResourceComponent(); // Function ShooterGame.ResourceInteractionStateComponent.GetResourceComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3018790
};

// Class ShooterGame.CheckResourcesStateComponent
// Size: 0x2e0 (Inherited: 0x2d0)
struct UCheckResourcesStateComponent : UResourceInteractionStateComponent {
	bool bReportErrorOnFailure; // 0x2d0(0x01)
	char pad_2D1[0x7]; // 0x2d1(0x07)
	struct UScriptStateComponent* FailState; // 0x2d8(0x08)

	void SetFailState(struct UScriptStateComponent* NewFailState); // Function ShooterGame.CheckResourcesStateComponent.SetFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x2de0570
};

// Class ShooterGame.ChildDamageSectionComponent
// Size: 0x148 (Inherited: 0x148)
struct UChildDamageSectionComponent : UDamageSectionComponent {
};

// Class ShooterGame.ChildRegionDamageSectionComponent
// Size: 0x158 (Inherited: 0x148)
struct UChildRegionDamageSectionComponent : UChildDamageSectionComponent {
	struct TArray<struct UPrimitiveComponent*> DamageRegions; // 0x148(0x10)

	struct TArray<struct UPrimitiveComponent*> GetDamageRegions(); // Function ShooterGame.ChildRegionDamageSectionComponent.GetDamageRegions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df9c90
	void AddDamageRegion(struct UPrimitiveComponent* Component); // Function ShooterGame.ChildRegionDamageSectionComponent.AddDamageRegion // (Final|Native|Public|BlueprintCallable) // @ game+0x2df9bd0
};

// Class ShooterGame.ChromaBase
// Size: 0x150 (Inherited: 0x118)
struct UChromaBase : UAresWeaponAttachmentComponent {
	struct FBaseUIData UIData; // 0x118(0x38)
};

// Class ShooterGame.ChromaMatConstants
// Size: 0x230 (Inherited: 0x150)
struct UChromaMatConstants : UChromaBase {
	bool bOverrideAlbedo; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct TSoftClassPtr<UObject> Albedo; // 0x158(0x30)
	bool bOverrideMask; // 0x188(0x01)
	char pad_189[0x7]; // 0x189(0x07)
	struct TSoftClassPtr<UObject> Mask; // 0x190(0x30)
	bool bOverrideMRAS; // 0x1c0(0x01)
	char pad_1C1[0x7]; // 0x1c1(0x07)
	struct TSoftClassPtr<UObject> MRAS; // 0x1c8(0x30)
	bool bOverrideNormal; // 0x1f8(0x01)
	char pad_1F9[0x7]; // 0x1f9(0x07)
	struct TSoftClassPtr<UObject> Normal; // 0x200(0x30)
};

// Class ShooterGame.ChromaMatOverride
// Size: 0x160 (Inherited: 0x150)
struct UChromaMatOverride : UChromaBase {
	struct TArray<struct UMaterialInterface*> OverrideMaterials; // 0x150(0x10)
};

// Class ShooterGame.ChromaSkinOverride
// Size: 0x150 (Inherited: 0x150)
struct UChromaSkinOverride : UChromaBase {
};

// Class ShooterGame.CinematicCameraMarker
// Size: 0xa00 (Inherited: 0xa00)
struct ACinematicCameraMarker : ACameraActor {
};

// Class ShooterGame.CinematicsDebugComponent
// Size: 0x108 (Inherited: 0xe8)
struct UCinematicsDebugComponent : UActorComponent {
	struct TArray<struct FCinematicCameraDebugData> DebugClientCinematicCameras; // 0xe8(0x10)
	struct TArray<struct FCinematicCameraDebugData> DebugServerCinematicCameras; // 0xf8(0x10)

	void OnCinematicCamerasInitialized(struct TArray<struct FCinematicCameraData>& CameraDataArray); // Function ShooterGame.CinematicsDebugComponent.OnCinematicCamerasInitialized // (Final|Native|Private|HasOutParms) // @ game+0x2df9f60
	void NetMulticastDebugUpdateCinematicCameraData(struct TArray<struct FCinematicCameraDebugData> DebugServerData); // Function ShooterGame.CinematicsDebugComponent.NetMulticastDebugUpdateCinematicCameraData // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x2df9d80
};

// Class ShooterGame.CinematicsManagerComponent
// Size: 0x180 (Inherited: 0xe8)
struct UCinematicsManagerComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	float DefaultViewBoxSize; // 0xf8(0x04)
	float LookAheadTime; // 0xfc(0x04)
	float FieldOfViewDegreesMax; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct TArray<struct FCinematicCameraData> CinematicCameras; // 0x108(0x10)
	char pad_118[0x68]; // 0x118(0x68)

	float ScoreCamera(struct FCinematicCameraScoreData& CameraToScore); // Function ShooterGame.CinematicsManagerComponent.ScoreCamera // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void OnRep_CinematicCameras(); // Function ShooterGame.CinematicsManagerComponent.OnRep_CinematicCameras // (Final|Native|Private) // @ game+0x2dfa1a0
	void NetMulticastInitializeCinematics(struct TArray<struct FCinematicCameraData> InCinematicCameras); // Function ShooterGame.CinematicsManagerComponent.NetMulticastInitializeCinematics // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2df9e80
};

// Class ShooterGame.CircleCrosshairHudElement
// Size: 0x180 (Inherited: 0x178)
struct UCircleCrosshairHudElement : UBaseCrosshairHudElement {
	struct UTexture* CrosshairImage; // 0x178(0x08)
};

// Class ShooterGame.ClientPerformanceMonitoringComponent
// Size: 0x1a0 (Inherited: 0x118)
struct UClientPerformanceMonitoringComponent : UBasePerformanceMonitoringComponent {
	struct FMulticastInlineDelegate OnWipeAllInstabilityData; // 0x118(0x10)
	struct FMulticastInlineDelegate OnDeveloperItemRegistered; // 0x128(0x10)
	struct FMulticastInlineDelegate OnDeveloperItemUnregistered; // 0x138(0x10)
	struct FMulticastInlineDelegate OnPopulateDeveloperItems; // 0x148(0x10)
	struct FMulticastInlineDelegate OnClearDeveloperItems; // 0x158(0x10)
	struct UMetricInstabilityTrackingDetails* ServerFramerateInstability; // 0x168(0x08)
	struct UMetricInstabilityTrackingDetails* AveragePing; // 0x170(0x08)
	struct UNetworkOutageInstabilityTrackingDetails* ServerResponsiveness; // 0x178(0x08)
	struct URemoteClientPredictionTrackingDetails* RemoteClientPredicition; // 0x180(0x08)
	struct UMetricInstabilityTrackingDetails* ClientLogInstability; // 0x188(0x08)
	struct UMetricInstabilityTrackingDetails* ServerLogInstability; // 0x190(0x08)
	char pad_198[0x8]; // 0x198(0x08)

	void UnregisterDeveloperItem(struct UInstabilityTrackingDetails* item); // Function ShooterGame.ClientPerformanceMonitoringComponent.UnregisterDeveloperItem // (Final|Native|Public|BlueprintCallable) // @ game+0x2dfa390
	void RegisterDeveloperItem(struct UInstabilityTrackingDetails* NewItem); // Function ShooterGame.ClientPerformanceMonitoringComponent.RegisterDeveloperItem // (Final|Native|Public|BlueprintCallable) // @ game+0x2dfa300
	void PopulateDeveloperItems(); // Function ShooterGame.ClientPerformanceMonitoringComponent.PopulateDeveloperItems // (Final|Native|Public|BlueprintCallable) // @ game+0x2dfa2e0
	struct UNetworkOutageInstabilityTrackingDetails* GetServerResponsivenessInstabilityTrackingDetails(); // Function ShooterGame.ClientPerformanceMonitoringComponent.GetServerResponsivenessInstabilityTrackingDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df9d50
	struct UMetricInstabilityTrackingDetails* GetServerFramerateInstabilityTrackingDetails(); // Function ShooterGame.ClientPerformanceMonitoringComponent.GetServerFramerateInstabilityTrackingDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df9d20
	struct UMetricInstabilityTrackingDetails* GetClientFramerateInstabilityTrackingDetails(); // Function ShooterGame.ClientPerformanceMonitoringComponent.GetClientFramerateInstabilityTrackingDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec9b0
	struct UMetricInstabilityTrackingDetails* GetAveragePingInstabilityTrackingDetails(); // Function ShooterGame.ClientPerformanceMonitoringComponent.GetAveragePingInstabilityTrackingDetails // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df9c60
};

// Class ShooterGame.ClientPerRoundTelemetryComponent
// Size: 0x208 (Inherited: 0xe8)
struct UClientPerRoundTelemetryComponent : UActorComponent {
	char pad_E8[0x120]; // 0xe8(0x120)

	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.ClientPerRoundTelemetryComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x2dfa250
	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.ClientPerRoundTelemetryComponent.OnRoundBegin // (Final|Native|Public) // @ game+0x2dfa1c0
	void OnMatchEnd(struct FAresMatchResult& MatchResult); // Function ShooterGame.ClientPerRoundTelemetryComponent.OnMatchEnd // (Final|Native|Public|HasOutParms) // @ game+0x2dfa060
	void OnMatchBegin(); // Function ShooterGame.ClientPerRoundTelemetryComponent.OnMatchBegin // (Final|Native|Public) // @ game+0x2dfa040
};

// Class ShooterGame.ClientPlayerStateTelemetryComponent
// Size: 0x290 (Inherited: 0x100)
struct UClientPlayerStateTelemetryComponent : UBasePlayerStateTelemetryComponent {
	char pad_100[0x190]; // 0x100(0x190)

	void OnMatchEnd(struct FAresMatchResult& MatchResult); // Function ShooterGame.ClientPlayerStateTelemetryComponent.OnMatchEnd // (Final|Native|Protected|HasOutParms) // @ game+0x2dfa100
};

// Class ShooterGame.ClientTelemetryPersistence
// Size: 0x68 (Inherited: 0x30)
struct UClientTelemetryPersistence : UObject {
	char pad_30[0x38]; // 0x30(0x38)
};

// Class ShooterGame.CloudMesh
// Size: 0x7e0 (Inherited: 0x5f0)
struct UCloudMesh : UProceduralMeshComponent {
	char pad_5F0[0x8]; // 0x5f0(0x08)
	float CloudBottomOffset; // 0x5f8(0x04)
	float MinDistanceFromCenterClamp; // 0x5fc(0x04)
	float ClientPercentTimePerTick; // 0x600(0x04)
	float ClientMaxTimePerTick; // 0x604(0x04)
	float ServerPerStepTime; // 0x608(0x04)
	float ClientTargetEdgeLength; // 0x60c(0x04)
	float ServerTargetEdgeLength; // 0x610(0x04)
	int32_t ClientNumSmoothingSteps; // 0x614(0x04)
	bool bClientGenerateCollision; // 0x618(0x01)
	char pad_619[0x3]; // 0x619(0x03)
	int32_t ServerNumSmoothingSteps; // 0x61c(0x04)
	bool bServerGenerateCollision; // 0x620(0x01)
	char pad_621[0x3]; // 0x621(0x03)
	int32_t ClientNumMeshes; // 0x624(0x04)
	char pad_628[0x1a0]; // 0x628(0x1a0)
	struct FMulticastInlineDelegate OnCloudMeshGenerated; // 0x7c8(0x10)
	bool bForceFinish; // 0x7d8(0x01)
	char pad_7D9[0x7]; // 0x7d9(0x07)

	bool MeshBuilt(); // Function ShooterGame.CloudMesh.MeshBuilt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e035c0
	float GetVisualDistanceFromCenter(float ActualDistance); // Function ShooterGame.CloudMesh.GetVisualDistanceFromCenter // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e033f0
};

// Class ShooterGame.CoachDebugComponent
// Size: 0x148 (Inherited: 0xe8)
struct UCoachDebugComponent : UActorComponent {
	char pad_E8[0x50]; // 0xe8(0x50)
	struct FName LastCoachTeamName; // 0x138(0x0c)
	char pad_144[0x4]; // 0x144(0x04)

	void OnRoundEnded(int32_t RoundNumber); // Function ShooterGame.CoachDebugComponent.OnRoundEnded // (Final|Native|Private) // @ game+0x2e03610
};

// Class ShooterGame.ColorPickerWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UColorPickerWidget : UBaseSettingsWidget {

	bool SetColorFromHexString(struct FString InHex, struct FColor& OutColor); // Function ShooterGame.ColorPickerWidget.SetColorFromHexString // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e03720
	struct FColor ResetAlpha(struct FColor InColor); // Function ShooterGame.ColorPickerWidget.ResetAlpha // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2e036a0
	bool IsValidColor(struct FColor& InColor); // Function ShooterGame.ColorPickerWidget.IsValidColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e03530
	struct FString GetHexStringFromColor(struct FColor& InColor); // Function ShooterGame.ColorPickerWidget.GetHexStringFromColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e03040
};

// Class ShooterGame.CombatReportTrackingConfigComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UCombatReportTrackingConfigComponent : UActorComponent {
	bool bTrackParticipantkHits; // 0xe8(0x01)
	bool bTrackParticipantDamage; // 0xe9(0x01)
	bool bTrackInteractionHits; // 0xea(0x01)
	bool bTrackInteractionDamage; // 0xeb(0x01)
	bool bTrackDamagedRegionally; // 0xec(0x01)
	bool bTrackArmorBreaks; // 0xed(0x01)
	char pad_EE[0x2]; // 0xee(0x02)
	struct UCombatReportDamagedDisplayConfig* DamagedDisplayConfig; // 0xf0(0x08)
};

// Class ShooterGame.CombatReportComponent
// Size: 0x118 (Inherited: 0xe8)
struct UCombatReportComponent : UActorComponent {
	char pad_E8[0x20]; // 0xe8(0x20)
	struct TArray<struct FRoundReports> Rounds; // 0x108(0x10)

	void ResetRoundReports(int32_t RoundNum); // Function ShooterGame.CombatReportComponent.ResetRoundReports // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void OnRep_Rounds(); // Function ShooterGame.CombatReportComponent.OnRep_Rounds // (Final|Native|Private) // @ game+0x2e035f0
	struct FRoundReports GetReports(int32_t RoundNum); // Function ShooterGame.CombatReportComponent.GetReports // (Final|Native|Public|BlueprintCallable) // @ game+0x2e032e0
};

// Class ShooterGame.CombatReportDamagedDisplayConfig
// Size: 0x48 (Inherited: 0x30)
struct UCombatReportDamagedDisplayConfig : UObject {
	struct FTextureWrapper DamagedIcon; // 0x30(0x08)
	struct FLinearColor DamagedIconTint; // 0x38(0x10)
};

// Class ShooterGame.CombatReportContentWidget
// Size: 0x2e8 (Inherited: 0x2c8)
struct UCombatReportContentWidget : UUserWidget {
	struct UUserWidget* AbilityCastsReportWidget; // 0x2c8(0x08)
	struct UOverlay* ColumnNamesOverlay; // 0x2d0(0x08)
	struct UVerticalBox* InteractionListBox; // 0x2d8(0x08)
	struct UUserWidget* KilledByWidget; // 0x2e0(0x08)
};

// Class ShooterGame.CombatReportHUDElementBase
// Size: 0x2d0 (Inherited: 0x2c8)
struct UCombatReportHUDElementBase : UUserWidget {
	struct UCombatReportContentWidget* CombatReportContentWidget; // 0x2c8(0x08)
};

// Class ShooterGame.CombatTracker
// Size: 0x30 (Inherited: 0x30)
struct UCombatTracker : UInterface {
};

// Class ShooterGame.CommsUtils
// Size: 0x30 (Inherited: 0x30)
struct UCommsUtils : UObject {
};

// Class ShooterGame.CompetitiveSeasonDataAsset
// Size: 0x230 (Inherited: 0x50)
struct UCompetitiveSeasonDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> Season; // 0x80(0x30)
	struct TArray<struct UEditableReward*> IronRewards; // 0xb0(0x10)
	struct TArray<struct UEditableReward*> BronzeRewards; // 0xc0(0x10)
	struct TArray<struct UEditableReward*> SilverRewards; // 0xd0(0x10)
	struct TArray<struct UEditableReward*> GoldRewards; // 0xe0(0x10)
	struct TArray<struct UEditableReward*> PlatinumRewards; // 0xf0(0x10)
	struct TArray<struct UEditableReward*> DiamondRewards; // 0x100(0x10)
	struct TArray<struct UEditableReward*> AscendantRewards; // 0x110(0x10)
	struct TArray<struct UEditableReward*> ImmortalRewards; // 0x120(0x10)
	struct TArray<struct UEditableReward*> RadiantRewards; // 0x130(0x10)
	struct TArray<struct FActRankBorderInstance> Borders; // 0x140(0x10)
	struct FDateTime StartTime; // 0x150(0x08)
	struct FDateTime EndTime; // 0x158(0x08)
	struct UDataTable* CompetitiveTierDataTable; // 0x160(0x08)
	struct FCompetitiveSeasonConfig Config; // 0x168(0x78)
	struct TMap<struct TSoftClassPtr<UObject>, struct FCompetitiveSeasonArchives> Archives; // 0x1e0(0x50)

	void OnRequestLoadArchives(); // Function ShooterGame.CompetitiveSeasonDataAsset.OnRequestLoadArchives // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	int32_t GetWinsToNextBorder(int32_t Wins); // Function ShooterGame.CompetitiveSeasonDataAsset.GetWinsToNextBorder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e03490
	float GetProgressToNextBorder(int32_t Wins); // Function ShooterGame.CompetitiveSeasonDataAsset.GetProgressToNextBorder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e03240
	bool GetNextBorder(int32_t Wins, struct FActRankBorderInstance& OutBorder); // Function ShooterGame.CompetitiveSeasonDataAsset.GetNextBorder // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e03120
	bool GetCurrentBorder(int32_t Wins, struct FActRankBorderInstance& OutBorder); // Function ShooterGame.CompetitiveSeasonDataAsset.GetCurrentBorder // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e02f20
	bool GetCompetitiveTierDataForTier(int32_t Tier, struct FCompetitiveTierData& OutCompetitiveTierData); // Function ShooterGame.CompetitiveSeasonDataAsset.GetCompetitiveTierDataForTier // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e02df0
};

// Class ShooterGame.CompetitiveSeasonUIData
// Size: 0x90 (Inherited: 0x90)
struct UCompetitiveSeasonUIData : UBaseContentUIData {
};

// Class ShooterGame.CompetitiveTierUpdater
// Size: 0x40 (Inherited: 0x30)
struct UCompetitiveTierUpdater : UObject {
	struct UPartyManager* PartyManager; // 0x30(0x08)
	struct UMMRManager* MMRManager; // 0x38(0x08)

	void HandleMMRUpdated(); // Function ShooterGame.CompetitiveTierUpdater.HandleMMRUpdated // (Final|Native|Private) // @ game+0x2e0b4b0
};

// Class ShooterGame.ConcatenatedListModel
// Size: 0x60 (Inherited: 0x48)
struct UConcatenatedListModel : UOrderedListModelBase {
	struct TArray<struct FConcatenatedListModel_Entry> ListModels; // 0x48(0x10)
	char pad_58[0x8]; // 0x58(0x08)

	void SetListModelList(struct TArray<struct TScriptInterface<IOrderedListModel>>& NewValue); // Function ShooterGame.ConcatenatedListModel.SetListModelList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e0c190
	void SetListModelAt(int32_t ListModelIndex, struct TScriptInterface<IOrderedListModel> ListModel); // Function ShooterGame.ConcatenatedListModel.SetListModelAt // (Final|Native|Public|BlueprintCallable) // @ game+0x2e0c0a0
	void RemoveListModels(struct FIndexRange ListModelRange); // Function ShooterGame.ConcatenatedListModel.RemoveListModels // (Final|Native|Public|BlueprintCallable) // @ game+0x2e0bd50
	struct FConcatenatedListModel_MapIndexOuterToInnerResult MapIndexOuterToInner(int32_t OuterIndex); // Function ShooterGame.ConcatenatedListModel.MapIndexOuterToInner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0bbd0
	int32_t MapIndexInnerToOuterByModel(struct TScriptInterface<IOrderedListModel> InnerModel, int32_t InnerIndex); // Function ShooterGame.ConcatenatedListModel.MapIndexInnerToOuterByModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0bad0
	int32_t MapIndexInnerToOuterByListModelIndex(int32_t InnerModelIndex, int32_t InnerIndex); // Function ShooterGame.ConcatenatedListModel.MapIndexInnerToOuterByListModelIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0ba00
	void InsertListModels(int32_t StartModelIndex, struct TArray<struct TScriptInterface<IOrderedListModel>>& Models); // Function ShooterGame.ConcatenatedListModel.InsertListModels // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e0b580
	int32_t IndexOfListModel(struct TScriptInterface<IOrderedListModel> ListModel); // Function ShooterGame.ConcatenatedListModel.IndexOfListModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0b4d0
	void HandleChildListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.ConcatenatedListModel.HandleChildListModelChange // (Final|Native|Private|HasOutParms) // @ game+0x2e0b300
	int32_t GetNumListModels(); // Function ShooterGame.ConcatenatedListModel.GetNumListModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0b090
	struct TScriptInterface<IOrderedListModel> GetListModelAt(int32_t ListModelIndex); // Function ShooterGame.ConcatenatedListModel.GetListModelAt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0af30
	struct UConcatenatedListModel* Create(struct TArray<struct TScriptInterface<IOrderedListModel>>& ListModelList, struct UObject* Outer); // Function ShooterGame.ConcatenatedListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e0a430
};

// Class ShooterGame.ConditionalLoopAnimationConductorNode
// Size: 0xd0 (Inherited: 0xa8)
struct UConditionalLoopAnimationConductorNode : UAnimationConductorNodeBase {
	struct TScriptInterface<IAnimationConductorNode> ChildNode; // 0xa8(0x10)
	char pad_B8[0x18]; // 0xb8(0x18)

	void SetExitConditionCallback(struct FDelegate& Delegate); // Function ShooterGame.ConditionalLoopAnimationConductorNode.SetExitConditionCallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e0bf50
	void SetChildNode(struct TScriptInterface<IAnimationConductorNode> InChildNode); // Function ShooterGame.ConditionalLoopAnimationConductorNode.SetChildNode // (Final|Native|Public|BlueprintCallable) // @ game+0x2e0beb0
	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.ConditionalLoopAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x2e0b420
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.ConditionalLoopAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x2e0b220
	bool ExitConditionCallbackDynamicDelegate__DelegateSignature(); // DelegateFunction ShooterGame.ConditionalLoopAnimationConductorNode.ExitConditionCallbackDynamicDelegate__DelegateSignature // (Public|Delegate) // @ game+0x3520f50
	struct UConditionalLoopAnimationConductorNode* Create(struct TScriptInterface<IAnimationConductorNode> ChildNode, struct FDelegate ExitConditionDelegate, struct UObject* Outer); // Function ShooterGame.ConditionalLoopAnimationConductorNode.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e0a530
};

// Class ShooterGame.ConfigManager
// Size: 0x208 (Inherited: 0x80)
struct UConfigManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnAnyConfigUpdated; // 0x98(0x10)
	char pad_A8[0x8]; // 0xa8(0x08)
	struct FString ConfigEnvironment; // 0xb0(0x10)
	struct FString ServiceEndpoint; // 0xc0(0x10)
	struct TMap<struct FName, struct FString> Configuration; // 0xd0(0x50)
	struct TMap<struct FName, struct FString> CheatConfiguration; // 0x120(0x50)
	char pad_170[0x50]; // 0x170(0x50)
	struct FDateTime LastAttempt; // 0x1c0(0x08)
	struct UConfigService* ConfigService; // 0x1c8(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0x1d0(0x08)
	struct URSOManager* RSOManager; // 0x1d8(0x08)
	struct URiotClientConfigManager* RiotClientConfigManager; // 0x1e0(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x1e8(0x08)
	char pad_1F0[0x18]; // 0x1f0(0x18)

	struct TArray<struct FString> GetConfigurationStringArray(struct FName Name, struct TArray<struct FString> Default); // Function ShooterGame.ConfigManager.GetConfigurationStringArray // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0ad40
	struct FString GetConfigurationString(struct FName Name, struct FString Default); // Function ShooterGame.ConfigManager.GetConfigurationString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0abe0
	int32_t GetConfigurationInt(struct FName Name, int32_t DefaultValue); // Function ShooterGame.ConfigManager.GetConfigurationInt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0aaf0
	float GetConfigurationFloat(struct FName Name, float DefaultValue); // Function ShooterGame.ConfigManager.GetConfigurationFloat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0a9f0
	bool GetConfigurationBool(struct FName Name, bool DefaultValue); // Function ShooterGame.ConfigManager.GetConfigurationBool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0a8f0
	struct FString GetConfiguration(struct FName Name); // Function ShooterGame.ConfigManager.GetConfiguration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0a7f0
	void CheatAddConfiguration(struct FName Name, struct FString Value); // Function ShooterGame.ConfigManager.CheatAddConfiguration // (Final|Native|Public|BlueprintCallable) // @ game+0x2e0a2f0
};

// Class ShooterGame.ConfigService
// Size: 0x58 (Inherited: 0x30)
struct UConfigService : UObject {
	struct FString ConfigEndpoint; // 0x30(0x10)
	struct FString PlatformEnvironment; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
};

// Class ShooterGame.ConfigurationComponent
// Size: 0x108 (Inherited: 0xe8)
struct UConfigurationComponent : UActorComponent {
	struct TArray<struct FSkinParam> Params; // 0xe8(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> AttachmentsToAdd; // 0xf8(0x10)

	void OnRep_Params(); // Function ShooterGame.ConfigurationComponent.OnRep_Params // (Final|Native|Private) // @ game+0x2e0bd30
};

// Class ShooterGame.ConnectionFogOfWarDebugComponent
// Size: 0x158 (Inherited: 0xe8)
struct UConnectionFogOfWarDebugComponent : UActorComponent {
	struct TArray<struct FFoWDatabaseEntry> Database; // 0xe8(0x10)
	char pad_F8[0x60]; // 0xf8(0x60)

	void OnRep_DatabaseUpdate(); // Function ShooterGame.ConnectionFogOfWarDebugComponent.OnRep_DatabaseUpdate // (Final|Native|Public) // @ game+0x1e6e7b0
};

// Class ShooterGame.ConsumeResourcesStateComponent
// Size: 0x2f0 (Inherited: 0x2d0)
struct UConsumeResourcesStateComponent : UResourceInteractionStateComponent {
	struct UStateComponent* FailState; // 0x2d0(0x08)
	bool bShouldReportAbilityCast; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct FMulticastInlineDelegate OnAbilityUsed; // 0x2e0(0x10)

	void SetFailState(struct UStateComponent* State); // Function ShooterGame.ConsumeResourcesStateComponent.SetFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e0c010
};

// Class ShooterGame.ContentFilter
// Size: 0x88 (Inherited: 0x30)
struct UContentFilter : UObject {
	bool bIsMultiValued; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FText Name; // 0x38(0x18)
	struct UTexture* Icon; // 0x50(0x08)
	struct FName ConfigFlagKey; // 0x58(0x0c)
	bool ConfigFlagDefaultValue; // 0x64(0x01)
	char pad_65[0x3]; // 0x65(0x03)
	struct FString TelemetryName; // 0x68(0x10)
	struct TArray<struct UBaseContentFilterCriterion*> Criteria; // 0x78(0x10)

	bool IsTransient(); // Function ShooterGame.ContentFilter.IsTransient // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2198650
	bool IsSelected(); // Function ShooterGame.ContentFilter.IsSelected // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e0b720
	bool IsEnabled(); // Function ShooterGame.ContentFilter.IsEnabled // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2034820
	bool IsConfigToggleOn(struct UConfigManager* ConfigManager); // Function ShooterGame.ContentFilter.IsConfigToggleOn // (Final|Native|Public|BlueprintCallable) // @ game+0x2e0b680
	void GetAllCriteria(struct TArray<struct UBaseContentFilterCriterion*>& AllCriteria); // Function ShooterGame.ContentFilter.GetAllCriteria // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e0a740
};

// Class ShooterGame.BaseContentFilterCriterion
// Size: 0x78 (Inherited: 0x30)
struct UBaseContentFilterCriterion : UObject {
	struct FText Name; // 0x30(0x18)
	struct UTexture* Icon; // 0x48(0x08)
	struct FMulticastInlineDelegate OnCriterionEnabled; // 0x50(0x10)
	struct FMulticastInlineDelegate OnCriterionChanged; // 0x60(0x10)
	bool bEnabled; // 0x70(0x01)
	bool bEnabledTransient; // 0x71(0x01)
	bool bHasTransientState; // 0x72(0x01)
	char pad_73[0x5]; // 0x73(0x05)

	void Rollback(); // Function ShooterGame.BaseContentFilterCriterion.Rollback // (Native|Public|BlueprintCallable) // @ game+0x2dc33f0
	bool Matches(struct UBaseHandle* Handle); // Function ShooterGame.BaseContentFilterCriterion.Matches // (Native|Public|BlueprintCallable) // @ game+0x2e0bc80
	bool IsEnabledTransient(); // Function ShooterGame.BaseContentFilterCriterion.IsEnabledTransient // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2dc37f0
	bool IsEnabled(); // Function ShooterGame.BaseContentFilterCriterion.IsEnabled // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cedb20
	bool HasTransientState(); // Function ShooterGame.BaseContentFilterCriterion.HasTransientState // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cee740
	struct FString GetTelemetryName(); // Function ShooterGame.BaseContentFilterCriterion.GetTelemetryName // (Native|Public) // @ game+0x2e0b190
	void Enable(bool bIsEnabled); // Function ShooterGame.BaseContentFilterCriterion.Enable // (Native|Public|BlueprintCallable) // @ game+0x2e0a6a0
	void Commit(); // Function ShooterGame.BaseContentFilterCriterion.Commit // (Native|Public|BlueprintCallable) // @ game+0x2e0a400
};

// Class ShooterGame.ContentFilterFavoriteCriterion
// Size: 0x78 (Inherited: 0x78)
struct UContentFilterFavoriteCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.ContentFilterNonFavoriteCriterion
// Size: 0x78 (Inherited: 0x78)
struct UContentFilterNonFavoriteCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.SelectTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct USelectTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.DeluxeTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct UDeluxeTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.PremiumTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct UPremiumTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.UltraTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct UUltraTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.ExclusiveTierCriterion
// Size: 0x78 (Inherited: 0x78)
struct UExclusiveTierCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.OwnedCriterion
// Size: 0x78 (Inherited: 0x78)
struct UOwnedCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.NotOwnedCriterion
// Size: 0x78 (Inherited: 0x78)
struct UNotOwnedCriterion : UBaseContentFilterCriterion {
};

// Class ShooterGame.ContentFilterDialog
// Size: 0x2c8 (Inherited: 0x2c8)
struct UContentFilterDialog : UUserWidget {
};

// Class ShooterGame.ContentFilterUITelemetryManager
// Size: 0x60 (Inherited: 0x30)
struct UContentFilterUITelemetryManager : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct URSOManager* RSOManager; // 0x40(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x48(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x50(0x08)
	struct UConfigManager* ConfigManager; // 0x58(0x08)

	void SendFiltersActionEvent(struct UContentFilterViewModel* FiltersViewModel, enum class EActionType ActionType); // Function ShooterGame.ContentFilterUITelemetryManager.SendFiltersActionEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2e0bde0
	struct TArray<struct FCriterion> MapFiltersViewModelToActiveCriteria(struct UContentFilterViewModel* FiltersViewModel); // Function ShooterGame.ContentFilterUITelemetryManager.MapFiltersViewModelToActiveCriteria // (Final|Native|Private) // @ game+0x2e0b8b0
	struct UContentFilterUITelemetryManager* Make(struct URSOManager* RSOManager, struct UPlatformSessionManager* SessionManager, struct UTelemetryManager* TelemetryManager, struct UConfigManager* ConfigManager); // Function ShooterGame.ContentFilterUITelemetryManager.Make // (Final|Native|Static|Public) // @ game+0x2e0b760
	struct FPlatformInfo GetPlatformInfo(); // Function ShooterGame.ContentFilterUITelemetryManager.GetPlatformInfo // (Final|Native|Private) // @ game+0x2e0b0c0
	struct FString GetNameForActionType(enum class EActionType ActionType); // Function ShooterGame.ContentFilterUITelemetryManager.GetNameForActionType // (Final|Native|Static|Private) // @ game+0x2e0afe0
};

// Class ShooterGame.ContentFilterViewController
// Size: 0x88 (Inherited: 0x30)
struct UContentFilterViewController : UObject {
	struct TMap<struct FString, struct UContentFilterViewModel*> ModelsById; // 0x30(0x50)
	struct UConfigManager* ConfigManager; // 0x80(0x08)

	struct UContentFilterViewModel* SetContentFilterViewModel(struct FString ModelId, struct TArray<struct UContentFilter*> Filters); // Function ShooterGame.ContentFilterViewController.SetContentFilterViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2e162a0
	struct UContentFilterViewModel* GetContentFilterViewModel(struct FString ModelId); // Function ShooterGame.ContentFilterViewController.GetContentFilterViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2e15e80
};

// Class ShooterGame.ContentFilterViewModel
// Size: 0x58 (Inherited: 0x30)
struct UContentFilterViewModel : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct TArray<struct UContentFilter*> Filters; // 0x40(0x10)
	bool bIsNew; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)

	void RemoveConfigDisabledFilters(struct UConfigManager* ConfigManager); // Function ShooterGame.ContentFilterViewModel.RemoveConfigDisabledFilters // (Final|Native|Public) // @ game+0x2e16210
	struct UContentFilterViewModel* Make(struct FString ModelId, struct TArray<struct UContentFilter*> Filters); // Function ShooterGame.ContentFilterViewModel.Make // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e16080
	bool IsNew(); // Function ShooterGame.ContentFilterViewModel.IsNew // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e16050
	int32_t GetNumFilters(); // Function ShooterGame.ContentFilterViewModel.GetNumFilters // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e16020
	struct FString GetModelId(); // Function ShooterGame.ContentFilterViewModel.GetModelId // (Final|Native|Public) // @ game+0x2e15f90
	void GetAllFilters(struct TArray<struct UContentFilter*>& AllFilters); // Function ShooterGame.ContentFilterViewModel.GetAllFilters // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e15dd0
	void FilterContent(struct TArray<struct UBaseHandle*>& UnfilteredContent, struct TArray<struct UBaseHandle*>& FilteredContent); // Function ShooterGame.ContentFilterViewModel.FilterContent // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e15cb0
	void DeleteAllFilters(); // Function ShooterGame.ContentFilterViewModel.DeleteAllFilters // (Final|Native|Public|BlueprintCallable) // @ game+0x2e15c90
};

// Class ShooterGame.ContentFilterWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UContentFilterWidget : UUserWidget {
};

// Class ShooterGame.BaseHandle
// Size: 0x48 (Inherited: 0x30)
struct UBaseHandle : UObject {
	struct UAresBasePrimaryDataAsset* BaseDataAsset; // 0x30(0x08)
	struct UBaseContentUIData* BaseUIData; // 0x38(0x08)
	struct UBaseInventoryModel* BaseInventoryModel; // 0x40(0x08)
};

// Class ShooterGame.EquippableSkinChromaHandle
// Size: 0x70 (Inherited: 0x48)
struct UEquippableSkinChromaHandle : UBaseHandle {
	struct UEquippableSkinChromaDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableSkinChromaUIData* UIData; // 0x50(0x08)
	struct UEquippableSkinChromaInventoryModel* InventoryModel; // 0x58(0x08)
	struct USidegradeModel* SidegradeModel; // 0x60(0x08)
	struct UStreamedVideoDataAsset* StreamedVideo; // 0x68(0x08)
};

// Class ShooterGame.EquippableSkinLevelHandle
// Size: 0x68 (Inherited: 0x48)
struct UEquippableSkinLevelHandle : UBaseHandle {
	struct UEquippableSkinLevelDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableSkinLevelUIData* UIData; // 0x50(0x08)
	struct UEquippableSkinLevelInventoryModel* InventoryModel; // 0x58(0x08)
	struct UStreamedVideoDataAsset* StreamedVideo; // 0x60(0x08)
};

// Class ShooterGame.EquippableSkinHandle
// Size: 0x128 (Inherited: 0x48)
struct UEquippableSkinHandle : UBaseHandle {
	struct UEquippableSkinDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableSkinUIData* UIData; // 0x50(0x08)
	struct UEquippableSkinInventoryModel* InventoryModel; // 0x58(0x08)
	struct UEquippableSkinChromaHandle* EquippedChroma; // 0x60(0x08)
	struct UEquippableSkinChromaHandle* DefaultChroma; // 0x68(0x08)
	struct TMap<struct UEquippableSkinChromaDataAsset*, struct UEquippableSkinChromaHandle*> Chromas; // 0x70(0x50)
	struct TMap<struct UEquippableSkinLevelDataAsset*, struct UEquippableSkinLevelHandle*> Levels; // 0xc0(0x50)
	struct UThemeHandle* Theme; // 0x110(0x08)
	struct UContentTierHandle* ContentTier; // 0x118(0x08)
	struct UTexture2D* Wallpaper; // 0x120(0x08)
};

// Class ShooterGame.ThemeHandle
// Size: 0xa8 (Inherited: 0x48)
struct UThemeHandle : UBaseHandle {
	struct UThemeDataAsset* DataAsset; // 0x48(0x08)
	struct UThemeUIData* UIData; // 0x50(0x08)
	struct TMap<struct UEquippableSkinDataAsset*, struct UEquippableSkinHandle*> Skins; // 0x58(0x50)
};

// Class ShooterGame.EquippableAttachmentHandle
// Size: 0x58 (Inherited: 0x48)
struct UEquippableAttachmentHandle : UBaseHandle {
	struct UEquippableAttachmentUIData* UIData; // 0x48(0x08)
	struct UEquippableAttachmentInventoryModel* InventoryModel; // 0x50(0x08)
};

// Class ShooterGame.EquippableHandle
// Size: 0x110 (Inherited: 0x48)
struct UEquippableHandle : UBaseHandle {
	struct UEquippableDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableUIData* UIData; // 0x50(0x08)
	struct UEquippableInventoryModel* InventoryModel; // 0x58(0x08)
	struct TMap<struct UEquippableAttachmentDataAsset*, struct UEquippableAttachmentHandle*> Attachments; // 0x60(0x50)
	struct TMap<struct UEquippableSkinDataAsset*, struct UEquippableSkinHandle*> Skins; // 0xb0(0x50)
	struct UEquippableSkinHandle* EquippedSkin; // 0x100(0x08)
	struct UEquippableCharmInstanceHandle* EquippedCharmInstance; // 0x108(0x08)
};

// Class ShooterGame.SprayLevelHandle
// Size: 0x68 (Inherited: 0x48)
struct USprayLevelHandle : UBaseHandle {
	struct USprayLevelDataAsset* DataAsset; // 0x48(0x08)
	struct USprayLevelUIData* UIData; // 0x50(0x08)
	struct USprayLevelInventoryModel* InventoryModel; // 0x58(0x08)
	struct AAresSpray* SprayActor; // 0x60(0x08)
};

// Class ShooterGame.SprayHandle
// Size: 0xb0 (Inherited: 0x48)
struct USprayHandle : UBaseHandle {
	struct USprayDataAsset* DataAsset; // 0x48(0x08)
	struct USprayUIData* UIData; // 0x50(0x08)
	struct USprayInventoryModel* InventoryModel; // 0x58(0x08)
	struct TMap<struct USprayLevelDataAsset*, struct USprayLevelHandle*> Levels; // 0x60(0x50)
};

// Class ShooterGame.SprayEquipSlotHandle
// Size: 0x68 (Inherited: 0x48)
struct USprayEquipSlotHandle : UBaseHandle {
	struct USprayEquipSlotDataAsset* DataAsset; // 0x48(0x08)
	struct USprayEquipSlotUIData* UIData; // 0x50(0x08)
	struct USprayEquipSlotInventoryModel* InventoryModel; // 0x58(0x08)
	struct USprayHandle* EquippedSpray; // 0x60(0x08)
};

// Class ShooterGame.CharacterRoleHandle
// Size: 0x50 (Inherited: 0x48)
struct UCharacterRoleHandle : UBaseHandle {
	struct UCharacterRoleUIData* UIData; // 0x48(0x08)
};

// Class ShooterGame.CharacterHandle
// Size: 0x80 (Inherited: 0x48)
struct UCharacterHandle : UBaseHandle {
	struct UCharacterDataAsset* DataAsset; // 0x48(0x08)
	struct UCharacterUIData* UIData; // 0x50(0x08)
	struct UCharacterRoleHandle* Role; // 0x58(0x08)
	struct UContractV2Handle* Contract; // 0x60(0x08)
	struct UTexture2D* FullPortrait; // 0x68(0x08)
	struct UTexture2D* CharacterBackground; // 0x70(0x08)
	struct UCharacterInventoryModel* InventoryModel; // 0x78(0x08)
};

// Class ShooterGame.CurrencyHandle
// Size: 0x60 (Inherited: 0x48)
struct UCurrencyHandle : UBaseHandle {
	struct UCurrencyDataAsset* DataAsset; // 0x48(0x08)
	struct UCurrencyUIData* UIData; // 0x50(0x08)
	struct UCurrencyInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.JuiceBoxHandle
// Size: 0x60 (Inherited: 0x48)
struct UJuiceBoxHandle : UBaseHandle {
	struct UJuiceBoxDataAsset* DataAsset; // 0x48(0x08)
	struct UJuiceBoxUIData* UIData; // 0x50(0x08)
	struct UJuiceBoxInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.MapHandle
// Size: 0x58 (Inherited: 0x48)
struct UMapHandle : UBaseHandle {
	struct UMapDataAsset* DataAsset; // 0x48(0x08)
	struct UMapUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.GameModeHandle
// Size: 0x58 (Inherited: 0x48)
struct UGameModeHandle : UBaseHandle {
	struct UGameModeDataAsset* DataAsset; // 0x48(0x08)
	struct UGameModeUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.MatchmakingQueueHandle
// Size: 0x58 (Inherited: 0x48)
struct UMatchmakingQueueHandle : UBaseHandle {
	struct UMatchmakingQueueDataAsset* DataAsset; // 0x48(0x08)
	struct UMatchmakingQueueUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.EquippableCharmHandle
// Size: 0xb0 (Inherited: 0x48)
struct UEquippableCharmHandle : UBaseHandle {
	struct UEquippableCharmDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableCharmUIData* UIData; // 0x50(0x08)
	struct UEquippableCharmInventoryModel* InventoryModel; // 0x58(0x08)
	struct TMap<struct UEquippableCharmLevelDataAsset*, struct UEquippableCharmLevelHandle*> Levels; // 0x60(0x50)
};

// Class ShooterGame.EquippableCharmLevelHandle
// Size: 0x60 (Inherited: 0x48)
struct UEquippableCharmLevelHandle : UBaseHandle {
	struct UEquippableCharmLevelDataAsset* DataAsset; // 0x48(0x08)
	struct UEquippableCharmLevelUIData* UIData; // 0x50(0x08)
	struct UEquippableCharmLevelInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.EquippableCharmInstanceHandle
// Size: 0x70 (Inherited: 0x48)
struct UEquippableCharmInstanceHandle : UBaseHandle {
	struct FGuid InstanceId; // 0x48(0x10)
	struct UEquippableCharmInstanceInventoryModel* InventoryModel; // 0x58(0x08)
	struct UEquippableCharmHandle* CharmHandle; // 0x60(0x08)
	struct UEquippableCharmLevelHandle* CurrentLevelHandle; // 0x68(0x08)
};

// Class ShooterGame.PlayerCardHandle
// Size: 0x90 (Inherited: 0x48)
struct UPlayerCardHandle : UBaseHandle {
	struct UPlayerCardDataAsset* DataAsset; // 0x48(0x08)
	struct UPlayerCardUIData* UIData; // 0x50(0x08)
	struct UPlayerCardInventoryModel* InventoryModel; // 0x58(0x08)
	struct UTexture2D* LargeArt; // 0x60(0x08)
	struct UTexture2D* WideArt; // 0x68(0x08)
	struct UTexture2D* SmallArt; // 0x70(0x08)
	struct UMaterial* LargeMaterial; // 0x78(0x08)
	struct UMaterial* WideMaterial; // 0x80(0x08)
	struct UMaterial* SmallMaterial; // 0x88(0x08)
};

// Class ShooterGame.StorefrontItemHandle
// Size: 0x58 (Inherited: 0x48)
struct UStorefrontItemHandle : UBaseHandle {
	struct UStorefrontItemDataAsset* DataAsset; // 0x48(0x08)
	struct UStorefrontItemUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.ObjectiveHandle
// Size: 0x58 (Inherited: 0x48)
struct UObjectiveHandle : UBaseHandle {
	struct UObjectiveDataAsset* DataAsset; // 0x48(0x08)
	struct UObjectiveUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.MissionHandle
// Size: 0xa8 (Inherited: 0x48)
struct UMissionHandle : UBaseHandle {
	struct UMissionDataAsset* DataAsset; // 0x48(0x08)
	struct UMissionUIData* UIData; // 0x50(0x08)
	struct TMap<struct UObjectiveDataAsset*, struct UObjectiveHandle*> Objectives; // 0x58(0x50)
};

// Class ShooterGame.ArmorHandle
// Size: 0x58 (Inherited: 0x48)
struct UArmorHandle : UBaseHandle {
	struct UArmorDataAsset* DataAsset; // 0x48(0x08)
	struct UArmorUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.PlayerTitleHandle
// Size: 0x60 (Inherited: 0x48)
struct UPlayerTitleHandle : UBaseHandle {
	struct UPlayerTitleDataAsset* DataAsset; // 0x48(0x08)
	struct UPlayerTitleUIData* UIData; // 0x50(0x08)
	struct UPlayerTitleInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.ContractV2Handle
// Size: 0x58 (Inherited: 0x48)
struct UContractV2Handle : UBaseHandle {
	struct UContractDataAssetV2* DataAsset; // 0x48(0x08)
	struct UContractUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.ContentTierHandle
// Size: 0x58 (Inherited: 0x48)
struct UContentTierHandle : UBaseHandle {
	struct UContentTierDataAsset* DataAsset; // 0x48(0x08)
	struct UContentTierUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.ActRankBorderHandle
// Size: 0x58 (Inherited: 0x48)
struct UActRankBorderHandle : UBaseHandle {
	struct UActRankBorderDataAsset* DataAsset; // 0x48(0x08)
	struct UActRankBorderUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.SubscriptionHandle
// Size: 0x58 (Inherited: 0x48)
struct USubscriptionHandle : UBaseHandle {
	struct USubscriptionDataAsset* DataAsset; // 0x48(0x08)
	struct USubscriptionUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.SeasonHandle
// Size: 0x60 (Inherited: 0x48)
struct USeasonHandle : UBaseHandle {
	struct USeasonDataAsset* DataAsset; // 0x48(0x08)
	struct USeasonHandle* ParentSeasonHandle; // 0x50(0x08)
	struct USeasonUIData* UIData; // 0x58(0x08)
};

// Class ShooterGame.CompetitiveSeasonHandle
// Size: 0xb0 (Inherited: 0x48)
struct UCompetitiveSeasonHandle : UBaseHandle {
	struct UCompetitiveSeasonDataAsset* DataAsset; // 0x48(0x08)
	struct USeasonDataAsset* Season; // 0x50(0x08)
	struct UCompetitiveSeasonUIData* UIData; // 0x58(0x08)
	struct TMap<struct UActRankBorderDataAsset*, struct UActRankBorderHandle*> Borders; // 0x60(0x50)
};

// Class ShooterGame.PremierSeasonHandle
// Size: 0x68 (Inherited: 0x48)
struct UPremierSeasonHandle : UBaseHandle {
	struct UPremierSeasonDataAsset* DataAsset; // 0x48(0x08)
	struct UCompetitiveSeasonDataAsset* CompetitiveSeason; // 0x50(0x08)
	struct USeasonDataAsset* Season; // 0x58(0x08)
	struct UPremierSeasonUIData* UIData; // 0x60(0x08)
};

// Class ShooterGame.LevelBorderHandle
// Size: 0x60 (Inherited: 0x48)
struct ULevelBorderHandle : UBaseHandle {
	struct ULevelBorderDataAsset* DataAsset; // 0x48(0x08)
	struct ULevelBorderUIData* UIData; // 0x50(0x08)
	struct ULevelBorderInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.EventHandle
// Size: 0x60 (Inherited: 0x48)
struct UEventHandle : UBaseHandle {
	struct UEventDataAsset* DataAsset; // 0x48(0x08)
	struct UEventUIData* UIData; // 0x50(0x08)
	struct UEventModel* EventModel; // 0x58(0x08)
};

// Class ShooterGame.TournamentsTeamIconHandle
// Size: 0x58 (Inherited: 0x48)
struct UTournamentsTeamIconHandle : UBaseHandle {
	struct UTournamentsTeamIconDataAsset* DataAsset; // 0x48(0x08)
	struct UTournamentsTeamIconUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.MassRewardsCeremonyHandle
// Size: 0x58 (Inherited: 0x48)
struct UMassRewardsCeremonyHandle : UBaseHandle {
	struct UMassRewardsCeremonyDataAsset* DataAsset; // 0x48(0x08)
	struct UMassRewardsCeremonyUIData* UIData; // 0x50(0x08)
};

// Class ShooterGame.ContentIndex
// Size: 0xf10 (Inherited: 0xe8)
struct UContentIndex : UActorComponent {
	bool bContentInitialized; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TMap<struct FGuid, struct FEquippableData> Equippables; // 0xf0(0x50)
	struct TMap<struct FGuid, struct FEquippableSkinData> ServiceIdToEquippableSkin; // 0x140(0x50)
	struct TMap<struct FGuid, struct FEquippableSkinLevelData> ServiceIdToEquippableSkinLevel; // 0x190(0x50)
	struct TMap<struct FGuid, struct FEquippableAttachmentData> ServiceIdToEquippableAttachment; // 0x1e0(0x50)
	struct TMap<struct FGuid, struct FEquippableSkinChromaData> ServiceIdToEquippableSkinChroma; // 0x230(0x50)
	struct TMap<struct FGuid, struct FThemeData> ServiceIdToTheme; // 0x280(0x50)
	struct TMap<struct FGuid, struct FSocketData> ServiceIdToSocket; // 0x2d0(0x50)
	struct TMap<struct FGuid, struct FCharacterData> ServiceIdToCharacter; // 0x320(0x50)
	struct TMap<struct FGuid, struct FCharacterRoleData> ServiceIdToCharacterRole; // 0x370(0x50)
	struct TMap<struct FGuid, struct FSprayData> ServiceIdToSpray; // 0x3c0(0x50)
	struct TMap<struct FGuid, struct FSprayLevelData> ServiceIdToSprayLevel; // 0x410(0x50)
	struct TMap<struct FGuid, struct FSprayEquipSlotData> ServiceIdToSprayEquipSlot; // 0x460(0x50)
	struct TMap<struct FGuid, struct FMapData> ServiceIdToMap; // 0x4b0(0x50)
	struct TMap<struct FGuid, struct FGameModeData> ServiceIdToGameMode; // 0x500(0x50)
	struct TMap<struct TSoftClassPtr<UObject>, struct FGameModeData> ShooterGameModeToGameModeData; // 0x550(0x50)
	struct TMap<struct FGuid, struct FEquippableCharmData> ServiceIdToEquippableCharm; // 0x5a0(0x50)
	struct TMap<struct FGuid, struct FEquippableCharmLevelData> ServiceIdToEquippableCharmLevel; // 0x5f0(0x50)
	struct TMap<struct FName, struct FGuid> CharacterDeveloperNameToServiceId; // 0x640(0x50)
	struct TMap<struct FName, struct FGuid> CharacterShippingNameToServiceId; // 0x690(0x50)
	struct TMap<struct FGuid, struct FCurrencyData> ServiceIdToCurrency; // 0x6e0(0x50)
	struct TMap<struct FGuid, struct FJuiceBoxData> ServiceIdToJuiceBox; // 0x730(0x50)
	struct TMap<struct FGuid, struct FPlayerCardData> ServiceIdToPlayerCard; // 0x780(0x50)
	struct TMap<struct FGuid, struct FMissionData> ServiceIdToMission; // 0x7d0(0x50)
	struct TMap<struct TSoftClassPtr<UObject>, struct FMissionData> MissionActorToMission; // 0x820(0x50)
	struct TMap<struct FGuid, struct FObjectiveData> ServiceIdToObjective; // 0x870(0x50)
	struct TMap<struct TSoftClassPtr<UObject>, struct FObjectiveData> ObjectiveComponentToObjective; // 0x8c0(0x50)
	struct TMap<struct FGuid, struct FStorefrontItemData> ServiceIdToStorefrontItem; // 0x910(0x50)
	struct TMap<struct FGuid, struct FArmorData> ServiceIdToArmor; // 0x960(0x50)
	struct TMap<struct FGuid, struct FPlayerTitleData> ServiceIdToPlayerTitle; // 0x9b0(0x50)
	struct TMap<struct FGuid, struct FContractV2Data> ServiceIdToContractV2; // 0xa00(0x50)
	struct TMap<struct FGuid, struct FContentTierData> ServiceIdToContentTier; // 0xa50(0x50)
	struct TMap<struct FGuid, struct FSeasonData> ServiceIdToSeason; // 0xaa0(0x50)
	struct TMap<struct FGuid, struct FCompetitiveSeasonData> ServiceIdToCompetitiveSeason; // 0xaf0(0x50)
	struct TMap<struct FGuid, struct FPremierSeasonData> ServiceIdToPremierSeason; // 0xb40(0x50)
	struct TMap<struct FGuid, struct FActRankBorderData> ServiceIdToActRankBorder; // 0xb90(0x50)
	struct TArray<struct ULevelBorderDataAsset*> LevelToBorder; // 0xbe0(0x10)
	struct TMap<struct FGuid, struct FStreamedVideoData> ServiceIdToStreamedVideo; // 0xbf0(0x50)
	struct TMap<struct FGuid, struct FMatchmakingQueueData> ServiceIdToMatchmakingQueue; // 0xc40(0x50)
	struct TMap<struct FString, struct FMatchmakingQueueData> QueueIdToMatchmakingQueue; // 0xc90(0x50)
	struct TMap<struct FGuid, struct FLevelBorderData> ServiceIdToLevelBorder; // 0xce0(0x50)
	struct TMap<struct FGuid, struct FAresEventData> ServiceIdToEvent; // 0xd30(0x50)
	struct TMap<struct FGuid, struct FTournamentsTeamIconData> ServiceIdToTournamentsTeamIcon; // 0xd80(0x50)
	struct TMap<struct FGuid, struct FMassRewardsCeremonyData> ServiceIdToMassRewardsCeremony; // 0xdd0(0x50)
	struct TMap<struct FGuid, struct FSubscriptionData> ServiceIdToSubscription; // 0xe20(0x50)
	struct TMap<struct FGuid, struct FArchiveData> ServiceIdToArchive; // 0xe70(0x50)
	struct TMap<struct FGuid, struct USubscriptionDataAsset*> EntitlementTypeIDToSubscription; // 0xec0(0x50)

	struct TArray<struct USeasonDataAsset*> GetSeasons(struct UObject* WorldContextObject, enum class EAresSeasonType Type); // Function ShooterGame.ContentIndex.GetSeasons // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e1c190
	struct UPremierSeasonDataAsset* GetPremierSeasonBySeasonId(struct UObject* WorldContextObject, struct FGuid& SeasonID); // Function ShooterGame.ContentIndex.GetPremierSeasonBySeasonId // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e1c0a0
	struct UGameModeDataAsset* GetModeByName(struct UObject* WorldContextObject, struct FName& ModeName); // Function ShooterGame.ContentIndex.GetModeByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e1bfc0
	struct UGameModeDataAsset* GetModeByClass(struct UObject* WorldContextObject, struct TSoftClassPtr<UObject> GameModeClass); // Function ShooterGame.ContentIndex.GetModeByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e1be70
	struct UMatchmakingQueueDataAsset* GetMatchmakingQueueById(struct UObject* WorldContextObject, struct FString QueueID); // Function ShooterGame.ContentIndex.GetMatchmakingQueueById // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e1bd70
	struct UMapDataAsset* GetMapByName(struct UObject* WorldContextObject, struct FName& MapName); // Function ShooterGame.ContentIndex.GetMapByName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e1bc90
	struct UCompetitiveSeasonDataAsset* GetCompetitiveSeasonBySeasonId(struct UObject* WorldContextObject, struct FGuid& SeasonID); // Function ShooterGame.ContentIndex.GetCompetitiveSeasonBySeasonId // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e1bba0
	struct ULevelBorderDataAsset* GetBorderForLevel(struct UObject* WorldContextObject, int32_t& Level); // Function ShooterGame.ContentIndex.GetBorderForLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e1bac0
	struct TArray<struct UCharacterDataAsset*> GetAllCharacters(struct UObject* WorldContextObject); // Function ShooterGame.ContentIndex.GetAllCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e1b9e0
	struct UContentIndex* Get(struct UWorld* FromWorld); // Function ShooterGame.ContentIndex.Get // (Final|Native|Static|Public) // @ game+0x2e1b950
};

// Class ShooterGame.ContentIndexManager
// Size: 0x88 (Inherited: 0x80)
struct UContentIndexManager : UInitSystem {
	struct UContentIndex* ContentIndex; // 0x80(0x08)

	struct UContentIndexManager* GetContentIndexManager(struct UObject* WorldContextObject); // Function ShooterGame.ContentIndexManager.GetContentIndexManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e258d0
	struct UContentIndexManager* Get(struct UWorld* FromWorld); // Function ShooterGame.ContentIndexManager.Get // (Final|Native|Static|Public) // @ game+0x2e22b60
};

// Class ShooterGame.ContentItemsView
// Size: 0x2e0 (Inherited: 0x2c8)
struct UContentItemsView : UDesignableUserWidget {
	struct UUserWidget* EntryWidgetClass; // 0x2c8(0x08)
	struct UMutableEntryTileView* MutableEntryTileView; // 0x2d0(0x08)
	struct UOverlay* ItemsViewOverlay; // 0x2d8(0x08)

	int32_t GetNumPlaceholders(int32_t NumCurrentVisibleItems); // Function ShooterGame.ContentItemsView.GetNumPlaceholders // (Final|Native|Protected|BlueprintCallable) // @ game+0x2e28950
};

// Class ShooterGame.ContentLibrary
// Size: 0x30 (Inherited: 0x30)
struct UContentLibrary : UBlueprintFunctionLibrary {

	bool IsSprayLevelDisabled(struct UObject* WorldContextObject, struct USprayLevelDataAsset* SprayLevelAsset); // Function ShooterGame.ContentLibrary.IsSprayLevelDisabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e2a5f0
	bool IsRandomSelectionAsset(struct UAresBasePrimaryDataAsset* BaseDataAsset); // Function ShooterGame.ContentLibrary.IsRandomSelectionAsset // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e2a560
	void GetTournamentsTeamIconByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FTournamentsTeamIconHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetTournamentsTeamIconByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e2a3e0
	void GetTournamentsTeamIcon(struct UObject* WorldContextObject, struct UTournamentsTeamIconDataAsset* DataAsset, struct FTournamentsTeamIconHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetTournamentsTeamIcon // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e2a260
	void GetTheme(struct UObject* WorldContextObject, struct UThemeDataAsset* DataAsset, struct FThemeHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetTheme // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e2a0c0
	void GetStorefrontItemByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FStorefrontItemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetStorefrontItemByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e29f40
	void GetStorefrontItem(struct UObject* WorldContextObject, struct UStorefrontItemDataAsset* DataAsset, struct FStorefrontItemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetStorefrontItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e29dc0
	void GetSprays(struct UObject* WorldContextObject, struct TArray<struct USprayDataAsset*>& DataAssets, struct FSprayHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSprays // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e29c20
	void GetSprayLevelsForSpray(struct UObject* WorldContextObject, struct USprayDataAsset* DataAsset, struct FSprayLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSprayLevelsForSpray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e29aa0
	void GetSprayLevel(struct UObject* WorldContextObject, struct USprayLevelDataAsset* DataAsset, struct FSprayLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSprayLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e29920
	void GetSprayEquipSlot(struct UObject* WorldContextObject, struct USprayEquipSlotDataAsset* DataAsset, struct FSprayEquipSlotHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSprayEquipSlot // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e297a0
	void GetSpray(struct UObject* WorldContextObject, struct USprayDataAsset* DataAsset, struct FSprayHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSpray // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e29630
	void GetSkinsForEquippable(struct UObject* WorldContextObject, struct UEquippableDataAsset* EquippableDataAsset, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSkinsForEquippable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e294a0
	void GetSeasons(struct UObject* WorldContextObject, struct TArray<struct USeasonDataAsset*>& DataAssets, struct FSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSeasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e29300
	void GetSeason(struct UObject* WorldContextObject, struct USeasonDataAsset* DataAsset, struct FSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e29180
	struct UPremierSeasonHandle* GetPremierSeasonForSeason(struct UObject* WorldContextObject, struct USeasonDataAsset* SeasonDataAsset, struct FPremierSeasonHandles& PremierSeasonHandles); // Function ShooterGame.ContentLibrary.GetPremierSeasonForSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e29000
	void GetPremierSeason(struct UObject* WorldContextObject, struct UPremierSeasonDataAsset* DataAsset, struct FPremierSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetPremierSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e28e80
	void GetPlayerTitle(struct UObject* WorldContextObject, struct UPlayerTitleDataAsset* DataAsset, struct FPlayerTitleHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetPlayerTitle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e28d00
	void GetPlayerCard(struct UObject* WorldContextObject, struct UPlayerCardDataAsset* DataAsset, struct FPlayerCardHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetPlayerCard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e28b70
	void GetObjective(struct UObject* WorldContextObject, struct UObjectiveDataAsset* DataAsset, struct FObjectiveHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetObjective // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e289f0
	void GetMission(struct UObject* WorldContextObject, struct UMissionDataAsset* DataAsset, struct FMissionHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMission // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e287d0
	void GetMatchmakingQueue(struct UObject* WorldContextObject, struct UMatchmakingQueueDataAsset* DataAsset, struct FMatchmakingQueueHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMatchmakingQueue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e28650
	void GetMassRewardsCeremonyByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FMassRewardsCeremonyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMassRewardsCeremonyByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e284d0
	void GetMassRewardsCeremony(struct UObject* WorldContextObject, struct UMassRewardsCeremonyDataAsset* DataAsset, struct FMassRewardsCeremonyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMassRewardsCeremony // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e28350
	void GetMap(struct UObject* WorldContextObject, struct UMapDataAsset* DataAsset, struct FMapHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetMap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e281d0
	void GetLevelsForEquippableSkin(struct UObject* WorldContextObject, struct UEquippableSkinDataAsset* EquippableSkinDataAsset, struct FEquippableSkinLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetLevelsForEquippableSkin // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e28050
	void GetLevelBorder(struct UObject* WorldContextObject, struct ULevelBorderDataAsset* DataAsset, struct FLevelBorderHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetLevelBorder // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e27ed0
	void GetJuiceBoxByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FJuiceBoxHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetJuiceBoxByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e27d50
	void GetJuiceBox(struct UObject* WorldContextObject, struct UJuiceBoxDataAsset* DataAsset, struct FJuiceBoxHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetJuiceBox // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e27bd0
	int32_t GetHighestUnlockedLevelForEquippableSkin(struct UObject* WorldContextObject, struct UEquippableSkinDataAsset* EquippableSkinDataAsset); // Function ShooterGame.ContentLibrary.GetHighestUnlockedLevelForEquippableSkin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e27b00
	void GetGameMode(struct UObject* WorldContextObject, struct UGameModeDataAsset* DataAsset, struct FGameModeHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetGameMode // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e27980
	void GetEvent(struct UObject* WorldContextObject, struct UEventDataAsset* DataAsset, struct FAresEventHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEvent // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e27800
	void GetEquippableSkinsForTheme(struct UObject* WorldContextObject, struct UThemeDataAsset* ThemeDataAsset, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkinsForTheme // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e27490
	void GetEquippableSkins(struct UObject* WorldContextObject, struct TArray<struct UEquippableSkinDataAsset*>& DataAssets, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkins // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e272c0
	struct UEquippableSkinDataAsset* GetEquippableSkinLevelParentSkin(struct UObject* WorldContextObject, struct UEquippableSkinLevelDataAsset* DataAsset); // Function ShooterGame.ContentLibrary.GetEquippableSkinLevelParentSkin // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e271f0
	void GetEquippableSkinLevel(struct UObject* WorldContextObject, struct UEquippableSkinLevelDataAsset* DataAsset, struct FEquippableSkinLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkinLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e27070
	void GetEquippableSkinChroma(struct UObject* WorldContextObject, struct UEquippableSkinChromaDataAsset* DataAsset, struct FEquippableSkinChromaHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkinChroma // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e26ef0
	void GetEquippableSkin(struct UObject* WorldContextObject, struct UEquippableSkinDataAsset* DataAsset, struct FEquippableSkinHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableSkin // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e26d60
	void GetEquippables(struct UObject* WorldContextObject, struct TArray<struct UEquippableDataAsset*>& DataAssets, struct FEquippableHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippables // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e27620
	void GetEquippableCharmLevelsForCharm(struct UObject* WorldContextObject, struct UEquippableCharmDataAsset* DataAsset, struct FEquippableCharmLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmLevelsForCharm // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e26be0
	void GetEquippableCharmLevel(struct UObject* WorldContextObject, struct UEquippableCharmLevelDataAsset* DataAsset, struct FEquippableCharmLevelHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmLevel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e26a60
	void GetEquippableCharmInstancesForCharm(struct UObject* WorldContextObject, struct UEquippableCharmDataAsset* DataAsset, struct FEquippableCharmInstanceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmInstancesForCharm // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e268e0
	void GetEquippableCharmInstances(struct UObject* WorldContextObject, struct TArray<struct UEquippableCharmInstanceInventoryModel*>& InventoryModels, struct FEquippableCharmInstanceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmInstances // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e26730
	void GetEquippableCharmInstance(struct UObject* WorldContextObject, struct UEquippableCharmInstanceInventoryModel* InventoryModel, struct FEquippableCharmInstanceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharmInstance // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e265b0
	void GetEquippableCharm(struct UObject* WorldContextObject, struct UEquippableCharmDataAsset* DataAsset, struct FEquippableCharmHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableCharm // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e26430
	void GetEquippableAttachments(struct UObject* WorldContextObject, struct TArray<struct UEquippableAttachmentDataAsset*>& DataAssets, struct FEquippableAttachmentHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableAttachments // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e26290
	void GetEquippableAttachment(struct UObject* WorldContextObject, struct UEquippableAttachmentDataAsset* DataAsset, struct FEquippableAttachmentHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippableAttachment // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e26110
	void GetEquippable(struct UObject* WorldContextObject, struct UEquippableDataAsset* DataAsset, struct FEquippableHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetEquippable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e25f60
	void GetCurrencyByID(struct UObject* WorldContextObject, struct FGuid ServiceId, struct FCurrencyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCurrencyByID // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e25de0
	void GetCurrency(struct UObject* WorldContextObject, struct UCurrencyDataAsset* DataAsset, struct FCurrencyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCurrency // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e25c60
	void GetContractV2(struct UObject* WorldContextObject, struct UContractDataAssetV2* DataAsset, struct FContractV2HandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetContractV2 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e25ae0
	void GetContentTier(struct UObject* WorldContextObject, struct UContentTierDataAsset* DataAsset, struct FContentTierHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetContentTier // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e25960
	struct UCompetitiveSeasonHandle* GetCompetitiveSeasonForSeason(struct UObject* WorldContextObject, struct USeasonDataAsset* SeasonDataAsset, struct FCompetitiveSeasonHandles& CompetitiveSeasonHandles); // Function ShooterGame.ContentLibrary.GetCompetitiveSeasonForSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e25750
	void GetCompetitiveSeason(struct UObject* WorldContextObject, struct UCompetitiveSeasonDataAsset* DataAsset, struct FCompetitiveSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCompetitiveSeason // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e255d0
	void GetChromasForEquippableSkin(struct UObject* WorldContextObject, struct UEquippableSkinDataAsset* EquippableSkinDataAsset, struct FEquippableSkinChromaHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetChromasForEquippableSkin // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e25450
	void GetCharacters(struct UObject* WorldContextObject, struct TArray<struct UCharacterDataAsset*>& DataAssets, struct FCharacterHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCharacters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e25290
	void GetCharacter(struct UObject* WorldContextObject, struct UCharacterDataAsset* DataAsset, struct FCharacterHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetCharacter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e25100
	void GetBaseHandles(struct UObject* WorldContextObject, struct TArray<struct UAresBasePrimaryDataAsset*>& DataAssets, struct FBaseHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetBaseHandles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24f60
	void GetBaseHandle(struct UObject* WorldContextObject, struct UAresBasePrimaryDataAsset* DataAsset, struct FBaseHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetBaseHandle // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24de0
	void GetAttachmentsForEquippable(struct UObject* WorldContextObject, struct UEquippableDataAsset* EquippableDataAsset, struct FEquippableAttachmentHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAttachmentsForEquippable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24c60
	void GetArmor(struct UObject* WorldContextObject, struct UArmorDataAsset* DataAsset, struct FArmorHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetArmor // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24ae0
	void GetAllTournamentsTeamIcons(struct UObject* WorldContextObject, struct FTournamentsTeamIconHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllTournamentsTeamIcons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e249b0
	void GetAllThemes(struct UObject* WorldContextObject, struct FThemeHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllThemes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24850
	void GetAllSubscriptions(struct UObject* WorldContextObject, struct FSubscriptionHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllSubscriptions // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24720
	void GetAllStorefrontItems(struct UObject* WorldContextObject, struct FStorefrontItemHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllStorefrontItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e245f0
	void GetAllSprays(struct UObject* WorldContextObject, struct FSprayHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllSprays // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e244c0
	void GetAllSprayEquipSlots(struct UObject* WorldContextObject, struct FSprayEquipSlotHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllSprayEquipSlots // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24370
	void GetAllSeasons(struct UObject* WorldContextObject, struct FSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllSeasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24240
	void GetAllPremierSeasons(struct UObject* WorldContextObject, struct FPremierSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllPremierSeasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e24110
	void GetAllPlayerTitles(struct UObject* WorldContextObject, struct FPlayerTitleHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllPlayerTitles // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23fe0
	void GetAllPlayerCards(struct UObject* WorldContextObject, struct FPlayerCardHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllPlayerCards // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23e90
	void GetAllMatchmakingQueues(struct UObject* WorldContextObject, struct FMatchmakingQueueHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllMatchmakingQueues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23d60
	void GetAllMaps(struct UObject* WorldContextObject, struct FMapHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllMaps // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23c30
	void GetAllLevelBorders(struct UObject* WorldContextObject, struct FLevelBorderHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllLevelBorders // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23b00
	void GetAllJuiceBoxes(struct UObject* WorldContextObject, struct FJuiceBoxHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllJuiceBoxes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e239d0
	void GetAllGameModes(struct UObject* WorldContextObject, struct FGameModeHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllGameModes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e238a0
	void GetAllEquippables(struct UObject* WorldContextObject, struct FEquippableHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllEquippables // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23730
	void GetAllEquippableCharms(struct UObject* WorldContextObject, struct FEquippableCharmHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllEquippableCharms // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e235f0
	void GetAllEquippableCharmInstances(struct UObject* WorldContextObject, struct FEquippableCharmInstanceHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllEquippableCharmInstances // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e234b0
	void GetAllCurrencies(struct UObject* WorldContextObject, struct FCurrencyHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllCurrencies // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23380
	void GetAllContentTiers(struct UObject* WorldContextObject, struct FContentTierHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllContentTiers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23250
	void GetAllCompetitiveSeasons(struct UObject* WorldContextObject, struct FCompetitiveSeasonHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllCompetitiveSeasons // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e23120
	void GetAllCharacters(struct UObject* WorldContextObject, struct FCharacterHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllCharacters // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e22fd0
	void GetAllArmors(struct UObject* WorldContextObject, struct FArmorHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllArmors // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e22ea0
	void GetAllActRankBorders(struct UObject* WorldContextObject, struct FActRankBorderHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetAllActRankBorders // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e22d70
	void GetActRankBorder(struct UObject* WorldContextObject, struct UActRankBorderDataAsset* DataAsset, struct FActRankBorderHandleLoadOptions LoadOptions, struct FDelegate& Callback); // Function ShooterGame.ContentLibrary.GetActRankBorder // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e22bf0
	void ClearWeaponComponents(struct AActor* Parent); // Function ShooterGame.ContentLibrary.ClearWeaponComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e22ae0
	void ApplySkin(struct AActor* Parent, struct UEquippableSkinDataAsset* EquippableSkinAsset, struct UEquippableSkinChromaDataAsset* EquippableChromaAsset, int32_t SkinLevel, struct UEquippableCharmDataAsset* EquippableCharmAsset, int32_t CharmLevel); // Function ShooterGame.ContentLibrary.ApplySkin // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e22910
	void AddWeaponAttachment(struct AActor* Parent, struct TSoftClassPtr<UObject> WeaponAttachment); // Function ShooterGame.ContentLibrary.AddWeaponAttachment // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e227d0
};

// Class ShooterGame.ContentManager
// Size: 0x298 (Inherited: 0x80)
struct UContentManager : UInitSystem {
	struct FMulticastInlineDelegate ContentUpdatedCallback; // 0x80(0x10)
	char pad_90[0x38]; // 0x90(0x38)
	struct URSOManager* RSOManager; // 0xc8(0x08)
	struct UContentService* ContentService; // 0xd0(0x08)
	struct UConfigManager* ConfigManager; // 0xd8(0x08)
	struct UContentIndex* ContentIndex; // 0xe0(0x08)
	struct UPlatformSessionManager* PlatformSessionManager; // 0xe8(0x08)
	char pad_F0[0x90]; // 0xf0(0x90)
	struct TMap<enum class EAresSeasonType, struct USeasonDataAsset*> ActiveSeasons; // 0x180(0x50)
	struct TMap<struct USeasonDataAsset*, struct FDateTime> SeasonEndTimes; // 0x1d0(0x50)
	struct TSet<struct UEventDataAsset*> ActiveEvents; // 0x220(0x50)
	char pad_270[0x28]; // 0x270(0x28)

	bool IsSeasonEnabled(struct FGuid& Guid); // Function ShooterGame.ContentManager.IsSeasonEnabled // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e35300
	bool HasDisabledSkinLevels(struct UEquippableSkinDataAsset* EquippableSkinData); // Function ShooterGame.ContentManager.HasDisabledSkinLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e35260
	bool GetSeasonEndTime(struct USeasonDataAsset* Season, struct FDateTime& OutEndTime); // Function ShooterGame.ContentManager.GetSeasonEndTime // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x2e34f90
	struct UGameModeUIData* GetModeUIData(struct UGameModeDataAsset* ModeDataAsset); // Function ShooterGame.ContentManager.GetModeUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x2e34ab0
	struct UMapUIData* GetMapUIData(struct UMapDataAsset* MapDataAsset); // Function ShooterGame.ContentManager.GetMapUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x2e34970
	struct UMapDataAsset* GetMapDataAsset(struct FName& MapURL); // Function ShooterGame.ContentManager.GetMapDataAsset // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e348c0
	int32_t GetHighestEnabledSkinLevelIndex(struct UEquippableSkinDataAsset* DataAsset); // Function ShooterGame.ContentManager.GetHighestEnabledSkinLevelIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e345e0
	struct UGameModeDataAsset* GetGameModeDataAsset(struct FName& MapURL); // Function ShooterGame.ContentManager.GetGameModeDataAsset // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e34530
	struct UContentManager* GetContentManager(struct UObject* WorldContextObject); // Function ShooterGame.ContentManager.GetContentManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e341b0
	bool GetCompetitiveSeasonServiceTimes(struct UCompetitiveSeasonDataAsset* CompetitiveSeason, struct FSeasonServiceTimes& OutServiceTimes); // Function ShooterGame.ContentManager.GetCompetitiveSeasonServiceTimes // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e340d0
	struct USeasonDataAsset* GetActiveSeasonByType(enum class EAresSeasonType Type); // Function ShooterGame.ContentManager.GetActiveSeasonByType // (Final|Native|Public|BlueprintCallable) // @ game+0x2e34040
	struct USeasonDataAsset* GetActiveSeason(); // Function ShooterGame.ContentManager.GetActiveSeason // (Final|Native|Public|BlueprintCallable) // @ game+0x2e34010
	struct TSet<struct UEventDataAsset*> GetActiveEvents(); // Function ShooterGame.ContentManager.GetActiveEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e33f30
	struct UCompetitiveSeasonDataAsset* GetActiveCompetitiveSeason(); // Function ShooterGame.ContentManager.GetActiveCompetitiveSeason // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e33f00
};

// Class ShooterGame.ContentService
// Size: 0x38 (Inherited: 0x30)
struct UContentService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.ContentTierUIData
// Size: 0xd0 (Inherited: 0x90)
struct UContentTierUIData : UBaseContentUIData {
	struct FSlateColor HighlightColor; // 0x90(0x28)
	struct FText DisplayNameAbbreviatedAllCaps; // 0xb8(0x18)
};

// Class ShooterGame.ContentTierDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UContentTierDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	int32_t TierRank; // 0x80(0x04)
	int32_t JuiceValue; // 0x84(0x04)
	int32_t JuiceCost; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class ShooterGame.ContractUIData
// Size: 0x90 (Inherited: 0x90)
struct UContractUIData : UBaseContentUIData {
};

// Class ShooterGame.ContractDataAssetV2Content
// Size: 0x30 (Inherited: 0x30)
struct UContractDataAssetV2Content : UObject {
};

// Class ShooterGame.ContractDataAssetV2ContentNPE
// Size: 0x40 (Inherited: 0x30)
struct UContractDataAssetV2ContentNPE : UContractDataAssetV2Content {
	struct TArray<struct FContractDataAssetV2SpecialChapter> Chapters; // 0x30(0x10)
};

// Class ShooterGame.ContractDataAssetV2ContentCharacter
// Size: 0x70 (Inherited: 0x30)
struct UContractDataAssetV2ContentCharacter : UContractDataAssetV2Content {
	struct TSoftClassPtr<UObject> RelatedCharacter; // 0x30(0x30)
	struct TArray<struct FContractDataAssetV2SpecialChapter> Chapters; // 0x60(0x10)
};

// Class ShooterGame.ContractDataAssetV2ContentBattlepass
// Size: 0x88 (Inherited: 0x30)
struct UContractDataAssetV2ContentBattlepass : UContractDataAssetV2Content {
	struct TSoftClassPtr<UObject> Season; // 0x30(0x30)
	struct FGuid PremiumRewardScheduleID; // 0x60(0x10)
	uint64_t PremiumVPCost; // 0x70(0x08)
	struct TArray<struct FContractDataAssetV2StoryChapter> Chapters; // 0x78(0x10)
};

// Class ShooterGame.ContractDataAssetV2ContentEventPass
// Size: 0x70 (Inherited: 0x30)
struct UContractDataAssetV2ContentEventPass : UContractDataAssetV2Content {
	struct TSoftClassPtr<UObject> Event; // 0x30(0x30)
	struct TArray<struct FContractDataAssetV2EventChapter> Chapters; // 0x60(0x10)
};

// Class ShooterGame.ContractDataAssetV2ContentAccord
// Size: 0x40 (Inherited: 0x30)
struct UContractDataAssetV2ContentAccord : UContractDataAssetV2Content {
	struct TArray<uint32_t> MedalThresholds; // 0x30(0x10)
};

// Class ShooterGame.ContractDataAssetV2
// Size: 0xd0 (Inherited: 0x50)
struct UContractDataAssetV2 : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	bool bShipIt; // 0x80(0x01)
	char pad_81[0x3]; // 0x81(0x03)
	struct FGuid FreeRewardScheduleID; // 0x84(0x10)
	char pad_94[0x4]; // 0x94(0x04)
	struct UContractDataAssetV2Content* Content; // 0x98(0x08)
	struct TSoftClassPtr<UObject> EOGWidget; // 0xa0(0x30)

	enum class EContractType GetContractType(); // Function ShooterGame.ContractDataAssetV2.GetContractType // (Final|Native|Public|Const) // @ game+0x2e34240
};

// Class ShooterGame.ContractDefinitionsManager
// Size: 0xd8 (Inherited: 0x80)
struct UContractDefinitionsManager : UInitSystem {
	bool bInitialized; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x90(0x08)
	struct UContractDefinitionsService* ContractDefinitionsService; // 0x98(0x08)
	struct UContentIndex* ContentIndex; // 0xa0(0x08)
	struct UContractDefinitionsModel* ContractDefinitionsModel; // 0xa8(0x08)
	struct UAresClientEvents* AresClientEvents; // 0xb0(0x08)
	struct UConfigManager* ConfigManager; // 0xb8(0x08)
	char pad_C0[0x18]; // 0xc0(0x18)

	struct USidegradeModel* GetSidegradeModelForSkinUpgradeItem(struct FGuid ParentSkinId, struct FGuid ItemId); // Function ShooterGame.ContractDefinitionsManager.GetSidegradeModelForSkinUpgradeItem // (Final|Native|Public|HasDefaults) // @ game+0x2e35060
	struct TArray<struct UItemProgressionDefinitionLevelModel*> GetProgressionLevelsForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.ContractDefinitionsManager.GetProgressionLevelsForDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e34d60
	struct UItemProgressionDefinitionModel* GetProgressionDefinitionForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.ContractDefinitionsManager.GetProgressionDefinitionForDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e34b70
	struct UContractDefinitionsModel* GetModel(); // Function ShooterGame.ContractDefinitionsManager.GetModel // (Final|Native|Public) // @ game+0x2e34b50
	int32_t GetMaxLevelForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.ContractDefinitionsManager.GetMaxLevelForDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e34a10
};

// Class ShooterGame.ItemProgressionDefinitionLevelModel
// Size: 0x50 (Inherited: 0x30)
struct UItemProgressionDefinitionLevelModel : UObject {
	int32_t LevelNumber; // 0x30(0x04)
	struct FGuid UpgradeCurrencyID; // 0x34(0x10)
	int32_t Cost; // 0x44(0x04)
	struct URewardGrantModel* Reward; // 0x48(0x08)

	struct FGuid GetUpgradeCurrencyID(); // Function ShooterGame.ItemProgressionDefinitionLevelModel.GetUpgradeCurrencyID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e35240
	struct URewardGrantModel* GetReward(); // Function ShooterGame.ItemProgressionDefinitionLevelModel.GetReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34f50
	int32_t GetLevelNumber(); // Function ShooterGame.ItemProgressionDefinitionLevelModel.GetLevelNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e347c0
	int32_t GetCost(); // Function ShooterGame.ItemProgressionDefinitionLevelModel.GetCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34270
};

// Class ShooterGame.SidegradeModel
// Size: 0x80 (Inherited: 0x30)
struct USidegradeModel : UObject {
	struct FGuid OptionID; // 0x30(0x10)
	struct FGuid SidegradeID; // 0x40(0x10)
	struct TArray<struct FEntitlementIdentifier> RequiredEntitlements; // 0x50(0x10)
	struct FCost Costs; // 0x60(0x10)
	struct UCurrencyDataAsset* PurchaseCurrency; // 0x70(0x08)
	struct URewardGrantModel* Reward; // 0x78(0x08)

	struct URewardGrantModel* GetReward(); // Function ShooterGame.SidegradeModel.GetReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34f70
	struct TArray<struct FEntitlementIdentifier> GetRequirements(); // Function ShooterGame.SidegradeModel.GetRequirements // (Final|Native|Public|Const) // @ game+0x2e34e80
	struct FGuid GetOptionID(); // Function ShooterGame.SidegradeModel.GetOptionID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34680
	struct FGuid GetID(); // Function ShooterGame.SidegradeModel.GetID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e346a0
	struct FGuid GetCurrencyID(); // Function ShooterGame.SidegradeModel.GetCurrencyID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e343a0
	int32_t GetCostValue(); // Function ShooterGame.SidegradeModel.GetCostValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34290
	struct FCost GetCosts(); // Function ShooterGame.SidegradeModel.GetCosts // (Final|Native|Public|Const) // @ game+0x2e342c0
	void AddRequirement(struct FEntitlementIdentifier Requirement); // Function ShooterGame.SidegradeModel.AddRequirement // (Final|Native|Public) // @ game+0x2e33dd0
};

// Class ShooterGame.ItemProgressionDefinitionModel
// Size: 0xa0 (Inherited: 0x30)
struct UItemProgressionDefinitionModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct FEntitlementIdentifier item; // 0x40(0x20)
	struct FEntitlementIdentifier RequiredEntitlement; // 0x60(0x20)
	struct TArray<struct UItemProgressionDefinitionLevelModel*> Levels; // 0x80(0x10)
	struct TArray<struct USidegradeModel*> Sidegrades; // 0x90(0x10)

	struct TArray<struct USidegradeModel*> GetSidegrades(); // Function ShooterGame.ItemProgressionDefinitionModel.GetSidegrades // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e35160
	struct FEntitlementIdentifier GetRequiredEntitlement(); // Function ShooterGame.ItemProgressionDefinitionModel.GetRequiredEntitlement // (Final|Native|Public|Const) // @ game+0x2e34e50
	struct TArray<struct UItemProgressionDefinitionLevelModel*> GetLevels(); // Function ShooterGame.ItemProgressionDefinitionModel.GetLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e347e0
	struct FEntitlementIdentifier GetItem(); // Function ShooterGame.ItemProgressionDefinitionModel.GetItem // (Final|Native|Public|Const) // @ game+0x2e346c0
	struct FGuid GetID(); // Function ShooterGame.ItemProgressionDefinitionModel.GetID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34680
	void AddSidegrade(struct USidegradeModel* Sidegrade); // Function ShooterGame.ItemProgressionDefinitionModel.AddSidegrade // (Final|Native|Public) // @ game+0x2e33e70
	void AddLevel(struct UItemProgressionDefinitionLevelModel* Level); // Function ShooterGame.ItemProgressionDefinitionModel.AddLevel // (Final|Native|Public) // @ game+0x2e33d40
};

// Class ShooterGame.ContractDefinitionsModel
// Size: 0x40 (Inherited: 0x30)
struct UContractDefinitionsModel : UObject {
	struct TArray<struct UItemProgressionDefinitionModel*> ItemProgressionDefinitionsV2; // 0x30(0x10)

	void SetItemProgressionDefinitionsV2(struct TArray<struct UItemProgressionDefinitionModel*> Definitions); // Function ShooterGame.ContractDefinitionsModel.SetItemProgressionDefinitionsV2 // (Final|Native|Public) // @ game+0x2e35520
	struct UItemProgressionDefinitionModel* GetProgressionDefinitionForItem(struct FGuid ItemId); // Function ShooterGame.ContractDefinitionsModel.GetProgressionDefinitionForItem // (Final|Native|Public|HasDefaults) // @ game+0x2e34cb0
	struct UItemProgressionDefinitionModel* GetProgressionDefinitionForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.ContractDefinitionsModel.GetProgressionDefinitionForDataAsset // (Final|Native|Public) // @ game+0x2e34c10
	struct TArray<struct UItemProgressionDefinitionModel*> GetItemProgressionDefinitionsV2(); // Function ShooterGame.ContractDefinitionsModel.GetItemProgressionDefinitionsV2 // (Final|Native|Public|Const) // @ game+0x2e346f0
};

// Class ShooterGame.ContractDefinitionsService
// Size: 0x38 (Inherited: 0x30)
struct UContractDefinitionsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.ContractsManager
// Size: 0x168 (Inherited: 0x80)
struct UContractsManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	bool bInitialized; // 0x98(0x01)
	bool bContractsPopulated; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	struct URMSManager* RMSManager; // 0xa8(0x08)
	struct UContentIndex* ContentIndex; // 0xb0(0x08)
	struct UContractsService* ContractsService; // 0xb8(0x08)
	struct UContractsModel* ContractsModel; // 0xc0(0x08)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0xc8(0x08)
	struct UConfigManager* ConfigManager; // 0xd0(0x08)
	struct UAresClientEvents* AresClientEvents; // 0xd8(0x08)
	struct UStoreManager* StoreManager; // 0xe0(0x08)
	struct UPlatformSessionManager* SessionManager; // 0xe8(0x08)
	char pad_F0[0x78]; // 0xf0(0x78)

	void UpgradeContract(struct FGuid& XID, struct FGuid& ContractDefinitionID, int32_t ExpectedCost, struct FGuid& CurrencyID, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UpgradeContract // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e3c5e0
	void UnlockItemSidegrade(struct FGuid& XID, struct FGuid& ItemProgressionDefinitionID, struct FGuid& SidegradeID, struct FGuid& OptionID, struct TArray<struct FEntitlementReward> ExpectedRewards, struct TArray<struct FWalletCost> ExpectedCosts, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UnlockItemSidegrade // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e3c1c0
	void UnlockItemProgressV2(struct FGuid& XID, struct FGuid& ItemProgressionDefinitionID, int32_t CurrentItemTier, int32_t ResultItemTier, int32_t ExpectedCost, struct FGuid& CurrencyID, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UnlockItemProgressV2 // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e3be90
	void UnlockItemProgressInternal(struct FGuid& XID, struct FGuid& ItemProgressionDefinitionID, int32_t CurrentItemTier, int32_t ResultItemTier, int32_t ExpectedCost, struct FGuid& CurrencyID, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UnlockItemProgressInternal // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2e3bb60
	void UnlockContractProgress(struct FGuid& XID, struct FGuid& ContractDefinitionID, int32_t TargetLevel, int32_t ExpectedCost, struct FGuid& CurrencyID, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.ContractsManager.UnlockContractProgress // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e3b880
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.ContractsManager.OnBugCommand // (Final|Native|Private) // @ game+0x2e3b1c0
	bool IsWalletSummaryActPointsBalanceEnabled(); // Function ShooterGame.ContractsManager.IsWalletSummaryActPointsBalanceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3b190
	bool IsProgressionReworkEnabled(); // Function ShooterGame.ContractsManager.IsProgressionReworkEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3b160
	bool IsPremiumXPMultiplierEnabled(); // Function ShooterGame.ContractsManager.IsPremiumXPMultiplierEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3b130
	bool IsMainMenuRewardTabEnabled(); // Function ShooterGame.ContractsManager.IsMainMenuRewardTabEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3b100
	bool IsMainMenuConnectionTestingEnabled(); // Function ShooterGame.ContractsManager.IsMainMenuConnectionTestingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3b0d0
	bool IsMainMenuBatteryTestingEnabled(); // Function ShooterGame.ContractsManager.IsMainMenuBatteryTestingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3b0a0
	bool IsEndOfGameActPointsSummaryEnabled(); // Function ShooterGame.ContractsManager.IsEndOfGameActPointsSummaryEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3b070
	void HandleUpdatedContracts(struct FContracts& Contracts); // Function ShooterGame.ContractsManager.HandleUpdatedContracts // (Final|Native|Private|HasOutParms) // @ game+0x2e3af80
	void HandleContractsNotifications(struct FRMSNotification& Notification); // Function ShooterGame.ContractsManager.HandleContractsNotifications // (Final|Native|Private|HasOutParms) // @ game+0x2e3ae60
	struct UContractsModel* GetModel(); // Function ShooterGame.ContractsManager.GetModel // (Final|Native|Public) // @ game+0x2e3ad60
	int32_t GetMainMenuConnectionTestPing(); // Function ShooterGame.ContractsManager.GetMainMenuConnectionTestPing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3aa40
	int32_t GetMainMenuConnectionTestGamepodIndex(); // Function ShooterGame.ContractsManager.GetMainMenuConnectionTestGamepodIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3aa10
	enum class EAresNetworkConnectionType GetMainMenuConnectionTestConnectionType(); // Function ShooterGame.ContractsManager.GetMainMenuConnectionTestConnectionType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3a9e0
	int32_t GetMainMenuBatteryTestLevel(); // Function ShooterGame.ContractsManager.GetMainMenuBatteryTestLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3a9b0
	bool GetMainMenuBatteryTestIsCharging(); // Function ShooterGame.ContractsManager.GetMainMenuBatteryTestIsCharging // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3a980
	struct UContractsManager* GetContractsManager(struct UObject* WorldContextObject); // Function ShooterGame.ContractsManager.GetContractsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e3a890
	void ActivateSpecialContract(struct FGuid& ContractDefinitionID); // Function ShooterGame.ContractsManager.ActivateSpecialContract // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e3a480
};

// Class ShooterGame.ContractModel
// Size: 0x98 (Inherited: 0x30)
struct UContractModel : UObject {
	char pad_30[0x48]; // 0x30(0x48)
	struct FGuid ContractDefinitionID; // 0x78(0x10)
	int32_t CurrentLevel; // 0x88(0x04)
	int32_t CurrentXPTowardsNextLevel; // 0x8c(0x04)
	int32_t TotalXP; // 0x90(0x04)
	char pad_94[0x4]; // 0x94(0x04)

	void SetTotalXP(int32_t XP); // Function ShooterGame.ContractModel.SetTotalXP // (Final|Native|Public) // @ game+0x2e3b7f0
	void SetCurrentXP(int32_t XP); // Function ShooterGame.ContractModel.SetCurrentXP // (Final|Native|Public) // @ game+0x2e3b610
	void SetCurrentLevel(int32_t NewLevel); // Function ShooterGame.ContractModel.SetCurrentLevel // (Final|Native|Public) // @ game+0x2e3b580
	int32_t GetTotalXP(); // Function ShooterGame.ContractModel.GetTotalXP // (Final|Native|Public) // @ game+0x2e3ae40
	int32_t GetCurrentXP(); // Function ShooterGame.ContractModel.GetCurrentXP // (Final|Native|Public) // @ game+0x2e3a940
	int32_t GetCurrentLevel(); // Function ShooterGame.ContractModel.GetCurrentLevel // (Final|Native|Public) // @ game+0x2e3a920
	struct FGuid GetContractDefinitionID(); // Function ShooterGame.ContractModel.GetContractDefinitionID // (Final|Native|Public|HasDefaults|Const) // @ game+0x2e3a7a0
};

// Class ShooterGame.EventModel
// Size: 0x48 (Inherited: 0x30)
struct UEventModel : UObject {
	struct UEventDataAsset* DataAsset; // 0x30(0x08)
	struct FDateTime StartTime; // 0x38(0x08)
	struct FDateTime EndTime; // 0x40(0x08)

	struct FDateTime GetStartTime(); // Function ShooterGame.EventModel.GetStartTime // (Final|Native|Public|HasDefaults) // @ game+0x2e3ae20
	struct FDateTime GetEndTime(); // Function ShooterGame.EventModel.GetEndTime // (Final|Native|Public|HasDefaults) // @ game+0x2e3a960
};

// Class ShooterGame.MissionModel
// Size: 0xe0 (Inherited: 0x30)
struct UMissionModel : UObject {
	char pad_30[0x48]; // 0x30(0x48)
	struct UMissionDataAsset* DataAsset; // 0x78(0x08)
	struct TMap<struct UObjectiveDataAsset*, int32_t> Objectives; // 0x80(0x50)
	struct FDateTime ExpirationTime; // 0xd0(0x08)
	bool bIsComplete; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)

	void SetObjectiveProgress(struct UObjectiveDataAsset* Objective, int32_t Progress); // Function ShooterGame.MissionModel.SetObjectiveProgress // (Final|Native|Public) // @ game+0x2e3b720
	void SetExpirationTime(struct FDateTime NewExpirationTime); // Function ShooterGame.MissionModel.SetExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x2e3b6a0
	int32_t GetObjectiveProgress(struct UObjectiveDataAsset* Objective); // Function ShooterGame.MissionModel.GetObjectiveProgress // (Final|Native|Public) // @ game+0x2e3ad80
};

// Class ShooterGame.ObjectiveDeltaModel
// Size: 0x40 (Inherited: 0x30)
struct UObjectiveDeltaModel : UObject {
	struct UObjectiveDataAsset* Objective; // 0x30(0x08)
	int32_t ProgressBefore; // 0x38(0x04)
	int32_t ProgressAfter; // 0x3c(0x04)
};

// Class ShooterGame.MissionDeltaModel
// Size: 0x90 (Inherited: 0x30)
struct UMissionDeltaModel : UObject {
	struct FGuid MissionID; // 0x30(0x10)
	struct TMap<struct UObjectiveDataAsset*, struct UObjectiveDeltaModel*> Objectives; // 0x40(0x50)
};

// Class ShooterGame.ContractDeltaModel
// Size: 0x38 (Inherited: 0x30)
struct UContractDeltaModel : UObject {
	int32_t TotalXPBefore; // 0x30(0x04)
	int32_t TotalXPAfter; // 0x34(0x04)
};

// Class ShooterGame.ContractMatchResultsModel
// Size: 0x1c8 (Inherited: 0x30)
struct UContractMatchResultsModel : UObject {
	struct FGuid MatchID; // 0x30(0x10)
	struct TMap<struct UMissionDataAsset*, struct UMissionDeltaModel*> MissionDeltas; // 0x40(0x50)
	struct TMap<struct UContractDataAssetV2*, struct UContractDeltaModel*> ContractDeltas; // 0x90(0x50)
	bool CouldProgressMissions; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t GamePlayedXP; // 0xe4(0x04)
	int32_t GameWonXP; // 0xe8(0x04)
	int32_t RoundPlayedXP; // 0xec(0x04)
	int32_t RoundWonXP; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct FContractsXpModifier> Modifiers; // 0xf8(0x10)
	int32_t GamePlayedActPoints; // 0x108(0x04)
	int32_t GameWonActPoints; // 0x10c(0x04)
	int32_t RoundPlayedActPoints; // 0x110(0x04)
	int32_t RoundWonActPoints; // 0x114(0x04)
	struct TArray<struct FContractsXpModifier> ActPointsModifiers; // 0x118(0x10)
	struct TMap<struct FGuid, struct URewardGrantModel*> RewardGrants; // 0x128(0x50)
	struct TMap<struct UMissionDataAsset*, int32_t> MissionsXP; // 0x178(0x50)
};

// Class ShooterGame.ContractsModel
// Size: 0x130 (Inherited: 0x30)
struct UContractsModel : UObject {
	char pad_30[0xc0]; // 0x30(0xc0)
	struct TArray<struct UContractModel*> Contracts; // 0xf0(0x10)
	struct TArray<struct UMissionModel*> Missions; // 0x100(0x10)
	struct TArray<struct UContractMatchResultsModel*> MatchResults; // 0x110(0x10)
	struct UContractModel* ActiveSpecialContract; // 0x120(0x08)
	struct FDateTime WeeklyRefillTime; // 0x128(0x08)

	void SetActiveSpecialContract(struct UContractModel* Contract); // Function ShooterGame.ContractsModel.SetActiveSpecialContract // (Final|Native|Public) // @ game+0x2e3b4f0
	void RemoveMission(struct UMissionDataAsset* DataAsset); // Function ShooterGame.ContractsModel.RemoveMission // (Final|Native|Public) // @ game+0x2e3b460
	void RemoveMatch(struct FGuid MatchID); // Function ShooterGame.ContractsModel.RemoveMatch // (Final|Native|Public|HasDefaults) // @ game+0x2e3b3c0
	void RemoveContract(struct FGuid& ContractDefinitionID); // Function ShooterGame.ContractsModel.RemoveContract // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e3b320
	struct TArray<struct UMissionModel*> GetMissions(); // Function ShooterGame.ContractsModel.GetMissions // (Final|Native|Public|Const) // @ game+0x2e3ac90
	struct UMissionModel* GetMission(struct UMissionDataAsset* DataAsset); // Function ShooterGame.ContractsModel.GetMission // (Final|Native|Public|Const) // @ game+0x2e3abf0
	struct TArray<struct UContractMatchResultsModel*> GetMatchResults(); // Function ShooterGame.ContractsModel.GetMatchResults // (Final|Native|Public|Const) // @ game+0x2e3ab20
	struct UContractMatchResultsModel* GetMatch(struct FGuid MatchID); // Function ShooterGame.ContractsModel.GetMatch // (Final|Native|Public|HasDefaults|Const) // @ game+0x2e3aa70
	struct TArray<struct UContractModel*> GetContracts(); // Function ShooterGame.ContractsModel.GetContracts // (Final|Native|Public|Const) // @ game+0x2e3a7c0
	struct UContractModel* GetContractByDefinitionID(struct FGuid& ContractDefinitionID); // Function ShooterGame.ContractsModel.GetContractByDefinitionID // (Final|Native|Public|HasOutParms|HasDefaults|Const) // @ game+0x2e3a6f0
	struct UContractModel* GetActiveSpecialContract(); // Function ShooterGame.ContractsModel.GetActiveSpecialContract // (Final|Native|Public|Const) // @ game+0x2e3a6d0
	void AddMission(struct UMissionModel* Mission); // Function ShooterGame.ContractsModel.AddMission // (Final|Native|Public) // @ game+0x2e3a640
	void AddMatch(struct UContractMatchResultsModel* Match); // Function ShooterGame.ContractsModel.AddMatch // (Final|Native|Public) // @ game+0x2e3a5b0
	void AddContract(struct UContractModel* Contract); // Function ShooterGame.ContractsModel.AddContract // (Final|Native|Public) // @ game+0x2e3a520
};

// Class ShooterGame.ContractsScreen
// Size: 0x2d8 (Inherited: 0x2c8)
struct UContractsScreen : UDesignableUserWidget {
	struct UContractsViewModel* ViewModel; // 0x2c8(0x08)
	struct UContractsViewController* ViewController; // 0x2d0(0x08)

	struct UContractsViewModel* GetViewModel(); // Function ShooterGame.ContractsScreen.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e493d0
	struct UContractsViewController* GetViewController(); // Function ShooterGame.ContractsScreen.GetViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e493b0
};

// Class ShooterGame.ContractsService
// Size: 0x38 (Inherited: 0x30)
struct UContractsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.ContractsViewController
// Size: 0xc8 (Inherited: 0x80)
struct UContractsViewController : UInitSystem {
	struct UContentIndex* ContentIndex; // 0x80(0x08)
	struct UContentManager* ContentManager; // 0x88(0x08)
	struct UContractsManager* ContractsManager; // 0x90(0x08)
	struct UConfigManager* ConfigManager; // 0x98(0x08)
	struct UMapLoadModel* MapLoadModel; // 0xa0(0x08)
	struct UContractsViewModel* ViewModel; // 0xa8(0x08)
	struct UContractsModel* ContractsModel; // 0xb0(0x08)
	struct UInventoryManager* InventoryManager; // 0xb8(0x08)
	bool bInitializedViewModel; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)

	void UpdateObjectiveProgress(struct UMissionDataAsset* MissionDataAsset, struct UObjectiveDataAsset* ObjectiveDataAsset); // Function ShooterGame.ContractsViewController.UpdateObjectiveProgress // (Final|Native|Protected) // @ game+0x2e4b0a0
	void UpdateIsMissionComplete(struct UMissionDataAsset* MissionDataAsset); // Function ShooterGame.ContractsViewController.UpdateIsMissionComplete // (Final|Native|Protected) // @ game+0x2e4b010
	void UpdateActiveStoryContract(); // Function ShooterGame.ContractsViewController.UpdateActiveStoryContract // (Final|Native|Protected) // @ game+0x2e4aff0
	void UpdateActiveEventContracts(); // Function ShooterGame.ContractsViewController.UpdateActiveEventContracts // (Final|Native|Protected) // @ game+0x2e4afd0
	bool IsActiveSpecialContractNPE(); // Function ShooterGame.ContractsViewController.IsActiveSpecialContractNPE // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e499b0
	void HandleObjectiveUpdate(struct AMission* Mission, struct UObjectiveComponent* Objective); // Function ShooterGame.ContractsViewController.HandleObjectiveUpdate // (Final|Native|Protected) // @ game+0x2e49700
	void HandleMissionStatusUpdate(struct AMission* Mission, enum class EMissionStatus OldStatus, enum class EMissionStatus NewStatus); // Function ShooterGame.ContractsViewController.HandleMissionStatusUpdate // (Final|Native|Protected) // @ game+0x2e495f0
	void HandleMissionAdded(struct AMission* Mission); // Function ShooterGame.ContractsViewController.HandleMissionAdded // (Final|Native|Protected) // @ game+0x2cb4be0
	void HandleMapLoad(); // Function ShooterGame.ContractsViewController.HandleMapLoad // (Final|Native|Protected) // @ game+0x2e495d0
	void HandleActiveSeasonChanged(struct USeasonDataAsset* SeasonDataAsset); // Function ShooterGame.ContractsViewController.HandleActiveSeasonChanged // (Final|Native|Protected) // @ game+0x2e49540
	struct UContractsViewModel* GetViewModel(); // Function ShooterGame.ContractsViewController.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e493f0
	struct FGuid GetNPEContractID(); // Function ShooterGame.ContractsViewController.GetNPEContractID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2e48800
	void FetchContracts(); // Function ShooterGame.ContractsViewController.FetchContracts // (Final|Native|Public|BlueprintCallable) // @ game+0x2e47740
	void ActivateSpecialContract(struct FGuid& ContractDefinitionID); // Function ShooterGame.ContractsViewController.ActivateSpecialContract // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e47370
};

// Class ShooterGame.XpModifierViewModel
// Size: 0x40 (Inherited: 0x30)
struct UXpModifierViewModel : UObject {
	enum class EXPModifier Name; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float Value; // 0x34(0x04)
	bool BaseOnly; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
};

// Class ShooterGame.PremiumContractDetailsViewModel
// Size: 0x68 (Inherited: 0x30)
struct UPremiumContractDetailsViewModel : UObject {
	struct FGuid EntitlementTypeID; // 0x30(0x10)
	struct FGuid EntitlementItemID; // 0x40(0x10)
	struct FGuid CurrencyID; // 0x50(0x10)
	int32_t ExpectedCost; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
};

// Class ShooterGame.ContractLevelViewModel
// Size: 0x70 (Inherited: 0x30)
struct UContractLevelViewModel : UObject {
	struct FMulticastInlineDelegate OnIsCurrentLevelChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnIsLevelCompletedChanged; // 0x40(0x10)
	int32_t LevelNumber; // 0x50(0x04)
	int32_t XPToComplete; // 0x54(0x04)
	struct URewardModel* Reward; // 0x58(0x08)
	bool bIsCurrentLevel; // 0x60(0x01)
	bool bIsLevelCompleted; // 0x61(0x01)
	bool IsPurchasable; // 0x62(0x01)
	char pad_63[0x1]; // 0x63(0x01)
	int32_t PurchaseCost; // 0x64(0x04)
	bool bIsRewardPremium; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)

	void SetIsLevelCompleted(bool NewIsLevelCompleted); // Function ShooterGame.ContractLevelViewModel.SetIsLevelCompleted // (Final|Native|Public) // @ game+0x2e4abf0
	void SetIsCurrentLevel(bool NewIsCurrentLevel); // Function ShooterGame.ContractLevelViewModel.SetIsCurrentLevel // (Final|Native|Public) // @ game+0x2e4aad0
	bool GrantsCharacter(); // Function ShooterGame.ContractLevelViewModel.GrantsCharacter // (Final|Native|Public|Const) // @ game+0x2e49510
	int32_t GetXPToComplete(); // Function ShooterGame.ContractLevelViewModel.GetXPToComplete // (Final|Native|Public|Const) // @ game+0x2e494f0
	struct URewardModel* GetReward(); // Function ShooterGame.ContractLevelViewModel.GetReward // (Final|Native|Public|Const) // @ game+0x2e48a90
	int32_t GetPurchaseCost(); // Function ShooterGame.ContractLevelViewModel.GetPurchaseCost // (Final|Native|Public|Const) // @ game+0x2e48a30
	int32_t GetLevelNumber(); // Function ShooterGame.ContractLevelViewModel.GetLevelNumber // (Final|Native|Public|Const) // @ game+0x2da2d40
	bool GetIsRewardPremium(); // Function ShooterGame.ContractLevelViewModel.GetIsRewardPremium // (Final|Native|Public|Const) // @ game+0x2e48230
	bool GetIsPurchasable(); // Function ShooterGame.ContractLevelViewModel.GetIsPurchasable // (Final|Native|Public|Const) // @ game+0x2e48210
	bool GetIsCurrentLevel(); // Function ShooterGame.ContractLevelViewModel.GetIsCurrentLevel // (Final|Native|Public|Const) // @ game+0x2e481f0
	bool GetIsCompleted(); // Function ShooterGame.ContractLevelViewModel.GetIsCompleted // (Final|Native|Public|Const) // @ game+0x2e481b0
};

// Class ShooterGame.ContractChapterViewModel
// Size: 0x50 (Inherited: 0x30)
struct UContractChapterViewModel : UObject {
	struct URewardGrantModel* FreeChapterRewards; // 0x30(0x08)
	struct TArray<struct UContractLevelViewModel*> Levels; // 0x38(0x10)
	bool bIsEpilogue; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	void SetIsEpilogue(bool isEpilogue); // Function ShooterGame.ContractChapterViewModel.SetIsEpilogue // (Final|Native|Public) // @ game+0x2e4ab60
	void SetFreeChapterReward(struct URewardGrantModel* Rewards); // Function ShooterGame.ContractChapterViewModel.SetFreeChapterReward // (Final|Native|Public) // @ game+0x2e4a730
	struct UContractChapterViewModel* Make(); // Function ShooterGame.ContractChapterViewModel.Make // (Final|Native|Static|Public) // @ game+0x2e49a60
	struct TArray<struct UContractLevelViewModel*> GetLevels(); // Function ShooterGame.ContractChapterViewModel.GetLevels // (Final|Native|Public|Const) // @ game+0x2e48400
	void GetLevelRange(int32_t& From, int32_t& To); // Function ShooterGame.ContractChapterViewModel.GetLevelRange // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48320
	struct UContractLevelViewModel* GetLastLevel(); // Function ShooterGame.ContractChapterViewModel.GetLastLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48250
	bool GetIsEpilogue(); // Function ShooterGame.ContractChapterViewModel.GetIsEpilogue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dc34c0
	struct URewardGrantModel* GetFreeChapterRewards(); // Function ShooterGame.ContractChapterViewModel.GetFreeChapterRewards // (Final|Native|Public|Const) // @ game+0x2e47ec0
	struct UContractLevelViewModel* GetFirstLevel(); // Function ShooterGame.ContractChapterViewModel.GetFirstLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47e90
	void AddLevel(struct UContractLevelViewModel* Level); // Function ShooterGame.ContractChapterViewModel.AddLevel // (Final|Native|Public) // @ game+0x2e47530
};

// Class ShooterGame.ContractViewModel
// Size: 0x130 (Inherited: 0x30)
struct UContractViewModel : UObject {
	struct FMulticastInlineDelegate OnOverallProgressChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnCurrentLevelChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCurrentXPChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnXPRequiredForNextLevelChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnIsCompletedChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnIsActiveChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnIsPremiumOwnedChanged; // 0x90(0x10)
	struct TArray<struct URewardModel*> HighlightedRewards; // 0xa0(0x10)
	struct FGuid ContractDefinitionID; // 0xb0(0x10)
	struct UContractDataAssetV2* ContractDataAssetV2; // 0xc0(0x08)
	struct TArray<struct UContractChapterViewModel*> Chapters; // 0xc8(0x10)
	int32_t CurrentLevel; // 0xd8(0x04)
	int32_t CurrentXP; // 0xdc(0x04)
	enum class EContractType ContractType; // 0xe0(0x01)
	char pad_E1[0x3]; // 0xe1(0x03)
	int32_t XPRequiredForNextLevel; // 0xe4(0x04)
	float OverallProgress; // 0xe8(0x04)
	bool bIsCompleted; // 0xec(0x01)
	bool bIsActive; // 0xed(0x01)
	char pad_EE[0x2]; // 0xee(0x02)
	struct UCurrencyDataAsset* PurchaseCurrency; // 0xf0(0x08)
	bool bHasLockedCharacter; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)
	struct UCharacterDataAsset* RelatedCharacter; // 0x100(0x08)
	bool bIsPremiumOwned; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct UPremiumContractDetailsViewModel* PremiumContractDetailsViewModel; // 0x110(0x08)
	struct UBaseInventoryModel* PremiumContractInventoryModel; // 0x118(0x08)
	char pad_120[0x10]; // 0x120(0x10)

	void SetXPRequiredForNextLevel(int32_t XP); // Function ShooterGame.ContractViewModel.SetXPRequiredForNextLevel // (Final|Native|Public) // @ game+0x2e4af40
	void SetRelatedCharacter(struct UCharacterDataAsset* Character); // Function ShooterGame.ContractViewModel.SetRelatedCharacter // (Final|Native|Public) // @ game+0x2e4ae20
	void SetOverallProgress(float Progress); // Function ShooterGame.ContractViewModel.SetOverallProgress // (Final|Native|Public) // @ game+0x2e4ad10
	void SetIsPremiumOwned(bool IsOwned); // Function ShooterGame.ContractViewModel.SetIsPremiumOwned // (Final|Native|Public) // @ game+0x2e4ac80
	void SetIsCompleted(bool bNewIsCompleted); // Function ShooterGame.ContractViewModel.SetIsCompleted // (Final|Native|Public) // @ game+0x2e4aa40
	void SetIsActive(bool bNewIsActive); // Function ShooterGame.ContractViewModel.SetIsActive // (Final|Native|Public) // @ game+0x2e4a920
	void SetHighlightedRewards(struct TArray<struct URewardModel*> Rewards); // Function ShooterGame.ContractViewModel.SetHighlightedRewards // (Final|Native|Public) // @ game+0x2e4a7c0
	void SetEndTime(struct FDateTime& EndTime); // Function ShooterGame.ContractViewModel.SetEndTime // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e4a540
	void SetCurrentXP(int32_t XP); // Function ShooterGame.ContractViewModel.SetCurrentXP // (Final|Native|Public) // @ game+0x2e4a4b0
	void SetCurrentLevel(int32_t NewLevel); // Function ShooterGame.ContractViewModel.SetCurrentLevel // (Final|Native|Public) // @ game+0x2e4a420
	void RefreshIsOwned(); // Function ShooterGame.ContractViewModel.RefreshIsOwned // (Final|Native|Public) // @ game+0x2e4a110
	struct UContractViewModel* Make(struct FGuid& ContractDefinitionID, struct UContractDataAssetV2* ContractDataAssetV2, enum class EContractType ContractType, struct UCurrencyDataAsset* PurchaseCurrency, struct UPremiumContractDetailsViewModel* PremiumContractDetailsViewModel, struct UBaseInventoryModel* PremiumContractInventoryModel); // Function ShooterGame.ContractViewModel.Make // (Final|Native|Static|Public|HasOutParms|HasDefaults) // @ game+0x2e49c00
	bool HasPurchasableLevels(); // Function ShooterGame.ContractViewModel.HasPurchasableLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49950
	bool HasPremiumTrack(); // Function ShooterGame.ContractViewModel.HasPremiumTrack // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49920
	bool HasLockedCharacter(); // Function ShooterGame.ContractViewModel.HasLockedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49800
	int32_t GetXPPurchaseCost(int32_t FromLevel, int32_t ToLevel); // Function ShooterGame.ContractViewModel.GetXPPurchaseCost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49420
	int32_t GetTotalXP(); // Function ShooterGame.ContractViewModel.GetTotalXP // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e492f0
	void GetStateForXPAmount(int32_t TotalXP, int32_t& Level, int32_t& XP, int32_t& XPToNextLevel, bool& IsComplete); // Function ShooterGame.ContractViewModel.GetStateForXPAmount // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e48e80
	struct TArray<struct URewardModel*> GetRewardsInRange(int32_t FromLevel, int32_t ToLevel, bool IncludeFree, bool IncludePremium); // Function ShooterGame.ContractViewModel.GetRewardsInRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48ab0
	struct UCharacterDataAsset* GetRelatedCharacter(); // Function ShooterGame.ContractViewModel.GetRelatedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48a70
	struct UCurrencyDataAsset* GetPurchaseCurrency(); // Function ShooterGame.ContractViewModel.GetPurchaseCurrency // (Final|Native|Public) // @ game+0x2e48a50
	struct UPremiumContractDetailsViewModel* GetPremiumContentDetailsViewModel(); // Function ShooterGame.ContractViewModel.GetPremiumContentDetailsViewModel // (Final|Native|Public|Const) // @ game+0x2e48a10
	int32_t GetNumLevelsExcludingEpilogue(); // Function ShooterGame.ContractViewModel.GetNumLevelsExcludingEpilogue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48910
	int32_t GetNumLevels(); // Function ShooterGame.ContractViewModel.GetNumLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e488e0
	float GetNormalizedCompletion(int32_t TotalXP); // Function ShooterGame.ContractViewModel.GetNormalizedCompletion // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e48840
	struct UContractLevelViewModel* GetLevel(int32_t LevelIndex); // Function ShooterGame.ContractViewModel.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e48280
	bool GetIsCompleted(); // Function ShooterGame.ContractViewModel.GetIsCompleted // (Final|Native|Public|Const) // @ game+0x2e481d0
	struct TArray<struct URewardModel*> GetHighlightedRewards(); // Function ShooterGame.ContractViewModel.GetHighlightedRewards // (Final|Native|Public|BlueprintCallable) // @ game+0x2e480e0
	bool GetEndTime(struct FDateTime& OutEndTime); // Function ShooterGame.ContractViewModel.GetEndTime // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2e47df0
	float GetCurrentChapterCompletion(); // Function ShooterGame.ContractViewModel.GetCurrentChapterCompletion // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e47dc0
	enum class EContractType GetContractType(); // Function ShooterGame.ContractViewModel.GetContractType // (Final|Native|Public|Const) // @ game+0x2e47cd0
	struct FGuid GetContractDefinitionID(); // Function ShooterGame.ContractViewModel.GetContractDefinitionID // (Final|Native|Public|HasDefaults|Const) // @ game+0x2e47b40
	struct TArray<struct UContractChapterViewModel*> GetChapters(); // Function ShooterGame.ContractViewModel.GetChapters // (Final|Native|Public|Const) // @ game+0x2e47960
	int32_t GetChapterIndexForLevel(int32_t LevelIndex); // Function ShooterGame.ContractViewModel.GetChapterIndexForLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e478c0
	struct UContractChapterViewModel* GetChapter(int32_t ChapterIndex); // Function ShooterGame.ContractViewModel.GetChapter // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e47820
	void AddChapter(struct UContractChapterViewModel* Chapter); // Function ShooterGame.ContractViewModel.AddChapter // (Final|Native|Public) // @ game+0x2e47410
};

// Class ShooterGame.ObjectiveViewModel
// Size: 0x50 (Inherited: 0x30)
struct UObjectiveViewModel : UObject {
	struct FMulticastInlineDelegate OnProgressChanged; // 0x30(0x10)
	struct UObjectiveDataAsset* DataAsset; // 0x40(0x08)
	int32_t Progress; // 0x48(0x04)
	int32_t ProgressToComplete; // 0x4c(0x04)

	void SetProgress(int32_t NewProgress); // Function ShooterGame.ObjectiveViewModel.SetProgress // (Final|Native|Public) // @ game+0x2e4ad90
	struct UObjectiveViewModel* Make(struct UObjectiveDataAsset* DataAsset, int32_t ProgressToComplete); // Function ShooterGame.ObjectiveViewModel.Make // (Final|Native|Static|Public) // @ game+0x2e4a040
};

// Class ShooterGame.MissionViewModel
// Size: 0xb8 (Inherited: 0x30)
struct UMissionViewModel : UObject {
	struct FMulticastInlineDelegate OnIsCompleteChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnExpirationTimeChanged; // 0x40(0x10)
	struct UMissionDataAsset* DataAsset; // 0x50(0x08)
	struct TMap<struct UObjectiveDataAsset*, struct UObjectiveViewModel*> Objectives; // 0x58(0x50)
	struct FDateTime ExpirationTime; // 0xa8(0x08)
	bool bIsComplete; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)

	void SetIsComplete(bool bNewIsComplete); // Function ShooterGame.MissionViewModel.SetIsComplete // (Final|Native|Public) // @ game+0x2e4a9b0
	void SetExpirationTime(struct FDateTime& NewExpirationTime); // Function ShooterGame.MissionViewModel.SetExpirationTime // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e4a6a0
	struct UMissionViewModel* Make(struct UMissionDataAsset* DataAsset, struct FDateTime ExpirationTime); // Function ShooterGame.MissionViewModel.Make // (Final|Native|Static|Public|HasDefaults) // @ game+0x2e49e70
	bool IsComplete(); // Function ShooterGame.MissionViewModel.IsComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e49a10
	bool IsActive(); // Function ShooterGame.MissionViewModel.IsActive // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e49980
	struct UObjectiveViewModel* GetObjective(struct UObjectiveDataAsset* ObjectiveDataAsset); // Function ShooterGame.MissionViewModel.GetObjective // (Final|Native|Public|Const) // @ game+0x2e48940
};

// Class ShooterGame.ObjectiveDeltaViewModel
// Size: 0x40 (Inherited: 0x30)
struct UObjectiveDeltaViewModel : UObject {
	struct UObjectiveDataAsset* DataAsset; // 0x30(0x08)
	int32_t ProgressBefore; // 0x38(0x04)
	int32_t ProgressAfter; // 0x3c(0x04)

	struct UObjectiveDeltaViewModel* Make(struct UObjectiveDataAsset* DataAsset, int32_t ProgressBefore, int32_t ProgressAfter); // Function ShooterGame.ObjectiveDeltaViewModel.Make // (Final|Native|Static|Public) // @ game+0x2e49f40
};

// Class ShooterGame.MissionDeltaViewModel
// Size: 0x98 (Inherited: 0x30)
struct UMissionDeltaViewModel : UObject {
	struct FMulticastInlineDelegate OnIsCompleteChanged; // 0x30(0x10)
	struct UMissionDataAsset* DataAsset; // 0x40(0x08)
	struct TMap<struct UObjectiveDataAsset*, struct UObjectiveDeltaViewModel*> Objectives; // 0x48(0x50)

	struct UMissionDeltaViewModel* Make(struct UMissionDataAsset* DataAsset); // Function ShooterGame.MissionDeltaViewModel.Make // (Final|Native|Static|Public) // @ game+0x2e49de0
	bool IsCompleted(); // Function ShooterGame.MissionDeltaViewModel.IsCompleted // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e49a30
};

// Class ShooterGame.ContractDeltaViewModel
// Size: 0x38 (Inherited: 0x30)
struct UContractDeltaViewModel : UObject {
	int32_t TotalXPBefore; // 0x30(0x04)
	int32_t TotalXPAfter; // 0x34(0x04)

	struct UContractDeltaViewModel* Make(int32_t TotalXPBefore, int32_t TotalXPAfter); // Function ShooterGame.ContractDeltaViewModel.Make // (Final|Native|Static|Public) // @ game+0x2e49a90
};

// Class ShooterGame.ContractMatchResultsViewModel
// Size: 0x1b0 (Inherited: 0x30)
struct UContractMatchResultsViewModel : UObject {
	struct FGuid MatchID; // 0x30(0x10)
	int32_t GamePlayedXP; // 0x40(0x04)
	int32_t GameWonXP; // 0x44(0x04)
	int32_t RoundPlayedXP; // 0x48(0x04)
	int32_t RoundWonXP; // 0x4c(0x04)
	int32_t MissionsXP; // 0x50(0x04)
	float TotalModifierValue; // 0x54(0x04)
	struct TMap<enum class EXPModifier, struct UXpModifierViewModel*> Modifiers; // 0x58(0x50)
	int32_t GamePlayedActPoints; // 0xa8(0x04)
	int32_t GameWonActPoints; // 0xac(0x04)
	int32_t RoundPlayedActPoints; // 0xb0(0x04)
	int32_t RoundWonActPoints; // 0xb4(0x04)
	struct TMap<struct FGuid, struct URewardGrantModel*> ContractRewardGrants; // 0xb8(0x50)
	struct TMap<struct UMissionDataAsset*, struct UMissionDeltaViewModel*> Missions; // 0x108(0x50)
	struct TMap<struct UContractDataAssetV2*, struct UContractDeltaViewModel*> ContractDeltas; // 0x158(0x50)
	bool CouldProgressMissions; // 0x1a8(0x01)
	char pad_1A9[0x7]; // 0x1a9(0x07)

	struct UContractMatchResultsViewModel* Make(struct FGuid MatchID); // Function ShooterGame.ContractMatchResultsViewModel.Make // (Final|Native|Static|Public|HasDefaults) // @ game+0x2e49b60
	bool HasModifier(enum class EXPModifier ModName); // Function ShooterGame.ContractMatchResultsViewModel.HasModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e49830
	int32_t GetTotalXPByModifier(enum class EXPModifier Modifier); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalXPByModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49320
	int32_t GetTotalXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e492c0
	int32_t GetTotalSocialXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalSocialXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49290
	int32_t GetTotalPremiumContractXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalPremiumContractXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49260
	int32_t GetTotalMissionXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalMissionXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e491c0
	int32_t GetTotalMissionXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalMissionXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49190
	int32_t GetTotalLoyaltyXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalLoyaltyXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49160
	int32_t GetTotalGameXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalGameXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e490c0
	int32_t GetTotalGameXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalGameXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49090
	int32_t GetTotalActPoints(); // Function ShooterGame.ContractMatchResultsViewModel.GetTotalActPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e49060
	int32_t GetRoundWonXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundWonXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e48de0
	int32_t GetRoundWonXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundWonXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48db0
	int32_t GetRoundWonActPoints(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundWonActPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48d80
	int32_t GetRoundPlayedXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundPlayedXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e48ce0
	int32_t GetRoundPlayedXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundPlayedXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48cb0
	int32_t GetRoundPlayedActPoints(); // Function ShooterGame.ContractMatchResultsViewModel.GetRoundPlayedActPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48c80
	float GetModifierValueWithoutLoyalty(); // Function ShooterGame.ContractMatchResultsViewModel.GetModifierValueWithoutLoyalty // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e487d0
	float GetModifierValueByName(enum class EXPModifier ModName); // Function ShooterGame.ContractMatchResultsViewModel.GetModifierValueByName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48740
	int32_t GetModifierValueAsPercentage(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetModifierValueAsPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e486b0
	int32_t GetModifiedXPGainedWithoutMissions(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetModifiedXPGainedWithoutMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e48600
	int32_t GetModifiedXPGained(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetModifiedXPGained // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e48550
	int32_t GetGameWonXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetGameWonXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e48040
	int32_t GetGameWonXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetGameWonXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48010
	int32_t GetGameWonActPoints(); // Function ShooterGame.ContractMatchResultsViewModel.GetGameWonActPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47fe0
	int32_t GetGamePlayedXPWithModifier(float ModValue); // Function ShooterGame.ContractMatchResultsViewModel.GetGamePlayedXPWithModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e47f40
	int32_t GetGamePlayedXP(); // Function ShooterGame.ContractMatchResultsViewModel.GetGamePlayedXP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47f10
	int32_t GetGamePlayedActPoints(); // Function ShooterGame.ContractMatchResultsViewModel.GetGamePlayedActPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47ee0
	struct URewardGrantModel* GetContractReward(struct FGuid ContractID); // Function ShooterGame.ContractMatchResultsViewModel.GetContractReward // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2e47b70
};

// Class ShooterGame.ContractsViewModel
// Size: 0x1b8 (Inherited: 0x30)
struct UContractsViewModel : UObject {
	struct FMulticastInlineDelegate OnContractAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnContractRemoved; // 0x40(0x10)
	struct FMulticastInlineDelegate OnMissionAdded; // 0x50(0x10)
	struct FMulticastInlineDelegate OnMissionRemoved; // 0x60(0x10)
	struct FMulticastInlineDelegate OnMatchAdded; // 0x70(0x10)
	struct FMulticastInlineDelegate OnMatchRemoved; // 0x80(0x10)
	struct FMulticastInlineDelegate OnActiveSpecialContractChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnActiveStoryContractChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnEventContractActivated; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnEventContractDeactivated; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnWeeklyRefillTimeChanged; // 0xd0(0x10)
	struct TArray<struct UContractViewModel*> Contracts; // 0xe0(0x10)
	struct TArray<struct UMissionViewModel*> Missions; // 0xf0(0x10)
	struct FDateTime WeeklyRefillTime; // 0x100(0x08)
	struct TMap<struct FGuid, struct UContractMatchResultsViewModel*> MatchResults; // 0x108(0x50)
	struct UContractViewModel* ActiveSpecialContract; // 0x158(0x08)
	struct UContractViewModel* ActiveStoryContract; // 0x160(0x08)
	struct TSet<struct UContractViewModel*> ActiveEventContracts; // 0x168(0x50)

	void SetWeeklyRefillTime(struct FDateTime& NewRefillTime); // Function ShooterGame.ContractsViewModel.SetWeeklyRefillTime // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e4aeb0
	void SetEventContractActive(struct UContractViewModel* Contract, bool bActive); // Function ShooterGame.ContractsViewModel.SetEventContractActive // (Final|Native|Public) // @ game+0x2e4a5d0
	void SetActiveStoryContract(struct UContractViewModel* Contract); // Function ShooterGame.ContractsViewModel.SetActiveStoryContract // (Final|Native|Public) // @ game+0x2e4a390
	void SetActiveSpecialContract(struct UContractViewModel* Contract); // Function ShooterGame.ContractsViewModel.SetActiveSpecialContract // (Final|Native|Public) // @ game+0x2e4a300
	void RemoveMission(struct UMissionDataAsset* DataAsset); // Function ShooterGame.ContractsViewModel.RemoveMission // (Final|Native|Public) // @ game+0x2e4a270
	void RemoveMatchResults(struct FGuid MatchID); // Function ShooterGame.ContractsViewModel.RemoveMatchResults // (Final|Native|Public|HasDefaults) // @ game+0x2e4a1d0
	void RemoveContract(struct FGuid& ID); // Function ShooterGame.ContractsViewModel.RemoveContract // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e4a130
	bool IsAnyCharacterLocked(); // Function ShooterGame.ContractsViewModel.IsAnyCharacterLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e499e0
	bool HasActiveNPEMissions(); // Function ShooterGame.ContractsViewModel.HasActiveNPEMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e497d0
	struct TArray<struct UMissionViewModel*> GetMissions(); // Function ShooterGame.ContractsViewModel.GetMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3a7c0
	struct UContractMatchResultsViewModel* GetMatchResults(struct FString MatchID); // Function ShooterGame.ContractsViewModel.GetMatchResults // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48490
	struct TArray<struct UContractViewModel*> GetContracts(); // Function ShooterGame.ContractsViewModel.GetContracts // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47cf0
	struct UContractViewModel* GetContract(struct FGuid& ID); // Function ShooterGame.ContractsViewModel.GetContract // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2e47a90
	struct UContractViewModel* GetCharacterContract(struct UCharacterDataAsset* Character); // Function ShooterGame.ContractsViewModel.GetCharacterContract // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e479f0
	struct UContractViewModel* GetActiveSpecialContract(); // Function ShooterGame.ContractsViewModel.GetActiveSpecialContract // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e47800
	struct TArray<struct UMissionViewModel*> GetActiveMissions(); // Function ShooterGame.ContractsViewModel.GetActiveMissions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e47760
	bool AreAllSpecialContractsComplete(); // Function ShooterGame.ContractsViewModel.AreAllSpecialContractsComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e47710
	bool AreAllDailiesExpired(); // Function ShooterGame.ContractsViewModel.AreAllDailiesExpired // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e476e0
	void AddMission(struct UMissionViewModel* AddedMission); // Function ShooterGame.ContractsViewModel.AddMission // (Final|Native|Public) // @ game+0x2e47650
	void AddMatchResults(struct UContractMatchResultsViewModel* AddedMatch); // Function ShooterGame.ContractsViewModel.AddMatchResults // (Final|Native|Public) // @ game+0x2e475c0
	void AddContract(struct UContractViewModel* AddedContract); // Function ShooterGame.ContractsViewModel.AddContract // (Final|Native|Public) // @ game+0x2e474a0
};

// Class ShooterGame.ContractUpgradeButton
// Size: 0x2f8 (Inherited: 0x2c8)
struct UContractUpgradeButton : UUserWidget {
	struct FMulticastInlineDelegate OnWalletChanged; // 0x2c8(0x10)
	struct FGuid ContractDefinitionID; // 0x2d8(0x10)
	enum class EContractUpgradeState UpgradeState; // 0x2e8(0x01)
	char pad_2E9[0x3]; // 0x2e9(0x03)
	int32_t UpgradeCost; // 0x2ec(0x04)
	struct UCurrencyDataAsset* PurchaseCurrencyDataAsset; // 0x2f0(0x08)

	void OnWalletUpdated(); // Function ShooterGame.ContractUpgradeButton.OnWalletUpdated // (Final|Native|Protected) // @ game+0x2e52480
	void OnCurrencyBalanceUpdated(int32_t NewBalance); // Function ShooterGame.ContractUpgradeButton.OnCurrencyBalanceUpdated // (Final|Native|Protected) // @ game+0x2e52130
	void Init(struct UContractViewModel* ContractDefinition); // Function ShooterGame.ContractUpgradeButton.Init // (Final|Native|Public|BlueprintCallable) // @ game+0x2e51ec0
};

// Class ShooterGame.CooldownComponent
// Size: 0x108 (Inherited: 0x108)
struct UCooldownComponent : UAutoCountdownTimerComponent {
};

// Class ShooterGame.CopyCrosshairCommandComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UCopyCrosshairCommandComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct UNotificationManager* NotificationManager; // 0xf0(0x08)
};

// Class ShooterGame.CoreGameManager
// Size: 0x2f8 (Inherited: 0x80)
struct UCoreGameManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnCurrentMatchStateUpdated; // 0x98(0x10)
	struct FMulticastInlineDelegate OnCurrentMatchUpdated; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnCurrentMatchTerminatedNotification; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnInstallStatsUpdated; // 0xc8(0x10)
	char pad_D8[0x190]; // 0xd8(0x190)
	struct UConfigManager* ConfigManager; // 0x268(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x270(0x08)
	struct URMSManager* RMSManager; // 0x278(0x08)
	struct URSOManager* RSOManager; // 0x280(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x288(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x290(0x08)
	struct UCoreGameService* CoreGameService; // 0x298(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x2a0(0x08)
	struct FInstallStats InstallStats; // 0x2a8(0x20)
	char pad_2C8[0x20]; // 0x2c8(0x20)
	bool bWasSessionConsistent; // 0x2e8(0x01)
	char pad_2E9[0xf]; // 0x2e9(0x0f)

	bool UnhandledMatchTerminatedNotification(); // Function ShooterGame.CoreGameManager.UnhandledMatchTerminatedNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e52790
	void TestFireCurrentMatchTerminatedNotification(struct FString ReasonMessage); // Function ShooterGame.CoreGameManager.TestFireCurrentMatchTerminatedNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x2d0cd00
	bool RequestDisassociate(struct FDelegate OnCompleted); // Function ShooterGame.CoreGameManager.RequestDisassociate // (Final|Native|Public|BlueprintCallable) // @ game+0x2e52570
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.CoreGameManager.OnBugCommand // (Final|Native|Private) // @ game+0x2e51fb0
	bool IsInstallPercentageEnabled(); // Function ShooterGame.CoreGameManager.IsInstallPercentageEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e51f80
	bool IsCurrentPlayerCoachInCurrentMatch(); // Function ShooterGame.CoreGameManager.IsCurrentPlayerCoachInCurrentMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e51f50
	void HandleLoopStateChange(); // Function ShooterGame.CoreGameManager.HandleLoopStateChange // (Final|Native|Private) // @ game+0x2e51ea0
	struct FString GetMatchTerminatedReason(); // Function ShooterGame.CoreGameManager.GetMatchTerminatedReason // (Final|Native|Public|BlueprintCallable) // @ game+0x2e51de0
	float GetInstallPercentage(); // Function ShooterGame.CoreGameManager.GetInstallPercentage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e51db0
	enum class ECoreGameMatchState GetCurrentMatchState(); // Function ShooterGame.CoreGameManager.GetCurrentMatchState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e51bc0
	bool GetCurrentMatch(struct FCoreGameMatchDTO& Match); // Function ShooterGame.CoreGameManager.GetCurrentMatch // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e51a80
	struct UCoreGameManager* GetCoreGameManager(struct UObject* WorldContextObject); // Function ShooterGame.CoreGameManager.GetCoreGameManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e518f0
	void ClearUnhandledMatchTerminatedNotification(); // Function ShooterGame.CoreGameManager.ClearUnhandledMatchTerminatedNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x2e51780
};

// Class ShooterGame.CoreGameService
// Size: 0x38 (Inherited: 0x30)
struct UCoreGameService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.CorpseExploitationComponent
// Size: 0x120 (Inherited: 0xe8)
struct UCorpseExploitationComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnBecomeExploitable; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnExploited; // 0x100(0x10)
	float TimeOfDeath; // 0x110(0x04)
	bool bCanBeExploited; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	struct UAresGameplayBuff* ExploitedCorpseDebuff; // 0x118(0x08)

	void PawnOwnerDied(struct AShooterCharacter* Owner, struct UDamageResponse* Response); // Function ShooterGame.CorpseExploitationComponent.PawnOwnerDied // (Final|Native|Private) // @ game+0x2e524a0
	void OnRep_CanBeExploited(); // Function ShooterGame.CorpseExploitationComponent.OnRep_CanBeExploited // (Final|Native|Private) // @ game+0x2e52340
	float GetCorpseAge(); // Function ShooterGame.CorpseExploitationComponent.GetCorpseAge // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e51980
	void EnableExploitation(); // Function ShooterGame.CorpseExploitationComponent.EnableExploitation // (Final|Native|Private|BlueprintCallable) // @ game+0x1e6e7b0
	bool CanExploit(); // Function ShooterGame.CorpseExploitationComponent.CanExploit // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb53d0
	bool AuthExploit(); // Function ShooterGame.CorpseExploitationComponent.AuthExploit // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ddf790
};

// Class ShooterGame.CrosshairComponent
// Size: 0x110 (Inherited: 0xe8)
struct UCrosshairComponent : UActorComponent {
	struct UBaseCrosshairHudElement* crosshair; // 0xe8(0x08)
	bool bCanOverrideCrosshairWithPrimaryCustomCrosshair; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct UBaseCrosshairHudElement* PrimaryCustomCrosshair; // 0xf8(0x08)
	bool bOverrideCrosshairIsValid; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct UBaseCrosshairHudElement* OverrideCrosshair; // 0x108(0x08)

	void SetCrosshair(struct UBaseCrosshairHudElement* NewCrosshair); // Function ShooterGame.CrosshairComponent.SetCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x2e52670
	void ResetToDefaultCrosshair(); // Function ShooterGame.CrosshairComponent.ResetToDefaultCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x2e52630
	struct UBaseCrosshairHudElement* GetCrosshair(); // Function ShooterGame.CrosshairComponent.GetCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x2e519b0
};

// Class ShooterGame.CrosshairManager
// Size: 0x2c0 (Inherited: 0x30)
struct UCrosshairManager : UObject {
	struct FMulticastInlineDelegate OnColorUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnSettingsReceived; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
	struct FCrosshairSettings CrosshairSettings; // 0x58(0x130)
	struct FCrosshairSettings ColorAdjustedCrosshairSettings; // 0x188(0x130)
	bool bUseSpectatorCrosshair; // 0x2b8(0x01)
	char pad_2B9[0x7]; // 0x2b9(0x07)

	void UpdateColorAdjustedCrosshairSettings(struct FCrosshairSettings& SourceSettings, struct AAresPlayerStateBase* PlayerState); // Function ShooterGame.CrosshairManager.UpdateColorAdjustedCrosshairSettings // (Final|Native|Private|HasOutParms) // @ game+0x2e527c0
	void SetSpectatorCrosshairEnabled(bool bEnabled); // Function ShooterGame.CrosshairManager.SetSpectatorCrosshairEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2e52700
	void ResetToDefaultValues(); // Function ShooterGame.CrosshairManager.ResetToDefaultValues // (Final|Native|Public|BlueprintCallable) // @ game+0x2e52650
	void RefreshCrosshairSettingsFromSettingsManager(); // Function ShooterGame.CrosshairManager.RefreshCrosshairSettingsFromSettingsManager // (Final|Native|Public|BlueprintCallable) // @ game+0x2e52110
	void OnUseSpectatedCrosshairSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.CrosshairManager.OnUseSpectatedCrosshairSettingChanged // (Final|Native|Private) // @ game+0x2e52360
	void OnCrosshairSettingsChanged(); // Function ShooterGame.CrosshairManager.OnCrosshairSettingsChanged // (Final|Native|Private) // @ game+0x2e52110
	bool GetSpectatorCrosshairEnabled(); // Function ShooterGame.CrosshairManager.GetSpectatorCrosshairEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2e51e70
	struct FCrosshairSettings GetDefaultCrosshairSettings(); // Function ShooterGame.CrosshairManager.GetDefaultCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e51bf0
	struct UCrosshairManager* GetCrosshairManager(struct UObject* WorldContextObject); // Function ShooterGame.CrosshairManager.GetCrosshairManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e519f0
	bool GetAreSettingsEqual(struct FCrosshairSettings& SettingsA, struct FCrosshairSettings& SettingsB); // Function ShooterGame.CrosshairManager.GetAreSettingsEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e517a0
};

// Class ShooterGame.CrosshairPreviewWidgetBase
// Size: 0x2e8 (Inherited: 0x2c8)
struct UCrosshairPreviewWidgetBase : UUserWidget {
	struct UBaseCrosshairHudElement* CrosshairHUDElementClass; // 0x2c8(0x08)
	uint32_t MinErrorOffset; // 0x2d0(0x04)
	uint32_t FiringErrorOffset; // 0x2d4(0x04)
	uint32_t MoveErrorOffset; // 0x2d8(0x04)
	char pad_2DC[0x4]; // 0x2dc(0x04)
	struct UBaseCrosshairHudElement* CrosshairHUDElement; // 0x2e0(0x08)

	void UpdateRenderTarget(struct UCanvas* Canvas); // Function ShooterGame.CrosshairPreviewWidgetBase.UpdateRenderTarget // (Final|Native|Public|BlueprintCallable) // @ game+0x2e52970
	void UpdatePreviewIsZoomed(bool IsZoomed); // Function ShooterGame.CrosshairPreviewWidgetBase.UpdatePreviewIsZoomed // (Final|Native|Public|BlueprintCallable) // @ game+0x2e528e0
};

// Class ShooterGame.CrossWorldUserWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UCrossWorldUserWidget : UUserWidget {
};

// Class ShooterGame.CrouchAimLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchAimLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchAimUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchAimUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CrouchAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.CrouchAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.CrouchLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CrouchFallUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchFallUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CrouchIdleAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchIdleAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.CrouchIdleAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchIdleAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.CrouchTurnLeftLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchTurnLeftLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchTurnRightLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchTurnRightLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchWalkAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchWalkAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.CrouchWalkAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchWalkAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.CrouchWalkLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchWalkLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.CrouchWalkUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UCrouchWalkUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.CueHandlerAnimationConductorNode
// Size: 0x120 (Inherited: 0xa8)
struct UCueHandlerAnimationConductorNode : UAnimationConductorNodeBase {
	struct TScriptInterface<IAnimationConductorNode> InitialNode; // 0xa8(0x10)
	struct TMap<struct FName, struct FCueHandlerAnimationConductorNode_Internal_CueData> CueMap; // 0xb8(0x50)
	struct TArray<struct FCueHandlerAnimationConductorNode_Internal_PendingNodeData> PendingNodes; // 0x108(0x10)
	char pad_118[0x8]; // 0x118(0x08)

	void SetMultipleCues(struct TMap<struct FName, struct FCueHandlerAnimationConductorNode_CueInfo>& InCueMap); // Function ShooterGame.CueHandlerAnimationConductorNode.SetMultipleCues // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e595e0
	void SetInitialNode(struct TScriptInterface<IAnimationConductorNode> NewValue); // Function ShooterGame.CueHandlerAnimationConductorNode.SetInitialNode // (Final|Native|Public|BlueprintCallable) // @ game+0x2e59420
	void SetCueSettings(struct FName CueName, struct FCueHandlerAnimationConductorNode_CueSettings& NewValue); // Function ShooterGame.CueHandlerAnimationConductorNode.SetCueSettings // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e58d40
	void SetCueNode(struct FName CueName, struct TScriptInterface<IAnimationConductorNode> NewValue); // Function ShooterGame.CueHandlerAnimationConductorNode.SetCueNode // (Final|Native|Public|BlueprintCallable) // @ game+0x2e58c40
	void SetCue(struct FName CueName, struct FCueHandlerAnimationConductorNode_CueInfo& NewValue); // Function ShooterGame.CueHandlerAnimationConductorNode.SetCue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e58b40
	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.CueHandlerAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x2e58a50
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.CueHandlerAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x2e58970
	struct UCueHandlerAnimationConductorNode* Create(struct TScriptInterface<IAnimationConductorNode> InitialNode, struct TMap<struct FName, struct FCueHandlerAnimationConductorNode_CueInfo>& CueMap, struct UObject* Outer); // Function ShooterGame.CueHandlerAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e58380
	void ClearCue(struct FName CueName); // Function ShooterGame.CueHandlerAnimationConductorNode.ClearCue // (Final|Native|Public|BlueprintCallable) // @ game+0x2e582e0
	void ClearAllCues(); // Function ShooterGame.CueHandlerAnimationConductorNode.ClearAllCues // (Final|Native|Public|BlueprintCallable) // @ game+0x2e582c0
};

// Class ShooterGame.CurrencyUIData
// Size: 0xc8 (Inherited: 0x90)
struct UCurrencyUIData : UBaseContentUIData {
	struct FText DisplayNameSingular; // 0x90(0x18)
	struct FText DisplayNameSingularAllCaps; // 0xa8(0x18)
	struct UTexture* LargeIcon; // 0xc0(0x08)

	struct FText GetDisplayNameForAmount(int32_t Amount); // Function ShooterGame.CurrencyUIData.GetDisplayNameForAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e58720
	struct FText GetDisplayNameAllCapsForAmount(int32_t Amount); // Function ShooterGame.CurrencyUIData.GetDisplayNameAllCapsForAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e58650
};

// Class ShooterGame.CurrencyDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UCurrencyDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.CustomGameManager
// Size: 0x60 (Inherited: 0x30)
struct UCustomGameManager : UObject {
	struct FMulticastInlineDelegate OnCustomGamesUpdated; // 0x30(0x10)
	struct UPartyService* PartyService; // 0x40(0x08)
	struct UPartyManager* PartyManager; // 0x48(0x08)
	struct UConfigManager* ConfigManager; // 0x50(0x08)
	struct URSOManager* RSOManager; // 0x58(0x08)

	bool SwitchTeam(struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SwitchTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2e5a090
	void StartSoloExperienceV2(enum class ESoloExperienceType SoloExperienceType, struct FString Module, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.StartSoloExperienceV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x2e59ef0
	void StartSoloExperience(enum class ESoloExperienceType SoloExperienceType, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.StartSoloExperience // (Final|Native|Public|BlueprintCallable) // @ game+0x2e59e00
	bool SetUseBots(bool UseBots, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetUseBots // (Final|Native|Public|BlueprintCallable) // @ game+0x2e59cf0
	bool SetTeamForMember(struct FString SubjectToMove, enum class ETeam Team, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetTeamForMember // (Final|Native|Public|BlueprintCallable) // @ game+0x2e59b50
	bool SetTeam(enum class ETeam Team, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2e59a50
	bool SetPlayerModeratorStatus(struct FString Subject, bool ModeratorStatus, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetPlayerModeratorStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x2e598a0
	bool SetPlayerBroadcastHUDStatus(struct FString Subject, bool BroadcastHUDStatus, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetPlayerBroadcastHUDStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x2e596f0
	bool SetMap(struct FString Map, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x2e594c0
	bool SetGameRules(struct TMap<struct FString, struct FString>& GameRules, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetGameRules // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e59290
	bool SetGamePod(struct FString GamePod, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x2e59170
	bool SetGameMode(struct FString GameMode, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetGameMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2e59050
	bool SetCustomGameSettings(struct FCustomGameSettings CustomGameSettings, struct FDelegate CompletedCallback); // Function ShooterGame.CustomGameManager.SetCustomGameSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x2e58e30
	bool IsInitialized(); // Function ShooterGame.CustomGameManager.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e58b10
	bool HasCurrentCustomGame(); // Function ShooterGame.CustomGameManager.HasCurrentCustomGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e58ae0
	void GetTeamPartyMembers(struct FAresParty& AresParty, enum class ETeam Team, struct TArray<struct FAresPartyMember>& OutMembers); // Function ShooterGame.CustomGameManager.GetTeamPartyMembers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e587f0
	struct TArray<struct FName> GetDisabledMaps(); // Function ShooterGame.CustomGameManager.GetDisabledMaps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e585c0
	struct UCustomGameManager* GetCustomGameManager(struct UObject* WorldContextObject); // Function ShooterGame.CustomGameManager.GetCustomGameManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e58530
	void BalanceTeamsV2(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.CustomGameManager.BalanceTeamsV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x2e581a0
};

// Class ShooterGame.CustomGameModel
// Size: 0x508 (Inherited: 0x30)
struct UCustomGameModel : UObject {
	struct FMulticastInlineDelegate OnMapOptionAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMapOptionRemoved; // 0x40(0x10)
	struct FMulticastInlineDelegate OnMapChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnModeOptionAdded; // 0x60(0x10)
	struct FMulticastInlineDelegate OnModeOptionRemoved; // 0x70(0x10)
	struct FMulticastInlineDelegate OnModeChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnGamePodChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamOne; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamOne; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamTwo; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamTwo; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamSpectate; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamSpectate; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamOneCoaches; // 0x100(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamOneCoaches; // 0x110(0x10)
	struct FMulticastInlineDelegate OnPlayerAddedToTeamTwoCoaches; // 0x120(0x10)
	struct FMulticastInlineDelegate OnPlayerRemovedFromTeamTwoCoaches; // 0x130(0x10)
	struct FMulticastInlineDelegate OnMyTeamChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnGamePodOverrideChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnUseBotsChanged; // 0x160(0x10)
	struct TMap<struct FString, struct UMapDataAsset*> MapOptions_Backing; // 0x170(0x50)
	char pad_1C0[0x28]; // 0x1c0(0x28)
	struct FString Map; // 0x1e8(0x10)
	struct TMap<struct FString, struct UGameModeDataAsset*> ModeOptions_Backing; // 0x1f8(0x50)
	char pad_248[0x28]; // 0x248(0x28)
	struct FString Mode; // 0x270(0x10)
	struct FString GamePod; // 0x280(0x10)
	bool UseBots; // 0x290(0x01)
	bool AutobalanceEnabled; // 0x291(0x01)
	char pad_292[0x2]; // 0x292(0x02)
	int32_t AutobalanceMinPlayers; // 0x294(0x04)
	struct FString GamePodOverride; // 0x298(0x10)
	struct FCustomGameModel_TeamBacking Teams_Backing[0x5]; // 0x2a8(0x190)
	char pad_438[0xc8]; // 0x438(0xc8)
	enum class ECustomGameTeam MyTeam; // 0x500(0x01)
	char pad_501[0x7]; // 0x501(0x07)

	void SetAutobalanceMinPlayers(int32_t NewValue); // Function ShooterGame.CustomGameModel.SetAutobalanceMinPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60a70
	bool GetUseBots(); // Function ShooterGame.CustomGameModel.GetUseBots // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e60190
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamTwoCoaches(); // Function ShooterGame.CustomGameModel.GetTeamTwoCoaches // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e60090
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamTwo(); // Function ShooterGame.CustomGameModel.GetTeamTwo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5ff90
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamSpectate(); // Function ShooterGame.CustomGameModel.GetTeamSpectate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5fe90
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamOneCoaches(); // Function ShooterGame.CustomGameModel.GetTeamOneCoaches // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5fd90
	struct TMap<struct FString, struct UPartyPlayerModel*> GetTeamOne(); // Function ShooterGame.CustomGameModel.GetTeamOne // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5fc90
	struct TScriptInterface<IUnorderedMapModel> GetTeamMembersModel(enum class ECustomGameTeam Team); // Function ShooterGame.CustomGameModel.GetTeamMembersModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5fbf0
	enum class ECustomGameTeam GetMyTeam(); // Function ShooterGame.CustomGameModel.GetMyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5fa70
	struct TScriptInterface<IUnorderedMapModel> GetModeOptionsModel(); // Function ShooterGame.CustomGameModel.GetModeOptionsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f900
	struct TMap<struct FString, struct UGameModeDataAsset*> GetModeOptions(); // Function ShooterGame.CustomGameModel.GetModeOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f8c0
	struct FString GetMode(); // Function ShooterGame.CustomGameModel.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f800
	struct TScriptInterface<IUnorderedMapModel> GetMapOptionsModel(); // Function ShooterGame.CustomGameModel.GetMapOptionsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f7c0
	struct TMap<struct FString, struct UMapDataAsset*> GetMapOptions(); // Function ShooterGame.CustomGameModel.GetMapOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f780
	struct FString GetMap(); // Function ShooterGame.CustomGameModel.GetMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f6f0
	struct FString GetGamePodOverride(); // Function ShooterGame.CustomGameModel.GetGamePodOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f440
	struct FString GetGamePod(); // Function ShooterGame.CustomGameModel.GetGamePod // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f3b0
	int32_t GetAutobalanceMinPlayers(); // Function ShooterGame.CustomGameModel.GetAutobalanceMinPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f320
	bool GetAutobalanceEnabled(); // Function ShooterGame.CustomGameModel.GetAutobalanceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f2f0
};

// Class ShooterGame.CustomKillBannerHud
// Size: 0x238 (Inherited: 0xe8)
struct UCustomKillBannerHud : UActorComponent {
	struct FAresKillBannerImage KillImages[0x7]; // 0xe8(0xa8)
	struct FAresKillBannerImage HeadshotKillImages[0x7]; // 0x190(0xa8)
};

// Class ShooterGame.CustomPath
// Size: 0x428 (Inherited: 0x3d0)
struct ACustomPath : AActor {
	struct FMulticastInlineDelegate OnPointAdded; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnInitialPointsAdded; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnPointMoved; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnPathUpdated; // 0x400(0x10)
	struct TArray<struct FVector> Points; // 0x410(0x10)
	struct AActor* AttachedEndPointActor; // 0x420(0x08)

	void OnRep_AttachedEndPointActor(); // Function ShooterGame.CustomPath.OnRep_AttachedEndPointActor // (Final|Native|Private) // @ game+0x2e609b0
	void MulticastUpdatePoint(int32_t PointIndex, struct FVector NewLocation); // Function ShooterGame.CustomPath.MulticastUpdatePoint // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x2e608e0
	void MulticastInitializeFromPoints(struct TArray<struct FVector> InitialPoints); // Function ShooterGame.CustomPath.MulticastInitializeFromPoints // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2e60830
	void MulticastAddPoint(struct FVector NewPoint); // Function ShooterGame.CustomPath.MulticastAddPoint // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x2e607a0
	struct TArray<struct FVector> GetPoints(); // Function ShooterGame.CustomPath.GetPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e5fb80
	struct FVector GetPoint(int32_t Index); // Function ShooterGame.CustomPath.GetPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2e5fad0
	int32_t GetNumPoints(); // Function ShooterGame.CustomPath.GetNumPoints // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e5faa0
	struct FVector GetLastPoint(); // Function ShooterGame.CustomPath.GetLastPoint // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2e5f4d0
	bool FindClosestPointOnPathToPoint(struct FVector& TestPoint, struct FVector& OutClosestPointOnPath, int32_t& OutClosestSegmentStartIndex); // Function ShooterGame.CustomPath.FindClosestPointOnPathToPoint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e5f1b0
	bool FindClosestIntersectionPointWithSegment2D(struct FVector& TestSegmentStart, struct FVector& TestSegmentEnd, struct FVector& OutClosestPointOnPath, int32_t& OutClosestSegmentStartIndex); // Function ShooterGame.CustomPath.FindClosestIntersectionPointWithSegment2D // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e5f010
	void AuthUpdatePoint(int32_t PointIndex, struct FVector& NewLocation); // Function ShooterGame.CustomPath.AuthUpdatePoint // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e5ee10
	void AuthInitializeFromPoints(struct TArray<struct FVector>& InitialPoints); // Function ShooterGame.CustomPath.AuthInitializeFromPoints // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e5ed60
	void AuthAttachEndPointToActor(struct AActor* TargetActor); // Function ShooterGame.CustomPath.AuthAttachEndPointToActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthAddPoint(struct FVector& NewPoint); // Function ShooterGame.CustomPath.AuthAddPoint // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e5ecd0
};

// Class ShooterGame.IgnoreWallPenetrationComponent
// Size: 0x138 (Inherited: 0xe8)
struct UIgnoreWallPenetrationComponent : UActorComponent {
	struct FClassInclusionExclusionFilter ProjectileFilter; // 0xe8(0x50)
};

// Class ShooterGame.CustomWallPenetrationResponseComponent
// Size: 0x138 (Inherited: 0x138)
struct UCustomWallPenetrationResponseComponent : UIgnoreWallPenetrationComponent {

	bool ProjectileShouldIgnoreWallPenetration(struct AActor* Projectile, struct FHitResult& HitResult, bool bExit); // Function ShooterGame.CustomWallPenetrationResponseComponent.ProjectileShouldIgnoreWallPenetration // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.CustomWidgetLayoutData
// Size: 0xf0 (Inherited: 0x30)
struct UCustomWidgetLayoutData : UObject {
	char pad_30[0xc0]; // 0x30(0xc0)

	void SetRootPreset(enum class EWidgetLayoutPresetType InPreset); // Function ShooterGame.CustomWidgetLayoutData.SetRootPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60e80
	void SetModifiedLayoutData(struct FWidgetLayoutPreset& InModifiedLayouData); // Function ShooterGame.CustomWidgetLayoutData.SetModifiedLayoutData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e60b90
	void Save(); // Function ShooterGame.CustomWidgetLayoutData.Save // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60a10
	void RevertModifications(); // Function ShooterGame.CustomWidgetLayoutData.RevertModifications // (Final|Native|Public|BlueprintCallable) // @ game+0x2e609f0
	void Reset(); // Function ShooterGame.CustomWidgetLayoutData.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x2e609d0
	void ModifyLayoutForWidget(struct FString WidgetTag, struct FWidgetLayout& WidgetLayout); // Function ShooterGame.CustomWidgetLayoutData.ModifyLayoutForWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e605e0
	void LoadLayout(struct FString InLayoutName); // Function ShooterGame.CustomWidgetLayoutData.LoadLayout // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60530
	bool IsValid(); // Function ShooterGame.CustomWidgetLayoutData.IsValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e60500
	bool IsDirty(); // Function ShooterGame.CustomWidgetLayoutData.IsDirty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e60220
	enum class EWidgetLayoutPresetType GetRootPreset(); // Function ShooterGame.CustomWidgetLayoutData.GetRootPreset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5fbc0
	struct FWidgetLayoutPreset GetModifiedLayoutData(); // Function ShooterGame.CustomWidgetLayoutData.GetModifiedLayoutData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f940
	struct FString GetLayoutName(); // Function ShooterGame.CustomWidgetLayoutData.GetLayoutName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f6c0
	bool GetLayoutForWidget(struct FString WidgetTag, struct FWidgetLayout& WidgetLayout); // Function ShooterGame.CustomWidgetLayoutData.GetLayoutForWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e5f510
	void ClearLayoutForWidget(struct FString WidgetTag); // Function ShooterGame.CustomWidgetLayoutData.ClearLayoutForWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2e5ef60
	void Clear(); // Function ShooterGame.CustomWidgetLayoutData.Clear // (Final|Native|Public|BlueprintCallable) // @ game+0x2e5ef40
};

// Class ShooterGame.CycleModeRentryTransitionContext
// Size: 0x30 (Inherited: 0x30)
struct UCycleModeRentryTransitionContext : UStateTransitionContext {
};

// Class ShooterGame.CycleModeStateComponent
// Size: 0x2f0 (Inherited: 0x2c8)
struct UCycleModeStateComponent : UScriptStateComponent {
	struct TArray<struct FTriggerInput> CycleModeTriggerInputs; // 0x2c8(0x10)
	float QueueTime; // 0x2d8(0x04)
	float CycleCooldownTime; // 0x2dc(0x04)
	struct UModeComponent* RegisteredModeComponent; // 0x2e0(0x08)
	struct UStateComponent* ScriptReturnState; // 0x2e8(0x08)

	void SwitchModeAndRequestDeferredTick(); // Function ShooterGame.CycleModeStateComponent.SwitchModeAndRequestDeferredTick // (Final|Native|Private) // @ game+0x2e60f90
	void SetReturnState(struct UStateComponent* State); // Function ShooterGame.CycleModeStateComponent.SetReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60d60
	void SetNextState(struct UStateComponent* State); // Function ShooterGame.CycleModeStateComponent.SetNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60cd0
	void SetModeComponent(struct UModeComponent* ModeComponent); // Function ShooterGame.CycleModeStateComponent.SetModeComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60b00
	bool ScriptCanCycleMode(); // Function ShooterGame.CycleModeStateComponent.ScriptCanCycleMode // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2e60a30
	bool IsTriggerInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.CycleModeStateComponent.IsTriggerInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e60360
	bool IsOnCooldown(); // Function ShooterGame.CycleModeStateComponent.IsOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e60260
	bool IsAnyTriggerHeld(); // Function ShooterGame.CycleModeStateComponent.IsAnyTriggerHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e601c0
	struct UModeComponent* GetModeComponent(); // Function ShooterGame.CycleModeStateComponent.GetModeComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f890
	float GetCooldownTimeRemaining(); // Function ShooterGame.CycleModeStateComponent.GetCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f350
	bool CanCycleMode(); // Function ShooterGame.CycleModeStateComponent.CanCycleMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5eee0
};

// Class ShooterGame.InitialZoomLevelContext
// Size: 0x38 (Inherited: 0x30)
struct UInitialZoomLevelContext : UStateTransitionContext {
	int32_t ZoomLevel; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)

	void SetZoomLevel(int32_t InitialZoomLevel); // Function ShooterGame.InitialZoomLevelContext.SetZoomLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60f00
};

// Class ShooterGame.CycleZoomState
// Size: 0x2e8 (Inherited: 0x2c8)
struct UCycleZoomState : UScriptStateComponent {
	struct UZoomManagerComponent* ZoomManagerComponent; // 0x2c8(0x08)
	struct TArray<struct FTriggerInput> ZoomTriggerInputs; // 0x2d0(0x10)
	struct UInitialZoomLevelContext* ZoomLevelContext; // 0x2e0(0x08)

	void SetReturnState(struct UStateComponent* State); // Function ShooterGame.CycleZoomState.SetReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e60df0
	bool IsTriggerInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.CycleZoomState.IsTriggerInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e60430
	bool IsReleaseInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.CycleZoomState.IsReleaseInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e60290
	bool IsOnCooldown(); // Function ShooterGame.CycleZoomState.IsOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9a0
	bool IsAnyTriggerHeld(); // Function ShooterGame.CycleZoomState.IsAnyTriggerHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e601f0
	float GetCooldownTimeRemaining(); // Function ShooterGame.CycleZoomState.GetCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f380
	bool CanZoom(); // Function ShooterGame.CycleZoomState.CanZoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5ef10
};

// Class ShooterGame.DailyTicketManager
// Size: 0x110 (Inherited: 0x80)
struct UDailyTicketManager : UInitSystem {
	struct FMulticastInlineDelegate OnDailyTicketChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnDailyTicketRewardsRedeemed; // 0x90(0x10)
	struct FMulticastInlineDelegate OnDailyTicketRedeemedError; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnDailyTicketUpdateError; // 0xb0(0x10)
	struct URSOManager* RSOManager; // 0xc0(0x08)
	struct URMSManager* RMSManager; // 0xc8(0x08)
	struct UPlatformSessionManager* PlatformSessionManager; // 0xd0(0x08)
	struct UDailyTicketService* DailyTicketService; // 0xd8(0x08)
	struct UDailyTicketModel* DailyTicketModel; // 0xe0(0x08)
	struct UConfigManager* ConfigManager; // 0xe8(0x08)
	char pad_F0[0x20]; // 0xf0(0x20)

	void UpdateDailyTicket(); // Function ShooterGame.DailyTicketManager.UpdateDailyTicket // (Final|Native|Public) // @ game+0x2e67330
	void RefreshTicket(); // Function ShooterGame.DailyTicketManager.RefreshTicket // (Final|Native|Public|BlueprintCallable) // @ game+0x2e67280
	void RedeemTicketRewards(struct FGuid& TicketID, struct TArray<struct FGuid> RewardSlotIDs); // Function ShooterGame.DailyTicketManager.RedeemTicketRewards // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e67120
	void Redeem(struct FRedeemTicketRewardsRequest& Request); // Function ShooterGame.DailyTicketManager.Redeem // (Final|Native|Private|HasOutParms) // @ game+0x2e67060
	void OnDailyTicketUpdateTimeoutComplete(); // Function ShooterGame.DailyTicketManager.OnDailyTicketUpdateTimeoutComplete // (Final|Native|Private) // @ game+0x2e66cf0
	void OnDailyTicketTimerComplete(); // Function ShooterGame.DailyTicketManager.OnDailyTicketTimerComplete // (Final|Native|Private) // @ game+0x2e66cd0
	void OnDailyTicketRefreshConfigChanged(); // Function ShooterGame.DailyTicketManager.OnDailyTicketRefreshConfigChanged // (Final|Native|Private) // @ game+0x2e66cb0
	void OnDailyTicketInvalidateConfigChanged(); // Function ShooterGame.DailyTicketManager.OnDailyTicketInvalidateConfigChanged // (Final|Native|Private) // @ game+0x2e66c90
	bool IsDailyTicketEnabled(); // Function ShooterGame.DailyTicketManager.IsDailyTicketEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66530
	void HandleTicketNotifications(struct FRMSNotification& Notification); // Function ShooterGame.DailyTicketManager.HandleTicketNotifications // (Final|Native|Private|HasOutParms) // @ game+0x2e663c0
	struct UDailyTicketModel* GetModel(); // Function ShooterGame.DailyTicketManager.GetModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e66170
	struct UDailyTicketManager* GetDailyTicketManager(struct UObject* WorldContextObject); // Function ShooterGame.DailyTicketManager.GetDailyTicketManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e66030
};

// Class ShooterGame.DailyTicketRewardSlotModel
// Size: 0x48 (Inherited: 0x30)
struct UDailyTicketRewardSlotModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	bool IsRedeemed; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	bool GetIsRedeemed(); // Function ShooterGame.DailyTicketRewardSlotModel.GetIsRedeemed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66150
	struct FGuid GetID(); // Function ShooterGame.DailyTicketRewardSlotModel.GetID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34680
};

// Class ShooterGame.DailyTicketModel
// Size: 0x90 (Inherited: 0x30)
struct UDailyTicketModel : UObject {
	int64_t Version; // 0x30(0x08)
	struct FDateTime ResetTime; // 0x38(0x08)
	struct FGuid ID; // 0x40(0x10)
	struct TArray<struct UDailyTicketRewardSlotModel*> RewardSlots; // 0x50(0x10)
	struct FTicketResourceSummary Resources; // 0x60(0x03)
	char pad_63[0x5]; // 0x63(0x05)
	struct TArray<struct FDailyTicketMatches> ProcessedMatches; // 0x68(0x10)
	bool bShowDailyLoginModal; // 0x78(0x01)
	bool bRequiresRefresh; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)
	struct TArray<struct FGuid> FailedRedeemSlots; // 0x80(0x10)

	void SetShowDailyLoginModal(bool bShouldShowDailyLoginModal); // Function ShooterGame.DailyTicketModel.SetShowDailyLoginModal // (Final|Native|Public|BlueprintCallable) // @ game+0x2e672a0
	bool IsTicketValid(); // Function ShooterGame.DailyTicketModel.IsTicketValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66560
	void InvalidateTicket(); // Function ShooterGame.DailyTicketModel.InvalidateTicket // (Final|Native|Public|BlueprintCallable) // @ game+0x2e66510
	bool HasFailedRedeemSlots(); // Function ShooterGame.DailyTicketModel.HasFailedRedeemSlots // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e664e0
	bool GetShowDailyLoginModal(); // Function ShooterGame.DailyTicketModel.GetShowDailyLoginModal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66390
	struct TArray<struct UDailyTicketRewardSlotModel*> GetRewardSlots(); // Function ShooterGame.DailyTicketModel.GetRewardSlots // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e66260
	struct FDateTime GetResetTime(); // Function ShooterGame.DailyTicketModel.GetResetTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66220
	float GetRemainingSeconds(); // Function ShooterGame.DailyTicketModel.GetRemainingSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e661f0
	struct FGuid GetID(); // Function ShooterGame.DailyTicketModel.GetID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e346a0
	struct TArray<struct FGuid> GetFailedRedeemSlots(); // Function ShooterGame.DailyTicketModel.GetFailedRedeemSlots // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e660c0
	char GetChargesRemainder(); // Function ShooterGame.DailyTicketModel.GetChargesRemainder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e481b0
	char GetCatchUpCredits(); // Function ShooterGame.DailyTicketModel.GetCatchUpCredits // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48210
	char GetAvailableRedeems(); // Function ShooterGame.DailyTicketModel.GetAvailableRedeems // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e481f0
};

// Class ShooterGame.DailyTicketService
// Size: 0x38 (Inherited: 0x30)
struct UDailyTicketService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.DamageableComponent
// Size: 0x200 (Inherited: 0xe8)
struct UDamageableComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnDamaged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnHealed; // 0x108(0x10)
	struct FMulticastInlineDelegate OnDeath; // 0x118(0x10)
	struct FMulticastInlineDelegate OnPreDeath; // 0x128(0x10)
	struct FMulticastInlineDelegate OnRespawn; // 0x138(0x10)
	struct FMulticastInlineDelegate OnAliveStateChanged; // 0x148(0x10)
	struct FMulticastInlineDelegate OnSectionDestroyed; // 0x158(0x10)
	struct FMulticastInlineDelegate OnSectionDirtied; // 0x168(0x10)
	char pad_178[0x20]; // 0x178(0x20)
	struct TArray<struct UDamageSectionComponent*> DamageSections; // 0x198(0x10)
	bool bCanDie; // 0x1a8(0x01)
	bool bAlive; // 0x1a9(0x01)
	char CachedLifeValid[0x3]; // 0x1aa(0x03)
	char pad_1AD[0x3]; // 0x1ad(0x03)
	struct FHealthValue CachedLife[0x3]; // 0x1b0(0x18)
	char pad_1C8[0x10]; // 0x1c8(0x10)
	struct TArray<struct UDamageSectionComponent*> InitialDamageSections; // 0x1d8(0x10)
	struct TArray<struct FPendingDamageEvent> PendingDamageEvents; // 0x1e8(0x10)
	char pad_1F8[0x8]; // 0x1f8(0x08)

	void RebroadcastSectionDestroyed(struct UDamageSectionComponent* Component, struct UDamageType* DamageTypeClass, struct AController* Instigator, struct AActor* DamageCauser); // Function ShooterGame.DamageableComponent.RebroadcastSectionDestroyed // (Final|Native|Public) // @ game+0x2e66f00
	void OnTemporaryDamageAttributeChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.DamageableComponent.OnTemporaryDamageAttributeChanged // (Final|Native|Protected|HasOutParms) // @ game+0x2e66d30
	void OnRep_Alive(); // Function ShooterGame.DamageableComponent.OnRep_Alive // (Final|Native|Private) // @ game+0x2e66d10
	void NotifySectionDirty(struct UDamageSectionComponent* Section); // Function ShooterGame.DamageableComponent.NotifySectionDirty // (Final|Native|Public|BlueprintCallable) // @ game+0x2e66c00
	void MulticastSectionLifeChange(struct TArray<struct FLifeChangeEvent> LifeChangeEvents, struct FLifeChangeTimestamp LifeChangeTimestamp); // Function ShooterGame.DamageableComponent.MulticastSectionLifeChange // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2e66b00
	void MulticastNotifyHeal(float HealTaken, struct TArray<struct FLifeChangeEvent> LifeChangeBySection, struct AController* EventInstigator, struct APawn* EventInstigatorPawn, struct AActor* HealCauser); // Function ShooterGame.DamageableComponent.MulticastNotifyHeal // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2e66910
	void MulticastNotifyDamage_Radial(struct FNetworkedRadialDamageResponseData responseData, struct FDeathResponse DeathResponse); // Function ShooterGame.DamageableComponent.MulticastNotifyDamage_Radial // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2e667d0
	void MulticastNotifyDamage_Point(struct FNetworkedPointDamageResponseData responseData, struct FDeathResponse DeathResponse); // Function ShooterGame.DamageableComponent.MulticastNotifyDamage_Point // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2e666b0
	void MulticastNotifyDamage_Base(struct FNetworkedDamageResponseData responseData, struct FDeathResponse DeathResponse); // Function ShooterGame.DamageableComponent.MulticastNotifyDamage_Base // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2e66590
	float GetSectionLife(struct UDamageSectionComponent* Component); // Function ShooterGame.DamageableComponent.GetSectionLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e662f0
	float GetRawShield(); // Function ShooterGame.DamageableComponent.GetRawShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e661c0
	float GetRawHealth(); // Function ShooterGame.DamageableComponent.GetRawHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66190
	void AuthRestore(struct AController* EventInstigator, struct AActor* HealCauser, struct UDamageType* DamageType); // Function ShooterGame.DamageableComponent.AuthRestore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3b50
	void AuthOnOwnerEnterRelevancy(struct AActor* OwningActor, struct AAresPlayerController* Viewer, enum class EFoWRelevancyResult Relevance, enum class EFoWRelevancyResult OldRelevance); // Function ShooterGame.DamageableComponent.AuthOnOwnerEnterRelevancy // (Final|Native|Private) // @ game+0x2e65ed0
};

// Class ShooterGame.DamageForwardingActor
// Size: 0x3d0 (Inherited: 0x3d0)
struct ADamageForwardingActor : AActor {
};

// Class ShooterGame.DamageProjectileEffectComponent
// Size: 0x388 (Inherited: 0xf8)
struct UDamageProjectileEffectComponent : UBaseProjectileEffectComponent {
	struct FDamageTuning DamageTuning; // 0xf8(0x228)
	enum class ECauserType DamageCauser; // 0x320(0x01)
	char pad_321[0x7]; // 0x321(0x07)
	struct TSet<struct AActor*> DamagedTargets; // 0x328(0x50)
	struct TArray<struct FAresPointDamageEvent> AppliedDamageEvents; // 0x378(0x10)
};

// Class ShooterGame.DamageSource
// Size: 0x3d0 (Inherited: 0x3d0)
struct ADamageSource : AActor {

	float GetBonusDamage(struct AShooterCharacter* InstigatorCharacter); // Function ShooterGame.DamageSource.GetBonusDamage // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x2e6da30
};

// Class ShooterGame.DangerZonesManager
// Size: 0xe8 (Inherited: 0xe8)
struct UDangerZonesManager : UActorComponent {
};

// Class ShooterGame.DealDamageToTargetsStateComponent
// Size: 0x2d8 (Inherited: 0x2c8)
struct UDealDamageToTargetsStateComponent : UScriptStateComponent {
	float PlayerDamage; // 0x2c8(0x04)
	float NonPlayerDamage; // 0x2cc(0x04)
	struct UDamageType* DamageType; // 0x2d0(0x08)
};

// Class ShooterGame.DebugGraphHudElement
// Size: 0x58 (Inherited: 0x58)
struct UDebugGraphHudElement : UAresHudElement {
};

// Class ShooterGame.DebugCharacterMovementHudElement
// Size: 0x2b0 (Inherited: 0x58)
struct UDebugCharacterMovementHudElement : UDebugGraphHudElement {
	char pad_58[0x10]; // 0x58(0x10)
	struct FGraphStyleParams GraphStyleParams; // 0x68(0x1a0)
	struct FText GraphTitles[0x5]; // 0x208(0x78)
	struct FVector2D SingleGraphDrawOffset; // 0x280(0x08)
	struct FVector2D AxialGraphDrawOffset; // 0x288(0x08)
	float AxialGraphScale; // 0x290(0x04)
	float VelocityDisplayAboveMaxRunSpeedPercent; // 0x294(0x04)
	float VerticalSpaceBetweenAxialGraphs; // 0x298(0x04)
	float JumpCurveMaxHeight; // 0x29c(0x04)
	struct FLinearColor ServerCorrectionCurveColor; // 0x2a0(0x10)
};

// Class ShooterGame.DebugDeathReactionActor
// Size: 0x458 (Inherited: 0x3d0)
struct ADebugDeathReactionActor : AActor {
	char pad_3D0[0x88]; // 0x3d0(0x88)
};

// Class ShooterGame.DebugInputHudElement
// Size: 0x378 (Inherited: 0x58)
struct UDebugInputHudElement : UDebugGraphHudElement {
	struct FGraphStyleParams GraphStyleParams; // 0x58(0x1a0)
	struct FVector2D GraphDrawOffset; // 0x1f8(0x08)
	float CurveTimeLength; // 0x200(0x04)
	float GraphScale; // 0x204(0x04)
	float GraphYMax; // 0x208(0x04)
	struct FFiringTimeDebugTuning FiringTimeDebugTuning; // 0x20c(0x58)
	char pad_264[0x4]; // 0x264(0x04)
	struct AShooterCharacter* PreviousCharacterToDebug; // 0x268(0x08)
	struct AAresEquippable* PreviousEquippableToDebug; // 0x270(0x08)
	char pad_278[0x100]; // 0x278(0x100)

	void OnInputStreamReceived(struct FAresInputStream& InputStream); // Function ShooterGame.DebugInputHudElement.OnInputStreamReceived // (Final|Native|Protected|HasOutParms) // @ game+0x2e6e1f0
	void OnFiringStateShot(struct UFiringStateComponent* FiringState, float SubframeTimeOffset); // Function ShooterGame.DebugInputHudElement.OnFiringStateShot // (Final|Native|Protected) // @ game+0x2e6e120
};

// Class ShooterGame.DebugLogListModelWatcher
// Size: 0x48 (Inherited: 0x48)
struct UDebugLogListModelWatcher : UDebugListModelWatcherBase {

	struct UDebugLogListModelWatcher* Create(struct TScriptInterface<IOrderedListModel> InListModel, struct UObject* Outer); // Function ShooterGame.DebugLogListModelWatcher.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e74f70
};

// Class ShooterGame.DebugNotificationEmitter
// Size: 0x40 (Inherited: 0x30)
struct UDebugNotificationEmitter : UObject {
	char pad_30[0x10]; // 0x30(0x10)

	void HandleActionB(struct UGenericNotification* Notification); // Function ShooterGame.DebugNotificationEmitter.HandleActionB // (Final|Native|Private) // @ game+0x2e75b20
	void HandleActionA(struct UGenericNotification* Notification); // Function ShooterGame.DebugNotificationEmitter.HandleActionA // (Final|Native|Private) // @ game+0x2e75a90
};

// Class ShooterGame.DebugShooterCharacterAnimInstanceHudElement
// Size: 0x1d0 (Inherited: 0x58)
struct UDebugShooterCharacterAnimInstanceHudElement : UDebugGraphHudElement {
	struct UShooterCharacterAnimInstance* AnimInstance; // 0x58(0x08)
	struct TArray<struct FDebugShooterCharacterAnimInstanceGraph> Graphs; // 0x60(0x10)
	struct TArray<struct FDebugShooterCharacterAnimInstanceGraphPage> GraphPages; // 0x70(0x10)
	struct FVector2D AccelerationDrawOffset; // 0x80(0x08)
	float AccelerationRadius; // 0x88(0x04)
	struct FLinearColor AccelerationCircleColor; // 0x8c(0x10)
	float AccelerationCircleLineThickness; // 0x9c(0x04)
	struct FLinearColor AccelerationLineColor; // 0xa0(0x10)
	float AccelerationLineThickness; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FAresHudFontParams AccelerationLabelFontParams; // 0xb8(0x70)
	struct FVector2D VelocityDrawOffset; // 0x128(0x08)
	float VelocityRadius; // 0x130(0x04)
	struct FLinearColor VelocityCircleColor; // 0x134(0x10)
	float VelocityCircleLineThickness; // 0x144(0x04)
	struct FLinearColor VelocityLineColor; // 0x148(0x10)
	float VelocityLineThickness; // 0x158(0x04)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct FAresHudFontParams VelocityLabelFontParams; // 0x160(0x70)
};

// Class ShooterGame.DebugSubscriptionComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UDebugSubscriptionComponent : UActorComponent {
};

// Class ShooterGame.DebugTouchInputHudElement
// Size: 0x3b8 (Inherited: 0x58)
struct UDebugTouchInputHudElement : UDebugGraphHudElement {
	struct FGraphStyleParams InputGraphStyleParams; // 0x58(0x1a0)
	struct FGraphStyleParams CameraGraphStyleParams; // 0x1f8(0x1a0)
	struct FVector2D GraphDrawOffset; // 0x398(0x08)
	float InputGraphScale; // 0x3a0(0x04)
	float CameraGraphScale; // 0x3a4(0x04)
	float InputGraphYMax; // 0x3a8(0x04)
	float CameraGraphYMax; // 0x3ac(0x04)
	float DistanceBetweenGraphs; // 0x3b0(0x04)
	char pad_3B4[0x4]; // 0x3b4(0x04)
};

// Class ShooterGame.DebugWeaponHudElement
// Size: 0x230 (Inherited: 0x58)
struct UDebugWeaponHudElement : UDebugGraphHudElement {
	struct FGraphStyleParams GraphStyleParams; // 0x58(0x1a0)
	struct FVector2D GraphDrawOffset; // 0x1f8(0x08)
	float CurveTimeLength; // 0x200(0x04)
	float GraphScales[0x3]; // 0x204(0x0c)
	float GraphYMaxes[0x3]; // 0x210(0x0c)
	float SpaceBetweenGraphs; // 0x21c(0x04)
	char pad_220[0x10]; // 0x220(0x10)
};

// Class ShooterGame.DecalManager
// Size: 0xa0 (Inherited: 0x30)
struct UDecalManager : UObject {
	struct TArray<struct FDecalEntry> DecalEntryArray; // 0x30(0x10)
	struct TArray<struct FDecalProxyEntry> ProxyEntryArray; // 0x40(0x10)
	struct TMap<struct UMaterialInterface*, struct FDecalList> PooledDecals; // 0x50(0x50)
};

// Class ShooterGame.DeferredOperation
// Size: 0x50 (Inherited: 0x30)
struct UDeferredOperation : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FTimerHandle OperationDeferralTimerHandle; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)

	bool TrySchedule(float MillisecondsToDefer); // Function ShooterGame.DeferredOperation.TrySchedule // (Final|Native|Public) // @ game+0x2e75fe0
	bool IsScheduled(); // Function ShooterGame.DeferredOperation.IsScheduled // (Final|Native|Public) // @ game+0x2e75bb0
	void Cancel(); // Function ShooterGame.DeferredOperation.Cancel // (Final|Native|Public) // @ game+0x2e74ec0
};

// Class ShooterGame.DelayAnimationConductorNode
// Size: 0xb8 (Inherited: 0xa8)
struct UDelayAnimationConductorNode : UAnimationConductorNodeBase {
	char pad_A8[0x10]; // 0xa8(0x10)

	struct UDelayAnimationConductorNode* Create(float Delay, struct UObject* Outer); // Function ShooterGame.DelayAnimationConductorNode.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e75060
};

// Class ShooterGame.DelegateAnimationConductorNode
// Size: 0xe0 (Inherited: 0xa8)
struct UDelegateAnimationConductorNode : UAnimationConductorNodeBase {
	char pad_A8[0x38]; // 0xa8(0x38)

	void SetHandleStartAnimationCallback(struct FDelegate& Delegate); // Function ShooterGame.DelegateAnimationConductorNode.SetHandleStartAnimationCallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e75ea0
	void SetHandleSkipAnimationCallback(struct FDelegate& Delegate); // Function ShooterGame.DelegateAnimationConductorNode.SetHandleSkipAnimationCallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e75de0
	void SetHandleResetAnimationCallback(struct FDelegate& Delegate); // Function ShooterGame.DelegateAnimationConductorNode.SetHandleResetAnimationCallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e75d20
	void SetAsynchronous(bool bNewValue); // Function ShooterGame.DelegateAnimationConductorNode.SetAsynchronous // (Final|Native|Public|BlueprintCallable) // @ game+0x2e75c90
	void HandleResetDynamicDelegate__DelegateSignature(struct UDelegateAnimationConductorNode* Node, enum class EAnimationConductorNodeResetType ResetType); // DelegateFunction ShooterGame.DelegateAnimationConductorNode.HandleResetDynamicDelegate__DelegateSignature // (Public|Delegate) // @ game+0x3520f50
	void FinishNode(); // Function ShooterGame.DelegateAnimationConductorNode.FinishNode // (Final|Native|Public|BlueprintCallable) // @ game+0x2e75530
	struct UDelegateAnimationConductorNode* Create(struct FDelegate& HandleStartAnimationCallback, bool bAsynchronous, struct FDelegate& HandleSkipAnimationCallback, struct FDelegate& HandleResetAnimationCallback, struct UObject* Outer); // Function ShooterGame.DelegateAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e75130
	void BroadcastNewCueEvent(struct FName CueName); // Function ShooterGame.DelegateAnimationConductorNode.BroadcastNewCueEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb4fb0
	void BroadcastCueEvent(struct FAnimationCueSource_CueEventData& EventData); // Function ShooterGame.DelegateAnimationConductorNode.BroadcastCueEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2cb4e10
	void BasicCallbackDynamicDelegate__DelegateSignature(struct UDelegateAnimationConductorNode* Node); // DelegateFunction ShooterGame.DelegateAnimationConductorNode.BasicCallbackDynamicDelegate__DelegateSignature // (Public|Delegate) // @ game+0x3520f50
};

// Class ShooterGame.DirectionalDamageQuery
// Size: 0x30 (Inherited: 0x30)
struct UDirectionalDamageQuery : UInterface {

	struct FVector GetDamageImpactNormal(); // Function ShooterGame.DirectionalDamageQuery.GetDamageImpactNormal // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e755f0
	struct FVector GetDamageImpactLocation(); // Function ShooterGame.DirectionalDamageQuery.GetDamageImpactLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e755a0
	struct FVector GetDamageDirection(); // Function ShooterGame.DirectionalDamageQuery.GetDamageDirection // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e75550
	struct UPrimitiveComponent* GetDamagedComponent(); // Function ShooterGame.DirectionalDamageQuery.GetDamagedComponent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e75690
	struct FName GetDamagedBone(); // Function ShooterGame.DirectionalDamageQuery.GetDamagedBone // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e75640
};

// Class ShooterGame.DisabledAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UDisabledAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.DisarmedComponent
// Size: 0x140 (Inherited: 0xe8)
struct UDisarmedComponent : UActorComponent {
	struct TSoftClassPtr<UObject> DisarmedEquippableEffect; // 0xe8(0x30)
	struct AEffectContainer* LoadedDisarmedEquippableEffect; // 0x118(0x08)
	enum class EEquipSpeed DisarmedUnequipSpeed; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
	struct AShooterCharacter* CharacterOwner; // 0x128(0x08)
	struct UAresGameplayBuff* PreventSwitchingBuff; // 0x130(0x08)
	char pad_138[0x8]; // 0x138(0x08)

	void RemoveDisarmed(); // Function ShooterGame.DisarmedComponent.RemoveDisarmed // (Final|Native|Private) // @ game+0x2e75c70
	void LoadDisarmedEquippableEffect(struct APawn* Pawn); // Function ShooterGame.DisarmedComponent.LoadDisarmedEquippableEffect // (Final|Native|Private) // @ game+0x2e75be0
	void DisarmChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.DisarmedComponent.DisarmChanged // (Final|Native|Private|HasOutParms) // @ game+0x2e75360
	void ControllerChanged(struct AController* OldController); // Function ShooterGame.DisarmedComponent.ControllerChanged // (Final|Native|Private) // @ game+0x2e74ee0
	void AddDisarmed(); // Function ShooterGame.DisarmedComponent.AddDisarmed // (Final|Native|Private) // @ game+0x2e74ea0
};

// Class ShooterGame.DisplayNameManager
// Size: 0x128 (Inherited: 0x80)
struct UDisplayNameManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UDisplayNameService* DisplayNameService; // 0x90(0x08)
	struct UFriendsModel* FriendsModel; // 0x98(0x08)
	struct TMap<struct FString, struct FDisplayName> CachedDisplayNames; // 0xa0(0x50)
	char pad_F0[0x38]; // 0xf0(0x38)

	void GetDisplayNameWithServiceFallback(struct FString Subject, struct FDelegate& OnSuccess); // Function ShooterGame.DisplayNameManager.GetDisplayNameWithServiceFallback // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e75940
	struct UDisplayNameManager* GetDisplayNameManager(struct UObject* WorldContextObject); // Function ShooterGame.DisplayNameManager.GetDisplayNameManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e758b0
	struct FDisplayName GetDisplayName(struct FString Subject); // Function ShooterGame.DisplayNameManager.GetDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x2e756d0
};

// Class ShooterGame.DisplayNameService
// Size: 0x38 (Inherited: 0x30)
struct UDisplayNameService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.DPIScaleOverrider
// Size: 0x178 (Inherited: 0x160)
struct UDPIScaleOverrider : UPanelWidget {
	float MaxDPIScaleForPhysicalScreenSize; // 0x160(0x04)
	char pad_164[0x14]; // 0x164(0x14)

	float GetScaleDownFactor(); // Function ShooterGame.DPIScaleOverrider.GetScaleDownFactor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e75a60
};

// Class ShooterGame.DPIScaleOverriderSlot
// Size: 0x50 (Inherited: 0x40)
struct UDPIScaleOverriderSlot : UPanelSlot {
	char pad_40[0x10]; // 0x40(0x10)
};

// Class ShooterGame.DropInLoadingManager
// Size: 0x88 (Inherited: 0x80)
struct UDropInLoadingManager : UInitSystem {
	struct UPreloadManager* PreloadManager; // 0x80(0x08)
};

// Class ShooterGame.DropInManagerComponent
// Size: 0x128 (Inherited: 0xe8)
struct UDropInManagerComponent : UActorComponent {
	bool EnableDropIn; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct FMulticastInlineDelegate OnVacanciesOpenedForTeam; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnCloseAllVacancies; // 0x100(0x10)
	struct UDropInRequestListener* DropInRequestListener; // 0x110(0x08)
	struct TArray<struct FDropInPlayerLoadingState> DropInPlayerLoadingStates; // 0x118(0x10)

	void OnJoinPlayersRequestReceived(struct FMegapacketPlayer& MegapacketPlayer); // Function ShooterGame.DropInManagerComponent.OnJoinPlayersRequestReceived // (Final|Native|Private|HasOutParms) // @ game+0x2e7ed40
	void OnGameModePostLoginEvent(struct AGameModeBase* GameMode, struct APlayerController* PlayerController); // Function ShooterGame.DropInManagerComponent.OnGameModePostLoginEvent // (Final|Native|Private) // @ game+0x2cc3bd0
	void OnClientConnectionStatusChanged(struct AAresPlayerStateBase* PlayerState, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.DropInManagerComponent.OnClientConnectionStatusChanged // (Final|Native|Private) // @ game+0x2cb4c70
};

// Class ShooterGame.DropInRequestListener
// Size: 0x90 (Inherited: 0x30)
struct UDropInRequestListener : UObject {
	char pad_30[0x60]; // 0x30(0x60)
};

// Class ShooterGame.PlayerSpawner
// Size: 0x30 (Inherited: 0x30)
struct UPlayerSpawner : UObject {
};

// Class ShooterGame.DynamicLocationPlayerSpawner
// Size: 0x48 (Inherited: 0x30)
struct UDynamicLocationPlayerSpawner : UPlayerSpawner {
	struct FVector Location; // 0x30(0x0c)
	struct FRotator Rotation; // 0x3c(0x0c)

	bool SetDesiredLocationAndRotation(struct FVector DesiredLocation, struct FRotator DesiredRotation); // Function ShooterGame.DynamicLocationPlayerSpawner.SetDesiredLocationAndRotation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2e7f960
};

// Class ShooterGame.ShooterTeamStart
// Size: 0x440 (Inherited: 0x408)
struct AShooterTeamStart : APlayerStart {
	struct UBombTeamComponent* TeamComponent; // 0x408(0x08)
	struct UTeamRoleComponent* RoleComponent; // 0x410(0x08)
	int32_t SpawnSet; // 0x418(0x04)
	char bDisabledSpawn : 1; // 0x41c(0x01)
	char pad_41C_1 : 7; // 0x41c(0x01)
	char pad_41D[0x3]; // 0x41d(0x03)
	bool bUseForInitialSpawn; // 0x420(0x01)
	char pad_421[0x7]; // 0x421(0x07)
	struct TArray<float> AdditionalSpawnRotations; // 0x428(0x10)
	enum class ESpawnRestriction SpawnRestriction; // 0x438(0x01)
	char pad_439[0x7]; // 0x439(0x07)
};

// Class ShooterGame.DynamicRespawnPoint
// Size: 0x448 (Inherited: 0x440)
struct ADynamicRespawnPoint : AShooterTeamStart {
	struct AShooterPlayerState* PlayerState; // 0x440(0x08)

	void Tick(float DeltaSeconds); // Function ShooterGame.DynamicRespawnPoint.Tick // (Final|Native|Private) // @ game+0x2cee5e0
	void AuthSetPlayerState(struct AShooterPlayerState* NewPlayerState); // Function ShooterGame.DynamicRespawnPoint.AuthSetPlayerState // (Final|Native|Public) // @ game+0x2cb4be0
};

// Class ShooterGame.EditableReward
// Size: 0x38 (Inherited: 0x30)
struct UEditableReward : UObject {
	bool bHighlighted; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class ShooterGame.EditableRewardCharacter
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardCharacter : UEditableReward {
	struct TSoftClassPtr<UObject> Character; // 0x38(0x30)
};

// Class ShooterGame.EditableRewardCurrency
// Size: 0x70 (Inherited: 0x38)
struct UEditableRewardCurrency : UEditableReward {
	struct TSoftClassPtr<UObject> Currency; // 0x38(0x30)
	uint64_t Amount; // 0x68(0x08)
};

// Class ShooterGame.EditableRewardEquippableCharmLevel
// Size: 0x70 (Inherited: 0x38)
struct UEditableRewardEquippableCharmLevel : UEditableReward {
	struct TSoftClassPtr<UObject> EquippableCharmLevel; // 0x38(0x30)
	uint64_t Amount; // 0x68(0x08)
};

// Class ShooterGame.EditableRewardEquippableSkinLevel
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardEquippableSkinLevel : UEditableReward {
	struct TSoftClassPtr<UObject> EquippableSkinLevel; // 0x38(0x30)
};

// Class ShooterGame.EditableRewardPlayerCard
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardPlayerCard : UEditableReward {
	struct TSoftClassPtr<UObject> PlayerCard; // 0x38(0x30)
};

// Class ShooterGame.EditableRewardPlayerTitle
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardPlayerTitle : UEditableReward {
	struct TSoftClassPtr<UObject> Title; // 0x38(0x30)
};

// Class ShooterGame.EditableRewardSpray
// Size: 0x68 (Inherited: 0x38)
struct UEditableRewardSpray : UEditableReward {
	struct TSoftClassPtr<UObject> Spray; // 0x38(0x30)
};

// Class ShooterGame.UserActionBase
// Size: 0x58 (Inherited: 0x30)
struct UUserActionBase : UObject {
	char pad_30[0x28]; // 0x30(0x28)

	void BroadcastOnActionStateChanged(); // Function ShooterGame.UserActionBase.BroadcastOnActionStateChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ff3340
	void BroadcastOnActionDisplayInfoChanged(); // Function ShooterGame.UserActionBase.BroadcastOnActionDisplayInfoChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ff3360
};

// Class ShooterGame.EditableUserActionBase
// Size: 0xa8 (Inherited: 0x58)
struct UEditableUserActionBase : UUserActionBase {
	struct FUserActionDisplayInfo ActionDisplayInfo; // 0x58(0x48)
	enum class EUserActionState ActionState; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
};

// Class ShooterGame.EditorOnlyComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UEditorOnlyComponent : UActorComponent {
};

// Class ShooterGame.FXCTypePool
// Size: 0x58 (Inherited: 0x30)
struct UFXCTypePool : UObject {
	struct UObject* EffectClass; // 0x30(0x08)
	struct TArray<struct FFreePooledEffect> Effects; // 0x38(0x10)
	int32_t StartNum; // 0x48(0x04)
	int32_t MaxConcurrentEffects; // 0x4c(0x04)
	int32_t ConcurrentEffects; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
};

// Class ShooterGame.EffectComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UEffectComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bCosmeticEffect; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)

	void UpdateEffectPerspective(float CurrentTime, bool FirstPerson); // Function ShooterGame.EffectComponent.UpdateEffectPerspective // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void StopEffect(enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectComponent.StopEffect // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void StartEffect(struct AActor* Target, struct UObject* Context, float StartTime, bool FirstPerson); // Function ShooterGame.EffectComponent.StartEffect // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void ResetEffect(); // Function ShooterGame.EffectComponent.ResetEffect // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void K2_OnAssetsLoaded(int32_t AssetTypes); // Function ShooterGame.EffectComponent.K2_OnAssetsLoaded // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void K2_GetPreloadAssetPaths(int32_t AssetTypes, struct TArray<struct FSoftObjectPath>& AssetPathsToPreload); // Function ShooterGame.EffectComponent.K2_GetPreloadAssetPaths // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	struct FEffectData GetEffectData(); // Function ShooterGame.EffectComponent.GetEffectData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e7dfc0
	void EffectDataUpdated(); // Function ShooterGame.EffectComponent.EffectDataUpdated // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool CurrentPerspectiveIsFirstPerson(); // Function ShooterGame.EffectComponent.CurrentPerspectiveIsFirstPerson // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb53d0
	void AddTailTime(float TailTime); // Function ShooterGame.EffectComponent.AddTailTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2e7dd50
};

// Class ShooterGame.EffectManagerComponent
// Size: 0x178 (Inherited: 0xe8)
struct UEffectManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bDeferActiveEffects; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct TArray<struct FActiveEffectInfo> PendingEffects; // 0xf8(0x10)
	struct TArray<struct FPendingStartEffect> PendingStartEffects; // 0x108(0x10)
	struct TArray<struct FPendingStopEffect> PendingStopEffects; // 0x118(0x10)
	struct TArray<struct FActiveEffectInfo> ServerActiveEffects; // 0x128(0x10)
	struct TArray<struct FActiveEffectInfo> ClientActiveEffects; // 0x138(0x10)
	char pad_148[0x18]; // 0x148(0x18)
	struct TArray<struct FPendingReplicationEffect> EffectsPendingReplication; // 0x160(0x10)
	char pad_170[0x8]; // 0x170(0x08)

	void StopContinuousEffectsOfType(struct AEffectContainer* EffectContainer, enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectManagerComponent.StopContinuousEffectsOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x2e7fb90
	void StopContinuousEffect(struct FEffectID EffectID, enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectManagerComponent.StopContinuousEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2e7faa0
	void StartDeferredEffects(); // Function ShooterGame.EffectManagerComponent.StartDeferredEffects // (Native|Protected) // @ game+0x2e7fa50
	void ReplayRecordOneShotEffect(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, bool bLocalOnly, float Timestamp, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectManagerComponent.ReplayRecordOneShotEffect // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x2e7f630
	void ReplayRecordContinuousEffect(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, bool bLocalOnly, bool bTransient, float Timestamp, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectManagerComponent.ReplayRecordContinuousEffect // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x2e7f2a0
	void PreMovementUpdate(float Timestamp); // Function ShooterGame.EffectManagerComponent.PreMovementUpdate // (Final|Native|Public) // @ game+0x2e7f220
	void PostMovementUpdate(float Timestamp); // Function ShooterGame.EffectManagerComponent.PostMovementUpdate // (Final|Native|Public) // @ game+0x2e7f1a0
	void OnStopBeingRelevant(struct AActor* OwningActor); // Function ShooterGame.EffectManagerComponent.OnStopBeingRelevant // (Final|Native|Private) // @ game+0x2e7eff0
	void OnServerLeaveFoW(struct AActor* OwningActor, struct AAresPlayerController* Viewer, enum class EFoWRelevancyResult Relevance, enum class EFoWRelevancyResult OldRelevance); // Function ShooterGame.EffectManagerComponent.OnServerLeaveFoW // (Final|Native|Private) // @ game+0x2e7ee90
	void OnBecomeRelevant(struct AActor* OwningActor); // Function ShooterGame.EffectManagerComponent.OnBecomeRelevant // (Final|Native|Private) // @ game+0x2e7ecb0
	void MulticastUpdateContinuousEffect(struct FEffectID EffectID, struct FEffectData EffectData, struct APlayerController* ClientControllerThatTriggered); // Function ShooterGame.EffectManagerComponent.MulticastUpdateContinuousEffect // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2e7eae0
	void MulticastStopContinuousEffect(struct FEffectID EffectID, struct APlayerController* ClientControllerThatTriggered, enum class EStopEffectType StopEffectType, float StopMovementTime); // Function ShooterGame.EffectManagerComponent.MulticastStopContinuousEffect // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2e7e960
	void MulticastPlayOneShotEffect(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FTransform Transform, struct FName AttachSocket, struct APlayerController* ClientControllerThatTriggered, float StartMovementTime, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectManagerComponent.MulticastPlayOneShotEffect // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x2e7e5f0
	void MulticastPlayContinuousEffect(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FTransform Transform, struct FName AttachSocket, struct FEffectID EffectID, struct APlayerController* ClientControllerThatTriggered, float StartMovementTime, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectManagerComponent.MulticastPlayContinuousEffect // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x2e7e220
	bool HasActiveEffectOfType(struct AEffectContainer* EffectContainer); // Function ShooterGame.EffectManagerComponent.HasActiveEffectOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e7e030
	void ClearExpiredTimer(struct FEffectID EffectID); // Function ShooterGame.EffectManagerComponent.ClearExpiredTimer // (Final|Native|Private) // @ game+0x2e7ddd0
};

// Class ShooterGame.EffectPoolManagerComponent
// Size: 0x140 (Inherited: 0xe8)
struct UEffectPoolManagerComponent : UActorComponent {
	struct TMap<struct AEffectContainer*, struct UFXCTypePool*> FreePooledEffects; // 0xe8(0x50)
	char pad_138[0x8]; // 0x138(0x08)
};

// Class ShooterGame.EffectsBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UEffectsBlueprintLibrary : UBlueprintFunctionLibrary {

	void UpdateContinuousEffect(struct AActor* AttachToActor, struct UObject* WorldContextObject, struct FEffectID EffectID, struct FEffectData EffectData); // Function ShooterGame.EffectsBlueprintLibrary.UpdateContinuousEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e88210
	void StopContinuousEffect(struct AActor* AttachToActor, struct UObject* WorldContextObject, struct FEffectID EffectID, enum class EStopEffectType StopEffectType); // Function ShooterGame.EffectsBlueprintLibrary.StopContinuousEffect // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e880b0
	void SetEffectToWaitOnReplication(struct FEffectData& EffectData, struct AActor* ActorToWaitOn); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectToWaitOnReplication // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e87f50
	void SetEffectData_Vector(struct FEffectData& EffectData, struct FGameplayTag Name, struct FVector Vector); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e87d90
	void SetEffectData_Text(struct FEffectData& EffectData, struct FGameplayTag Name, struct FText Text); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Text // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e87bb0
	void SetEffectData_Object(struct FEffectData& EffectData, struct FGameplayTag Name, struct UObject* Object); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Object // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e87a00
	void SetEffectData_Int32(struct FEffectData& EffectData, struct FGameplayTag Name, int32_t Value); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Int32 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e87850
	void SetEffectData_Float(struct FEffectData& EffectData, struct FGameplayTag Name, float Value); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Float // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e876a0
	void SetEffectData_Class(struct FEffectData& EffectData, struct FGameplayTag Name, struct TSoftClassPtr<UObject> Class); // Function ShooterGame.EffectsBlueprintLibrary.SetEffectData_Class // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e874a0
	void PlayOneShotEffect_Blueprint(struct TArray<struct APlayerController*>& ExcludedControllers, struct AEffectContainer* EffectContainer, struct AActor* AttachToActor, struct UObject* EffectContext, struct FEffectData EffectData, struct UObject* WorldContextObject, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, bool bLocalOnly, enum class EAresAlliance AllianceFilter, bool bIsCosmetic, bool bShouldRecordToReplay); // Function ShooterGame.EffectsBlueprintLibrary.PlayOneShotEffect_Blueprint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e86fd0
	void PlayImpactEffect(struct UObject* WorldContextObject, struct AEffectContainer* ImpactEffect, struct FHitResult& Impact, struct AAresEquippable* AttackingWeapon); // Function ShooterGame.EffectsBlueprintLibrary.PlayImpactEffect // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e86e40
	struct FEffectID PlayContinuousEffect(struct AEffectContainer* EffectContainer, struct AActor* AttachToActor, struct UObject* EffectContext, struct FEffectData EffectData, struct UObject* WorldContextObject, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, bool bLocalOnly, enum class EAresAlliance AllianceFilter, bool bIsCosmetic, bool bShouldRecordToReplay); // Function ShooterGame.EffectsBlueprintLibrary.PlayContinuousEffect // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2e869c0
	struct FEffectID PlayClientSimulatedEffect(struct AController* ClientController, struct AEffectContainer* EffectContainer, struct AActor* AttachToActor, struct UObject* EffectContext, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, struct FName AttachSocket, enum class EAresAlliance AllianceFilter); // Function ShooterGame.EffectsBlueprintLibrary.PlayClientSimulatedEffect // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x2e86620
	struct FEffectData MakeEffectData(); // Function ShooterGame.EffectsBlueprintLibrary.MakeEffectData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e85d50
	bool ImpactEffectIsVisible(struct UObject* WorldContextObject, struct AActor* InstigatingActor, struct FVector& ImpactPoint); // Function ShooterGame.EffectsBlueprintLibrary.ImpactEffectIsVisible // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2e85b20
	bool HasActiveEffectOfType(struct AActor* AttachToActor, struct UObject* WorldContextObject, struct AEffectContainer* EffectContainer); // Function ShooterGame.EffectsBlueprintLibrary.HasActiveEffectOfType // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e85a20
	void GetSurfaceTypes(struct UPhysicalMaterial* Material, enum class EAresSurfaceType& ParticleSurface, enum class EAresSurfaceType& AudioSurface); // Function ShooterGame.EffectsBlueprintLibrary.GetSurfaceTypes // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e85900
	struct FHitResult GetHitResultFromEffectData(struct AEffectContainer* Effect); // Function ShooterGame.EffectsBlueprintLibrary.GetHitResultFromEffectData // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2e85800
	struct FVector GetEffectData_Vector(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Vector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2e85670
	struct FText GetEffectData_Text(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Text // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e854c0
	struct UObject* GetEffectData_Object(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Object // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e85340
	int32_t GetEffectData_Int32(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Int32 // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e851c0
	float GetEffectData_Float(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Float // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e85040
	struct TSoftClassPtr<UObject> GetEffectData_Class(struct FEffectData& EffectData, struct FGameplayTag Name); // Function ShooterGame.EffectsBlueprintLibrary.GetEffectData_Class // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2e84e80
	struct UDecalComponent* CreateDecalAtHit(struct UObject* WorldContextObject, struct FDecalData& DecalData, struct FHitResult& Hit, enum class ECreateDecalOptions Options); // Function ShooterGame.EffectsBlueprintLibrary.CreateDecalAtHit // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e84bd0
	void AddHitResultToEffectInfo(struct FEffectData& EffectData, struct FHitResult& Hit); // Function ShooterGame.EffectsBlueprintLibrary.AddHitResultToEffectInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2e84a20
};

// Class ShooterGame.EjectablesComponent
// Size: 0x110 (Inherited: 0xe8)
struct UEjectablesComponent : UActorComponent {
	struct TArray<struct FName> QueuedEjectableNamesToCreate; // 0xe8(0x10)
	struct TArray<struct FWeaponEjectable> Ejectables; // 0xf8(0x10)
	bool bHasPendingPrespawns; // 0x108(0x01)
	bool bHasEjectablesUsing1PSocketVelocity; // 0x109(0x01)
	bool bIsViewTarget; // 0x10a(0x01)
	bool bIsEquipped; // 0x10b(0x01)
	char pad_10C[0x4]; // 0x10c(0x04)

	void OverrideEjectableMesh(struct FName EjectableName, struct UStaticMesh* OverrideMesh1P, struct UStaticMesh* OverrideMesh3P); // Function ShooterGame.EjectablesComponent.OverrideEjectableMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x2e864f0
	void OverrideEjectableMaterial(struct FName EjectableName, struct UMaterialInterface* OverrideMaterial1P, struct UMaterialInterface* OverrideMaterial3P); // Function ShooterGame.EjectablesComponent.OverrideEjectableMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2e863c0
	void OverrideEjectable3pMesh(struct FName EjectableName, struct UStaticMesh* OverrideMesh); // Function ShooterGame.EjectablesComponent.OverrideEjectable3pMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x2e86210
	void OverrideEjectable3pMaterial(struct FName EjectableName, struct UMaterialInterface* OverrideMaterial); // Function ShooterGame.EjectablesComponent.OverrideEjectable3pMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2e86120
	void OverrideEjectable1pMesh(struct FName EjectableName, struct UStaticMesh* OverrideMesh); // Function ShooterGame.EjectablesComponent.OverrideEjectable1pMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x2e86030
	void OverrideEjectable1pMaterial(struct FName EjectableName, struct UMaterialInterface* OverrideMaterial); // Function ShooterGame.EjectablesComponent.OverrideEjectable1pMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2e85f40
	void OverrideEjectable(struct FWeaponEjectable& EjectableOverride); // Function ShooterGame.EjectablesComponent.OverrideEjectable // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e86300
	void OnUnequipped(); // Function ShooterGame.EjectablesComponent.OnUnequipped // (Final|Native|Protected) // @ game+0x2e85f20
	void OnEquipped(); // Function ShooterGame.EjectablesComponent.OnEquipped // (Final|Native|Protected) // @ game+0x2e85f00
	void OnEndViewTarget(struct APlayerController* PC); // Function ShooterGame.EjectablesComponent.OnEndViewTarget // (Final|Native|Protected) // @ game+0x2e85e70
	void OnBecomeViewTarget(struct APlayerController* PC); // Function ShooterGame.EjectablesComponent.OnBecomeViewTarget // (Final|Native|Protected) // @ game+0x2e85de0
	void EjectEjectable(struct FName EjectableName); // Function ShooterGame.EjectablesComponent.EjectEjectable // (Final|Native|Public|BlueprintCallable) // @ game+0x2e84dc0
};

// Class ShooterGame.EmojiMapping
// Size: 0x80 (Inherited: 0x30)
struct UEmojiMapping : UObject {
	struct TMap<struct FName, struct FEmojiEntry> EmojiMap; // 0x30(0x50)
};

// Class ShooterGame.EmojiDecorator
// Size: 0x38 (Inherited: 0x38)
struct UEmojiDecorator : URichTextBlockImageDecorator {
};

// Class ShooterGame.EngagementScreenWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct UEngagementScreenWidget : UUserWidget {
	char pad_2C8[0x10]; // 0x2c8(0x10)

	void OnGameStarted(); // Function ShooterGame.EngagementScreenWidget.OnGameStarted // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnAcceptButtonUp(); // Function ShooterGame.EngagementScreenWidget.OnAcceptButtonUp // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void KeyUp(struct FKeyEvent& InKeyEvent); // Function ShooterGame.EngagementScreenWidget.KeyUp // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e85c40
	void GameStart(); // Function ShooterGame.EngagementScreenWidget.GameStart // (Final|Native|Public|BlueprintCallable) // @ game+0x2e84e60
};

// Class ShooterGame.EnvQueryContext_QueryOwnerDirection
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_QueryOwnerDirection : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryContext_QueryOwnerLocation
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_QueryOwnerLocation : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryContext_StateContext_Direction
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_StateContext_Direction : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryContext_StateContext_Location
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_StateContext_Location : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryContext_StateOwner
// Size: 0x30 (Inherited: 0x30)
struct UEnvQueryContext_StateOwner : UEnvQueryContext {
};

// Class ShooterGame.EnvQueryTest_PawnProperties
// Size: 0x248 (Inherited: 0x238)
struct UEnvQueryTest_PawnProperties : UEnvQueryTest {
	struct UEnvQueryContext* Context; // 0x238(0x08)
	bool bAlive; // 0x240(0x01)
	enum class EAresAlliance Alliance; // 0x241(0x01)
	char pad_242[0x6]; // 0x242(0x06)
};

// Class ShooterGame.EQSStateComponent
// Size: 0x400 (Inherited: 0x3a0)
struct UEQSStateComponent : UTimedStateComponent {
	struct FMulticastInlineDelegate OnPreEQSQuery; // 0x3a0(0x10)
	struct FRotator RotationOffset; // 0x3b0(0x0c)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct UEnvQuery* QueryTemplate; // 0x3c0(0x08)
	struct TArray<struct FAIDynamicParam> QueryConfig; // 0x3c8(0x10)
	enum class EEnvQueryRunMode RunMode; // 0x3d8(0x01)
	char pad_3D9[0x7]; // 0x3d9(0x07)
	struct UScriptStateComponent* FailState; // 0x3e0(0x08)
	char pad_3E8[0x18]; // 0x3e8(0x18)

	void SetQueryTemplate(struct UEnvQuery* NewQueryTemplate); // Function ShooterGame.EQSStateComponent.SetQueryTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x2e908a0
	void SetFailState(struct UScriptStateComponent* NewFailState); // Function ShooterGame.EQSStateComponent.SetFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e906b0
	void MulticastSucceedState(); // Function ShooterGame.EQSStateComponent.MulticastSucceedState // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2cc4ce0
	void MulticastFailState(); // Function ShooterGame.EQSStateComponent.MulticastFailState // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2cc8720
	struct UEnvQuery* GetQueryTemplate(); // Function ShooterGame.EQSStateComponent.GetQueryTemplate // (Final|Native|Public|BlueprintCallable) // @ game+0x2ced230
};

// Class ShooterGame.EQSWorldQueryComponent
// Size: 0x2d0 (Inherited: 0x290)
struct UEQSWorldQueryComponent : USceneComponent {
	struct FMulticastInlineDelegate OnEQSQueryComplete; // 0x288(0x10)
	struct UEnvQuery* QueryTemplate; // 0x298(0x08)
	struct TArray<struct FAIDynamicParam> QueryConfig; // 0x2a0(0x10)
	enum class EEnvQueryRunMode RunMode; // 0x2b0(0x01)
	char pad_2B9[0x17]; // 0x2b9(0x17)

	void ExecuteQuery(); // Function ShooterGame.EQSWorldQueryComponent.ExecuteQuery // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void CancelQuery(); // Function ShooterGame.EQSWorldQueryComponent.CancelQuery // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
};

// Class ShooterGame.EquipmentChargeComponent
// Size: 0x168 (Inherited: 0x138)
struct UEquipmentChargeComponent : UAbilityResourceComponent {
	int32_t Cost; // 0x138(0x04)
	int32_t DesignPlaytestCost; // 0x13c(0x04)
	enum class EAresCostType CostType; // 0x140(0x01)
	bool bCanBuyCharges; // 0x141(0x01)
	char pad_142[0x2]; // 0x142(0x02)
	int32_t MaxCharges; // 0x144(0x04)
	int32_t ChargesGainedEachRefresh; // 0x148(0x04)
	int32_t MinGuaranteedCharges; // 0x14c(0x04)
	bool bRateLimitInShop; // 0x150(0x01)
	char pad_151[0x3]; // 0x151(0x03)
	int32_t RoundsWaitedForCharges; // 0x154(0x04)
	int32_t ChargesBoughtThisRound; // 0x158(0x04)
	int32_t CurrentTemporaryCharges; // 0x15c(0x04)
	int32_t TotalChargesAllowedToPurchaseThisRound; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)

	void SetMaxCharges(int32_t NewMaxCharges); // Function ShooterGame.EquipmentChargeComponent.SetMaxCharges // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	int32_t RegainCharges(int32_t Units); // Function ShooterGame.EquipmentChargeComponent.RegainCharges // (Final|Native|Public|BlueprintCallable) // @ game+0x2e902e0
	void OnRep_ChargeInfo(); // Function ShooterGame.EquipmentChargeComponent.OnRep_ChargeInfo // (Final|Native|Protected) // @ game+0x2cb54e0
	int32_t GetTemporaryCharges(); // Function ShooterGame.EquipmentChargeComponent.GetTemporaryCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e90250
	int32_t GetRemainingChargesAllowedToPurchaseThisRound(); // Function ShooterGame.EquipmentChargeComponent.GetRemainingChargesAllowedToPurchaseThisRound // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e90210
	int32_t GetPermanentCharges(); // Function ShooterGame.EquipmentChargeComponent.GetPermanentCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e901b0
	int32_t GetMinGuaranteedCharges(); // Function ShooterGame.EquipmentChargeComponent.GetMinGuaranteedCharges // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e90170
	int32_t GetMaxCharges(); // Function ShooterGame.EquipmentChargeComponent.GetMaxCharges // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e90130
	int32_t GetCurrentCharges(); // Function ShooterGame.EquipmentChargeComponent.GetCurrentCharges // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e8fe10
	int32_t GetChargesBoughtThisRound(); // Function ShooterGame.EquipmentChargeComponent.GetChargesBoughtThisRound // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e8fd30
	void AuthSetChargesBoughtThisRound(int32_t NewChargesBoughtThisRound); // Function ShooterGame.EquipmentChargeComponent.AuthSetChargesBoughtThisRound // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void AuthResetChargeInfo(); // Function ShooterGame.EquipmentChargeComponent.AuthResetChargeInfo // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthClearChargeBuildupForEquippable(); // Function ShooterGame.EquipmentChargeComponent.AuthClearChargeBuildupForEquippable // (BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2e8fc60
	int32_t AddTemporaryCharges(int32_t Units); // Function ShooterGame.EquipmentChargeComponent.AddTemporaryCharges // (Final|Native|Public|BlueprintCallable) // @ game+0x2e8fbc0
};

// Class ShooterGame.EquippableUIData
// Size: 0x140 (Inherited: 0x90)
struct UEquippableUIData : UBaseContentUIData {
	struct UTexture* KillStreamIcon; // 0x90(0x08)
	enum class EEquippableCategory Category; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	struct FVector CameraPosition; // 0x9c(0x0c)
	float DefaultFOV; // 0xa8(0x04)
	float MaxFOV; // 0xac(0x04)
	float MinFOV; // 0xb0(0x04)
	struct FVector BuddyCameraPosition; // 0xb4(0x0c)
	float BuddyDefaultFOV; // 0xc0(0x04)
	float BuddyMaxFOV; // 0xc4(0x04)
	float BuddyMinFOV; // 0xc8(0x04)
	struct FVector PivotPoint; // 0xcc(0x0c)
	struct FWeaponStatUIData WeaponStats; // 0xd8(0x68)
};

// Class ShooterGame.EquippableDataAsset
// Size: 0x140 (Inherited: 0x50)
struct UEquippableDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Equippable; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
	int32_t MaxAttachmentCost; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct TSet<struct TSoftClassPtr<UObject>> ForcedAttachments; // 0xb8(0x50)
	struct TSoftClassPtr<UObject> DefaultSkin; // 0x108(0x30)
	uint32_t PreloadOnAppStartupPlatforms; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
};

// Class ShooterGame.EquippableAnimGraphComponent
// Size: 0x1c0 (Inherited: 0xe8)
struct UEquippableAnimGraphComponent : UActorComponent {
	float TimeLastFired; // 0xe8(0x04)
	float LastTimeBetweenShots; // 0xec(0x04)
	float LastShotRecoveryTime; // 0xf0(0x04)
	struct FRotator LastShotRotator; // 0xf4(0x0c)
	struct FAnimPunchTuning AnimPunchTuning; // 0x100(0x10)
	struct FAnimLeanTuning AnimLeanTuning; // 0x110(0x0c)
	struct FIdlePoseTuning IdlePoseTuning; // 0x11c(0x18)
	char pad_134[0x4]; // 0x134(0x04)
	struct FStabilityAnimTuning StabilityAnimTuning; // 0x138(0x88)

	float GetYawStrength(); // Function ShooterGame.EquippableAnimGraphComponent.GetYawStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e902b0
	float GetTranslationStrength(); // Function ShooterGame.EquippableAnimGraphComponent.GetTranslationStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e90280
	float GetPitchAndRollStrength(); // Function ShooterGame.EquippableAnimGraphComponent.GetPitchAndRollStrength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e901e0
	float GetKickBackBlendCurveValue(float Time); // Function ShooterGame.EquippableAnimGraphComponent.GetKickBackBlendCurveValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e90090
	void GetKickBackBlendCurveRanges(float& TimeMin, float& TimeMax, float& ValueMin, float& ValueMax); // Function ShooterGame.EquippableAnimGraphComponent.GetKickBackBlendCurveRanges // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e8fef0
	struct FRotator GetFirstPersonMeshRotation(); // Function ShooterGame.EquippableAnimGraphComponent.GetFirstPersonMeshRotation // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e8feb0
	struct FVector GetFirstPersonMeshOffset(); // Function ShooterGame.EquippableAnimGraphComponent.GetFirstPersonMeshOffset // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e8fe70
	float GetAnimPunchInterpolant(float CurrentTimestamp); // Function ShooterGame.EquippableAnimGraphComponent.GetAnimPunchInterpolant // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e8fc90
};

// Class ShooterGame.EquippableAttachmentUIData
// Size: 0x90 (Inherited: 0x90)
struct UEquippableAttachmentUIData : UBaseContentUIData {
};

// Class ShooterGame.EquippableAttachmentDataAsset
// Size: 0x120 (Inherited: 0x50)
struct UEquippableAttachmentDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> Socket; // 0x58(0x30)
	struct TSoftClassPtr<UObject> Equippable; // 0x88(0x30)
	struct TSoftClassPtr<UObject> Attachment; // 0xb8(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0xe8(0x30)
	int32_t AttachmentCost; // 0x118(0x04)
	bool bIsUniversalAttachment; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
};

// Class ShooterGame.SocketDataAsset
// Size: 0x80 (Inherited: 0x50)
struct USocketDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Socket; // 0x50(0x30)
};

// Class ShooterGame.EquippableCharmDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct UEquippableCharmDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> Levels; // 0x80(0x10)
	struct TSoftClassPtr<UObject> Theme; // 0x90(0x30)

	void SetUIData(struct TSoftClassPtr<UObject> NewUIData); // Function ShooterGame.EquippableCharmDataAsset.SetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x2e90930
	void SetLevels(struct TArray<struct TSoftClassPtr<UObject>> NewLevels); // Function ShooterGame.EquippableCharmDataAsset.SetLevels // (Final|Native|Public|BlueprintCallable) // @ game+0x2e90740
	struct UEquippableCharmLevelDataAsset* GetCharmLevel(int32_t LevelNumber); // Function ShooterGame.EquippableCharmDataAsset.GetCharmLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e8fd70
};

// Class ShooterGame.EquippableCharmUIData
// Size: 0x90 (Inherited: 0x90)
struct UEquippableCharmUIData : UBaseContentUIData {
};

// Class ShooterGame.EquippableCharmLevelDataAsset
// Size: 0xe8 (Inherited: 0x50)
struct UEquippableCharmLevelDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> EquippableCharm; // 0x80(0x30)
	struct TSoftClassPtr<UObject> CharmAttachment; // 0xb0(0x30)
	int32_t CharmLevel; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)

	void SetUIData(struct TSoftClassPtr<UObject> NewUIData); // Function ShooterGame.EquippableCharmLevelDataAsset.SetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x2e90930
	void SetEquippableCharm(struct TSoftClassPtr<UObject> NewEquippableCharm); // Function ShooterGame.EquippableCharmLevelDataAsset.SetEquippableCharm // (Final|Native|Public|BlueprintCallable) // @ game+0x2e90560
	void SetCharmLevel(int32_t NewCharmLevel); // Function ShooterGame.EquippableCharmLevelDataAsset.SetCharmLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2e904d0
	void SetCharmAttachment(struct TSoftClassPtr<UObject> NewCharmAttachment); // Function ShooterGame.EquippableCharmLevelDataAsset.SetCharmAttachment // (Final|Native|Public|BlueprintCallable) // @ game+0x2e90380
	struct UEquippableCharmDataAsset* GetEquippableCharm(); // Function ShooterGame.EquippableCharmLevelDataAsset.GetEquippableCharm // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e8fe40
};

// Class ShooterGame.EquippableCharmLevelUIData
// Size: 0x90 (Inherited: 0x90)
struct UEquippableCharmLevelUIData : UBaseContentUIData {
};

// Class ShooterGame.FogOfWarComponent
// Size: 0x320 (Inherited: 0xe8)
struct UFogOfWarComponent : UActorComponent {
	char pad_E8[0x70]; // 0xe8(0x70)
	bool bCanMakeActorsVisionRelevant; // 0x158(0x01)
	bool bBoundsIncludesOnlyCollidingComponents; // 0x159(0x01)
	bool bUseCachedBounds; // 0x15a(0x01)
	char pad_15B[0x1]; // 0x15b(0x01)
	float LookAheadTime; // 0x15c(0x04)
	struct AEffectContainer* DebugWallhackEffectClass; // 0x160(0x08)
	char pad_168[0x50]; // 0x168(0x50)
	bool bOwnerIsRelevantToClient; // 0x1b8(0x01)
	bool bOwnerIsHiddenForClient; // 0x1b9(0x01)
	char pad_1BA[0x56]; // 0x1ba(0x56)
	bool bReceivedNetUpdate; // 0x210(0x01)
	char pad_211[0x7]; // 0x211(0x07)
	struct TArray<struct UFogOfWarBoundsComponent*> ExtraFogOfWarBounds; // 0x218(0x10)
	char pad_228[0xa0]; // 0x228(0xa0)
	struct FEffectID DebugWallhackEffect; // 0x2c8(0x20)
	struct TArray<struct AActor*> CachedAttachedActors; // 0x2e8(0x10)
	struct TArray<struct UFogOfWarComponent*> CachedAttachedFoWComponents; // 0x2f8(0x10)
	bool bCacheNeedsRebuilding; // 0x308(0x01)
	char pad_309[0x7]; // 0x309(0x07)
	struct UFogOfWarDebugComponent* DebugComponent; // 0x310(0x08)
	struct UFogOfWarManagerComponent* ManagerComponent; // 0x318(0x08)

	bool RemoveRelevancyOverride(int32_t Handle); // Function ShooterGame.FogOfWarComponent.RemoveRelevancyOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2cad5e0
	void RemoveAudioEvent(int32_t Handle); // Function ShooterGame.FogOfWarComponent.RemoveAudioEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void OnViewerComponentDestroyed(struct UViewerFogOfWarComponent* DestroyedComponent); // Function ShooterGame.FogOfWarComponent.OnViewerComponentDestroyed // (Final|Native|Protected) // @ game+0x2cb4be0
	void OnTeamChanged(); // Function ShooterGame.FogOfWarComponent.OnTeamChanged // (Final|Native|Public) // @ game+0x1e6e7b0
	void OnOwnerAttachTreeChanged(struct USceneComponent* AttachedComponent, bool bAttached); // Function ShooterGame.FogOfWarComponent.OnOwnerAttachTreeChanged // (Final|Native|Private) // @ game+0x2eb1d90
	bool IsRelevantForLocalClient(); // Function ShooterGame.FogOfWarComponent.IsRelevantForLocalClient // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1820
	bool IsHiddenForLocalClient(); // Function ShooterGame.FogOfWarComponent.IsHiddenForLocalClient // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb17f0
	void AuthSetCharacterNeverRelevant(bool bNewNeverRelevant); // Function ShooterGame.FogOfWarComponent.AuthSetCharacterNeverRelevant // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	int32_t AddRelevancyOverride(float Duration); // Function ShooterGame.FogOfWarComponent.AddRelevancyOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb1000
	int32_t AddAudioEvent(float AudibleDistance, float Duration); // Function ShooterGame.FogOfWarComponent.AddAudioEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb0f20
};

// Class ShooterGame.EquippableFogOfWarComponent
// Size: 0x320 (Inherited: 0x320)
struct UEquippableFogOfWarComponent : UFogOfWarComponent {
};

// Class ShooterGame.EquippableInputActionComponent
// Size: 0x108 (Inherited: 0xe8)
struct UEquippableInputActionComponent : UActorComponent {
	struct FName InputAction; // 0xe8(0x0c)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct UInputComponent* InputComponent; // 0xf8(0x08)
	struct AShooterPlayerController* BoundController; // 0x100(0x08)

	void UnbindActions(); // Function ShooterGame.EquippableInputActionComponent.UnbindActions // (Final|Native|Private) // @ game+0x2e9bb40
	void InputReleased(); // Function ShooterGame.EquippableInputActionComponent.InputReleased // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void InputPressed(); // Function ShooterGame.EquippableInputActionComponent.InputPressed // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BindActions(); // Function ShooterGame.EquippableInputActionComponent.BindActions // (Final|Native|Private) // @ game+0x2e9b020
};

// Class ShooterGame.EquippableMinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UEquippableMinimapDisplayComponentDeprecated : UMinimapDisplayComponentDeprecated {
};

// Class ShooterGame.EquippableModificationComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UEquippableModificationComponent : UActorComponent {

	bool ModifyTemporaryGun(struct AAresEquippable* Equippable); // Function ShooterGame.EquippableModificationComponent.ModifyTemporaryGun // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	bool ModifyPermanentGun(struct AAresEquippable* Equippable); // Function ShooterGame.EquippableModificationComponent.ModifyPermanentGun // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.EquippableSkinUIData
// Size: 0xb8 (Inherited: 0x90)
struct UEquippableSkinUIData : UBaseContentUIData {
	bool UseModelViewerOverrides; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FVector CameraPosition; // 0x94(0x0c)
	float DefaultFOV; // 0xa0(0x04)
	float MaxFOV; // 0xa4(0x04)
	float MinFOV; // 0xa8(0x04)
	struct FVector PivotPoint; // 0xac(0x0c)
};

// Class ShooterGame.EquippableSkinFeaturesDataAsset
// Size: 0x88 (Inherited: 0x50)
struct UEquippableSkinFeaturesDataAsset : UAresBasePrimaryDataAsset {
	enum class EModelCategory ModelCategory; // 0x50(0x01)
	enum class EFXCategory VFXCategory; // 0x51(0x01)
	enum class EFXCategory SFXCategory; // 0x52(0x01)
	enum class EAnimationCategory AnimationCategory; // 0x53(0x01)
	enum class EShaderCategory ShaderCategory; // 0x54(0x01)
	bool Finisher; // 0x55(0x01)
	bool KillBanner; // 0x56(0x01)
	enum class EMeleeCategory MeleeCategory; // 0x57(0x01)
	struct TSoftClassPtr<UObject> Skin; // 0x58(0x30)

	struct FString GetVFXCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetVFXCategoryString // (Final|Native|Public) // @ game+0x2e9b6e0
	struct FString GetShaderCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetShaderCategoryString // (Final|Native|Public) // @ game+0x2e9b5b0
	struct FString GetSFXCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetSFXCategoryString // (Final|Native|Public) // @ game+0x2e9b520
	struct FString GetModelCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetModelCategoryString // (Final|Native|Public) // @ game+0x2e9b2e0
	struct FString GetMeleeCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetMeleeCategoryString // (Final|Native|Public) // @ game+0x2e9b250
	struct FString GetFXCategoryString(enum class EFXCategory FXCategory); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetFXCategoryString // (Final|Native|Private) // @ game+0x2e9b0d0
	struct FString GetAnimationCategoryString(); // Function ShooterGame.EquippableSkinFeaturesDataAsset.GetAnimationCategoryString // (Final|Native|Public) // @ game+0x2e9b040
};

// Class ShooterGame.EquippableSkinDataAsset
// Size: 0x1f0 (Inherited: 0x50)
struct UEquippableSkinDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> Equippable; // 0x58(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> Levels; // 0x88(0x10)
	struct TSoftClassPtr<UObject> DefaultChroma; // 0x98(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> Chromas; // 0xc8(0x10)
	struct TSoftClassPtr<UObject> UIData; // 0xd8(0x30)
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> AttachmentOverrides; // 0x108(0x50)
	struct TSoftClassPtr<UObject> Theme; // 0x158(0x30)
	struct TSoftClassPtr<UObject> ContentTier; // 0x188(0x30)
	struct TSoftObjectPtr<UTexture2D> Wallpaper; // 0x1b8(0x30)
	bool UseHighestOwnedLevelNameAsDisplayName; // 0x1e8(0x01)
	char pad_1E9[0x7]; // 0x1e9(0x07)

	struct UEquippableSkinLevelDataAsset* GetSkinLevel(int32_t LevelNumber); // Function ShooterGame.EquippableSkinDataAsset.GetSkinLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b640
};

// Class ShooterGame.EquippableSkinChromaUIData
// Size: 0xa8 (Inherited: 0x90)
struct UEquippableSkinChromaUIData : UBaseContentUIData {
	struct UTexture* FullRender; // 0x90(0x08)
	struct UTexture* FullRenderOverride; // 0x98(0x08)
	struct UTexture* Swatch; // 0xa0(0x08)
};

// Class ShooterGame.EquippableSkinChromaDataAsset
// Size: 0x170 (Inherited: 0x50)
struct UEquippableSkinChromaDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> EquippableSkinChroma; // 0x58(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x88(0x30)
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> AttachmentOverrides; // 0xb8(0x50)
	struct TSoftClassPtr<UObject> ModelViewerFXC; // 0x108(0x30)
	struct TSoftClassPtr<UObject> StreamedVideo; // 0x138(0x30)
	bool bWhenFocusingBuddyDisableFXC; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
};

// Class ShooterGame.EquippableSkinLevelUIData
// Size: 0x98 (Inherited: 0x90)
struct UEquippableSkinLevelUIData : UBaseContentUIData {
	enum class EEquippableSkinLevelItem LevelItem; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
};

// Class ShooterGame.EquippableSkinLevelDataAsset
// Size: 0x118 (Inherited: 0x50)
struct UEquippableSkinLevelDataAsset : UAresBasePrimaryDataAsset {
	char pad_50[0x8]; // 0x50(0x08)
	struct TSoftClassPtr<UObject> SkinAttachment; // 0x58(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x88(0x30)
	struct TSoftClassPtr<UObject> ModelViewerFXC; // 0xb8(0x30)
	struct TSoftClassPtr<UObject> StreamedVideo; // 0xe8(0x30)

	int32_t GetLevel(struct UObject* WorldContextObject); // Function ShooterGame.EquippableSkinLevelDataAsset.GetLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b1b0
};

// Class ShooterGame.StateMachineComponent
// Size: 0x1e0 (Inherited: 0xe8)
struct UStateMachineComponent : UActorComponent {
	struct FMulticastInlineDelegate OnStateMachineReset; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnStateAdded; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x108(0x10)
	char pad_118[0x18]; // 0x118(0x18)
	struct TArray<struct UStateTransitionContext*> CachedTransitionContexts; // 0x130(0x10)
	struct TMap<struct UStateComponent*, struct FStateMetadata> States; // 0x140(0x50)
	struct FStateContext ClientPredictedCurrentState; // 0x190(0x18)
	struct FStateContext AuthCurrentState; // 0x1a8(0x18)
	bool bUseReplicatedStateTransitionContext; // 0x1c0(0x01)
	char pad_1C1[0x3]; // 0x1c1(0x03)
	float CurrentSubframeWorldTimeSeconds; // 0x1c4(0x04)
	struct UStateComponent* StartingState; // 0x1c8(0x08)
	struct UValueDisagreementTimer* CurrentStateDisagreementTimer; // 0x1d0(0x08)
	struct UValueDisagreementTimer* CurrentStateDisagreementTimerClassOverride; // 0x1d8(0x08)

	void SetStartingState(struct UStateComponent* State); // Function ShooterGame.StateMachineComponent.SetStartingState // (Final|Native|Public|BlueprintCallable) // @ game+0x3132f00
	void RemoveState(struct UStateComponent* State); // Function ShooterGame.StateMachineComponent.RemoveState // (Final|Native|Public|BlueprintCallable) // @ game+0x3132cc0
	void OnRep_AuthCurrentState(); // Function ShooterGame.StateMachineComponent.OnRep_AuthCurrentState // (Final|Native|Private) // @ game+0x3132990
	void InitializeStartingState(struct AActor* Owner); // Function ShooterGame.StateMachineComponent.InitializeStartingState // (Final|Native|Private) // @ game+0x31327d0
	struct UStateComponent* GetStartingState(); // Function ShooterGame.StateMachineComponent.GetStartingState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31325e0
	struct UStateComponent* GetCurrentState(); // Function ShooterGame.StateMachineComponent.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31322a0
	void ClientResetStateMachine(); // Function ShooterGame.StateMachineComponent.ClientResetStateMachine // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2ca3cf0
	void AuthResetStateMachine(); // Function ShooterGame.StateMachineComponent.AuthResetStateMachine // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AddState(struct UStateComponent* State); // Function ShooterGame.StateMachineComponent.AddState // (Final|Native|Public|BlueprintCallable) // @ game+0x31320d0
};

// Class ShooterGame.EquippableStateMachineComponent
// Size: 0x310 (Inherited: 0x1e0)
struct UEquippableStateMachineComponent : UStateMachineComponent {
	char pad_1E0[0xa8]; // 0x1e0(0xa8)
	bool bStateMachineEnabled; // 0x288(0x01)
	char pad_289[0x7]; // 0x289(0x07)
	struct URespondToEventStateComponent* InactiveState; // 0x290(0x08)
	enum class EStateBehaviorOnDeath DeathBehavior; // 0x298(0x01)
	char pad_299[0x7]; // 0x299(0x07)
	struct UStateComponent* DeathState; // 0x2a0(0x08)
	struct UStateComponent* CurrentStateForBuffs; // 0x2a8(0x08)
	struct TArray<struct FEquippableStateBuffInfo> ActiveStateBuffs; // 0x2b0(0x10)
	char pad_2C0[0x10]; // 0x2c0(0x10)
	float InputQueueTimeDurations[0xf]; // 0x2d0(0x3c)
	bool bClientSimulationDesynced; // 0x30c(0x01)
	char pad_30D[0x3]; // 0x30d(0x03)

	void SetDeathState(struct UStateComponent* State); // Function ShooterGame.EquippableStateMachineComponent.SetDeathState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e9b8e0
	void SetDeathBehavior(enum class EStateBehaviorOnDeath NewDeathBehavior); // Function ShooterGame.EquippableStateMachineComponent.SetDeathBehavior // (Final|Native|Public|BlueprintCallable) // @ game+0x2e9b860
	void OnItemMovedToPersistentData(); // Function ShooterGame.EquippableStateMachineComponent.OnItemMovedToPersistentData // (Final|Native|Public) // @ game+0x2e9b840
	void HandleStateChanged(struct UStateComponent* OldState, struct UStateComponent* NewState); // Function ShooterGame.EquippableStateMachineComponent.HandleStateChanged // (Final|Native|Protected) // @ game+0x2e9b770
	struct AShooterPlayerController* GetOwningShooterPlayerController(); // Function ShooterGame.EquippableStateMachineComponent.GetOwningShooterPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b460
	struct AShooterCharacter* GetOwningShooterCharacter(); // Function ShooterGame.EquippableStateMachineComponent.GetOwningShooterCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b430
	struct AAresEquippable* GetOwningEquippable(); // Function ShooterGame.EquippableStateMachineComponent.GetOwningEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b3d0
	struct ACharacter* GetOwningCharacter(); // Function ShooterGame.EquippableStateMachineComponent.GetOwningCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e9b3a0
	struct URespondToEventStateComponent* GetInactiveState(); // Function ShooterGame.EquippableStateMachineComponent.GetInactiveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec2b0
	void AuthSetClientSimulationDesync(); // Function ShooterGame.EquippableStateMachineComponent.AuthSetClientSimulationDesync // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
};

// Class ShooterGame.EquippableVisibilityComponent
// Size: 0x180 (Inherited: 0x180)
struct UEquippableVisibilityComponent : UVisibilityComponent {
};

// Class ShooterGame.EquipStateComponent
// Size: 0x2f8 (Inherited: 0x2c8)
struct UEquipStateComponent : UScriptStateComponent {
	bool bShouldGhostEquip; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct FText EquippableName; // 0x2d0(0x18)
	bool bBlocking; // 0x2e8(0x01)
	char pad_2E9[0x7]; // 0x2e9(0x07)
	struct UStateComponent* FailStateComponent; // 0x2f0(0x08)

	void SetEquipFailState(struct UStateComponent* FailState); // Function ShooterGame.EquipStateComponent.SetEquipFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e9b970
};

// Class ShooterGame.EULAManager
// Size: 0xe8 (Inherited: 0x80)
struct UEULAManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UEULAService* EULAService; // 0x90(0x08)
	char pad_98[0x50]; // 0x98(0x50)

	void TryInitUserEULAFlow(); // Function ShooterGame.EULAManager.TryInitUserEULAFlow // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea4540
};

// Class ShooterGame.EULAService
// Size: 0x38 (Inherited: 0x30)
struct UEULAService : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.EventUIData
// Size: 0xa8 (Inherited: 0x90)
struct UEventUIData : UBaseContentUIData {
	struct FText ShortDisplayName; // 0x90(0x18)
};

// Class ShooterGame.EventDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct UEventDataAsset : UAresBasePrimaryDataAsset {
	struct FDateTime StartTime; // 0x50(0x08)
	struct FDateTime EndTime; // 0x58(0x08)
	struct TSoftClassPtr<UObject> UIData; // 0x60(0x30)
	struct TSoftClassPtr<UObject> BannerWidget; // 0x90(0x30)
};

// Class ShooterGame.ExitGameScreen
// Size: 0x2e0 (Inherited: 0x2e0)
struct UExitGameScreen : UAresContextMenuBaseWidget {

	void OnMenuStackEntryCreated(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.ExitGameScreen.OnMenuStackEntryCreated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ExploitCorpseStateComponent
// Size: 0x2c8 (Inherited: 0x2c8)
struct UExploitCorpseStateComponent : UScriptStateComponent {
};

// Class ShooterGame.ExternalResourceComponent
// Size: 0x148 (Inherited: 0x138)
struct UExternalResourceComponent : UAbilityResourceComponent {
	enum class EAresItemSlot ExternalSlot; // 0x138(0x01)
	char pad_139[0x7]; // 0x139(0x07)
	struct UResourceComponent* CachedExternalResource; // 0x140(0x08)

	void ExternalResourceChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.ExternalResourceComponent.ExternalResourceChanged // (Final|Native|Private) // @ game+0x2ca54b0
};

// Class ShooterGame.ExternalUserAction
// Size: 0xb8 (Inherited: 0xa8)
struct UExternalUserAction : UEditableUserActionBase {
	struct FMulticastInlineDelegate OnTriggered; // 0xa8(0x10)

	void UnbindOnTriggered(struct FDelegate& Delegate); // Function ShooterGame.ExternalUserAction.UnbindOnTriggered // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2ea4560
	void SetText(struct FText NewValue); // Function ShooterGame.ExternalUserAction.SetText // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea4460
	void SetStyles(struct TArray<struct FName> NewValue); // Function ShooterGame.ExternalUserAction.SetStyles // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea4360
	void SetIconTexture(struct UTexture2D* NewValue); // Function ShooterGame.ExternalUserAction.SetIconTexture // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea42d0
	void SetDescription(struct FText NewValue); // Function ShooterGame.ExternalUserAction.SetDescription // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea40c0
	void SetActionState(enum class EUserActionState NewValue); // Function ShooterGame.ExternalUserAction.SetActionState // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea3fb0
	void SetActionDisplayInfo(struct FUserActionDisplayInfo& NewValue); // Function ShooterGame.ExternalUserAction.SetActionDisplayInfo // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2ea3ec0
	void OnTriggeredMulticastDelegate__DelegateSignature(struct UExternalUserAction* Source, struct FWildcard& Data, enum class EUserActionTriggerResponse& Response); // DelegateFunction ShooterGame.ExternalUserAction.OnTriggeredMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate|HasOutParms) // @ game+0x3520f50
	void OnTriggeredDelegate__DelegateSignature(struct UExternalUserAction* Source, struct FWildcard& Data, enum class EUserActionTriggerResponse& Response); // DelegateFunction ShooterGame.ExternalUserAction.OnTriggeredDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x3520f50
	struct UExternalUserAction* Make(struct UObject* Outer, struct FUserActionDisplayInfo& InActionDisplayInfo, enum class EUserActionState InActionState); // Function ShooterGame.ExternalUserAction.Make // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2ea38c0
	void BindOnTriggered(struct FDelegate& Delegate); // Function ShooterGame.ExternalUserAction.BindOnTriggered // (Final|Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2ea3210
};

// Class ShooterGame.FaceAimFiringAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceAimFiringAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceAimingAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceAimingAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceDeadAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceDeadAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceFiringAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceFiringAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceHitAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceHitAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceIdleAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceIdleAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FaceMeleeAttackingAnimSlot3P
// Size: 0x38 (Inherited: 0x38)
struct UFaceMeleeAttackingAnimSlot3P : UAnimSlotFace3P {
};

// Class ShooterGame.FallLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UFallLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.FallUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UFallUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.FalloffMultiplierDamageQuery
// Size: 0x30 (Inherited: 0x30)
struct UFalloffMultiplierDamageQuery : UInterface {

	float GetFalloffMultiplier(); // Function ShooterGame.FalloffMultiplierDamageQuery.GetFalloffMultiplier // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ea3880
};

// Class ShooterGame.FavoritesManager
// Size: 0x178 (Inherited: 0x80)
struct UFavoritesManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FPlayerFavorites PersistedFavorites; // 0x98(0x60)
	struct TMap<struct FGuid, enum class EFavoritesActionType> PendingFavoritesChanges; // 0xf8(0x50)
	struct UFavoritesService* FavoritesService; // 0x148(0x08)
	struct UConfigManager* ConfigManager; // 0x150(0x08)
	char pad_158[0x8]; // 0x158(0x08)
	struct URSOManager* RSOManager; // 0x160(0x08)
	struct URMSManager* RMSManager; // 0x168(0x08)
	struct UDeferredOperation* SubmitFavoritesOperation; // 0x170(0x08)

	void SubmitPendingFavorites(); // Function ShooterGame.FavoritesManager.SubmitPendingFavorites // (Final|Native|Private) // @ game+0x2ea4520
	void SetAsFavorite(struct UAresBasePrimaryDataAsset* Asset); // Function ShooterGame.FavoritesManager.SetAsFavorite // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea4030
	void ScheduleSubmitFavoritesTimer(); // Function ShooterGame.FavoritesManager.ScheduleSubmitFavoritesTimer // (Final|Native|Private) // @ game+0x2ea3ea0
	void RemoveAsFavorite(struct UAresBasePrimaryDataAsset* Asset); // Function ShooterGame.FavoritesManager.RemoveAsFavorite // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea3e10
	void RefreshCurrentFavorites(); // Function ShooterGame.FavoritesManager.RefreshCurrentFavorites // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea3df0
	void DeleteFavorite(struct FGuid& ItemId); // Function ShooterGame.FavoritesManager.DeleteFavorite // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2ea37e0
	void CreateFavorite(struct FGuid& ItemId); // Function ShooterGame.FavoritesManager.CreateFavorite // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2ea3740
	void BroadcastRemoveFavorite(struct FGuid& ItemId); // Function ShooterGame.FavoritesManager.BroadcastRemoveFavorite // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2ea3520
	void BroadcastRefreshedFavorites(struct FPlayerFavorites& UpdatedFavorites, struct FPlayerFavorites& OldFavorites); // Function ShooterGame.FavoritesManager.BroadcastRefreshedFavorites // (Final|Native|Private|HasOutParms) // @ game+0x2ea3370
	void BroadcastAddFavorite(struct FGuid& ItemId); // Function ShooterGame.FavoritesManager.BroadcastAddFavorite // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x2ea32d0
};

// Class ShooterGame.FavoritesService
// Size: 0x38 (Inherited: 0x30)
struct UFavoritesService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.FFACombatReportComponent
// Size: 0x120 (Inherited: 0x118)
struct UFFACombatReportComponent : UCombatReportComponent {
	char pad_118[0x8]; // 0x118(0x08)
};

// Class ShooterGame.FFATeamComponent
// Size: 0xf8 (Inherited: 0xf8)
struct UFFATeamComponent : UBaseTeamComponent {
};

// Class ShooterGame.FidgetAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UFidgetAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.WrapperListModel
// Size: 0x58 (Inherited: 0x48)
struct UWrapperListModel : UOrderedListModelBase {
	struct TScriptInterface<IOrderedListModel> WrappedListModel; // 0x48(0x10)

	void SetListModel(struct TScriptInterface<IOrderedListModel>& NewValue); // Function ShooterGame.WrapperListModel.SetListModel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3195ea0
	void HandleWrappedListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.WrapperListModel.HandleWrappedListModelChange // (Native|Protected|HasOutParms) // @ game+0x3195620
	struct TScriptInterface<IOrderedListModel> GetListModel(); // Function ShooterGame.WrapperListModel.GetListModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3195430
};

// Class ShooterGame.IndexedWrapperListModelBase
// Size: 0x68 (Inherited: 0x58)
struct UIndexedWrapperListModelBase : UWrapperListModel {
	char pad_58[0x10]; // 0x58(0x10)

	int32_t MapIndexOuterToInner(int32_t OuterIndex); // Function ShooterGame.IndexedWrapperListModelBase.MapIndexOuterToInner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef81c0
	int32_t MapIndexInnerToOuter(int32_t InnerIndex); // Function ShooterGame.IndexedWrapperListModelBase.MapIndexInnerToOuter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef8120
};

// Class ShooterGame.FilteredListModelBase
// Size: 0x68 (Inherited: 0x68)
struct UFilteredListModelBase : UIndexedWrapperListModelBase {

	bool MatchesFilter(struct FWildcard& item); // Function ShooterGame.FilteredListModelBase.MatchesFilter // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x2ea3c30
	struct FIndexRange MapIndexRangeOuterToInnerFiltered(struct FIndexRange& OuterRange); // Function ShooterGame.FilteredListModelBase.MapIndexRangeOuterToInnerFiltered // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ea3b90
	struct FIndexRange MapIndexRangeInnerToOuterFiltered(struct FIndexRange& InnerRange); // Function ShooterGame.FilteredListModelBase.MapIndexRangeInnerToOuterFiltered // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ea3af0
	int32_t MapIndexInnerToOuterFiltered(int32_t InnerIndex); // Function ShooterGame.FilteredListModelBase.MapIndexInnerToOuterFiltered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ea3a50
	void BP_RefilterItemRange(struct FIndexRange& InnerRange); // Function ShooterGame.FilteredListModelBase.BP_RefilterItemRange // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2ea3170
	void BP_RefilterAllItems(); // Function ShooterGame.FilteredListModelBase.BP_RefilterAllItems // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ea3150
};

// Class ShooterGame.FilteredListModel
// Size: 0x78 (Inherited: 0x68)
struct UFilteredListModel : UFilteredListModelBase {
	char pad_68[0x10]; // 0x68(0x10)

	void SetFilterDelegate(struct FDelegate& Delegate); // Function ShooterGame.FilteredListModel.SetFilterDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2ea4210
	void RefilterItemRange(struct FIndexRange& InnerRange); // Function ShooterGame.FilteredListModel.RefilterItemRange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2ea3170
	void RefilterAllItems(); // Function ShooterGame.FilteredListModel.RefilterAllItems // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea3150
	struct UFilteredListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, struct FDelegate& FilterDelegate, struct UObject* Outer); // Function ShooterGame.FilteredListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2ea35c0
};

// Class ShooterGame.FindSpawnSpotStateComponent
// Size: 0x320 (Inherited: 0x2c8)
struct UFindSpawnSpotStateComponent : UScriptStateComponent {
	struct FVector SourceOffset; // 0x2c8(0x0c)
	struct FVector TargetOffset; // 0x2d4(0x0c)
	struct TArray<struct FFindSpawnSpotTrace> Traces; // 0x2e0(0x10)
	float TestRadius; // 0x2f0(0x04)
	bool bUsePawnTransform; // 0x2f4(0x01)
	bool bTestSpawnValid; // 0x2f5(0x01)
	bool bAdjustFinalLocation; // 0x2f6(0x01)
	enum class ECollisionChannel LoSCheckChannel; // 0x2f7(0x01)
	struct AActor* SpawnTestClass; // 0x2f8(0x08)
	struct FVector FallbackTargetOffset; // 0x300(0x0c)
	float SpawnedObjectRadius; // 0x30c(0x04)
	bool bDrawDebug; // 0x310(0x01)
	char pad_311[0x7]; // 0x311(0x07)
	struct UStateComponent* FailStateComponent; // 0x318(0x08)

	void SetFailState(struct UStateComponent* FailState); // Function ShooterGame.FindSpawnSpotStateComponent.SetFailState // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea4180
};

// Class ShooterGame.SimpleProjectileMovementComponent
// Size: 0x188 (Inherited: 0x128)
struct USimpleProjectileMovementComponent : UMovementComponent {
	char pad_128[0x38]; // 0x128(0x38)
	float MaximumRange; // 0x160(0x04)
	char pad_164[0x4]; // 0x164(0x04)
	bool bMaximumRangeReachedEventTriggered; // 0x168(0x01)
	enum class ECollisionChannel TraceChannel; // 0x169(0x01)
	char pad_16A[0x6]; // 0x16a(0x06)
	struct TArray<struct AActor*> RequestedIgnoreActors; // 0x170(0x10)
	uint32_t NumCollisions; // 0x180(0x04)
	enum class EProjectileMoveState ProjectileMoveState; // 0x184(0x01)
	char pad_185[0x3]; // 0x185(0x03)

	enum class EProjectileMoveState GetMoveState(); // Function ShooterGame.SimpleProjectileMovementComponent.GetMoveState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3115510
	void AuthSetMaximumRange(float NewRange); // Function ShooterGame.SimpleProjectileMovementComponent.AuthSetMaximumRange // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AddIgnoredActor(struct AActor* Actor); // Function ShooterGame.SimpleProjectileMovementComponent.AddIgnoredActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3114f00
};

// Class ShooterGame.FiniteSpeedMovementComponent
// Size: 0x2d8 (Inherited: 0x188)
struct UFiniteSpeedMovementComponent : USimpleProjectileMovementComponent {
	float ProjectileSpeed; // 0x188(0x04)
	float ProjectileGravityScale; // 0x18c(0x04)
	struct FVector ImpartActorVelocityPercentVector; // 0x190(0x0c)
	float ImpartVelocityMatchingDirectionFraction; // 0x19c(0x04)
	float DownwardVelocityScale; // 0x1a0(0x04)
	bool bUseTrueVerticalVelocity; // 0x1a4(0x01)
	bool bEnableTargetUpdating; // 0x1a5(0x01)
	char pad_1A6[0x2]; // 0x1a6(0x02)
	float ServerMovementTime; // 0x1a8(0x04)
	char pad_1AC[0xb4]; // 0x1ac(0xb4)
	bool bTeleportedThisMove; // 0x260(0x01)
	bool bNewServerMovementTime; // 0x261(0x01)
	char pad_262[0x2]; // 0x262(0x02)
	float ServerTeleportTime; // 0x264(0x04)
	struct FVector LaunchVelocity; // 0x268(0x0c)
	float DefaultProjectileSpeed; // 0x274(0x04)
	float DefaultProjectileGravityScale; // 0x278(0x04)
	float InitializedForUseTimestamp; // 0x27c(0x04)
	char pad_280[0x58]; // 0x280(0x58)

	void OnRep_ServerMovementTime(float& OldServerTime); // Function ShooterGame.FiniteSpeedMovementComponent.OnRep_ServerMovementTime // (Final|Native|Protected|HasOutParms) // @ game+0x2ea3d50
	void MulticastOnMaximumRangeReached(); // Function ShooterGame.FiniteSpeedMovementComponent.MulticastOnMaximumRangeReached // (Net|NetReliableNative|Event|NetMulticast|Protected|NetClient) // @ game+0x2ea3d20
};

// Class ShooterGame.FiringEffectComponent
// Size: 0x188 (Inherited: 0xf8)
struct UFiringEffectComponent : UEffectComponent {
	struct FMulticastInlineDelegate FxcOnRegisterFiringState; // 0xf8(0x10)
	struct FMulticastInlineDelegate FxcOnStartedShooting; // 0x108(0x10)
	struct FMulticastInlineDelegate FxcOnShot; // 0x118(0x10)
	struct FMulticastInlineDelegate FxcOnStoppedShooting; // 0x128(0x10)
	float BurstFireTailTimeMillseconds; // 0x138(0x04)
	bool bRemoteSimulated; // 0x13c(0x01)
	char pad_13D[0x3]; // 0x13d(0x03)
	int32_t RemoteSimulatedShotIndex; // 0x140(0x04)
	int32_t RemoteSimulatedMagazineAmmoCount; // 0x144(0x04)
	float NextShotTimeRemaining; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
	struct AShooterCharacter* FiringCharacter; // 0x150(0x08)
	struct FProjectileFireData FireData; // 0x158(0x30)

	void HandleStartEffect(struct AActor* Target, struct UObject* Context, float StartTime, bool FirstPerson); // Function ShooterGame.FiringEffectComponent.HandleStartEffect // (Final|Native|Protected) // @ game+0x2eaa310
	void HandleResetEffect(); // Function ShooterGame.FiringEffectComponent.HandleResetEffect // (Final|Native|Protected) // @ game+0x2eaa2f0
	struct TArray<struct UFiringEffectComponent*> GetOtherActiveFiringEffects(); // Function ShooterGame.FiringEffectComponent.GetOtherActiveFiringEffects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa100
	struct AShooterCharacter* GetFiringCharacter(); // Function ShooterGame.FiringEffectComponent.GetFiringCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa0e0
	int32_t GetAmmoRemainingInMagazine(); // Function ShooterGame.FiringEffectComponent.GetAmmoRemainingInMagazine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ea9f80
	void FiringStateOnStoppedShooting(struct UFiringStateComponent* FiringState); // Function ShooterGame.FiringEffectComponent.FiringStateOnStoppedShooting // (Final|Native|Protected) // @ game+0x2ea9e60
	void FiringStateOnStartedShooting(struct UFiringStateComponent* FiringState); // Function ShooterGame.FiringEffectComponent.FiringStateOnStartedShooting // (Final|Native|Protected) // @ game+0x2ea9dd0
	void FiringStateOnShot(struct UFiringStateComponent* FiringState, int32_t ShotIndex, bool bTracerEnabled, bool bWasLastShot, struct TArray<struct FFiringResults>& FiringResults); // Function ShooterGame.FiringEffectComponent.FiringStateOnShot // (Final|Native|Protected|HasOutParms) // @ game+0x2ea9be0
	void FireRemoteSimulatedShot(); // Function ShooterGame.FiringEffectComponent.FireRemoteSimulatedShot // (Final|Native|Protected) // @ game+0x2ea9bc0
};

// Class ShooterGame.FiringStateTransitionContext
// Size: 0x38 (Inherited: 0x30)
struct UFiringStateTransitionContext : UStateTransitionContext {
	enum class EFiringStateTransitionContext Context; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
};

// Class ShooterGame.FiringStateComponent
// Size: 0x4b8 (Inherited: 0x368)
struct UFiringStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnShot; // 0x368(0x10)
	char pad_378[0x18]; // 0x378(0x18)
	struct FMulticastInlineDelegate OnStartedShooting; // 0x390(0x10)
	struct FMulticastInlineDelegate OnStoppedShooting; // 0x3a0(0x10)
	struct FMulticastInlineDelegate OnReadyToFireThisFrame; // 0x3b0(0x10)
	enum class EShellCasingEjectableBehavior ShellCasingEjectableBehavior; // 0x3c0(0x01)
	char pad_3C1[0x3]; // 0x3c1(0x03)
	int32_t ResourcesConsumedPerShot; // 0x3c4(0x04)
	float ShotAudibleRange; // 0x3c8(0x04)
	float FiringRate; // 0x3cc(0x04)
	bool bCanFireWhileZooming; // 0x3d0(0x01)
	char pad_3D1[0x7]; // 0x3d1(0x07)
	struct TArray<struct FTriggerInput> FiringTriggerInputs; // 0x3d8(0x10)
	struct AEffectContainer* FiringEffectType; // 0x3e8(0x08)
	float ErrorPower; // 0x3f0(0x04)
	int32_t ErrorRetries; // 0x3f4(0x04)
	struct FAnimPunchTuning AnimPunchTuning; // 0x3f8(0x10)
	int32_t RoundsBetweenTracers; // 0x408(0x04)
	int32_t RoundsBetweenImpacts; // 0x40c(0x04)
	struct UStabilityComponent* RegisteredStabilityComponent; // 0x410(0x08)
	struct UResourceComponent* RegisteredResourceComponent; // 0x418(0x08)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0x420(0x08)
	struct FFiringStateVariables FiringStateVariables; // 0x428(0x10)
	int32_t RoundsUntilNextImpact; // 0x438(0x04)
	char pad_43C[0x4]; // 0x43c(0x04)
	struct UStateComponent* ReturnState; // 0x440(0x08)
	struct AShooterCharacter* OwningCharacter; // 0x448(0x08)
	struct FNetworkedMovementTimestamp LastShotSubframeTimeStamp; // 0x450(0x10)
	struct FNetworkedMovementTimestamp NextShotSubframeTimeStamp; // 0x460(0x10)
	struct AProjectile* ReusableHitScanProjectile; // 0x470(0x08)
	struct TArray<struct UFiringEffectComponent*> ActiveFiringEffects; // 0x478(0x10)
	struct FProjectileTuning ProjectileTuning; // 0x488(0x20)
	bool bBurstFire; // 0x4a8(0x01)
	char pad_4A9[0x3]; // 0x4a9(0x03)
	struct FBurstTuning BurstTuning; // 0x4ac(0x08)
	char pad_4B4[0x4]; // 0x4b4(0x04)

	void UpdateProjectile(struct AProjectile* ProjectileFired); // Function ShooterGame.FiringStateComponent.UpdateProjectile // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaaea0
	void UpdateFiringRate(float NewFiringRate); // Function ShooterGame.FiringStateComponent.UpdateFiringRate // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaae20
	void UnregisterFiringEffect(struct UFiringEffectComponent* FiringEffectComponent); // Function ShooterGame.FiringStateComponent.UnregisterFiringEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaad90
	void SetStabilityComponent(struct UStabilityComponent* StabilityComponent); // Function ShooterGame.FiringStateComponent.SetStabilityComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaad00
	void SetReturnState(struct UStateComponent* State); // Function ShooterGame.FiringStateComponent.SetReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaabe0
	void SetResourceComponent(struct UResourceComponent* ResourceComponent); // Function ShooterGame.FiringStateComponent.SetResourceComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaab50
	void SetNextState(struct UStateComponent* State); // Function ShooterGame.FiringStateComponent.SetNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaaac0
	void RequestTickDeferment(float TimeUntilNextShot); // Function ShooterGame.FiringStateComponent.RequestTickDeferment // (Final|Native|Private) // @ game+0x2eaa850
	void RegisterFiringEffect(struct UFiringEffectComponent* FiringEffectComponent); // Function ShooterGame.FiringStateComponent.RegisterFiringEffect // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaa7c0
	void OnOwningEquippableSetOwner(struct AAresEquippable* Equippable, struct AActor* NewOwner); // Function ShooterGame.FiringStateComponent.OnOwningEquippableSetOwner // (Final|Native|Private) // @ game+0x2eaa6f0
	void OnEquippableDisabled(); // Function ShooterGame.FiringStateComponent.OnEquippableDisabled // (Final|Native|Private) // @ game+0x2eaa6d0
	bool IsTriggerInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.FiringStateComponent.IsTriggerInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa600
	bool IsReleaseInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.FiringStateComponent.IsReleaseInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa530
	bool IsOnCooldown(); // Function ShooterGame.FiringStateComponent.IsOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa500
	bool IsBurstFire(); // Function ShooterGame.FiringStateComponent.IsBurstFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa4d0
	bool IsAutomatic(); // Function ShooterGame.FiringStateComponent.IsAutomatic // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa4a0
	bool IsAnyTriggerHeld(); // Function ShooterGame.FiringStateComponent.IsAnyTriggerHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa470
	struct UStabilityComponent* GetStabilityComponent(); // Function ShooterGame.FiringStateComponent.GetStabilityComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa1c0
	struct UResourceComponent* GetResourceComponent(); // Function ShooterGame.FiringStateComponent.GetResourceComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa190
	float GetCooldownTimeRemaining(); // Function ShooterGame.FiringStateComponent.GetCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ea9fb0
	void GetAppliedDamageEventsFromReusableHitScanProjectile(); // Function ShooterGame.FiringStateComponent.GetAppliedDamageEventsFromReusableHitScanProjectile // (Final|Native|Private) // @ game+0x1e6e7b0
	struct TArray<struct UFiringEffectComponent*> GetActiveFiringEffects(); // Function ShooterGame.FiringStateComponent.GetActiveFiringEffects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ea9ef0
	bool CanFire(enum class ECanFireCooldownCheckOption CooldownCheckOption); // Function ShooterGame.FiringStateComponent.CanFire // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ea9840
};

// Class ShooterGame.FixedDurationUnequipStateComponent
// Size: 0x3a8 (Inherited: 0x3a0)
struct UFixedDurationUnequipStateComponent : UTimedStateComponent {
	enum class EEquipSpeed EquipSpeed; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)
};

// Class ShooterGame.FixedMoveTimeStepManagerComponent
// Size: 0x100 (Inherited: 0xe8)
struct UFixedMoveTimeStepManagerComponent : UActorComponent {
	char FixedMoveTimeStepsPerSecond; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
	struct TArray<struct FScheduledTimeStepChange> ScheduledTimeStepChanges; // 0xf0(0x10)

	void OnRep_FixedMoveTimeStepsPerSecond(); // Function ShooterGame.FixedMoveTimeStepManagerComponent.OnRep_FixedMoveTimeStepsPerSecond // (Final|Native|Private) // @ game+0x1e6e7b0
	void AuthOnFixedMoveTimeStepChange(char MoveStepsPerSecond); // Function ShooterGame.FixedMoveTimeStepManagerComponent.AuthOnFixedMoveTimeStepChange // (Final|Native|Private) // @ game+0x2ea97a0
	void AuthDeclareFixedMoveTimeStepChange(float TargetTimeStampInSeconds, char MoveStepsPerSecond); // Function ShooterGame.FixedMoveTimeStepManagerComponent.AuthDeclareFixedMoveTimeStepChange // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ea96d0
	void AuthDeclareDefaultFixedMoveTimeStepChange(float TargetTimeStampInSeconds); // Function ShooterGame.FixedMoveTimeStepManagerComponent.AuthDeclareDefaultFixedMoveTimeStepChange // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
};

// Class ShooterGame.SubRangeListModelBase
// Size: 0x68 (Inherited: 0x58)
struct USubRangeListModelBase : UWrapperListModel {
	char pad_58[0x10]; // 0x58(0x10)

	int32_t MapIndexOuterToInnerUnbounded(int32_t OuterIndex); // Function ShooterGame.SubRangeListModelBase.MapIndexOuterToInnerUnbounded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3150610
	int32_t MapIndexOuterToInner(int32_t OuterIndex); // Function ShooterGame.SubRangeListModelBase.MapIndexOuterToInner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3150570
	int32_t MapIndexInnerToOuterUnbounded(int32_t InnerIndex, bool& bMapped); // Function ShooterGame.SubRangeListModelBase.MapIndexInnerToOuterUnbounded // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x31504a0
	int32_t MapIndexInnerToOuter(int32_t InnerIndex); // Function ShooterGame.SubRangeListModelBase.MapIndexInnerToOuter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3150400
	struct FIndexRange GetSubRange(); // Function ShooterGame.SubRangeListModelBase.GetSubRange // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48a90
};

// Class ShooterGame.PagedListModelBase
// Size: 0x90 (Inherited: 0x68)
struct UPagedListModelBase : USubRangeListModelBase {
	struct FMulticastInlineDelegate OnCurrentPageNumberChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnNumPagesChanged; // 0x78(0x10)
	char pad_88[0x8]; // 0x88(0x08)

	void SetCurrentPageNumber(int32_t NewValue); // Function ShooterGame.PagedListModelBase.SetCurrentPageNumber // (Final|Native|Public|BlueprintCallable) // @ game+0x2f88410
	int32_t MapIndexOuterToInnerPaged(struct FPagedListLocation OuterLocation); // Function ShooterGame.PagedListModelBase.MapIndexOuterToInnerPaged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f875d0
	struct FPagedListLocation MapIndexInnerToOuterPaged(int32_t InnerIndex); // Function ShooterGame.PagedListModelBase.MapIndexInnerToOuterPaged // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f87540
	int32_t GetPageStartIndex(int32_t PageNumber); // Function ShooterGame.PagedListModelBase.GetPageStartIndex // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2f85e40
	int32_t GetPageNumberForInnerIndex(int32_t InnerIndex); // Function ShooterGame.PagedListModelBase.GetPageNumberForInnerIndex // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2f85da0
	int32_t GetNumPages(); // Function ShooterGame.PagedListModelBase.GetNumPages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3a940
	int32_t GetCurrentPageNumber(); // Function ShooterGame.PagedListModelBase.GetCurrentPageNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3a920
	void BP_NotifyPageRangesChanged(); // Function ShooterGame.PagedListModelBase.BP_NotifyPageRangesChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f84870
};

// Class ShooterGame.FixedSizePagedListModel
// Size: 0x98 (Inherited: 0x90)
struct UFixedSizePagedListModel : UPagedListModelBase {
	char pad_90[0x8]; // 0x90(0x08)

	void SetMaxItemsPerPage(int32_t NewValue); // Function ShooterGame.FixedSizePagedListModel.SetMaxItemsPerPage // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaaa30
	int32_t GetMaxItemsPerPage(); // Function ShooterGame.FixedSizePagedListModel.GetMaxItemsPerPage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3ae40
	struct UFixedSizePagedListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, int32_t MaxItemsPerPage, int32_t PageNumber, struct UObject* Outer); // Function ShooterGame.FixedSizePagedListModel.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ea98d0
};

// Class ShooterGame.FixedSlotMapToListModelBase
// Size: 0xb8 (Inherited: 0x48)
struct UFixedSlotMapToListModelBase : UOrderedListModelBase {
	struct TArray<struct FWildcard> Items; // 0x48(0x10)
	struct TMap<struct FWildcard, int32_t> KeyToIndexMap; // 0x58(0x50)
	struct TScriptInterface<IUnorderedMapModel> WrappedMapModel; // 0xa8(0x10)

	void SetSlotCount(int32_t NewValue); // Function ShooterGame.FixedSlotMapToListModelBase.SetSlotCount // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaac70
	void SetMapModel(struct TScriptInterface<IUnorderedMapModel> NewValue); // Function ShooterGame.FixedSlotMapToListModelBase.SetMapModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2eaa990
	void HandleMapChanged(struct UObject* Source, struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.FixedSlotMapToListModelBase.HandleMapChanged // (Final|Native|Private|HasOutParms) // @ game+0x2eaa1f0
	int32_t GetSlotCount(); // Function ShooterGame.FixedSlotMapToListModelBase.GetSlotCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2da2d40
	struct FIndexRange GetEligibleIndexRange(struct FWildcard& item); // Function ShooterGame.FixedSlotMapToListModelBase.GetEligibleIndexRange // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x2ea9fe0
	void BP_FixUpSlots(); // Function ShooterGame.FixedSlotMapToListModelBase.BP_FixUpSlots // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ea9820
};

// Class ShooterGame.FixedSlotMapToListModel
// Size: 0xc8 (Inherited: 0xb8)
struct UFixedSlotMapToListModel : UFixedSlotMapToListModelBase {
	char pad_B8[0x10]; // 0xb8(0x10)

	void SetIndexRangeDelegate(struct FDelegate& Delegate); // Function ShooterGame.FixedSlotMapToListModel.SetIndexRangeDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2eaa8d0
	struct FIndexRange GetEligibleIndexRangeDynamicDelegate__DelegateSignature(struct FWildcard& item); // DelegateFunction ShooterGame.FixedSlotMapToListModel.GetEligibleIndexRangeDynamicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x3520f50
	void FixUpSlots(); // Function ShooterGame.FixedSlotMapToListModel.FixUpSlots // (Final|Native|Public|BlueprintCallable) // @ game+0x2ea9820
	struct UFixedSlotMapToListModel* Create(struct TScriptInterface<IUnorderedMapModel> MapModel, int32_t SlotCount, struct FDelegate& IndexRangeDelegate, struct UObject* Outer); // Function ShooterGame.FixedSlotMapToListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2ea9a30
};

// Class ShooterGame.FogOfWarBoundsComponent
// Size: 0x580 (Inherited: 0x570)
struct UFogOfWarBoundsComponent : UBoxComponent {
	bool bCountsForFogOfWarBounds; // 0x570(0x01)
	char pad_571[0xf]; // 0x571(0x0f)
};

// Class ShooterGame.FogOfWarDebugComponent
// Size: 0x100 (Inherited: 0xe8)
struct UFogOfWarDebugComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	bool bWasGameplayActive; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void OwnerHiddenChanged(struct AActor* Actor); // Function ShooterGame.FogOfWarDebugComponent.OwnerHiddenChanged // (Final|Native|Public) // @ game+0x2cb4be0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.FogOfWarDebugComponent.OnBugCommand // (Final|Native|Public) // @ game+0x2eb1960
};

// Class ShooterGame.FogOfWarManagerComponent
// Size: 0x2d0 (Inherited: 0xe8)
struct UFogOfWarManagerComponent : UActorComponent {
	float AdditionalLookAheadTime; // 0xe8(0x04)
	bool bTeamIsAlwaysRelevant; // 0xec(0x01)
	bool bUseSharedTeamRelevancy; // 0xed(0x01)
	bool bUseUmbraIfAvailable; // 0xee(0x01)
	char pad_EF[0x1]; // 0xef(0x01)
	float AlwaysRelevantDistanceSquared; // 0xf0(0x04)
	float NotRelevantCacheLifetimeInSeconds; // 0xf4(0x04)
	float PreRoundNotRelevantCacheLifetimeInSeconds; // 0xf8(0x04)
	float NoComponentCacheLifetimeInSeconds; // 0xfc(0x04)
	float TeamCacheLifetimeInSeconds; // 0x100(0x04)
	float RelevantCacheLifetimeInSeconds; // 0x104(0x04)
	int32_t CachePreallocationElements; // 0x108(0x04)
	char pad_10C[0x5c]; // 0x10c(0x5c)
	struct UUmbraPrecomputedData* UmbraData; // 0x168(0x08)
	char pad_170[0x150]; // 0x170(0x150)
	struct AShooterGameMode* OwnerGameMode; // 0x2c0(0x08)
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void OnRoundEnd(int32_t RoundNumber); // Function ShooterGame.FogOfWarManagerComponent.OnRoundEnd // (Final|Native|Protected) // @ game+0x2eb1ef0
	void OnRoundBegin(int32_t RoundNumber); // Function ShooterGame.FogOfWarManagerComponent.OnRoundBegin // (Final|Native|Protected) // @ game+0x2eb1e60
	void OnGameplayActiveChange(bool bNewIsGameplayActive); // Function ShooterGame.FogOfWarManagerComponent.OnGameplayActiveChange // (Final|Native|Protected) // @ game+0x2eb1ac0
};

// Class ShooterGame.FontStyleDataAsset
// Size: 0xb0 (Inherited: 0x38)
struct UFontStyleDataAsset : UPrimaryDataAsset {
	struct FAresFontStyle AresFontStyle; // 0x38(0x68)
	struct TArray<struct UFontStyleDataAsset*> ParentFontStyles; // 0xa0(0x10)
};

// Class ShooterGame.FootstepABTestComponentBase
// Size: 0xf8 (Inherited: 0xe8)
struct UFootstepABTestComponentBase : UActorComponent {
	struct FName TestName; // 0xe8(0x0c)
	char pad_F4[0x4]; // 0xf4(0x04)

	void AuthSendTelemetryEvent(struct FName GroupName); // Function ShooterGame.FootstepABTestComponentBase.AuthSendTelemetryEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2d5e3e0
};

// Class ShooterGame.FootstepsComponent
// Size: 0x250 (Inherited: 0xe8)
struct UFootstepsComponent : UActorComponent {
	float FootstepPlayTimeBank; // 0xe8(0x04)
	float LastFootstepPlayedTime; // 0xec(0x04)
	float FootstepPlayTimeSeconds; // 0xf0(0x04)
	float FootstepBankAccumulationStartPercent; // 0xf4(0x04)
	float PercentOfRunWalkTransitionToGenerateFootstepSound; // 0xf8(0x04)
	float FootstepSpeedPercentOfWalkingToDecayTimeBank; // 0xfc(0x04)
	float FootstepTimeBankDecayRate; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
	struct TArray<struct UAkAudioEvent*> RunFootstepEvents; // 0x108(0x10)
	struct TArray<struct UAkAudioEvent*> AltRunFootstepEvents; // 0x118(0x10)
	struct AEffectContainer* RunFootstepFXC; // 0x128(0x08)
	struct UAkAudioEvent* RunFootstepEvent; // 0x130(0x08)
	struct TArray<struct UAkAudioEvent*> JumpTakeOffEvents; // 0x138(0x10)
	struct TArray<struct UAkAudioEvent*> AltJumpTakeOffEvents; // 0x148(0x10)
	struct AEffectContainer* JumpTakeOffFXC; // 0x158(0x08)
	struct UAkAudioEvent* JumpTakeOffEvent; // 0x160(0x08)
	struct TArray<struct UAkAudioEvent*> JumpLandingEvents; // 0x168(0x10)
	struct TArray<struct UAkAudioEvent*> AltJumpLandingEvents; // 0x178(0x10)
	struct AEffectContainer* JumpLandingFXC; // 0x188(0x08)
	struct UAkAudioEvent* JumpLandingEvent; // 0x190(0x08)
	bool bUsingAlternateEvents; // 0x198(0x01)
	char pad_199[0x3]; // 0x199(0x03)
	float JumpFallDistanceRequiredForLandingSound; // 0x19c(0x04)
	struct FName FootstepSoundAttachPoint; // 0x1a0(0x0c)
	float FootstepAudibleDistance; // 0x1ac(0x04)
	float AltFootstepAudibleDistance; // 0x1b0(0x04)
	float CalloutAudibleDistanceScalar; // 0x1b4(0x04)
	bool bCountSteps; // 0x1b8(0x01)
	char pad_1B9[0x3]; // 0x1b9(0x03)
	float FootstepMinTickTime; // 0x1bc(0x04)
	struct FVector FloorMovementVelocity; // 0x1c0(0x0c)
	char pad_1CC[0x14]; // 0x1cc(0x14)
	struct TMap<struct FName, struct FFootstepOverrideType> FootstepOverrides; // 0x1e0(0x50)
	float NextFootstepTimeout; // 0x230(0x04)
	char pad_234[0x4]; // 0x234(0x04)
	struct UPhysicalMaterial* FootstepSoundOverride; // 0x238(0x08)
	struct AShooterCharacter* CharacterOwner; // 0x240(0x08)
	char pad_248[0x8]; // 0x248(0x08)

	void ReplayRecordLand(); // Function ShooterGame.FootstepsComponent.ReplayRecordLand // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2ca3cf0
	void ReplayRecordJump(); // Function ShooterGame.FootstepsComponent.ReplayRecordJump // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2eb23c0
	void PlayJumpTakeoffSound(); // Function ShooterGame.FootstepsComponent.PlayJumpTakeoffSound // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb23a0
	void PlayJumpLandingSound(); // Function ShooterGame.FootstepsComponent.PlayJumpLandingSound // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb2380
	void PlayFootstepSound(); // Function ShooterGame.FootstepsComponent.PlayFootstepSound // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb2360
	void OverrideFootstepSound(struct UPhysicalMaterial* NewMaterial, struct FName Tag, float Duration); // Function ShooterGame.FootstepsComponent.OverrideFootstepSound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2eb2230
	void OverrideAudioEvents(struct TArray<struct UAkAudioEvent*>& InRunFootstepEvents, struct TArray<struct UAkAudioEvent*>& InJumpTakeOffEvents, struct TArray<struct UAkAudioEvent*>& InJumpLandingEvents); // Function ShooterGame.FootstepsComponent.OverrideAudioEvents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2eb20a0
	void OnLanded(struct AShooterCharacter* Character, struct FHitResult Hit); // Function ShooterGame.FootstepsComponent.OnLanded // (Final|Native|Private) // @ game+0x2eb1c20
	void OnJumped(enum class EAresMovementType ServerMovementType, enum class EAresMovementType LocalMovementType); // Function ShooterGame.FootstepsComponent.OnJumped // (Final|Native|Private) // @ game+0x2eb1b50
	float GetSpeedForFootsteps(); // Function ShooterGame.FootstepsComponent.GetSpeedForFootsteps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb17c0
	struct TArray<struct UAkAudioEvent*> GetRunFootstepEvents(); // Function ShooterGame.FootstepsComponent.GetRunFootstepEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1730
	float GetMovementAudibleRadius(); // Function ShooterGame.FootstepsComponent.GetMovementAudibleRadius // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb16d0
	float GetMaxSpeedForFootsteps(); // Function ShooterGame.FootstepsComponent.GetMaxSpeedForFootsteps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1520
	float GetMaxSpeedForDecayingFootstepTimeBank(); // Function ShooterGame.FootstepsComponent.GetMaxSpeedForDecayingFootstepTimeBank // (Final|Native|Public|Const) // @ game+0x2eb14f0
	struct TArray<struct UAkAudioEvent*> GetJumpTakeOffEvents(); // Function ShooterGame.FootstepsComponent.GetJumpTakeOffEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb13f0
	struct TArray<struct UAkAudioEvent*> GetJumpLandingEvents(); // Function ShooterGame.FootstepsComponent.GetJumpLandingEvents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1360
	float GetFootstepVolumeReduction(); // Function ShooterGame.FootstepsComponent.GetFootstepVolumeReduction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1300
	float GetFootstepBankRate(); // Function ShooterGame.FootstepsComponent.GetFootstepBankRate // (Final|Native|Public|Const) // @ game+0x2eb12d0
	float GetFootstepAudibleDistance(); // Function ShooterGame.FootstepsComponent.GetFootstepAudibleDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb12a0
	void ClientControllerChanged(struct AController* OldController); // Function ShooterGame.FootstepsComponent.ClientControllerChanged // (Final|Native|Private) // @ game+0x2eb1120
	void AuthSetFloorMovementVelocity(struct FVector MovementSpeed); // Function ShooterGame.FootstepsComponent.AuthSetFloorMovementVelocity // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2eb1090
};

// Class ShooterGame.ForceModule
// Size: 0x168 (Inherited: 0x30)
struct UForceModule : UObject {
	struct TArray<struct FGameplayTag> ModuleTags; // 0x30(0x10)
	char pad_40[0x8]; // 0x40(0x08)
	struct TMap<enum class EForceModuleAttribute, struct FRuntimeFloatCurve> Modifiers; // 0x48(0x50)
	float Duration; // 0x98(0x04)
	char pad_9C[0x4]; // 0x9c(0x04)
	struct AActor* ForceSource; // 0xa0(0x08)
	struct FVector ForceSourceLocation; // 0xa8(0x0c)
	bool bRewindForceSource; // 0xb4(0x01)
	bool bGroundingForce; // 0xb5(0x01)
	bool bDisableMovementModifiers; // 0xb6(0x01)
	char pad_B7[0x3d]; // 0xb7(0x3d)
	bool bUseIntegrator; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	int32_t MaxIterations; // 0xf8(0x04)
	float MaxTimeStep; // 0xfc(0x04)
	bool bForceStopsOnBlock; // 0x100(0x01)
	char pad_101[0x7]; // 0x101(0x07)
	struct FClassInclusionExclusionFilter BlockingActorFilter; // 0x108(0x50)
	float MinAngleToStopForce; // 0x158(0x04)
	char pad_15C[0x8]; // 0x15c(0x08)
	float OffGroundTimeModifier; // 0x164(0x04)

	bool TickForceModule(float DeltaTime); // Function ShooterGame.ForceModule.TickForceModule // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void Shutdown(); // Function ShooterGame.ForceModule.Shutdown // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void SetDuration(float NewDuration); // Function ShooterGame.ForceModule.SetDuration // (Final|Native|Protected|BlueprintCallable) // @ game+0x2eb23f0
	void OnTargetMovementBlocked(struct FHitResult BlockingHit); // Function ShooterGame.ForceModule.OnTargetMovementBlocked // (Final|Native|Private) // @ game+0x2eb1f80
	void OnMovementBlocked(struct FHitResult& BlockingHit); // Function ShooterGame.ForceModule.OnMovementBlocked // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	struct FVector ModifyAcceleration(struct FVector& Acceleration, float Time); // Function ShooterGame.ForceModule.ModifyAcceleration // (Native|Event|Protected|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2eb1850
	void Initialize(); // Function ShooterGame.ForceModule.Initialize // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	float GetMovementTimestamp(); // Function ShooterGame.ForceModule.GetMovementTimestamp // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1700
	float GetModuleTimestamp(); // Function ShooterGame.ForceModule.GetModuleTimestamp // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb16a0
	float GetModuleTime(); // Function ShooterGame.ForceModule.GetModuleTime // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1670
	float GetModifierForAttribute(enum class EForceModuleAttribute Type); // Function ShooterGame.ForceModule.GetModifierForAttribute // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb15e0
	float GetModifierDuration(enum class EForceModuleAttribute Attribute); // Function ShooterGame.ForceModule.GetModifierDuration // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1550
	struct FVector GetLastUpdateNormalizedForceDirection(); // Function ShooterGame.ForceModule.GetLastUpdateNormalizedForceDirection // (Final|Native|Protected|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb14b0
	float GetLastUpdateForceMagnitudePerSecond(); // Function ShooterGame.ForceModule.GetLastUpdateForceMagnitudePerSecond // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1480
	struct FForceModuleHandle GetHandle(); // Function ShooterGame.ForceModule.GetHandle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb1330
	struct AActor* GetForceTarget(); // Function ShooterGame.ForceModule.GetForceTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dc3870
	float GetAttributeModifier(enum class EForceModuleAttribute Type, float Time); // Function ShooterGame.ForceModule.GetAttributeModifier // (Native|Event|Protected|BlueprintEvent) // @ game+0x2eb11b0
	struct FVector GetAppliedForce(struct FVector DestinationOffset, struct FVector Velocity, float TimeStep); // Function ShooterGame.ForceModule.GetAppliedForce // (Event|Protected|HasDefaults|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ForceModuleManagerComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UForceModuleManagerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnForceModulePreAdd; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnForceModuleAdded; // 0x100(0x10)
	struct FMulticastInlineDelegate OnForceModuleRemoved; // 0x110(0x10)
	char pad_120[0x20]; // 0x120(0x20)
	struct TArray<struct UForceModule*> ForceModules; // 0x140(0x10)
	struct TArray<struct FForceModuleRecord> AuthActivePredictedForceModules; // 0x150(0x10)
	char pad_160[0x48]; // 0x160(0x48)

	void RemoveForceModuleBySource(struct AActor* Source, struct UForceModule* Module, bool bAbort); // Function ShooterGame.ForceModuleManagerComponent.RemoveForceModuleBySource // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb9d60
	void RemoveForceModule(struct FForceModuleHandle Handle, bool bAbort); // Function ShooterGame.ForceModuleManagerComponent.RemoveForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb9c80
	void RemoveDeterministicForceModule(struct FForceModuleHandle Handle); // Function ShooterGame.ForceModuleManagerComponent.RemoveDeterministicForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb9c00
	void RemoveAllForceModulesByType(struct UForceModule* Module, bool bAbort); // Function ShooterGame.ForceModuleManagerComponent.RemoveAllForceModulesByType // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb9b30
	void OnRep_AuthActivePredictedForceModules(); // Function ShooterGame.ForceModuleManagerComponent.OnRep_AuthActivePredictedForceModules // (Final|Native|Public) // @ game+0x2eb9900
	bool HasActiveForceModuleWithTag(struct FGameplayTag& Tag); // Function ShooterGame.ForceModuleManagerComponent.HasActiveForceModuleWithTag // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb96e0
	bool HasActiveForceModuleOfType(struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.HasActiveForceModuleOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb9640
	bool HasActiveForceModuleBySource(struct AActor* Source, struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.HasActiveForceModuleBySource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb9570
	bool HasActiveForceModule(struct FForceModuleHandle& Handle); // Function ShooterGame.ForceModuleManagerComponent.HasActiveForceModule // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb94c0
	float GetForceModuleModifier(enum class EForceModuleAttribute Type); // Function ShooterGame.ForceModuleManagerComponent.GetForceModuleModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7df0
	int32_t GetActiveForceModuleCount(); // Function ShooterGame.ForceModuleManagerComponent.GetActiveForceModuleCount // (Final|Native|Public|Const) // @ game+0x2eb7c00
	struct TArray<struct UForceModule*> FindActiveForceModulesOfType(struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.FindActiveForceModulesOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7b10
	struct UForceModule* FindActiveForceModuleOfType(struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.FindActiveForceModuleOfType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7a70
	struct UForceModule* FindActiveForceModuleBySource(struct AActor* Source, struct UForceModule* Module); // Function ShooterGame.ForceModuleManagerComponent.FindActiveForceModuleBySource // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb79a0
	struct UForceModule* FindActiveForceModule(struct FForceModuleHandle& Handle); // Function ShooterGame.ForceModuleManagerComponent.FindActiveForceModule // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb78f0
	void ClientRemoveForceModule(struct FForceModuleHandle Handle, struct FNetworkedMovementTimestamp TimeStampToEnd); // Function ShooterGame.ForceModuleManagerComponent.ClientRemoveForceModule // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x2eb76f0
	void ClientApplyForceModule(struct FForceModuleHandle Handle, struct AActor* Source, struct FVector SourceLocation, struct UForceModule* Module, float Duration, struct FNetworkedMovementTimestamp Timestamp); // Function ShooterGame.ForceModuleManagerComponent.ClientApplyForceModule // (Final|Net|NetReliableNative|Event|Private|HasDefaults|NetClient) // @ game+0x2eb74c0
	struct FForceModuleHandle ApplyForceModule(struct AActor* Source, struct UForceModule* Module, float Duration); // Function ShooterGame.ForceModuleManagerComponent.ApplyForceModule // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2eb73a0
	struct FForceModuleHandle ApplyDeterministicForceModule(struct AActor* Source, struct UForceModule* Module, float Duration); // Function ShooterGame.ForceModuleManagerComponent.ApplyDeterministicForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb7280
	struct FForceModuleHandle ApplyClientSyncedForceModule(struct AActor* Source, struct UForceModule* Module, float Duration); // Function ShooterGame.ForceModuleManagerComponent.ApplyClientSyncedForceModule // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2eb7160
	struct FForceModuleHandle ApplyClientPredictedForceModule(struct AActor* Source, struct UForceModule* Module, float Duration); // Function ShooterGame.ForceModuleManagerComponent.ApplyClientPredictedForceModule // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb7040
};

// Class ShooterGame.SpectateActionComponent
// Size: 0x108 (Inherited: 0xe8)
struct USpectateActionComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	struct UScreenTransitionComponent* CachedTransitionComponent; // 0xf8(0x08)
	struct UViewTargetComponent* CachedViewTargetComponent; // 0x100(0x08)
};

// Class ShooterGame.FreeCamComponent
// Size: 0x150 (Inherited: 0x108)
struct UFreeCamComponent : USpectateActionComponent {
	char pad_108[0x30]; // 0x108(0x30)
	struct UGamepadInputComponent* CachedGamepadComponent; // 0x138(0x08)
	struct AObserverPawn* FreeCamPawn; // 0x140(0x08)
	bool bShouldSpectateFreeCam; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)

	void ServerToggleFreeCam(); // Function ShooterGame.FreeCamComponent.ServerToggleFreeCam // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2eb23c0
	void RequestToggleFreeCam(); // Function ShooterGame.FreeCamComponent.RequestToggleFreeCam // (Final|Native|Private) // @ game+0x2eb9fe0
	void OnViewTargetInfoReplicated(struct FViewTargetInfo& PreviousViewTargetInfo); // Function ShooterGame.FreeCamComponent.OnViewTargetInfoReplicated // (Final|Native|Private|HasOutParms) // @ game+0x2eb9920
	void OnOwnerSubobjectReplicated(struct UObject* Subobject); // Function ShooterGame.FreeCamComponent.OnOwnerSubobjectReplicated // (Final|Native|Private) // @ game+0x2eb9870
	void OnAuthBeforePendingViewTargetIsApplied(); // Function ShooterGame.FreeCamComponent.OnAuthBeforePendingViewTargetIsApplied // (Final|Native|Private) // @ game+0x2eb9810
	void ClientUpdateFreeCamPosition(struct AActor* ViewTargetToMatch); // Function ShooterGame.FreeCamComponent.ClientUpdateFreeCamPosition // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2d2bda0
	void ClientTeleportFreeCamToPosition(struct FVector Position, struct FRotator Rotation, bool bCheckCollision); // Function ShooterGame.FreeCamComponent.ClientTeleportFreeCamToPosition // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x2eb77d0
	void ClientFreeCamAtCurrentLocation(); // Function ShooterGame.FreeCamComponent.ClientFreeCamAtCurrentLocation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2eb76c0
};

// Class ShooterGame.FriendModel
// Size: 0x168 (Inherited: 0x30)
struct UFriendModel : UObject {
	struct FMulticastInlineDelegate OnConversationIDChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnDisplayGroupChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnGameNameChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnTagLineChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnGroupChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnNoteChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnMessageChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnProductChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnSummaryChanged; // 0xb0(0x10)
	struct FString Subject; // 0xc0(0x10)
	struct FString ConversationID; // 0xd0(0x10)
	struct FString DisplayGroup; // 0xe0(0x10)
	struct FString GameName; // 0xf0(0x10)
	struct FString TagLine; // 0x100(0x10)
	struct FString Group; // 0x110(0x10)
	struct FString Name; // 0x120(0x10)
	struct FString Note; // 0x130(0x10)
	struct FString Message; // 0x140(0x10)
	enum class EPresenceProduct product; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct FString Summary; // 0x158(0x10)

	struct FString GetTagLine(); // Function ShooterGame.FriendModel.GetTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb87f0
	struct FString GetSummary(); // Function ShooterGame.FriendModel.GetSummary // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8710
	struct FString GetSubject(); // Function ShooterGame.FriendModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8550
	enum class EPresenceProduct GetProduct(); // Function ShooterGame.FriendModel.GetProduct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8530
	struct FString GetNote(); // Function ShooterGame.FriendModel.GetNote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8370
	struct FString GetMessage(); // Function ShooterGame.FriendModel.GetMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8290
	struct FString GetGroup(); // Function ShooterGame.FriendModel.GetGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb80d0
	struct FString GetGameName(); // Function ShooterGame.FriendModel.GetGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7f10
	struct FString GetDisplayGroup(); // Function ShooterGame.FriendModel.GetDisplayGroup // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7d10
	struct FString GetConversationID(); // Function ShooterGame.FriendModel.GetConversationID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7c30
};

// Class ShooterGame.FriendNotificationManager
// Size: 0xa0 (Inherited: 0x80)
struct UFriendNotificationManager : UInitSystem {
	struct UFriendsManager* FriendsManager; // 0x80(0x08)
	struct UFriendsModel* FriendsModel; // 0x88(0x08)
	struct UNotificationManager* NotificationManager; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)

	bool IsDisabled(); // Function ShooterGame.FriendNotificationManager.IsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb9790
	void HandleYourFriendsListFull(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleYourFriendsListFull // (Final|Native|Private) // @ game+0x2eb9410
	void HandleRequestedPlayerNotFound(struct FString Name, struct FString TagLine); // Function ShooterGame.FriendNotificationManager.HandleRequestedPlayerNotFound // (Final|Native|Private) // @ game+0x2eb9300
	void HandleRepeatOutboundRequest(struct UFriendRequestModel* FriendRequest); // Function ShooterGame.FriendNotificationManager.HandleRepeatOutboundRequest // (Final|Native|Private) // @ game+0x2eb9270
	void HandleOutboundFriendRequestAdded(struct UFriendRequestModel* FriendRequest); // Function ShooterGame.FriendNotificationManager.HandleOutboundFriendRequestAdded // (Final|Native|Private) // @ game+0x2cb4be0
	void HandleMaximumOutgoingRequests(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleMaximumOutgoingRequests // (Final|Native|Private) // @ game+0x2eb91c0
	void HandleMaximumIncomingRequests(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleMaximumIncomingRequests // (Final|Native|Private) // @ game+0x2eb9110
	void HandleInboundFriendRequestRemoved(struct UFriendRequestModel* FriendRequest); // Function ShooterGame.FriendNotificationManager.HandleInboundFriendRequestRemoved // (Final|Native|Private) // @ game+0x2eb9080
	void HandleInboundFriendRequestAdded(struct UFriendRequestModel* FriendRequest); // Function ShooterGame.FriendNotificationManager.HandleInboundFriendRequestAdded // (Final|Native|Private) // @ game+0x2eb8ff0
	void HandleGenericDismiss(struct UGenericNotification* Notification); // Function ShooterGame.FriendNotificationManager.HandleGenericDismiss // (Final|Native|Private) // @ game+0x2eb8f60
	void HandleFriendRequestSent(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestSent // (Final|Native|Private) // @ game+0x2eb8eb0
	void HandleFriendRequestRejected(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestRejected // (Final|Native|Private) // @ game+0x2eb8e00
	void HandleFriendRequestNotSent(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestNotSent // (Final|Native|Private) // @ game+0x2eb8d50
	void HandleFriendRequestDeclineAction(struct UGenericNotification* Notification); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestDeclineAction // (Final|Native|Private) // @ game+0x2eb8cc0
	void HandleFriendRequestAcceptAction(struct UGenericNotification* Notification); // Function ShooterGame.FriendNotificationManager.HandleFriendRequestAcceptAction // (Final|Native|Private) // @ game+0x2eb8c30
	void HandleFriendRemoveFailed(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRemoveFailed // (Final|Native|Private) // @ game+0x2eb8ad0
	void HandleFriendRemoved(struct FString Name); // Function ShooterGame.FriendNotificationManager.HandleFriendRemoved // (Final|Native|Private) // @ game+0x2eb8b80
	void HandleFriendAdded(struct UFriendModel* FriendModel); // Function ShooterGame.FriendNotificationManager.HandleFriendAdded // (Final|Native|Private) // @ game+0x2eb8a40
	void HandleAlreadyFriends(struct UFriendModel* FriendModel); // Function ShooterGame.FriendNotificationManager.HandleAlreadyFriends // (Final|Native|Private) // @ game+0x2eb89b0
};

// Class ShooterGame.FriendRequestModel
// Size: 0x80 (Inherited: 0x30)
struct UFriendRequestModel : UObject {
	struct FString ID; // 0x30(0x10)
	struct FString Subject; // 0x40(0x10)
	struct FString GameName; // 0x50(0x10)
	struct FString TagLine; // 0x60(0x10)
	struct FString Note; // 0x70(0x10)

	struct FString GetTagLine(); // Function ShooterGame.FriendRequestModel.GetTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb88d0
	struct FString GetSubject(); // Function ShooterGame.FriendRequestModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8630
	struct FString GetNote(); // Function ShooterGame.FriendRequestModel.GetNote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8450
	struct FString GetID(); // Function ShooterGame.FriendRequestModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb81b0
	struct FString GetGameName(); // Function ShooterGame.FriendRequestModel.GetGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7ff0
};

// Class ShooterGame.FriendsManager
// Size: 0x180 (Inherited: 0x80)
struct UFriendsManager : UInitSystem {
	char pad_80[0x50]; // 0x80(0x50)
	struct FMulticastInlineDelegate OnFriendsLoaded; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnRequestedPlayerNotFound; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnMaximumIncomingRequests; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnMaximumOutgoingRequests; // 0x100(0x10)
	struct FMulticastInlineDelegate OnYourFriendsListFull; // 0x110(0x10)
	struct FMulticastInlineDelegate OnRepeatOutboundFriendRequest; // 0x120(0x10)
	struct FMulticastInlineDelegate OnAlreadyFriends; // 0x130(0x10)
	struct UConfigManager* ConfigManager; // 0x140(0x08)
	struct UFriendsService* FriendsService; // 0x148(0x08)
	struct UFriendsModel* FriendsModel; // 0x150(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0x158(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0x160(0x08)
	char pad_168[0x18]; // 0x168(0x18)

	void SendFriendRequest(struct FString Name, struct FString TagLine); // Function ShooterGame.FriendsManager.SendFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x2eba000
	void RemoveFriend(struct FString Name, struct FString TagLine, struct FString Subject); // Function ShooterGame.FriendsManager.RemoveFriend // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb9e70
	void RejectFriendRequest(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.FriendsManager.RejectFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb99b0
	void OnChatDisconnected(); // Function ShooterGame.FriendsManager.OnChatDisconnected // (Final|Native|Public) // @ game+0x2eb9850
	void OnChatConnected(); // Function ShooterGame.FriendsManager.OnChatConnected // (Final|Native|Public) // @ game+0x2eb9830
	bool IsFriendsModelInitialPopulationComplete(); // Function ShooterGame.FriendsManager.IsFriendsModelInitialPopulationComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb97f0
	bool IsDisabled(); // Function ShooterGame.FriendsManager.IsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb97c0
	struct UFriendsModel* GetFriendsModel(); // Function ShooterGame.FriendsManager.GetFriendsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eaa0e0
	struct UFriendsManager* GetFriendsManager(struct UObject* WorldContextObject); // Function ShooterGame.FriendsManager.GetFriendsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2eb7e80
	void AcceptFriendRequest(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.FriendsManager.AcceptFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x2eb6ec0
};

// Class ShooterGame.FriendsModel
// Size: 0x1a8 (Inherited: 0x30)
struct UFriendsModel : UObject {
	struct FMulticastInlineDelegate OnFriendAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnFriendRemoved; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOutboundFriendRequestAdded; // 0x50(0x10)
	struct FMulticastInlineDelegate OnOutboundFriendRequestRemoved; // 0x60(0x10)
	struct FMulticastInlineDelegate OnInboundFriendRequestAdded; // 0x70(0x10)
	struct FMulticastInlineDelegate OnInboundFriendRequestRemoved; // 0x80(0x10)
	struct TMap<struct FString, struct UFriendModel*> Friends; // 0x90(0x50)
	struct TMap<struct FString, struct UFriendRequestModel*> OutboundFriendRequests; // 0xe0(0x50)
	struct TMap<struct FString, struct UFriendRequestModel*> InboundFriendRequests_Backing; // 0x130(0x50)
	char pad_180[0x28]; // 0x180(0x28)

	bool IsFriend(struct FString Subject); // Function ShooterGame.FriendsModel.IsFriend // (Final|Native|Public|BlueprintCallable) // @ game+0x2ec2370
	struct TMap<struct FString, struct UFriendRequestModel*> GetOutboundFriendRequests(); // Function ShooterGame.FriendsModel.GetOutboundFriendRequests // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec08c0
	struct UFriendRequestModel* GetOutboundFriendRequestBySubject(struct FString Subject); // Function ShooterGame.FriendsModel.GetOutboundFriendRequestBySubject // (Final|Native|Public) // @ game+0x2ec0800
	struct TScriptInterface<IUnorderedMapModel> GetInboundFriendRequestsModel(); // Function ShooterGame.FriendsModel.GetInboundFriendRequestsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebfea0
	struct TMap<struct FString, struct UFriendRequestModel*> GetInboundFriendRequests(); // Function ShooterGame.FriendsModel.GetInboundFriendRequests // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebfd80
	struct UFriendRequestModel* GetInboundFriendRequestBySubject(struct FString Subject); // Function ShooterGame.FriendsModel.GetInboundFriendRequestBySubject // (Final|Native|Public) // @ game+0x2ebfcc0
	struct UFriendRequestModel* GetInboundFriendRequestByNameAndTag(struct FString Name, struct FString TagLine); // Function ShooterGame.FriendsModel.GetInboundFriendRequestByNameAndTag // (Final|Native|Public) // @ game+0x2ebfba0
	struct TMap<struct FString, struct UFriendModel*> GetFriends(); // Function ShooterGame.FriendsModel.GetFriends // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebf940
};

// Class ShooterGame.FriendsService
// Size: 0x40 (Inherited: 0x30)
struct UFriendsService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
	struct UConfigManager* ConfigManager; // 0x38(0x08)
};

// Class ShooterGame.FXCPoolWarmingList
// Size: 0x40 (Inherited: 0x30)
struct UFXCPoolWarmingList : UObject {
	struct TArray<struct FFXCPoolWarmingListEntry> Entries; // 0x30(0x10)
};

// Class ShooterGame.GameDataEventForwarder
// Size: 0x40 (Inherited: 0x30)
struct UGameDataEventForwarder : UObject {
	char pad_30[0x10]; // 0x30(0x10)
};

// Class ShooterGame.GameDataBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UGameDataBlueprintLibrary : UBlueprintFunctionLibrary {

	void RecordBombStateChangedEvent(struct UObject* WorldContextObject, enum class EAresBombStates NewState); // Function ShooterGame.GameDataBlueprintLibrary.RecordBombStateChangedEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ec2430
};

// Class ShooterGame.GameDataExportComponent
// Size: 0x198 (Inherited: 0xe8)
struct UGameDataExportComponent : UActorComponent {
	struct UShooterGameStateDataModel* GameStateModel; // 0xe8(0x08)
	bool bCanExportGameData; // 0xf0(0x01)
	char pad_F1[0x27]; // 0xf1(0x27)
	struct UShooterGameStateDataModel* GameStateModelClass; // 0x118(0x08)
	char pad_120[0x30]; // 0x120(0x30)
	struct TArray<struct UBaseGameDataEventReceiver*> EventReceivers; // 0x150(0x10)
	char pad_160[0x10]; // 0x160(0x10)
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x170(0x08)
	struct UPlayerGameDataEventSubscriptions* PlayerGameDataEventSubscriptions; // 0x178(0x08)
	struct UObserverGameDataEventSubscriptions* ObserverGameDataEventSubscriptions; // 0x180(0x08)
	struct UModeGameDataEventSubscriptions* ModeGameDataEventSubscriptions; // 0x188(0x08)
	struct UMatchRecoveryGameDataEventSubscriptions* MatchRecoveryGameDataEventSubscriptions; // 0x190(0x08)

	bool IsDataExportEnabled(); // Function ShooterGame.GameDataExportComponent.IsDataExportEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec2330
	void HandleGameDataExportFeatureToggled(enum class EGameFeatureToggleName Feature, bool bEnabled); // Function ShooterGame.GameDataExportComponent.HandleGameDataExportFeatureToggled // (Final|Native|Private) // @ game+0x2cdbee0
	struct UGameDataExportComponent* GetGameDataExportComponent(struct UObject* WorldContextObject); // Function ShooterGame.GameDataExportComponent.GetGameDataExportComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ebfa60
};

// Class ShooterGame.GameDataExporter
// Size: 0x190 (Inherited: 0x30)
struct UGameDataExporter : UObject {
	char pad_30[0x160]; // 0x30(0x160)
};

// Class ShooterGame.ShooterPlayerStateDataModel
// Size: 0xf0 (Inherited: 0x30)
struct UShooterPlayerStateDataModel : UObject {
	char pad_30[0x30]; // 0x30(0x30)
	struct UShooterTeamStateDataModel* TeamDataModel; // 0x60(0x08)
	struct AShooterPlayerState* PlayerState; // 0x68(0x08)
	struct UBaseTeamComponent* PlayerTeamComponent; // 0x70(0x08)
	struct AShooterCharacter* Character; // 0x78(0x08)
	struct UAresInventory* Inventory; // 0x80(0x08)
	struct TMap<enum class EAresItemSlot, struct AAresItem*> CachedLoadout; // 0x88(0x50)
	int32_t ModelId; // 0xd8(0x04)
	int32_t RoundCombatScore; // 0xdc(0x04)
	int32_t MatchCombatScore; // 0xe0(0x04)
	bool bIsDowned; // 0xe4(0x01)
	char pad_E5[0x3]; // 0xe5(0x03)
	float DownedTimestamp; // 0xe8(0x04)
	float DownedUnpausedTimestamp; // 0xec(0x04)

	void UnregisterTeamDataModelFromUpdates(struct UShooterTeamStateDataModel* TeamDataModel); // Function ShooterGame.ShooterPlayerStateDataModel.UnregisterTeamDataModelFromUpdates // (Final|Native|Public) // @ game+0x2ec26e0
	void SetDownedState(bool bDownedState); // Function ShooterGame.ShooterPlayerStateDataModel.SetDownedState // (Final|Native|Public) // @ game+0x2ec25c0
	void RoundStartedEvent(); // Function ShooterGame.ShooterPlayerStateDataModel.RoundStartedEvent // (Final|Native|Public) // @ game+0x2ec25a0
	void RegisterTeamDataModelForUpdates(struct UShooterTeamStateDataModel* TeamDataModel); // Function ShooterGame.ShooterPlayerStateDataModel.RegisterTeamDataModelForUpdates // (Final|Native|Public) // @ game+0x2ec2510
	bool IsDowned(); // Function ShooterGame.ShooterPlayerStateDataModel.IsDowned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec2350
	bool IsCoach(); // Function ShooterGame.ShooterPlayerStateDataModel.IsCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec22e0
	bool IsBot(); // Function ShooterGame.ShooterPlayerStateDataModel.IsBot // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec2180
	bool IsAlive(); // Function ShooterGame.ShooterPlayerStateDataModel.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec2130
	void InitializeModel(int32_t InModelId, struct AShooterPlayerState* InPlayerState); // Function ShooterGame.ShooterPlayerStateDataModel.InitializeModel // (Native|Event|Public|BlueprintEvent) // @ game+0x2ec2050
	bool HasSpike(); // Function ShooterGame.ShooterPlayerStateDataModel.HasSpike // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec2000
	void HandleSpawnedCharacterChanged(struct AShooterCharacter* NewCharacter); // Function ShooterGame.ShooterPlayerStateDataModel.HandleSpawnedCharacterChanged // (Final|Native|Protected) // @ game+0x2ec1f10
	void HandleInventoryTransaction(enum class EInventoryTransaction Transaction, struct UAresInventory* Inventory, struct AAresItem* item); // Function ShooterGame.ShooterPlayerStateDataModel.HandleInventoryTransaction // (Final|Native|Protected) // @ game+0x2ec1210
	enum class EAresTeamRole GetTeamRole(); // Function ShooterGame.ShooterPlayerStateDataModel.GetTeamRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0ec0
	struct UShooterTeamStateDataModel* GetTeamDataModel(); // Function ShooterGame.ShooterPlayerStateDataModel.GetTeamDataModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0e10
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.ShooterPlayerStateDataModel.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0dd0
	int32_t GetRoundCombatScore(); // Function ShooterGame.ShooterPlayerStateDataModel.GetRoundCombatScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0d20
	struct FString GetPlayerSubject(); // Function ShooterGame.ShooterPlayerStateDataModel.GetPlayerSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0bf0
	struct FString GetPlayerName(); // Function ShooterGame.ShooterPlayerStateDataModel.GetPlayerName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0ac0
	int32_t GetNumUltimatePoints(); // Function ShooterGame.ShooterPlayerStateDataModel.GetNumUltimatePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0720
	int32_t GetNumPointsNeededForUltimate(); // Function ShooterGame.ShooterPlayerStateDataModel.GetNumPointsNeededForUltimate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec06a0
	int32_t GetMoney(); // Function ShooterGame.ShooterPlayerStateDataModel.GetMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0650
	int32_t GetModelId(); // Function ShooterGame.ShooterPlayerStateDataModel.GetModelId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0620
	struct FString GetMegapacketTagLine(); // Function ShooterGame.ShooterPlayerStateDataModel.GetMegapacketTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0480
	struct FString GetMegapacketGameName(); // Function ShooterGame.ShooterPlayerStateDataModel.GetMegapacketGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec01a0
	int32_t GetMatchCombatScore(); // Function ShooterGame.ShooterPlayerStateDataModel.GetMatchCombatScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebff20
	struct UAresInventory* GetInventory(); // Function ShooterGame.ShooterPlayerStateDataModel.GetInventory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcc080
	float GetDownedUnpausedTimestamp(); // Function ShooterGame.ShooterPlayerStateDataModel.GetDownedUnpausedTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebf920
	float GetDownedTimestamp(); // Function ShooterGame.ShooterPlayerStateDataModel.GetDownedTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebf900
	struct FGuid GetDesiredClassUuid(); // Function ShooterGame.ShooterPlayerStateDataModel.GetDesiredClassUuid // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebf8a0
	struct UBasicCombatStatsComponent* GetBasicCombatStatsComponent(); // Function ShooterGame.ShooterPlayerStateDataModel.GetBasicCombatStatsComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebf820
	void AssociateTeamDataModel(struct UShooterTeamStateDataModel* NewTeamDataModel); // Function ShooterGame.ShooterPlayerStateDataModel.AssociateTeamDataModel // (Final|Native|Public) // @ game+0x2ebf790
	void AddScoreDelta(int32_t Total); // Function ShooterGame.ShooterPlayerStateDataModel.AddScoreDelta // (Final|Native|Public) // @ game+0x2ebf700
};

// Class ShooterGame.ShooterObserverStateDataModel
// Size: 0x48 (Inherited: 0x30)
struct UShooterObserverStateDataModel : UObject {
	int32_t ModelId; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct AObserverPlayerState* ObserverPlayerState; // 0x38(0x08)
	struct UShooterPlayerStateDataModel* PlayerTarget; // 0x40(0x08)

	void SetPlayerTarget(struct UShooterPlayerStateDataModel* NewPlayerTarget); // Function ShooterGame.ShooterObserverStateDataModel.SetPlayerTarget // (Final|Native|Public) // @ game+0x2ec2650
	void InitializeModel(int32_t InModelId, struct AObserverPlayerState* InObserverPlayerState); // Function ShooterGame.ShooterObserverStateDataModel.InitializeModel // (Native|Event|Public|BlueprintEvent) // @ game+0x2ec2050
	int32_t GetModelId(); // Function ShooterGame.ShooterObserverStateDataModel.GetModelId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec05f0
	struct FString GetMegapacketTagLine(); // Function ShooterGame.ShooterObserverStateDataModel.GetMegapacketTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0310
	struct FString GetMegapacketGameName(); // Function ShooterGame.ShooterObserverStateDataModel.GetMegapacketGameName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0030
};

// Class ShooterGame.ShooterGameStateDataModel
// Size: 0x488 (Inherited: 0x30)
struct UShooterGameStateDataModel : UObject {
	char pad_30[0x288]; // 0x30(0x288)
	struct UShooterPlayerStateDataModel* PlayerModelClass; // 0x2b8(0x08)
	struct UShooterObserverStateDataModel* ObserverModelClass; // 0x2c0(0x08)
	struct UShooterTeamStateDataModel* TeamModelClass; // 0x2c8(0x08)
	struct AShooterGameState* GameState; // 0x2d0(0x08)
	struct FTimerHandle WorldSnapshottingTimer; // 0x2d8(0x08)
	struct FTimerHandle WorldConfigurationTimer; // 0x2e0(0x08)
	int32_t LastIssuedID; // 0x2e8(0x04)
	enum class EShooterGameMode GameMode; // 0x2ec(0x01)
	char pad_2ED[0x3]; // 0x2ed(0x03)
	struct TArray<struct FRoundDataModel> CompletedRounds; // 0x2f0(0x10)
	struct TMap<struct AShooterPlayerState*, struct UShooterPlayerStateDataModel*> PlayersLookup; // 0x300(0x50)
	struct TArray<struct UShooterPlayerStateDataModel*> PlayerDataModels; // 0x350(0x10)
	struct TMap<struct AObserverPlayerState*, struct UShooterObserverStateDataModel*> ObserversLookup; // 0x360(0x50)
	struct TArray<struct UShooterObserverStateDataModel*> ObserverDataModels; // 0x3b0(0x10)
	struct TMap<struct UBaseTeamComponent*, struct UShooterTeamStateDataModel*> TeamsLookup; // 0x3c0(0x50)
	struct TArray<struct UShooterTeamStateDataModel*> TeamDataModels; // 0x410(0x10)
	char pad_420[0x58]; // 0x420(0x58)
	struct TArray<struct UObject*> EventReceivers; // 0x478(0x10)

	void InitializeModel(struct AShooterGameState* InGameState); // Function ShooterGame.ShooterGameStateDataModel.InitializeModel // (Native|Event|Public|BlueprintEvent) // @ game+0x2dac320
	void HandleWorldSnapshot(); // Function ShooterGame.ShooterGameStateDataModel.HandleWorldSnapshot // (Final|Native|Protected) // @ game+0x2ec1fe0
	void HandleWorldConfiguration(); // Function ShooterGame.ShooterGameStateDataModel.HandleWorldConfiguration // (Final|Native|Protected) // @ game+0x2ec1fc0
	void HandleTeamListUpdated(); // Function ShooterGame.ShooterGameStateDataModel.HandleTeamListUpdated // (Final|Native|Protected) // @ game+0x2ec1fa0
	void HandleScoreChanged(); // Function ShooterGame.ShooterGameStateDataModel.HandleScoreChanged // (Final|Native|Protected) // @ game+0x2ec1ef0
	void HandleRoundStart(int32_t RoundNumber); // Function ShooterGame.ShooterGameStateDataModel.HandleRoundStart // (Final|Native|Protected) // @ game+0x2ec1e60
	void HandleRoundResultsChanged(); // Function ShooterGame.ShooterGameStateDataModel.HandleRoundResultsChanged // (Final|Native|Protected) // @ game+0x2ec1e40
	void HandleRoundEnd(int32_t RoundNumber); // Function ShooterGame.ShooterGameStateDataModel.HandleRoundEnd // (Final|Native|Protected) // @ game+0x2ec1db0
	void HandleRoundCeremonyUpdated(struct AAresCeremony* Ceremony); // Function ShooterGame.ShooterGameStateDataModel.HandleRoundCeremonyUpdated // (Final|Native|Protected) // @ game+0x2ec1d20
	void HandlePlayerSpawned(struct AShooterPlayerState* PlayerState, struct APawn* Pawn); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerSpawned // (Final|Native|Protected) // @ game+0x2ec1c50
	void HandlePlayerResurrected(struct AShooterPlayerState* ResurrectorPlayerState, struct AShooterPlayerState* ResurrectedPlayerState, int32_t KillNumberForLifeForResurrector, int32_t KillNumberForLifeForResurrected); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerResurrected // (Final|Native|Protected) // @ game+0x2ec1af0
	void HandlePlayerRecovered(struct AShooterPlayerState* RecoveredByPlayerState, struct AShooterPlayerState* RecoveredPlayerState); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerRecovered // (Final|Native|Protected) // @ game+0x2ec1a20
	void HandlePlayerListUpdated(); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerListUpdated // (Final|Native|Protected) // @ game+0x2ec1a00
	void HandlePlayerKilled(struct AShooterPlayerState* KillerPlayerState, struct AShooterPlayerState* KilledPlayerState, int32_t KillNumberInRoundForKiller, int32_t KillNumberInRoundForKilled, struct UDamageResponse* Response, struct AAresEquippable* EquippableUsed, struct TArray<struct FAresAssist>& AssistsList); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerKilled // (Final|Native|Protected|HasOutParms) // @ game+0x2ec17b0
	void HandlePlayerDowned(struct AShooterPlayerState* DamagerPlayer, struct AShooterPlayerState* DownedPlayer, struct UDamageResponse* DamageResponse, struct AAresEquippable* EquippableUsed, bool bRecoversInstantly); // Function ShooterGame.ShooterGameStateDataModel.HandlePlayerDowned // (Final|Native|Protected) // @ game+0x2ec1610
	void HandleObserverTargetSet(struct AObserverPlayerState* ObserverPlayerState, struct AShooterPlayerState* ObserverTarget); // Function ShooterGame.ShooterGameStateDataModel.HandleObserverTargetSet // (Final|Native|Protected) // @ game+0x2ec1540
	void HandleMatchTimeoutStateChanged(enum class EAresMatchTimeoutState TimeoutState, float Duration); // Function ShooterGame.ShooterGameStateDataModel.HandleMatchTimeoutStateChanged // (Final|Native|Protected) // @ game+0x2ec1470
	void HandleMatchPaused(bool IsPaused); // Function ShooterGame.ShooterGameStateDataModel.HandleMatchPaused // (Final|Native|Protected) // @ game+0x2ec13e0
	void HandleMatchEnded(struct FAresMatchResult& MatchResult); // Function ShooterGame.ShooterGameStateDataModel.HandleMatchEnded // (Final|Native|Protected|HasOutParms) // @ game+0x2ec1340
	void HandleMatchBegin(); // Function ShooterGame.ShooterGameStateDataModel.HandleMatchBegin // (Final|Native|Protected) // @ game+0x2ec1320
	void HandleGameRestarted(int32_t RollbackRoundNumber); // Function ShooterGame.ShooterGameStateDataModel.HandleGameRestarted // (Final|Native|Protected) // @ game+0x2ec1180
	void HandleGamePhaseChanged(enum class EAresGamePhase NewPhase, int32_t RoundNumber); // Function ShooterGame.ShooterGameStateDataModel.HandleGamePhaseChanged // (Final|Native|Protected) // @ game+0x2ec10b0
	void HandleDropInEnabledChanged(bool bIsDropInEnabled); // Function ShooterGame.ShooterGameStateDataModel.HandleDropInEnabledChanged // (Final|Native|Protected) // @ game+0x2ec1020
	void HandleDamageEvent(struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterGameStateDataModel.HandleDamageEvent // (Final|Native|Protected) // @ game+0x2ec0f90
	void HandleBombStateChanged(enum class EAresBombStates NewState); // Function ShooterGame.ShooterGameStateDataModel.HandleBombStateChanged // (Final|Native|Public) // @ game+0x2ec0f10
	struct TArray<struct UShooterTeamStateDataModel*> GetTeamDataModels(); // Function ShooterGame.ShooterGameStateDataModel.GetTeamDataModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0e30
	struct UShooterGameStateDataModel* GetShooterGameStateDataModel(struct UObject* WorldContextObject); // Function ShooterGame.ShooterGameStateDataModel.GetShooterGameStateDataModel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ec0d40
	struct TArray<struct UShooterPlayerStateDataModel*> GetPlayerDataModels(); // Function ShooterGame.ShooterGameStateDataModel.GetPlayerDataModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec09e0
	struct TArray<struct UShooterObserverStateDataModel*> GetObserverDataModels(); // Function ShooterGame.ShooterGameStateDataModel.GetObserverDataModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0770
	int32_t GetNumPointsToWinGame(); // Function ShooterGame.ShooterGameStateDataModel.GetNumPointsToWinGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec06f0
	float GetMatchTimeoutTimeRemaining(); // Function ShooterGame.ShooterGameStateDataModel.GetMatchTimeoutTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebfff0
	struct UShooterTeamStateDataModel* GetMatchTimeoutCallingTeamDataModel(); // Function ShooterGame.ShooterGameStateDataModel.GetMatchTimeoutCallingTeamDataModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebff40
	bool GetIsMatchTimeoutActive(); // Function ShooterGame.ShooterGameStateDataModel.GetIsMatchTimeoutActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebfee0
	struct TArray<struct FRoundDataModel> GetGameRounds(); // Function ShooterGame.ShooterGameStateDataModel.GetGameRounds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebfb10
	enum class EShooterGameMode GetGameMode(); // Function ShooterGame.ShooterGameStateDataModel.GetGameMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebfaf0
	int32_t GetCurrentRoundNumber(); // Function ShooterGame.ShooterGameStateDataModel.GetCurrentRoundNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ebf860
};

// Class ShooterGame.ShooterTeamStateDataModel
// Size: 0x58 (Inherited: 0x30)
struct UShooterTeamStateDataModel : UObject {
	int32_t Points; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct UShooterPlayerStateDataModel*> PlayersOnTeam; // 0x38(0x10)
	struct UBaseTeamComponent* TeamComponent; // 0x48(0x08)
	int32_t ModelId; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)

	void RefreshPlayerModelsOnTeam(); // Function ShooterGame.ShooterTeamStateDataModel.RefreshPlayerModelsOnTeam // (Final|Native|Public) // @ game+0x2ec24f0
	void InitializeModel(int32_t InModelId, struct UBaseTeamComponent* InTeamComponent); // Function ShooterGame.ShooterTeamStateDataModel.InitializeModel // (Native|Event|Public|BlueprintEvent) // @ game+0x2ec2050
	struct TArray<struct UShooterPlayerStateDataModel*> GetPlayerModelsOnTeam(); // Function ShooterGame.ShooterTeamStateDataModel.GetPlayerModelsOnTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0a10
};

// Class ShooterGame.GameFeatureTogglesComponent
// Size: 0x17d8 (Inherited: 0xe8)
struct UGameFeatureTogglesComponent : UActorComponent {
	struct FMulticastInlineDelegate OnGameFeatureToggleChanged_NotifyBlueprint; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnGameRuleBoolChanged_NotifyBlueprint; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnGameFeatureFloatConfigChanged_NotifyBlueprint; // 0x108(0x10)
	struct FMulticastInlineDelegate OnMegapacketAppliedReplicated; // 0x118(0x10)
	struct TArray<char> GameFeatureToggleValues; // 0x128(0x10)
	struct TArray<char> GameRuleBoolValues; // 0x138(0x10)
	float GameFeatureFloatConfigValues[0x21]; // 0x148(0x84)
	bool bMegapacketApplied; // 0x1cc(0x01)
	char pad_1CD[0x160b]; // 0x1cd(0x160b)

	void SetGameRuleBoolValue(enum class EGameRuleBoolName RuleName, bool bEnabled); // Function ShooterGame.GameFeatureTogglesComponent.SetGameRuleBoolValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2ecf7e0
	void OnRep_MegapacketApplied(); // Function ShooterGame.GameFeatureTogglesComponent.OnRep_MegapacketApplied // (Final|Native|Private) // @ game+0x2ecf710
	void OnRep_GameRuleBoolValues_InitialOnly(); // Function ShooterGame.GameFeatureTogglesComponent.OnRep_GameRuleBoolValues_InitialOnly // (Final|Native|Private) // @ game+0x2ecf6f0
	void OnRep_GameFeatureToggleValues_InitialOnly(); // Function ShooterGame.GameFeatureTogglesComponent.OnRep_GameFeatureToggleValues_InitialOnly // (Final|Native|Private) // @ game+0x2ecf6d0
	void OnRep_GameFeatureFloatConfigValues_InitialOnly(); // Function ShooterGame.GameFeatureTogglesComponent.OnRep_GameFeatureFloatConfigValues_InitialOnly // (Final|Native|Private) // @ game+0x2ecf6b0
	void MulticastSetGameRuleBool(enum class EGameRuleBoolName GameRuleBoolName, bool bEnabled); // Function ShooterGame.GameFeatureTogglesComponent.MulticastSetGameRuleBool // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2ecf5d0
	void MulticastSetGameFloatConfigValue(enum class EGameFeatureFloatConfigName ConfigName, float ConfigValue); // Function ShooterGame.GameFeatureTogglesComponent.MulticastSetGameFloatConfigValue // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2ecf500
	void MulticastSetGameFeatureEnabled(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.GameFeatureTogglesComponent.MulticastSetGameFeatureEnabled // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2ecf420
	struct AActor* GetGameFeatureClass(struct FGameFeatureSubclass& GameFeatureClass, struct UObject* WorldContextObject); // Function ShooterGame.GameFeatureTogglesComponent.GetGameFeatureClass // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2ecf100
};

// Class ShooterGame.GameFlowPredictionManager
// Size: 0x70 (Inherited: 0x30)
struct UGameFlowPredictionManager : UObject {
	char pad_30[0x30]; // 0x30(0x30)
	struct UPlatformSessionManager* SessionManager; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	void HandleSessionLoopStateChanged(); // Function ShooterGame.GameFlowPredictionManager.HandleSessionLoopStateChanged // (Final|Native|Private) // @ game+0x2ecf380
	void ClearSessionLoopStatePrediction(); // Function ShooterGame.GameFlowPredictionManager.ClearSessionLoopStatePrediction // (Final|Native|Private) // @ game+0x2ecf020
};

// Class ShooterGame.GameFlowStateManager
// Size: 0x168 (Inherited: 0x80)
struct UGameFlowStateManager : UInitSystem {
	struct FMulticastInlineDelegate OnStateChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnTransitionWidgetVisibilityChanged; // 0x90(0x10)
	struct UGameFlowState* CurrentState; // 0xa0(0x08)
	struct TMap<enum class EGameFlowStateType, struct UGameFlowState*> GameFlowStates; // 0xa8(0x50)
	struct TArray<struct FTimerHandle> ReconcileTimerHandles; // 0xf8(0x10)
	struct UGameFlowStateDependencySet* DependencySet; // 0x108(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x110(0x08)
	struct UPartyManager* PartyManager; // 0x118(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x120(0x08)
	struct UConfigManager* ConfigManager; // 0x128(0x08)
	struct UPregameManager* PregameManager; // 0x130(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x138(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x150(0x08)
	struct UGameInstance* TransitionWidgetOuter; // 0x158(0x08)
	struct UTransitionManagerWidget* TransitionManagerWidget; // 0x160(0x08)

	void Reconcile(); // Function ShooterGame.GameFlowStateManager.Reconcile // (Final|Native|Private) // @ game+0x2ecf7c0
	void PlatformUnhealthyReconcileWrapper(enum class EPlatformFaultReason& Reason); // Function ShooterGame.GameFlowStateManager.PlatformUnhealthyReconcileWrapper // (Final|Native|Private|HasOutParms) // @ game+0x2ecf730
	void HandleTransitionWidgetVisibilityChanged(enum class ESlateVisibility NewVisibility); // Function ShooterGame.GameFlowStateManager.HandleTransitionWidgetVisibilityChanged // (Final|Native|Private) // @ game+0x2ecf3a0
	enum class ESlateVisibility GetVisibilityOfTransitionWidget(); // Function ShooterGame.GameFlowStateManager.GetVisibilityOfTransitionWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ecf350
	struct UGameFlowState* GetState(enum class EGameFlowStateType GameFlowStateType); // Function ShooterGame.GameFlowStateManager.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ecf290
	struct UGameFlowStateManager* GetGameFlowStateManager(struct UObject* WorldContextObject); // Function ShooterGame.GameFlowStateManager.GetGameFlowStateManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ecf200
	enum class EGameFlowStateType GetCurrentStateType(); // Function ShooterGame.GameFlowStateManager.GetCurrentStateType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ecf0d0
	struct UGameFlowState* GetCurrentState(); // Function ShooterGame.GameFlowStateManager.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dcbd60
	struct TArray<struct UTransitionGameFlowState*> GetAllTransitionStates(); // Function ShooterGame.GameFlowStateManager.GetAllTransitionStates // (Final|Native|Public|Const) // @ game+0x2ecf040
};

// Class ShooterGame.GameFlowState
// Size: 0x88 (Inherited: 0x30)
struct UGameFlowState : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	bool bRequiresValidMatchID; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct UAresClientEvents* AresClientEvents; // 0x58(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x60(0x08)
	struct UConfigManager* ConfigManager; // 0x68(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x70(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x78(0x08)
	char pad_80[0x8]; // 0x80(0x08)

	enum class EGameFlowStateType GetType(); // Function ShooterGame.GameFlowState.GetType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ecf320
};

// Class ShooterGame.GameFlowStateDependencySet
// Size: 0x88 (Inherited: 0x30)
struct UGameFlowStateDependencySet : UObject {
	struct UAresClientEvents* AresClientEvents; // 0x30(0x08)
	struct UPartyManager* PartyManager; // 0x38(0x08)
	struct UPingManager* PingManager; // 0x40(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x48(0x08)
	struct UConfigManager* ConfigManager; // 0x50(0x08)
	struct UPregameManager* PregameManager; // 0x58(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x60(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x78(0x08)
	struct UAntiAddictionManager* AntiAddictionManager; // 0x80(0x08)
};

// Class ShooterGame.GameInfoContentWidget
// Size: 0x2f8 (Inherited: 0x2c8)
struct UGameInfoContentWidget : UUserWidget {
	struct UCoordinatedHUDElement* GameInfoTimerElement; // 0x2c8(0x08)
	struct UCoordinatedHUDElement* GameInfoRoundElement; // 0x2d0(0x08)
	struct UCoordinatedHUDElement* MyTeamScoreElement; // 0x2d8(0x08)
	struct UCoordinatedHUDElement* EnemyTeamScoreElement; // 0x2e0(0x08)
	struct UCoordinatedHUDElement* AlliedTeamParticipants; // 0x2e8(0x08)
	struct UCoordinatedHUDElement* EnemyTeamParticipants; // 0x2f0(0x08)
};

// Class ShooterGame.GameModeControllerData
// Size: 0xf0 (Inherited: 0xe8)
struct UGameModeControllerData : UActorComponent {
	bool bShouldAnnounceUltimate; // 0xe8(0x01)
	char pad_E9[0x7]; // 0xe9(0x07)
};

// Class ShooterGame.GameModeReplayComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UGameModeReplayComponent : UActorComponent {

	void AuthSaveCheckpoint(int32_t RoundNumberBeginning); // Function ShooterGame.GameModeReplayComponent.AuthSaveCheckpoint // (Final|Native|Public) // @ game+0x2ca3d20
	void AuthOnGamePhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.GameModeReplayComponent.AuthOnGamePhaseChanged // (Final|Native|Public) // @ game+0x2cedcd0
};

// Class ShooterGame.GameModeStateMachineComponent
// Size: 0x1e0 (Inherited: 0x1e0)
struct UGameModeStateMachineComponent : UStateMachineComponent {

	void ScriptSetStartingState(struct UStateComponent* State); // Function ShooterGame.GameModeStateMachineComponent.ScriptSetStartingState // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ed72e0
};

// Class ShooterGame.GameModifierInputComponent
// Size: 0x178 (Inherited: 0x158)
struct UGameModifierInputComponent : UGameModifierComponent {
	struct TArray<struct FText> InputBindingDisplayNames; // 0x158(0x10)
	struct TArray<struct FName> InputBindingNames; // 0x168(0x10)

	void HandleInputActivated(struct FName InputName); // Function ShooterGame.GameModifierInputComponent.HandleInputActivated // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	struct TArray<struct FName> GetInputBindingNames(); // Function ShooterGame.GameModifierInputComponent.GetInputBindingNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6970
	struct TArray<struct FText> GetInputBindingDisplayNames(); // Function ShooterGame.GameModifierInputComponent.GetInputBindingDisplayNames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ed6890
};

// Class ShooterGame.GameModifierManager
// Size: 0x3d0 (Inherited: 0x3d0)
struct AGameModifierManager : AInfo {

	void AuthWalk(struct ACharacter* TargetCharacter); // Function ShooterGame.GameModifierManager.AuthWalk // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2d54b90
	void AuthGhost(struct ACharacter* TargetCharacter); // Function ShooterGame.GameModifierManager.AuthGhost // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2d54b90
	void AuthFly(struct ACharacter* TargetCharacter, bool bIsCheat); // Function ShooterGame.GameModifierManager.AuthFly // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x2ed6180
};

// Class ShooterGame.GameModifiersMenu
// Size: 0x2f0 (Inherited: 0x2c8)
struct UGameModifiersMenu : UUserWidget {
	struct UVerticalBox* KeybindWidgetBox; // 0x2c8(0x08)
	struct UVerticalBox* MatchFlowWidgetBox; // 0x2d0(0x08)
	struct UVerticalBox* GameWidgetBox; // 0x2d8(0x08)
	struct UVerticalBox* PlayerWidgetBox; // 0x2e0(0x08)
	char pad_2E8[0x8]; // 0x2e8(0x08)

	void TryPopulateModifierMenu(); // Function ShooterGame.GameModifiersMenu.TryPopulateModifierMenu // (Final|Native|Private|BlueprintCallable) // @ game+0x2ed7880
	void RetryPopulateModifierMenu(struct AAresPlayerStateBase* NewPlayerState); // Function ShooterGame.GameModifiersMenu.RetryPopulateModifierMenu // (Final|Native|Private) // @ game+0x2ed7250
	void PopulateMenuWithWidgets(struct TArray<struct UGameModifierWidget*>& DisplayedModifiers); // Function ShooterGame.GameModifiersMenu.PopulateMenuWithWidgets // (Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void OnModifierManagerReplicated(); // Function ShooterGame.GameModifiersMenu.OnModifierManagerReplicated // (Final|Native|Private) // @ game+0x2ed7230
	void OnMegapacketAppliedReplicated(bool bMegapacketApplied); // Function ShooterGame.GameModifiersMenu.OnMegapacketAppliedReplicated // (Final|Native|Private) // @ game+0x2ed71a0
	struct UGameModifierWidget* CreateModifierWidget(struct UGameModifierComponent* Modifier); // Function ShooterGame.GameModifiersMenu.CreateModifierWidget // (Native|Event|Protected|BlueprintEvent) // @ game+0x2ed63b0
};

// Class ShooterGame.GameModifierWidget
// Size: 0x2d0 (Inherited: 0x2c8)
struct UGameModifierWidget : UDesignableUserWidget {
	char pad_2C8[0x8]; // 0x2c8(0x08)

	void SetUpCustom(struct UGameModifierComponent* Modifier); // Function ShooterGame.GameModifierWidget.SetUpCustom // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void SetUp(struct UGameModifierComponent* Modifier); // Function ShooterGame.GameModifierWidget.SetUp // (Final|Native|Public|BlueprintCallable) // @ game+0x2ed7480
	void OnAddedToMenu(struct UGameModifiersMenu* Menu); // Function ShooterGame.GameModifierWidget.OnAddedToMenu // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	struct UGameModifierComponent* GetSourceModifier(); // Function ShooterGame.GameModifierWidget.GetSourceModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cece30
};

// Class ShooterGame.BoolModifierBaseWidgetNative
// Size: 0x2f8 (Inherited: 0x2d0)
struct UBoolModifierBaseWidgetNative : UGameModifierWidget {
	struct UTextBlock* DisplayNameText; // 0x2d0(0x08)
	struct UButton* FalseButton; // 0x2d8(0x08)
	struct UTextBlock* FalseText; // 0x2e0(0x08)
	struct UButton* TrueButton; // 0x2e8(0x08)
	struct UTextBlock* TrueText; // 0x2f0(0x08)
};

// Class ShooterGame.TriggerModifierBaseWidgetNative
// Size: 0x2e0 (Inherited: 0x2d0)
struct UTriggerModifierBaseWidgetNative : UGameModifierWidget {
	struct UTextBlock* TextBlockNormal; // 0x2d0(0x08)
	struct UTextBlock* TextBlockHover; // 0x2d8(0x08)
};

// Class ShooterGame.DropdownModifierBaseWidgetNative
// Size: 0x2e0 (Inherited: 0x2d0)
struct UDropdownModifierBaseWidgetNative : UGameModifierWidget {
	struct UComboBoxString* ComboBox; // 0x2d0(0x08)
	struct UTextBlock* DisplayNameText; // 0x2d8(0x08)
};

// Class ShooterGame.RoundRestoreModifierBaseWidgetNative
// Size: 0x2e8 (Inherited: 0x2d0)
struct URoundRestoreModifierBaseWidgetNative : UGameModifierWidget {
	struct UButton* Button; // 0x2d0(0x08)
	struct UTextBlock* ButtonText; // 0x2d8(0x08)
	struct UComboBoxString* ComboBox; // 0x2e0(0x08)
};

// Class ShooterGame.GameObjectMinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UGameObjectMinimapDisplayComponentDeprecated : UMinimapDisplayComponentDeprecated {
};

// Class ShooterGame.GameObjectVisibilityComponent
// Size: 0x180 (Inherited: 0x180)
struct UGameObjectVisibilityComponent : UVisibilityComponent {
};

// Class ShooterGame.GamepadBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UGamepadBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool WasLastInputGamepad(struct UObject* ContextObject); // Function ShooterGame.GamepadBlueprintFunctionLibrary.WasLastInputGamepad // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ed79a0
	bool IsGamepadEnabled(struct UObject* WorldContextObject); // Function ShooterGame.GamepadBlueprintFunctionLibrary.IsGamepadEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ed6e10
};

// Class ShooterGame.GamepadInputComponent
// Size: 0x180 (Inherited: 0xe8)
struct UGamepadInputComponent : UActorComponent {
	char pad_E8[0x70]; // 0xe8(0x70)
	struct FVector2D CurAdjustedRotationRates; // 0x158(0x08)
	struct FVector2D CurLookStickVector; // 0x160(0x08)
	struct FVector2D CurWalkStickVector; // 0x168(0x08)
	struct FVector2D CurAccelDelayPercent; // 0x170(0x08)
	struct FVector2D CurAccelRampUpPercent; // 0x178(0x08)

	void GamepadTurnAtRate(float Rate); // Function ShooterGame.GamepadInputComponent.GamepadTurnAtRate // (Final|Native|Public|BlueprintCallable) // @ game+0x2ed65e0
	void GamepadMoveRight(float Rate); // Function ShooterGame.GamepadInputComponent.GamepadMoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0x2ed6560
	void GamepadMoveForward(float Rate); // Function ShooterGame.GamepadInputComponent.GamepadMoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0x2ed64e0
	void GamepadLookUpAtRate(float Rate); // Function ShooterGame.GamepadInputComponent.GamepadLookUpAtRate // (Final|Native|Public|BlueprintCallable) // @ game+0x2ed6460
};

// Class ShooterGame.GamepadInputIconBase
// Size: 0x2f8 (Inherited: 0x2c8)
struct UGamepadInputIconBase : UUserWidget {
	struct FMulticastInlineDelegate OnKeyChanged; // 0x2c8(0x10)
	struct FKey InternalKey; // 0x2d8(0x20)

	void SetBaseKey(struct FKey Key); // Function ShooterGame.GamepadInputIconBase.SetBaseKey // (Final|Native|Public|BlueprintCallable) // @ game+0x2ed7370
};

// Class ShooterGame.GamepadNavigationSlider
// Size: 0x568 (Inherited: 0x568)
struct UGamepadNavigationSlider : USlider {

	void SimulateMouseLeave(); // Function ShooterGame.GamepadNavigationSlider.SimulateMouseLeave // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ed77b0
	void SimulateMouseEnter(); // Function ShooterGame.GamepadNavigationSlider.SimulateMouseEnter // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ed7790
};

// Class ShooterGame.GamepadNavigationWidgetSwitcher
// Size: 0x1c8 (Inherited: 0x178)
struct UGamepadNavigationWidgetSwitcher : UWidgetSwitcher {
	char pad_178[0x50]; // 0x178(0x50)

	void AddTabFocusWidgetPair(struct UWidget* Key, struct UWidget* Value); // Function ShooterGame.GamepadNavigationWidgetSwitcher.AddTabFocusWidgetPair // (Final|Native|Public|BlueprintCallable) // @ game+0x2ed5fb0
};

// Class ShooterGame.GamepadOptionsScreen
// Size: 0x320 (Inherited: 0x2c8)
struct UGamepadOptionsScreen : UUserWidget {
	struct FKey RightNavigationKey; // 0x2c8(0x20)
	struct FKey LeftNavigationKey; // 0x2e8(0x20)
	char pad_308[0x18]; // 0x308(0x18)

	void SetupNavigationList(struct TArray<struct UWidget*> OrderedWidgetList, enum class EUINavigation Direction, bool bStopsOtherDirections); // Function ShooterGame.GamepadOptionsScreen.SetupNavigationList // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ed7610
	void SetupNavigationLink(struct UWidget* Start, enum class EUINavigation Direction, struct UWidget* End); // Function ShooterGame.GamepadOptionsScreen.SetupNavigationLink // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ed7510
	struct UWidget* GetLastFocusableNavigationWidget(struct TArray<struct UWidget*>& VerticalWidgetList); // Function ShooterGame.GamepadOptionsScreen.GetLastFocusableNavigationWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2ed6a00
	struct UWidget* GetFirstFocusableNavigationWidget(struct TArray<struct UWidget*>& VerticalWidgetList); // Function ShooterGame.GamepadOptionsScreen.GetFirstFocusableNavigationWidget // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2ed67b0
	struct UWidget* GetFirstAvailableChildOfType(struct TArray<struct UPanelWidget*> Parents, struct UWidget* RequestedClass); // Function ShooterGame.GamepadOptionsScreen.GetFirstAvailableChildOfType // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ed6660
	void AddButtonToNavigationTabs(struct UButton* Button); // Function ShooterGame.GamepadOptionsScreen.AddButtonToNavigationTabs // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ed5e20
	void AddButtonsToNavigationTabs(struct TArray<struct UButton*> ButtonsInOrder); // Function ShooterGame.GamepadOptionsScreen.AddButtonsToNavigationTabs // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ed5eb0
	void ActivateButton(struct UButton* Button); // Function ShooterGame.GamepadOptionsScreen.ActivateButton // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ed5da0
};

// Class ShooterGame.GameplayNotificationWidget
// Size: 0x2f0 (Inherited: 0x2d8)
struct UGameplayNotificationWidget : UCoordinatedHUDElement {
	bool bIsRequired; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	float WidgetPriority; // 0x2dc(0x04)
	enum class EGameplayNotificationWidgetSlot NotificationSlot; // 0x2e0(0x01)
	char pad_2E1[0x7]; // 0x2e1(0x07)
	struct UGameplayNotificationView* NotificationView; // 0x2e8(0x08)

	void StartFadeOut(); // Function ShooterGame.GameplayNotificationWidget.StartFadeOut // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void StartFadeIn(); // Function ShooterGame.GameplayNotificationWidget.StartFadeIn // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	enum class EGameplayNotificationStatus GetStatus(); // Function ShooterGame.GameplayNotificationWidget.GetStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0bf0
	struct UGameplayNotificationType* GetNotificationType(); // Function ShooterGame.GameplayNotificationWidget.GetNotificationType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee08d0
	void DisplayEditorPreview(); // Function ShooterGame.GameplayNotificationWidget.DisplayEditorPreview // (Native|Event|Public|BlueprintEvent) // @ game+0x2ee0710
};

// Class ShooterGame.GameplayNotificationType
// Size: 0x70 (Inherited: 0x30)
struct UGameplayNotificationType : UObject {
	enum class EGameplayNotificationDurationType DurationType; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float DisplayTime; // 0x34(0x04)
	float FadeOutDuration; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct TArray<struct UGameplayNotificationWidget*> WidgetTypes; // 0x40(0x10)
	char pad_50[0x18]; // 0x50(0x18)
	struct UCoordinatedHUDModel* HUDModel; // 0x68(0x08)

	void StopNotification(); // Function ShooterGame.GameplayNotificationType.StopNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee13a0
	void StartNotification(); // Function ShooterGame.GameplayNotificationType.StartNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee1380
	void SetHUDModel(struct UCoordinatedHUDModel* InHUDModel); // Function ShooterGame.GameplayNotificationType.SetHUDModel // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2dac320
};

// Class ShooterGame.GameplayNotificationSystemComponent
// Size: 0x108 (Inherited: 0xe8)
struct UGameplayNotificationSystemComponent : UActorComponent {
	struct TArray<struct UGameplayNotificationType*> SupportedNotificationTypes; // 0xe8(0x10)
	struct TArray<struct UGameplayNotificationType*> NotificationTypes; // 0xf8(0x10)
};

// Class ShooterGame.GameplayNotificationView
// Size: 0x78 (Inherited: 0x30)
struct UGameplayNotificationView : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct UGameplayNotificationWidget*> Widgets; // 0x48(0x10)
	struct UGameplayNotificationType* NotificationType; // 0x58(0x08)
	char pad_60[0x8]; // 0x60(0x08)
	struct UGameplayNotificationContainerHUDElement* Container; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	void HandleDesiredVisibilityChanged(struct UGameplayNotificationType* Notification, bool bDesiredVisibility); // Function ShooterGame.GameplayNotificationView.HandleDesiredVisibilityChanged // (Final|Native|Protected) // @ game+0x2ee0ec0
};

// Class ShooterGame.GameplayNotificationContainerHUDElement
// Size: 0x368 (Inherited: 0x2d8)
struct UGameplayNotificationContainerHUDElement : UCoordinatedHUDElement {
	struct UWidgetSwitcher* BannerSwitcher; // 0x2d8(0x08)
	struct UWidgetSwitcher* IconSwitcher; // 0x2e0(0x08)
	struct UWidgetSwitcher* RingSwitcher; // 0x2e8(0x08)
	struct UWidgetSwitcher* BackgroundSwitcher; // 0x2f0(0x08)
	struct TSoftClassPtr<UObject> PreviewNotificationType; // 0x2f8(0x30)
	struct UGameplayNotificationType* CachedPreviewNotificationType; // 0x328(0x08)
	struct UGameplayNotificationType* PreviewNotification; // 0x330(0x08)
	struct UCoordinatedHUDModel* HUDModel; // 0x338(0x08)
	struct UGameplayNotificationSystemComponent* NotificationComponent; // 0x340(0x08)
	char pad_348[0x10]; // 0x348(0x10)
	struct TArray<struct UGameplayNotificationView*> NotificationViews; // 0x358(0x10)

	void HandleGameStateChanged(); // Function ShooterGame.GameplayNotificationContainerHUDElement.HandleGameStateChanged // (Final|Native|Protected) // @ game+0x2ee0f90
	struct UCoordinatedHUDModel* GetHUDModel(); // Function ShooterGame.GameplayNotificationContainerHUDElement.GetHUDModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0840
};

// Class ShooterGame.GameplayVote
// Size: 0x538 (Inherited: 0x3d0)
struct AGameplayVote : AInfo {
	struct UReplicationSleepComponent* ReplicationSleepComponent; // 0x3d0(0x08)
	struct FMulticastInlineDelegate OnOptionUpdated; // 0x3d8(0x10)
	struct FMulticastInlineDelegate OnParticipantsUpdated; // 0x3e8(0x10)
	struct FMulticastInlineDelegate OnCurrentStateUpdated; // 0x3f8(0x10)
	struct TArray<struct UGameplayVoteOptionComponent*> Options; // 0x408(0x10)
	struct UGameplayVoteOptionComponent* DefaultOption; // 0x418(0x08)
	struct FText Text; // 0x420(0x18)
	float VotePeriodSeconds; // 0x438(0x04)
	float ResultsPeriodSeconds; // 0x43c(0x04)
	float StartOfPhaseVoteCallingWindowSeconds; // 0x440(0x04)
	bool bExtendVoteByVoteCallingWindow; // 0x444(0x01)
	bool bExtendsPastCurrentGamePhase; // 0x445(0x01)
	enum class EVoteState CurrentState; // 0x446(0x01)
	char pad_447[0x1]; // 0x447(0x01)
	struct TArray<struct AShooterPlayerState*> Participants; // 0x448(0x10)
	bool bCanActivateAnyTime; // 0x458(0x01)
	char pad_459[0x7]; // 0x459(0x07)
	struct TArray<struct FText> SlashCommandStrings; // 0x460(0x10)
	struct FText OnStartedNotification; // 0x470(0x18)
	struct FText VoteQueuedNotification; // 0x488(0x18)
	struct FText RateLimitedNotification; // 0x4a0(0x18)
	struct FText CoachesCannotVoteNotification; // 0x4b8(0x18)
	struct FString TelemetryVoteName; // 0x4d0(0x10)
	bool bAllowCoachesToRequest; // 0x4e0(0x01)
	char pad_4E1[0x7]; // 0x4e1(0x07)
	struct TArray<struct FText> RuntimeSlashCommands; // 0x4e8(0x10)
	char pad_4F8[0x8]; // 0x4f8(0x08)
	struct TArray<struct AShooterPlayerState*> NotVotedParticipants; // 0x500(0x10)
	char pad_510[0xc]; // 0x510(0x0c)
	float TotalTimeForCurrentState; // 0x51c(0x04)
	char pad_520[0x8]; // 0x520(0x08)
	struct AShooterPlayerState* Requester; // 0x528(0x08)
	char pad_530[0x8]; // 0x530(0x08)

	bool Validate(struct AShooterPlayerState* RequestingPlayer, struct AShooterGameState* GameState); // Function ShooterGame.GameplayVote.Validate // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
	void SetRequester(struct AShooterPlayerState* Player); // Function ShooterGame.GameplayVote.SetRequester // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee12f0
	void OnRep_Participants(); // Function ShooterGame.GameplayVote.OnRep_Participants // (Final|Native|Private) // @ game+0x2ee12b0
	void OnRep_CurrentState(); // Function ShooterGame.GameplayVote.OnRep_CurrentState // (Final|Native|Private) // @ game+0x2ee1290
	bool IsCurrentStateTimed(); // Function ShooterGame.GameplayVote.IsCurrentStateTimed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee11f0
	bool IsCanActivateAnyTime(); // Function ShooterGame.GameplayVote.IsCanActivateAnyTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee11c0
	void HandleVotesChanged(struct AGameplayVote* Vote, struct UGameplayVoteOptionComponent* Option, int32_t NewVoteCount); // Function ShooterGame.GameplayVote.HandleVotesChanged // (Final|Native|Private) // @ game+0x2ee10b0
	void HandleOptionsUpdated(struct AGameplayVote* Vote, struct TArray<struct UGameplayVoteOptionComponent*>& NewOptions); // Function ShooterGame.GameplayVote.HandleOptionsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x2ee0fb0
	struct FText GetVoteQueuedNotification(); // Function ShooterGame.GameplayVote.GetVoteQueuedNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ee0de0
	int32_t GetVotePeriodSeconds(); // Function ShooterGame.GameplayVote.GetVotePeriodSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0db0
	float GetTotalTimeForCurrentState(); // Function ShooterGame.GameplayVote.GetTotalTimeForCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0d20
	struct FText GetText(); // Function ShooterGame.GameplayVote.GetText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0cb0
	struct FString GetTelemetryVoteName(); // Function ShooterGame.GameplayVote.GetTelemetryVoteName // (Final|Native|Public|Const) // @ game+0x2ee0c20
	float GetStartOfPhaseVoteCallingWindowSeconds(); // Function ShooterGame.GameplayVote.GetStartOfPhaseVoteCallingWindowSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0bc0
	int32_t GetResultsPeriodSeconds(); // Function ShooterGame.GameplayVote.GetResultsPeriodSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0b90
	struct AShooterPlayerState* GetRequester(); // Function ShooterGame.GameplayVote.GetRequester // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0b60
	float GetRemainingTimeInCurrentState(); // Function ShooterGame.GameplayVote.GetRemainingTimeInCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0b30
	struct FText GetRateLimitedNotification(); // Function ShooterGame.GameplayVote.GetRateLimitedNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ee0ac0
	struct TArray<struct AShooterPlayerState*> GetParticipants(); // Function ShooterGame.GameplayVote.GetParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0a30
	struct TArray<struct UGameplayVoteOptionComponent*> GetOptions(); // Function ShooterGame.GameplayVote.GetOptions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0970
	struct FText GetOnStartedNotification(); // Function ShooterGame.GameplayVote.GetOnStartedNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ee0900
	bool GetExtendVoteByVoteCallingWindow(); // Function ShooterGame.GameplayVote.GetExtendVoteByVoteCallingWindow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0810
	float GetElapsedTimeInCurrentState(); // Function ShooterGame.GameplayVote.GetElapsedTimeInCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee07e0
	struct UGameplayVoteOptionComponent* GetDefaultOption(); // Function ShooterGame.GameplayVote.GetDefaultOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ceccb0
	enum class EVoteState GetCurrentState(); // Function ShooterGame.GameplayVote.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee07b0
	struct FText GetCoachesCannotVoteNotification(); // Function ShooterGame.GameplayVote.GetCoachesCannotVoteNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ee0740
	struct TArray<struct AShooterPlayerState*> GenerateParticipants(struct AShooterPlayerState* RequestingPlayer); // Function ShooterGame.GameplayVote.GenerateParticipants // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent|Const) // @ game+0x3520f50
	void AuthSetVotePeriodSeconds(float InPeriodSeconds); // Function ShooterGame.GameplayVote.AuthSetVotePeriodSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AuthSetParticipants(struct TArray<struct AShooterPlayerState*>& NewParticipants); // Function ShooterGame.GameplayVote.AuthSetParticipants // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e5ed60
	void AuthSetCurrentState(enum class EVoteState NewState); // Function ShooterGame.GameplayVote.AuthSetCurrentState // (Final|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	bool AuthRecordPlayerVote(struct AShooterPlayerState* Player, struct UGameplayVoteOptionComponent* Option); // Function ShooterGame.GameplayVote.AuthRecordPlayerVote // (Final|Native|Public|BlueprintCallable) // @ game+0x2df2c10
	void AuthOnStarted(); // Function ShooterGame.GameplayVote.AuthOnStarted // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool AuthIsReadyToActivate(); // Function ShooterGame.GameplayVote.AuthIsReadyToActivate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee06e0
	bool AuthIsAwaitingReplication(); // Function ShooterGame.GameplayVote.AuthIsAwaitingReplication // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee06b0
	int32_t AuthGetID(); // Function ShooterGame.GameplayVote.AuthGetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0680
	void AuthAddParticipant(struct AShooterPlayerState* Participant); // Function ShooterGame.GameplayVote.AuthAddParticipant // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	bool AreCoachesAllowedToRequest(); // Function ShooterGame.GameplayVote.AreCoachesAllowedToRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0660
};

// Class ShooterGame.GameplayVoteOptionComponent
// Size: 0x140 (Inherited: 0xe8)
struct UGameplayVoteOptionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnVotesChanged; // 0xe8(0x10)
	struct FText OptionName; // 0xf8(0x18)
	struct TArray<struct FText> SlashCommands; // 0x110(0x10)
	struct TArray<struct FText> RuntimeSlashCommands; // 0x120(0x10)
	char pad_130[0x1]; // 0x130(0x01)
	bool bIsDefaultOption; // 0x131(0x01)
	char pad_132[0x2]; // 0x132(0x02)
	int32_t VoteKeybindIndex; // 0x134(0x04)
	float VotesNeededRatio; // 0x138(0x04)
	int32_t Votes; // 0x13c(0x04)

	void OnSelected(); // Function ShooterGame.GameplayVoteOptionComponent.OnSelected // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnRep_Votes(); // Function ShooterGame.GameplayVoteOptionComponent.OnRep_Votes // (Final|Native|Private) // @ game+0x2ee12d0
	bool IsSelected(); // Function ShooterGame.GameplayVoteOptionComponent.IsSelected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee1260
	bool IsDefaultOption(); // Function ShooterGame.GameplayVoteOptionComponent.IsDefaultOption // (Final|Native|Public|Const) // @ game+0x2ee1230
	int32_t GetVotesNeeded(); // Function ShooterGame.GameplayVoteOptionComponent.GetVotesNeeded // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2ee0e80
	int32_t GetVotes(); // Function ShooterGame.GameplayVoteOptionComponent.GetVotes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0e50
	int32_t GetVoteKeybindIndex(); // Function ShooterGame.GameplayVoteOptionComponent.GetVoteKeybindIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0d90
	struct FName GetVoteActionName(); // Function ShooterGame.GameplayVoteOptionComponent.GetVoteActionName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0d50
	struct AGameplayVote* GetParentVote(); // Function ShooterGame.GameplayVoteOptionComponent.GetParentVote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0a00
	struct FText GetName(); // Function ShooterGame.GameplayVoteOptionComponent.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0860
	void AuthIncrement(); // Function ShooterGame.GameplayVoteOptionComponent.AuthIncrement // (Final|Native|Public) // @ game+0x1e6e7b0
};

// Class ShooterGame.GameStateHUDConfig
// Size: 0xc0 (Inherited: 0x30)
struct UGameStateHUDConfig : UObject {
	struct FHUDTimerConfig MatchTimerConfig; // 0x30(0x68)
	struct FHUDVisibilityConfig ElementVisibilityConfig; // 0x98(0x0d)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct FHUDPhaseContext PhaseContext; // 0xa8(0x18)
};

// Class ShooterGame.GameStatisticsComponent
// Size: 0x118 (Inherited: 0xe8)
struct UGameStatisticsComponent : UActorComponent {
	struct FMulticastInlineDelegate OnAbilityUsed; // 0xe8(0x10)
	struct FMulticastInlineDelegate AuthOnAbilitySpawnedSubActor; // 0xf8(0x10)
	struct TArray<struct FIndividualGameStatistic> StatsToTrack; // 0x108(0x10)

	int32_t GetLatestCastIndex(); // Function ShooterGame.GameStatisticsComponent.GetLatestCastIndex // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2ee0e80
	int32_t AuthCastAbility(struct FVector AbilityLocation); // Function ShooterGame.GameStatisticsComponent.AuthCastAbility // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2ee7d00
	bool AuthAddStatistic(struct FName KeyName, float ValueToAdd, enum class EAresAlliance Alliance); // Function ShooterGame.GameStatisticsComponent.AuthAddStatistic // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ee7bd0
};

// Class ShooterGame.NotificationAction
// Size: 0x58 (Inherited: 0x30)
struct UNotificationAction : UObject {
	struct FText Label; // 0x30(0x18)
	char pad_48[0x10]; // 0x48(0x10)
};

// Class ShooterGame.Notification
// Size: 0x58 (Inherited: 0x30)
struct UNotification : UObject {
	char pad_30[0x28]; // 0x30(0x28)

	struct FString GetRelatedSubject(); // Function ShooterGame.Notification.GetRelatedSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f6e3e0
	struct FString GetID(); // Function ShooterGame.Notification.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb81b0
	struct FDateTime GetCreatedAt(); // Function ShooterGame.Notification.GetCreatedAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3a960
};

// Class ShooterGame.GenericNotification
// Size: 0xe8 (Inherited: 0x58)
struct UGenericNotification : UNotification {
	char pad_58[0x58]; // 0x58(0x58)
	struct UNotificationAction* ActionA; // 0xb0(0x08)
	struct UNotificationAction* ActionB; // 0xb8(0x08)
	struct UNotificationAction* DismissAction; // 0xc0(0x08)
	enum class EAresNotificationType NotificationType; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct FString AdditionalInfo; // 0xd0(0x10)
	struct UWidget* CustomBody; // 0xe0(0x08)

	void SetTitle(struct FText NewTitle); // Function ShooterGame.GenericNotification.SetTitle // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee9080
	void SetNotificationType(enum class EAresNotificationType NewNotificationType); // Function ShooterGame.GenericNotification.SetNotificationType // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8c80
	void SetMessage(struct FText NewMessage); // Function ShooterGame.GenericNotification.SetMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8bc0
	void SetCustomBody(struct UWidget* NewCustomBody); // Function ShooterGame.GenericNotification.SetCustomBody // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8890
	struct UGenericNotification* Make(struct FText Title, struct FText Message, struct UNotificationAction* ActionA, struct UNotificationAction* ActionB, struct UWidget* CustomBody, enum class EAresNotificationType NotificationType); // Function ShooterGame.GenericNotification.Make // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ee81d0
	bool HasDismissAction(); // Function ShooterGame.GenericNotification.HasDismissAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee8170
	bool HasCustomBody(); // Function ShooterGame.GenericNotification.HasCustomBody // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee8140
	bool HasActionB(); // Function ShooterGame.GenericNotification.HasActionB // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee8110
	bool HasActionA(); // Function ShooterGame.GenericNotification.HasActionA // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee80e0
	struct FText GetTitle(); // Function ShooterGame.GenericNotification.GetTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee7fd0
	struct FDateTime GetTimestamp(); // Function ShooterGame.GenericNotification.GetTimestamp // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34b50
	enum class EAresNotificationType GetNotificationType(); // Function ShooterGame.GenericNotification.GetNotificationType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20347d0
	struct FText GetMessage(); // Function ShooterGame.GenericNotification.GetMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee7f40
	struct UNotificationAction* GetDismissAction(); // Function ShooterGame.GenericNotification.GetDismissAction // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e3ad60
	struct FText GetDateTimeFormat(); // Function ShooterGame.GenericNotification.GetDateTimeFormat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee7ea0
	struct UWidget* GetCustomBody(); // Function ShooterGame.GenericNotification.GetCustomBody // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66170
	struct FString GetAdditionalInfo(); // Function ShooterGame.GenericNotification.GetAdditionalInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7c30
	struct UNotificationAction* GetActionB(); // Function ShooterGame.GenericNotification.GetActionB // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ca4f30
	struct UNotificationAction* GetActionA(); // Function ShooterGame.GenericNotification.GetActionA // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ee7e50
	void ExecuteDismissAction(); // Function ShooterGame.GenericNotification.ExecuteDismissAction // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee7df0
	void ExecuteActionB(); // Function ShooterGame.GenericNotification.ExecuteActionB // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee7e30
	void ExecuteActionA(); // Function ShooterGame.GenericNotification.ExecuteActionA // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee7e10
	void Dismiss(); // Function ShooterGame.GenericNotification.Dismiss // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee7df0
};

// Class ShooterGame.GetOuterWorldObject
// Size: 0x30 (Inherited: 0x30)
struct UGetOuterWorldObject : UObject {
};

// Class ShooterGame.GlideLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UGlideLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.GlobalAudioManager
// Size: 0xc0 (Inherited: 0x30)
struct UGlobalAudioManager : UGetOuterWorldObject {
	struct UAkComponent* PersistentEmitter; // 0x30(0x08)
	struct FString VOTestUIClassPath; // 0x38(0x10)
	char pad_48[0x30]; // 0x48(0x30)
	struct FString BombGameStateClassPath; // 0x78(0x10)
	struct TSoftClassPtr<UObject> BombGameStateClass; // 0x88(0x30)
	char pad_B8[0x8]; // 0xb8(0x08)

	void PlayOnPersistentEmitter(struct UAkAudioEvent* Event); // Function ShooterGame.GlobalAudioManager.PlayOnPersistentEmitter // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8610
	void OnWinningTeam(struct UBaseTeamComponent* WinningTeam); // Function ShooterGame.GlobalAudioManager.OnWinningTeam // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnApplicationActivationStateChange(bool bActive); // Function ShooterGame.GlobalAudioManager.OnApplicationActivationStateChange // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	struct UGlobalAudioManager* GetUGlobalAudioManager(struct UObject* WorldContextObject); // Function ShooterGame.GlobalAudioManager.GetUGlobalAudioManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ee8050
	void EndPregame(); // Function ShooterGame.GlobalAudioManager.EndPregame // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginTransitionToPregame(); // Function ShooterGame.GlobalAudioManager.BeginTransitionToPregame // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginTransitionToMainMenu(); // Function ShooterGame.GlobalAudioManager.BeginTransitionToMainMenu // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginTransitionToInGame(); // Function ShooterGame.GlobalAudioManager.BeginTransitionToInGame // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginPregame(); // Function ShooterGame.GlobalAudioManager.BeginPregame // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginPlatformFaulted(); // Function ShooterGame.GlobalAudioManager.BeginPlatformFaulted // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginMainMenu(); // Function ShooterGame.GlobalAudioManager.BeginMainMenu // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginInitialization(); // Function ShooterGame.GlobalAudioManager.BeginInitialization // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginInGame(); // Function ShooterGame.GlobalAudioManager.BeginInGame // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void BeginGame(); // Function ShooterGame.GlobalAudioManager.BeginGame // (Final|Native|Public) // @ game+0x2ee7db0
};

// Class ShooterGame.OrderedListSimpleWidgetContainerSlot
// Size: 0x40 (Inherited: 0x30)
struct UOrderedListSimpleWidgetContainerSlot : UVisual {
	struct UWidget* OwnerWidget; // 0x30(0x08)
	struct UUserWidget* Content; // 0x38(0x08)
};

// Class ShooterGame.GridListSlot
// Size: 0x78 (Inherited: 0x40)
struct UGridListSlot : UOrderedListSimpleWidgetContainerSlot {
	struct FMargin Padding; // 0x40(0x10)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x50(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x51(0x01)
	char pad_52[0x2]; // 0x52(0x02)
	int32_t Row; // 0x54(0x04)
	int32_t RowSpan; // 0x58(0x04)
	int32_t Column; // 0x5c(0x04)
	int32_t ColumnSpan; // 0x60(0x04)
	int32_t Layer; // 0x64(0x04)
	struct FVector2D Nudge; // 0x68(0x08)
	char pad_70[0x8]; // 0x70(0x08)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.GridListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee9140
	void SetRowSpan(int32_t InRowSpan); // Function ShooterGame.GridListSlot.SetRowSpan // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8ff0
	void SetRow(int32_t InRow); // Function ShooterGame.GridListSlot.SetRow // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8e90
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.GridListSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8e00
	void SetNudge(struct FVector2D InNudge); // Function ShooterGame.GridListSlot.SetNudge // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2ee8d00
	void SetLayer(int32_t InLayer); // Function ShooterGame.GridListSlot.SetLayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8a20
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.GridListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8920
	void SetColumnSpan(int32_t InColumnSpan); // Function ShooterGame.GridListSlot.SetColumnSpan // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8800
	void SetColumn(int32_t InColumn); // Function ShooterGame.GridListSlot.SetColumn // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee86a0
};

// Class ShooterGame.OrderedListSimpleWidgetContainerBase
// Size: 0x298 (Inherited: 0x148)
struct UOrderedListSimpleWidgetContainerBase : UWidget {
	char pad_148[0x10]; // 0x148(0x10)
	struct FMulticastInlineDelegate OnItemActivated; // 0x158(0x10)
	struct UUserWidget* EntryWidgetClass; // 0x168(0x08)
	struct UListEntrySlotConfigurerFactoryBase* EntrySlotConfigurerFactory; // 0x170(0x08)
	struct TScriptInterface<IOrderedListModel> ListModel; // 0x178(0x10)
	struct UUserWidget* SelectedWidget; // 0x188(0x08)
	struct FWildcard SharedListItemData; // 0x190(0x40)
	struct TArray<struct UOrderedListSimpleWidgetContainerSlot*> EntrySlots; // 0x1d0(0x10)
	struct TScriptInterface<IListEntrySlotConfigurerFactory> EntrySlotConfigurerFactoryInternal; // 0x1e0(0x10)
	struct TScriptInterface<IListEntrySlotConfigurer> EntrySlotConfigurer; // 0x1f0(0x10)
	struct TArray<struct TScriptInterface<IListEntryPerSlotConfigurer>> EntryPerSlotConfigurers; // 0x200(0x10)
	struct FUserWidgetPool EntryWidgetPool; // 0x210(0x80)
	struct UAresTouchScreen* AresTouchScreen; // 0x290(0x08)

	void SetListModel(struct TScriptInterface<IOrderedListModel> NewValue); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.SetListModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2f7cfd0
	void SetEntryWidgetClass(struct UUserWidget* NewValue); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.SetEntryWidgetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2f7cf40
	void SetEntrySlotConfigurerFactory(struct TScriptInterface<IListEntrySlotConfigurerFactory> NewValue); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.SetEntrySlotConfigurerFactory // (Final|Native|Public|BlueprintCallable) // @ game+0x2f7cea0
	void HandleListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.HandleListModelChange // (Native|Protected|HasOutParms) // @ game+0x2f7cab0
	void HandleEntrySlotSettingsChanged(struct UObject* Source); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.HandleEntrySlotSettingsChanged // (Final|Native|Protected) // @ game+0x2f7ca20
	void GetAllEntryWidgets(struct TArray<struct UUserWidget*>& Widgets); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.GetAllEntryWidgets // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f7c330
	void EntryActivatedMulticastDelegate__DelegateSignature(struct UOrderedListSimpleWidgetContainerBase* Source, struct FListItemDisplayEntryActivatedEventData EventData); // DelegateFunction ShooterGame.OrderedListSimpleWidgetContainerBase.EntryActivatedMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x3520f50
	void BP_SetSharedListItemData(int32_t NewValue); // Function ShooterGame.OrderedListSimpleWidgetContainerBase.BP_SetSharedListItemData // (Final|Native|Public|BlueprintCallable) // @ game+0x2c9bd50
};

// Class ShooterGame.GridPanelList
// Size: 0x2c8 (Inherited: 0x298)
struct UGridPanelList : UOrderedListSimpleWidgetContainerBase {
	struct TArray<float> ColumnFill; // 0x298(0x10)
	struct TArray<float> RowFill; // 0x2a8(0x10)
	char pad_2B8[0x10]; // 0x2b8(0x10)

	void SetRowFill(int32_t RowIndex, float Coefficient); // Function ShooterGame.GridPanelList.SetRowFill // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8f20
	void SetColumnFill(int32_t ColumnIndex, float Coefficient); // Function ShooterGame.GridPanelList.SetColumnFill // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8730
};

// Class ShooterGame.GridSlotConfigurer
// Size: 0x70 (Inherited: 0x50)
struct UGridSlotConfigurer : UListEntrySlotConfigurerBase {
	struct FMargin Padding; // 0x50(0x10)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x60(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x61(0x01)
	enum class EGridAxis2D MajorAxis; // 0x62(0x01)
	char pad_63[0x1]; // 0x63(0x01)
	int32_t MaxMinorItemCount; // 0x64(0x04)
	struct FVector2D Nudge; // 0x68(0x08)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.GridSlotConfigurer.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee91c0
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.GridSlotConfigurer.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x2deb960
	void SetNudge(struct FVector2D InNudge); // Function ShooterGame.GridSlotConfigurer.SetNudge // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2ee8d80
	void SetMaxMinorItemCount(int32_t InMaxMinorItemCount); // Function ShooterGame.GridSlotConfigurer.SetMaxMinorItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8b30
	void SetMajorAxis(enum class EGridAxis2D InMajorAxis); // Function ShooterGame.GridSlotConfigurer.SetMajorAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee8ab0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.GridSlotConfigurer.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2ee89a0
};

// Class ShooterGame.GunRequestComponent
// Size: 0x160 (Inherited: 0xe8)
struct UGunRequestComponent : UActorComponent {
	struct FMulticastInlineDelegate OnMakeGunRequest; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnFulfillGunRequest; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnCancelGunRequest; // 0x108(0x10)
	struct FAresGunRequest GunRequest; // 0x118(0x10)
	float FulfilledStateDuration; // 0x128(0x04)
	char pad_12C[0x4]; // 0x12c(0x04)
	struct FRateLimiter RateLimiter; // 0x130(0x30)

	void NetMulticastMakeGunRequest(struct FAresGunRequest InGunRequest); // Function ShooterGame.GunRequestComponent.NetMulticastMakeGunRequest // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2ee8580
	void NetMulticastFulfillGunRequest(struct FAresGunRequest InGunRequest, struct AShooterPlayerState* FulfillingPlayer); // Function ShooterGame.GunRequestComponent.NetMulticastFulfillGunRequest // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2ee84a0
	void NetMulticastCancelGunRequest(struct FAresGunRequest InGunRequest); // Function ShooterGame.GunRequestComponent.NetMulticastCancelGunRequest // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x2ee8410
	bool IsGunRequestOnExtendedCooldown(); // Function ShooterGame.GunRequestComponent.IsGunRequestOnExtendedCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee81a0
	float GetGunRequestExtendedCooldownRemaining(); // Function ShooterGame.GunRequestComponent.GetGunRequestExtendedCooldownRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee7f10
	struct FAresGunRequest GetActiveGunRequest(); // Function ShooterGame.GunRequestComponent.GetActiveGunRequest // (Final|Native|Public|Const) // @ game+0x2ee7e70
	void ClearGunRequest(); // Function ShooterGame.GunRequestComponent.ClearGunRequest // (Final|Native|Private) // @ game+0x2ee7dd0
	void AuthOnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.GunRequestComponent.AuthOnRoundEnd // (Final|Native|Public) // @ game+0x2ca3d20
	void AuthMakeGunRequest(struct UAresPurchasableEquippable* GunToRequest); // Function ShooterGame.GunRequestComponent.AuthMakeGunRequest // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthFulfillMyGunRequest(struct UAresPurchasableEquippable* GunToFulfill, struct AShooterPlayerState* FulfillingPlayer); // Function ShooterGame.GunRequestComponent.AuthFulfillMyGunRequest // (Final|Native|Public) // @ game+0x2cc3bd0
	void AuthCancelGunRequest(struct UAresPurchasableEquippable* GunToCancel); // Function ShooterGame.GunRequestComponent.AuthCancelGunRequest // (Final|Native|Public) // @ game+0x2cb4be0
};

// Class ShooterGame.HasNetworkStreamInterface
// Size: 0x30 (Inherited: 0x30)
struct UHasNetworkStreamInterface : UInterface {
};

// Class ShooterGame.HeadshotDamageQuery
// Size: 0x30 (Inherited: 0x30)
struct UHeadshotDamageQuery : UInterface {

	bool IsHeadshot(); // Function ShooterGame.HeadshotDamageQuery.IsHeadshot // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eeeb50
};

// Class ShooterGame.HealthResourceComponent
// Size: 0x150 (Inherited: 0x138)
struct UHealthResourceComponent : UAbilityResourceComponent {
	float HealthCost; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
	struct UDamageType* DamageType; // 0x140(0x08)
	bool bCanBeUsedWithoutEnoughHealth; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)
};

// Class ShooterGame.HitScanMovementComponent
// Size: 0x188 (Inherited: 0x188)
struct UHitScanMovementComponent : USimpleProjectileMovementComponent {
};

// Class ShooterGame.HomingProjectileMovementComponent
// Size: 0x2e8 (Inherited: 0x2d8)
struct UHomingProjectileMovementComponent : UFiniteSpeedMovementComponent {
	float HomingTurnSpeed; // 0x2d8(0x04)
	enum class EHomingProjectileFacing Facing; // 0x2dc(0x01)
	char pad_2DD[0x3]; // 0x2dd(0x03)
	struct AActor* HomingTarget; // 0x2e0(0x08)

	struct AActor* GetHomingTarget(); // Function ShooterGame.HomingProjectileMovementComponent.GetHomingTarget // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecbd0
	void AuthSetHomingTarget(struct AActor* Target); // Function ShooterGame.HomingProjectileMovementComponent.AuthSetHomingTarget // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2e60b00
};

// Class ShooterGame.HorizontalBoxList
// Size: 0x2a8 (Inherited: 0x298)
struct UHorizontalBoxList : UOrderedListSimpleWidgetContainerBase {
	char pad_298[0x10]; // 0x298(0x10)
};

// Class ShooterGame.HorizontalBoxListSlot
// Size: 0x68 (Inherited: 0x40)
struct UHorizontalBoxListSlot : UOrderedListSimpleWidgetContainerSlot {
	struct FMargin Padding; // 0x40(0x10)
	struct FSlateChildSize Size; // 0x50(0x08)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x58(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x59(0x01)
	char pad_5A[0xe]; // 0x5a(0x0e)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.HorizontalBoxListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0fd0
	void SetSize(struct FSlateChildSize InSize); // Function ShooterGame.HorizontalBoxListSlot.SetSize // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0f40
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.HorizontalBoxListSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0eb0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.HorizontalBoxListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0e30
};

// Class ShooterGame.HovercardCacheManager
// Size: 0x120 (Inherited: 0x80)
struct UHovercardCacheManager : UInitSystem {
	struct FMulticastInlineDelegate OnCacheEntry; // 0x80(0x10)
	char pad_90[0x90]; // 0x90(0x90)

	bool RequestCacheEntry(struct FString Subject); // Function ShooterGame.HovercardCacheManager.RequestCacheEntry // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0d20
	void HandleRateLimitTimerCompleted(); // Function ShooterGame.HovercardCacheManager.HandleRateLimitTimerCompleted // (Final|Native|Private) // @ game+0x2eeeb30
	struct UHovercardCacheManager* GetHovercardCacheManager(struct UObject* WorldContextObject); // Function ShooterGame.HovercardCacheManager.GetHovercardCacheManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2eee850
	void GetFromCache(struct FString Subject, struct FHovercardCacheEntry& OutEntry); // Function ShooterGame.HovercardCacheManager.GetFromCache // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2eee6d0
	void FetchDataAndAddToCache(struct FString Subject); // Function ShooterGame.HovercardCacheManager.FetchDataAndAddToCache // (Final|Native|Private) // @ game+0x1e6e9a0
};

// Class ShooterGame.HUDPlayerModel
// Size: 0x238 (Inherited: 0x30)
struct UHUDPlayerModel : UObject {
	struct FMulticastInlineDelegate PlayerStateChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate NumUltimatePointsChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnEquippableChargeInfosChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnTeamChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnAliveStateChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnPlayerScoreUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate DesiredClassChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate CombatReportDirtied; // 0xa0(0x10)
	struct FMulticastInlineDelegate TrackedRewardsChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate PreviousRoundRewardsFinalized; // 0xc0(0x10)
	struct FMulticastInlineDelegate SpawnedCharacterChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnDamaged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnHealed; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnDeath; // 0x100(0x10)
	struct FMulticastInlineDelegate OnVitalityDirtied; // 0x110(0x10)
	struct FMulticastInlineDelegate OnCurrentEquippableChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnInventoryItemsChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnCurrentUsingComponentTimeChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnUsableComponentsChangedSignature; // 0x150(0x10)
	struct FMulticastInlineDelegate OnMissionInfoChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnMissionStatusChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnObjectiveStatusChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnCalloutRegionChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnConnectionStatusChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnAwayPenaltyStateChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnAFKStatusChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnPlayersSpectatingUpdated; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnSuppressRevealed; // 0x1e0(0x10)
	struct FVector SpawnedCharacterLocation; // 0x1f0(0x0c)
	struct FRotator SpawnedCharacterOrientation; // 0x1fc(0x0c)
	struct AAresPlayerStateBase* PlayerState; // 0x208(0x08)
	struct AMission* ActiveMission; // 0x210(0x08)
	struct AShooterCharacter* SpawnedCharacter; // 0x218(0x08)
	struct AAresEquippable* CurrentEquippable; // 0x220(0x08)
	float SpectatorCountUpdateRate; // 0x228(0x04)
	float LastSpectatorCountUpdate; // 0x22c(0x04)
	struct FTimerHandle SpectatorCountTimerHandle; // 0x230(0x08)

	void UpdateSpawnedCharacterData(); // Function ShooterGame.HUDPlayerModel.UpdateSpawnedCharacterData // (Final|Native|Public) // @ game+0x2ef1050
	struct AMission* TryGetActiveMission(); // Function ShooterGame.HUDPlayerModel.TryGetActiveMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cecec0
	void RebroadcastTrackedRewardsChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastTrackedRewardsChanged // (Final|Native|Public) // @ game+0x2ef0cf0
	void RebroadcastSuppressRevealed(bool bIsRevealed); // Function ShooterGame.HUDPlayerModel.RebroadcastSuppressRevealed // (Final|Native|Public) // @ game+0x2ef0c50
	void RebroadcastPreviousRoundRewardsFinalized(struct TArray<struct FAresTrackedReward>& PreviousRoundRewards); // Function ShooterGame.HUDPlayerModel.RebroadcastPreviousRoundRewardsFinalized // (Final|Native|Public|HasOutParms) // @ game+0x2ef0ab0
	void RebroadcastOnVitalityDirtied(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnVitalityDirtied // (Final|Native|Public) // @ game+0x2ef0a80
	void RebroadcastOnUsableComponentsChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnUsableComponentsChanged // (Final|Native|Public) // @ game+0x2ef0a50
	void RebroadcastOnTeamChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnTeamChanged // (Final|Native|Public) // @ game+0x2ef0a10
	void RebroadcastOnPlayerScoreUpdated(int32_t NewScore); // Function ShooterGame.HUDPlayerModel.RebroadcastOnPlayerScoreUpdated // (Final|Native|Public) // @ game+0x2ef0500
	void RebroadcastOnInventoryItemsChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnInventoryItemsChanged // (Final|Native|Public) // @ game+0x2ef02b0
	void RebroadcastOnHealed(float Health, struct AActor* HealedActor, struct TArray<struct UDamageSectionComponent*>& Components, struct AController* EventInstigator, struct APawn* EventInstigatorPawn, struct AActor* HealCauser); // Function ShooterGame.HUDPlayerModel.RebroadcastOnHealed // (Final|Native|Public|HasOutParms) // @ game+0x2ef0030
	void RebroadcastOnEquippableChargeInfosChanged(); // Function ShooterGame.HUDPlayerModel.RebroadcastOnEquippableChargeInfosChanged // (Final|Native|Public) // @ game+0x2eeff70
	void RebroadcastOnDeath(struct UDamageResponse* DamageResponse); // Function ShooterGame.HUDPlayerModel.RebroadcastOnDeath // (Final|Native|Public) // @ game+0x2eefed0
	void RebroadcastOnDamaged(struct UDamageResponse* DamageResponse); // Function ShooterGame.HUDPlayerModel.RebroadcastOnDamaged // (Final|Native|Public) // @ game+0x2eefe30
	void RebroadcastOnCurrentUsingComponentTimeChanged(float CurrentUseTime, float TotalUseTime); // Function ShooterGame.HUDPlayerModel.RebroadcastOnCurrentUsingComponentTimeChanged // (Final|Native|Public) // @ game+0x2eefd50
	void RebroadcastOnAliveStateChanged(bool NewValue); // Function ShooterGame.HUDPlayerModel.RebroadcastOnAliveStateChanged // (Final|Native|Public) // @ game+0x2eef640
	void RebroadcastObjectiveStatusChanged(struct UObjectiveComponent* ChangedObjective, enum class EObjectiveType ObjectiveType, enum class EObjectiveStatus OldStatus, enum class EObjectiveStatus NewStatus); // Function ShooterGame.HUDPlayerModel.RebroadcastObjectiveStatusChanged // (Final|Native|Public) // @ game+0x2eef4e0
	void RebroadcastNumUltimatePointsChanged(int32_t NewValue, bool bUltNewlyReady); // Function ShooterGame.HUDPlayerModel.RebroadcastNumUltimatePointsChanged // (Final|Native|Public) // @ game+0x2eef410
	void RebroadcastMissionUIVisibilityChanged(struct AMission* ChangedMission); // Function ShooterGame.HUDPlayerModel.RebroadcastMissionUIVisibilityChanged // (Final|Native|Public) // @ game+0x2eef380
	void RebroadcastMissionStatusChanged(struct AMission* ChangedMission, enum class EMissionStatus OldStatus, enum class EMissionStatus NewStatus); // Function ShooterGame.HUDPlayerModel.RebroadcastMissionStatusChanged // (Final|Native|Public) // @ game+0x2eef270
	void RebroadcastDesiredClassChanged(struct AShooterCharacter* NewValue); // Function ShooterGame.HUDPlayerModel.RebroadcastDesiredClassChanged // (Final|Native|Public) // @ game+0x2eef0f0
	void RebroadcastConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.HUDPlayerModel.RebroadcastConnectionStatusChanged // (Final|Native|Public) // @ game+0x2eeefd0
	void RebroadcastCombatReportDirtied(); // Function ShooterGame.HUDPlayerModel.RebroadcastCombatReportDirtied // (Final|Native|Public) // @ game+0x2eeefa0
	void RebroadcastCalloutRegionChanged(struct AAresCalloutRegion* NewRegion); // Function ShooterGame.HUDPlayerModel.RebroadcastCalloutRegionChanged // (Final|Native|Public) // @ game+0x2eeef00
	void RebroadcastAwayPenaltyStateChanged(struct AShooterPlayerState* Owner, bool bIsPenalizedForBeingAway); // Function ShooterGame.HUDPlayerModel.RebroadcastAwayPenaltyStateChanged // (Final|Native|Public) // @ game+0x2eeee20
	void RebroadcastAFKStatusChanged(struct AShooterPlayerState* Owner, bool bIsAFK); // Function ShooterGame.HUDPlayerModel.RebroadcastAFKStatusChanged // (Final|Native|Public) // @ game+0x2eeed40
	void OnNewSpawnedCharacter(struct AShooterCharacter* NewSpawnedCharacter); // Function ShooterGame.HUDPlayerModel.OnNewSpawnedCharacter // (Final|Native|Protected) // @ game+0x2eeecb0
	void OnNewMissionAssigned(struct AMission* NewMission); // Function ShooterGame.HUDPlayerModel.OnNewMissionAssigned // (Final|Native|Protected) // @ game+0x2eeec20
	void OnNewCurrentEquippable(struct AAresEquippable* NewCurrentEquippable); // Function ShooterGame.HUDPlayerModel.OnNewCurrentEquippable // (Final|Native|Protected) // @ game+0x2eeeb90
	void HandlePlayersSpectatingUpdated(); // Function ShooterGame.HUDPlayerModel.HandlePlayersSpectatingUpdated // (Final|Native|Public) // @ game+0x2eeeb10
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.HUDPlayerModel.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2eee910
	struct AAresPlayerStateBase* GetPlayerState(); // Function ShooterGame.HUDPlayerModel.GetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x2cec1c0
	struct AAresEquippable* GetCurrentEquippable(); // Function ShooterGame.HUDPlayerModel.GetCurrentEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x2ced2d0
};

// Class ShooterGame.HUDSelfPlayerModel
// Size: 0x250 (Inherited: 0x238)
struct UHUDSelfPlayerModel : UHUDPlayerModel {
	struct FMulticastInlineDelegate OnCharacterTooltipRequestStateChanged; // 0x238(0x10)
	struct AOwnerExclusivePlayerInfo* PlayerInfo; // 0x248(0x08)

	void HandleCharacterTooltipRequestStateChanged(bool bRequested); // Function ShooterGame.HUDSelfPlayerModel.HandleCharacterTooltipRequestStateChanged // (Final|Native|Public) // @ game+0x2eee940
	struct AOwnerExclusivePlayerInfo* GetPlayerInfo(); // Function ShooterGame.HUDSelfPlayerModel.GetPlayerInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x2eee8e0
};

// Class ShooterGame.CoordinatedHUDModel
// Size: 0x208 (Inherited: 0x30)
struct UCoordinatedHUDModel : UObject {
	struct FMulticastInlineDelegate OnGameStateChanged; // 0x30(0x10)
	struct UHUDPlayerModel* FirstPersonModel; // 0x40(0x08)
	struct UHUDSelfPlayerModel* SelfModel; // 0x48(0x08)
	struct TArray<struct UHUDPlayerModel*> HUDPlayerModelsList; // 0x50(0x10)
	struct FMulticastInlineDelegate OnHUDPlayerModelListUpdated; // 0x60(0x10)
	struct FMulticastInlineDelegate OnTeamCompositionsChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnViewTargetChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnPlayerViewTargetModeChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnCinematicModeUpdated; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnGameStateHUDConfigChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnRoundNumebrChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnTeamAverageLoadoutValueUpdated; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPlayerStateListUpdated; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPointsUpdated; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnRoundResultsUpdated; // 0x100(0x10)
	struct FMulticastInlineDelegate OnMatchEnd; // 0x110(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerKilled; // 0x120(0x10)
	struct FMulticastInlineDelegate OnNonPlayerActorKilled; // 0x130(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerResurrected; // 0x140(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerTemporaryDeath; // 0x150(0x10)
	struct FMulticastInlineDelegate OnAnyPlayerRecovered; // 0x160(0x10)
	struct FMulticastInlineDelegate OnSimulatedNetworkDegradationChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnSimulatingBurstLossChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnSkillTestStarted; // 0x190(0x10)
	struct FMulticastInlineDelegate OnSkillTestEnded; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnMatchTimeoutStateChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate ShowScoreboardPressed; // 0x1c0(0x10)
	struct FMulticastInlineDelegate ShowScoreboardReleased; // 0x1d0(0x10)
	struct AShooterGameState* GameState; // 0x1e0(0x08)
	struct UAresNetDriver* NetDriver; // 0x1e8(0x08)
	struct AAresPlayerController* PlayerController; // 0x1f0(0x08)
	struct TArray<struct AAresPlayerStateBase*> ListenedPlayerStates; // 0x1f8(0x10)

	void RebroadcastOnTeamCompositionsChanged(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnTeamCompositionsChanged // (Final|Native|Public) // @ game+0x2ef0a30
	void RebroadcastOnTeamAverageLoadoutValueUpdated(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnTeamAverageLoadoutValueUpdated // (Final|Native|Public) // @ game+0x2ef09e0
	void RebroadcastOnSkillTestStarted(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnSkillTestStarted // (Final|Native|Public) // @ game+0x2ef09b0
	void RebroadcastOnSkillTestEnded(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnSkillTestEnded // (Final|Native|Public) // @ game+0x2ef0980
	void RebroadcastOnSimulatingBurstLossChanged(struct UAresNetDriver* AresNetDriver, bool bIsSimulatingBurstLoss); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnSimulatingBurstLossChanged // (Final|Native|Public) // @ game+0x2ef08a0
	void RebroadcastOnSimulatedNetworkDegradationChanged(struct UAresNetDriver* AresNetDriver, bool bEnabled, struct FString PresetName); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnSimulatedNetworkDegradationChanged // (Final|Native|Public) // @ game+0x2ef0680
	void RebroadcastOnRoundResultsUpdated(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnRoundResultsUpdated // (Final|Native|Public) // @ game+0x2ef0650
	void RebroadcastOnRoundNumberChanged(int32_t NewValue); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnRoundNumberChanged // (Final|Native|Public) // @ game+0x2ef05c0
	void RebroadcastOnPointsUpdated(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnPointsUpdated // (Final|Native|Public) // @ game+0x2ef0590
	void RebroadcastOnNonPlayerActorKilled(struct AShooterPlayerState* KillerPlayerState, struct AActor* KilledActor, struct AAresEquippable* EquippableUsed, bool bWasHeadshot); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnNonPlayerActorKilled // (Final|Native|Public) // @ game+0x2ef0390
	void RebroadcastOnMatchEnd(struct FAresMatchResult& MatchResults); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnMatchEnd // (Final|Native|Public|HasOutParms) // @ game+0x2ef02e0
	void RebroadcastOnGameStateHUDConfigChanged(struct UGameStateHUDConfig* NewConfig); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnGameStateHUDConfigChanged // (Final|Native|Public) // @ game+0x2eeff90
	void RebroadcastOnCinematicModeUpdated(); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnCinematicModeUpdated // (Final|Native|Public) // @ game+0x2eeefa0
	void RebroadcastOnAnyPlayerTemporaryDeath(struct AShooterPlayerState* DamagerPlayerState, struct AShooterPlayerState* DownedPlayerState, struct UDamageResponse* DamageResponse, struct AAresEquippable* EquippableUsed, bool bRecoversInstantly); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerTemporaryDeath // (Final|Native|Public) // @ game+0x2eefbb0
	void RebroadcastOnAnyPlayerResurrected(struct AShooterPlayerState* ResurrectorPlayerState, struct AShooterPlayerState* ResurrectedPlayerState, int32_t KillNumberInRoundForResurrector, int32_t KillNumberInRoundForResurrected); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerResurrected // (Final|Native|Public) // @ game+0x2eefa50
	void RebroadcastOnAnyPlayerRecovered(struct AShooterPlayerState* RecoveredByPlayerState, struct AShooterPlayerState* RecoveredPlayerState); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerRecovered // (Final|Native|Public) // @ game+0x2eef970
	void RebroadcastOnAnyPlayerKilled(struct AShooterPlayerState* KillerPlayerState, struct AShooterPlayerState* KilledPlayerState, int32_t KillNumberInRoundForKiller, int32_t KillNumberInRoundForKilled, struct UDamageResponse* Response, struct AAresEquippable* EquippableUsed, struct TArray<struct FAresAssist>& AssistsList); // Function ShooterGame.CoordinatedHUDModel.RebroadcastOnAnyPlayerKilled // (Final|Native|Public|HasOutParms) // @ game+0x2eef6d0
	void RebroadcastMatchTimeoutStateChanged(enum class EAresMatchTimeoutState TimeoutState, float Duration); // Function ShooterGame.CoordinatedHUDModel.RebroadcastMatchTimeoutStateChanged // (Final|Native|Public) // @ game+0x2eef190
	void HandlePlayerStateListUpdated(); // Function ShooterGame.CoordinatedHUDModel.HandlePlayerStateListUpdated // (Final|Native|Public) // @ game+0x2eeeaf0
	void HandleOnViewTargetChanged(struct AActor* NewViewTarget); // Function ShooterGame.CoordinatedHUDModel.HandleOnViewTargetChanged // (Final|Native|Public) // @ game+0x2eeea60
	void HandleOnPlayerViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.CoordinatedHUDModel.HandleOnPlayerViewTargetModeChanged // (Final|Native|Public|HasOutParms) // @ game+0x2eee9d0
	struct AAresPlayerController* GetLocalPlayerController(); // Function ShooterGame.CoordinatedHUDModel.GetLocalPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2cebef0
	struct AShooterGameState* GetGameState(); // Function ShooterGame.CoordinatedHUDModel.GetGameState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2eee820
	void BuildAndBroadcastHUDPlayerModels(); // Function ShooterGame.CoordinatedHUDModel.BuildAndBroadcastHUDPlayerModels // (Final|Native|Public) // @ game+0x2eee6b0
};

// Class ShooterGame.HUDElementCoordinator
// Size: 0x80 (Inherited: 0x30)
struct UHUDElementCoordinator : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct AAresPlayerController* PlayerController; // 0x50(0x08)
	struct TArray<struct UCoordinatedHUDElement*> HUDElements; // 0x58(0x10)
	struct UCoordinatedHUDModel* CoordinatedHUDModel; // 0x68(0x08)
	struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel; // 0x70(0x08)
	struct UCoordinatedHUDElement* InformationalHUDElement; // 0x78(0x08)
};

// Class ShooterGame.HUDVisibilityData
// Size: 0xf0 (Inherited: 0xe8)
struct UHUDVisibilityData : UActorComponent {
	bool bHideTimerWidget; // 0xe8(0x01)
	bool bHideSpectatorWidget; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)
};

// Class ShooterGame.IdleAdditiveAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UIdleAdditiveAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.IdleAimLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleAimLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.IdleAimUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleAimUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.IdleAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UIdleAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.IdleLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.IdleUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.IdleBaseAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UIdleBaseAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.IdleBaseUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UIdleBaseUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.EffectLifecycleInterface
// Size: 0x30 (Inherited: 0x30)
struct UEffectLifecycleInterface : UInterface {
};

// Class ShooterGame.IgnoreAllyWallPenetrationComponent
// Size: 0x138 (Inherited: 0x138)
struct UIgnoreAllyWallPenetrationComponent : UIgnoreWallPenetrationComponent {
};

// Class ShooterGame.IgnoreUntilSeparatedComponent
// Size: 0x110 (Inherited: 0xe8)
struct UIgnoreUntilSeparatedComponent : UActorComponent {
	struct TArray<struct AActor*> IgnoredActors; // 0xe8(0x10)
	struct TArray<struct AActor*> ClientIgnoredActors; // 0xf8(0x10)
	char pad_108[0x8]; // 0x108(0x08)

	void OnRep_IgnoredActors(); // Function ShooterGame.IgnoreUntilSeparatedComponent.OnRep_IgnoredActors // (Final|Native|Private) // @ game+0x2ef83a0
	void AuthAddIgnoredActor(struct AActor* IgnoreActor); // Function ShooterGame.IgnoreUntilSeparatedComponent.AuthAddIgnoredActor // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
};

// Class ShooterGame.InfiniteCarouselEntry
// Size: 0x30 (Inherited: 0x30)
struct UInfiniteCarouselEntry : UInterface {

	void SetSelected(bool bSelected); // Function ShooterGame.InfiniteCarouselEntry.SetSelected // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2ef8a10
	void SetDimensions(struct FVector2D Dimensions); // Function ShooterGame.InfiniteCarouselEntry.SetDimensions // (Event|Protected|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void OnEntryObjectSet(struct UObject* EntryObject); // Function ShooterGame.InfiniteCarouselEntry.OnEntryObjectSet // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void OnCarouselSet(struct UInfiniteCarouselV2* InfiniteCarousel); // Function ShooterGame.InfiniteCarouselEntry.OnCarouselSet // (Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	struct UObject* GetEntryObject(); // Function ShooterGame.InfiniteCarouselEntry.GetEntryObject // (Native|Event|Protected|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2dc3450
};

// Class ShooterGame.ImpactEffectManagerComponent
// Size: 0x310 (Inherited: 0x290)
struct UImpactEffectManagerComponent : USceneComponent {
	struct TMap<struct UObject*, struct FImpactEffectInstancePool> InstancePools; // 0x288(0x50)
	struct TArray<struct UAresAudioComponent*> AudioComponentPool; // 0x2d8(0x10)
	struct TArray<struct UStaticMeshComponent*> StaticMeshComponentPool; // 0x2e8(0x10)
	struct AActor* PooledComponentActor; // 0x2f8(0x08)
	struct UImpactEffectRemap* ImpactEffectRemap; // 0x300(0x08)

	void ReleasePooledStaticMeshComponent(struct UStaticMeshComponent* Component); // Function ShooterGame.ImpactEffectManagerComponent.ReleasePooledStaticMeshComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef85f0
	void ReleasePooledAudioComponent(struct UAresAudioComponent* Component); // Function ShooterGame.ImpactEffectManagerComponent.ReleasePooledAudioComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef8560
	struct UStaticMeshComponent* GetPooledStaticMeshComponent(struct FVector& Location, struct FRotator& Rotation, struct UStaticMesh* StaticMesh); // Function ShooterGame.ImpactEffectManagerComponent.GetPooledStaticMeshComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2ef7f50
	struct UAresAudioComponent* GetPooledAudioComponent(struct FVector& Location); // Function ShooterGame.ImpactEffectManagerComponent.GetPooledAudioComponent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2ef7eb0
	struct UImpactEffectManagerComponent* Get(struct UObject* WorldContextObject); // Function ShooterGame.ImpactEffectManagerComponent.Get // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2ef7b90
};

// Class ShooterGame.UltPointsComponent
// Size: 0x148 (Inherited: 0x138)
struct UUltPointsComponent : UAbilityResourceComponent {
	struct AShooterCharacter* OwningCharacter; // 0x138(0x08)
	struct AShooterPlayerState* OwningPlayerState; // 0x140(0x08)

	void OnUltPointsChanged(int32_t NewValue, bool bUltNewlyReady); // Function ShooterGame.UltPointsComponent.OnUltPointsChanged // (Final|Native|Protected) // @ game+0x316edd0
	void OnOwningStateChanged(struct AShooterPlayerState* NewState); // Function ShooterGame.UltPointsComponent.OnOwningStateChanged // (Final|Native|Protected) // @ game+0x316ed40
};

// Class ShooterGame.IncrementalUltPointsComponent
// Size: 0x150 (Inherited: 0x148)
struct UIncrementalUltPointsComponent : UUltPointsComponent {
	int32_t UltsPointsPerUse; // 0x148(0x04)
	char pad_14C[0x4]; // 0x14c(0x04)
};

// Class ShooterGame.IndexedSequenceAnimationConductorNodeBase
// Size: 0xa0 (Inherited: 0x70)
struct UIndexedSequenceAnimationConductorNodeBase : UNumericProgressModelBase {
	char pad_70[0x10]; // 0x70(0x10)
	int32_t CurrentIndex; // 0x80(0x04)
	char pad_84[0x1c]; // 0x84(0x1c)

	void OnStartItem(int32_t Index); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnStartItem // (Native|Event|Protected|BlueprintEvent) // @ game+0x2d9db20
	void OnSkipItem(int32_t Index); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnSkipItem // (Native|Event|Protected|BlueprintEvent) // @ game+0x2ef84d0
	void OnSequenceStarted(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnSequenceStarted // (Native|Event|Protected|BlueprintEvent) // @ game+0x1e6eaa0
	void OnSequenceCompleted(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnSequenceCompleted // (Native|Event|Protected|BlueprintEvent) // @ game+0x2d569b0
	void OnResetItem(int32_t Index, enum class EAnimationConductorNodeResetType ResetType, int32_t OriginalIndex); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnResetItem // (Native|Event|Protected|BlueprintEvent) // @ game+0x2ef83c0
	void OnPreSkip(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnPreSkip // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dc4190
	void OnPreReset(enum class EAnimationConductorNodeResetType ResetType); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnPreReset // (Native|Event|Protected|BlueprintEvent) // @ game+0x2ced910
	void OnPostSkip(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnPostSkip // (Native|Event|Protected|BlueprintEvent) // @ game+0x2dc3420
	void OnPostReset(enum class EAnimationConductorNodeResetType ResetType); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.OnPostReset // (Native|Event|Protected|BlueprintEvent) // @ game+0x2ef8310
	int32_t GetNumItems(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.GetNumItems // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2ef7da0
	int32_t GetCurrentIndex(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.GetCurrentIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef7cf0
	void BP_StartNextItem(); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.BP_StartNextItem // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ef7b70
	void BP_BroadcastNewCueEvent(struct FName CueName); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.BP_BroadcastNewCueEvent // (Final|Native|Protected|BlueprintCallable) // @ game+0x2ef7ad0
	void BP_BroadcastCueEvent(struct FAnimationCueSource_CueEventData& EventData); // Function ShooterGame.IndexedSequenceAnimationConductorNodeBase.BP_BroadcastCueEvent // (Final|Native|Protected|HasOutParms|BlueprintCallable) // @ game+0x2ef7a30
};

// Class ShooterGame.InfiniteCarouselV2
// Size: 0x3f8 (Inherited: 0x2c8)
struct UInfiniteCarouselV2 : UUserWidget {
	struct FMulticastInlineDelegate OnEntryWidgetCreated; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnCurrentObjectChanged; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnCurrentIndexChanged; // 0x2e8(0x10)
	struct UUserWidget* EntryWidgetClass; // 0x2f8(0x08)
	struct UUserWidget* EntryPreviewClassOverride; // 0x300(0x08)
	int32_t MaxVisibleEntriesPerSide; // 0x308(0x04)
	int32_t EntryWidth; // 0x30c(0x04)
	int32_t EntryHeight; // 0x310(0x04)
	int32_t Margin; // 0x314(0x04)
	int32_t InnerPadding; // 0x318(0x04)
	int32_t BufferEntryCountPerSide; // 0x31c(0x04)
	int32_t DesignTimeEntryCount; // 0x320(0x04)
	struct FDelegate Filter; // 0x324(0x14)
	struct UOverlay* BindWidget; // 0x338(0x08)
	struct USizeBox* ContainerSizeBox; // 0x340(0x08)
	struct USizeBox* ResponsiveSizeBox; // 0x348(0x08)
	struct UCanvasPanel* Container; // 0x350(0x08)
	bool bDirty; // 0x358(0x01)
	char pad_359[0x7]; // 0x359(0x07)
	double CurrentIndex; // 0x360(0x08)
	float Velocity; // 0x368(0x04)
	float Acceleration; // 0x36c(0x04)
	int32_t TargetIndex; // 0x370(0x04)
	char pad_374[0x4]; // 0x374(0x04)
	struct UObject* TargetObject; // 0x378(0x08)
	struct UObject* CurrentObject; // 0x380(0x08)
	struct TArray<struct UObject*> AllObjects; // 0x388(0x10)
	struct TArray<struct UObject*> FilteredObjects; // 0x398(0x10)
	struct TMap<int32_t, struct UUserWidget*> Entries; // 0x3a8(0x50)

	void UpdateObjectsAndDimensions(); // Function ShooterGame.InfiniteCarouselV2.UpdateObjectsAndDimensions // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef8d90
	void UpdateConfig(struct UUserWidget* NewEntryPreviewClassOverride, struct UUserWidget* NewEntryWidgetClass, bool bDesignTime, int32_t NewMaxVisibleEntriesPerSide, int32_t NewEntryWidth, int32_t NewEntryHeight, int32_t NewBufferEntryCountPerSide, int32_t NewDesignTimeEntryCount, int32_t NewMargin, int32_t NewInnerPadding); // Function ShooterGame.InfiniteCarouselV2.UpdateConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef8aa0
	void SetFilter(struct FDelegate NewFilter); // Function ShooterGame.InfiniteCarouselV2.SetFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef8960
	void ScrollToObject(struct UObject* Object); // Function ShooterGame.InfiniteCarouselV2.ScrollToObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef87c0
	void ScrollToArrayIndex(int32_t Index); // Function ShooterGame.InfiniteCarouselV2.ScrollToArrayIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef8730
	void Scroll(int32_t Offset); // Function ShooterGame.InfiniteCarouselV2.Scroll // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef86a0
	void Reset(); // Function ShooterGame.InfiniteCarouselV2.Reset // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef8680
	void JumpToObject(struct UObject* Object); // Function ShooterGame.InfiniteCarouselV2.JumpToObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef8090
	struct TArray<struct UObject*> GetObjects(); // Function ShooterGame.InfiniteCarouselV2.GetObjects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef7de0
	int32_t GetCurrentObjectIndex(); // Function ShooterGame.InfiniteCarouselV2.GetCurrentObjectIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef7d10
	struct UObject* GetCurrentObject(); // Function ShooterGame.InfiniteCarouselV2.GetCurrentObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cad2c0
	struct TArray<struct UObject*> GetAllObjects(); // Function ShooterGame.InfiniteCarouselV2.GetAllObjects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef7c20
	void AddObject(struct UObject* Object); // Function ShooterGame.InfiniteCarouselV2.AddObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef79a0
};

// Class ShooterGame.StaticGameFlowState
// Size: 0x90 (Inherited: 0x88)
struct UStaticGameFlowState : UGameFlowState {
	enum class EGameFlowStateType TransitionStateType; // 0x88(0x01)
	char pad_89[0x7]; // 0x89(0x07)
};

// Class ShooterGame.InGameStateV2
// Size: 0xc0 (Inherited: 0x90)
struct UInGameStateV2 : UStaticGameFlowState {
	char pad_90[0x20]; // 0x90(0x20)
	struct UCoreGameManager* CoreGameManager; // 0xb0(0x08)
	struct UAntiAddictionManager* AntiAddictionManager; // 0xb8(0x08)
};

// Class ShooterGame.RNetInitPlayerController
// Size: 0x738 (Inherited: 0x738)
struct ARNetInitPlayerController : APlayerController {
};

// Class ShooterGame.InitCheatManager
// Size: 0x80 (Inherited: 0x80)
struct UInitCheatManager : UCheatManager {

	void SetConfigurationValue(struct FString Name, struct FString Value); // Function ShooterGame.InitCheatManager.SetConfigurationValue // (Final|Exec|Native|Private) // @ game+0x2ef8850
};

// Class ShooterGame.InitializationStateV2
// Size: 0x90 (Inherited: 0x90)
struct UInitializationStateV2 : UStaticGameFlowState {
};

// Class ShooterGame.InMenuGunPersonalizationComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UInMenuGunPersonalizationComponent : UActorComponent {
	struct UEquippableDataAsset* EquippableToTrackDataAsset; // 0xe8(0x08)

	void Reset(); // Function ShooterGame.InMenuGunPersonalizationComponent.Reset // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnGunModelRecieved(struct UEquippableInventoryModel* GunModel); // Function ShooterGame.InMenuGunPersonalizationComponent.OnGunModelRecieved // (Final|Native|Private) // @ game+0x2ef8280
	void OnGunModelChanged(); // Function ShooterGame.InMenuGunPersonalizationComponent.OnGunModelChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef8260
	void GetGunInventoryModel(); // Function ShooterGame.InMenuGunPersonalizationComponent.GetGunInventoryModel // (Final|Native|Private) // @ game+0x2ef7d40
};

// Class ShooterGame.InputMethodInterface
// Size: 0x30 (Inherited: 0x30)
struct UInputMethodInterface : UInterface {

	void UnbindOnInputMethodChanged(struct FDelegate& Event); // Function ShooterGame.InputMethodInterface.UnbindOnInputMethodChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2d95860
	enum class EPlayerInputMethod GetLastInputMethod(); // Function ShooterGame.InputMethodInterface.GetLastInputMethod // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef7d60
	void BindOnInputMethodChanged(struct FDelegate& Event); // Function ShooterGame.InputMethodInterface.BindOnInputMethodChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2d96a30
};

// Class ShooterGame.InstabilityTrackingDetails
// Size: 0x58 (Inherited: 0x30)
struct UInstabilityTrackingDetails : UObject {
	struct FString DebugName; // 0x30(0x10)
	struct FMulticastInlineDelegate OnInstabilityStateChanged; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)

	void WipeInstabilityState(); // Function ShooterGame.InstabilityTrackingDetails.WipeInstabilityState // (Native|Public|BlueprintCallable) // @ game+0x2d9d600
	bool SetInstabilityState(bool bNewInstability, bool bNewIsCritical); // Function ShooterGame.InstabilityTrackingDetails.SetInstabilityState // (Final|Native|Public|BlueprintCallable) // @ game+0x2f01b00
	bool IsInstabilityDetected(); // Function ShooterGame.InstabilityTrackingDetails.IsInstabilityDetected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e16050
	bool IsCriticalInstabilityDetected(); // Function ShooterGame.InstabilityTrackingDetails.IsCriticalInstabilityDetected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f01380
};

// Class ShooterGame.MetricInstabilityTrackingDetails
// Size: 0x88 (Inherited: 0x58)
struct UMetricInstabilityTrackingDetails : UInstabilityTrackingDetails {
	float CriticalThreshold; // 0x58(0x04)
	float Threshold; // 0x5c(0x04)
	float LastFrameValue; // 0x60(0x04)
	float LastFrameAverage; // 0x64(0x04)
	float StartTime; // 0x68(0x04)
	float PersistenceDuration; // 0x6c(0x04)
	enum class EBound Bound; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)
	struct UCurveFloat* ThresholdCurve; // 0x78(0x08)
	struct UCurveFloat* CriticalThresholdCurve; // 0x80(0x08)

	void InitializeState(struct FString InDebugName, float InThreshold, float InCriticalThreshold, enum class EBound InBound, struct UCurveFloat* InThresholdCurve, struct UCurveFloat* InCriticalThresholdCurve, float InFalloffDuration, float InStartTime, float InPersistenceDuration); // Function ShooterGame.MetricInstabilityTrackingDetails.InitializeState // (Final|Native|Public) // @ game+0x2f01090
};

// Class ShooterGame.NetworkOutageInstabilityTrackingDetails
// Size: 0x78 (Inherited: 0x58)
struct UNetworkOutageInstabilityTrackingDetails : UInstabilityTrackingDetails {
	char pad_58[0x20]; // 0x58(0x20)

	void OnNetworkLagStateChanged(struct UWorld* World, struct UNetDriver* Driver, enum class ENetworkLagState State); // Function ShooterGame.NetworkOutageInstabilityTrackingDetails.OnNetworkLagStateChanged // (Final|Native|Protected) // @ game+0x2f015d0
	void OnBurstLossStateChanged(struct UWorld* World, struct UNetDriver* Driver, bool bInIsExperiencingBurstLoss); // Function ShooterGame.NetworkOutageInstabilityTrackingDetails.OnBurstLossStateChanged // (Final|Native|Protected) // @ game+0x2f01480
	void OnAresNetworkErrorStateChanged(enum class EAresNetworkErrorType Type, bool bErrorActive); // Function ShooterGame.NetworkOutageInstabilityTrackingDetails.OnAresNetworkErrorStateChanged // (Final|Native|Protected) // @ game+0x2f013b0
};

// Class ShooterGame.RemoteClientPredictionTrackingDetails
// Size: 0x58 (Inherited: 0x58)
struct URemoteClientPredictionTrackingDetails : UInstabilityTrackingDetails {

	void OnPredictionStateChanged(bool bForwardPredicting); // Function ShooterGame.RemoteClientPredictionTrackingDetails.OnPredictionStateChanged // (Final|Native|Public) // @ game+0x2f016e0
};

// Class ShooterGame.InteractableUserComponent
// Size: 0x268 (Inherited: 0xe8)
struct UInteractableUserComponent : UInputBindingComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float CurrentUsableScoreBias; // 0xf0(0x04)
	float NotUsableScoreBias; // 0xf4(0x04)
	float MaxUseDistance; // 0xf8(0x04)
	float UseDistanceScoreFactor; // 0xfc(0x04)
	struct FClassInclusionExclusionFilter UsableFilter; // 0x100(0x50)
	struct FMulticastInlineDelegate OnCurrentUsingComponentTimeChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnUsableComponentsChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnUseInteractablePressed; // 0x170(0x10)
	struct UUsableComponent* BestUsableComponent; // 0x180(0x08)
	struct UUsableComponent* BestAlternateUsableComponent; // 0x188(0x08)
	bool bLastCanUseComponentCheck; // 0x190(0x01)
	bool bLastCanUseAlternateComponentCheck; // 0x191(0x01)
	char pad_192[0x56]; // 0x192(0x56)
	struct AShooterCharacter* OwningShooterCharacter; // 0x1e8(0x08)
	char pad_1F0[0x10]; // 0x1f0(0x10)
	int32_t InteractionsActive; // 0x200(0x04)
	char pad_204[0x4]; // 0x204(0x04)
	struct FCurrentUsableInfo AuthCurrentUsingInfo; // 0x208(0x28)
	struct FCurrentUsableInfo PredictedCurrentUsingInfo; // 0x230(0x28)
	char pad_258[0x8]; // 0x258(0x08)
	struct UUsableComponent* CurrentlyActivatedContinuousUsable; // 0x260(0x08)

	void UseObjectUp(); // Function ShooterGame.InteractableUserComponent.UseObjectUp // (Final|Native|Private) // @ game+0x2f020f0
	void UseObjectDown(); // Function ShooterGame.InteractableUserComponent.UseObjectDown // (Final|Native|Private) // @ game+0x2f020d0
	void UseAlternateObjectUp(); // Function ShooterGame.InteractableUserComponent.UseAlternateObjectUp // (Final|Native|Private) // @ game+0x2f020b0
	void UseAlternateObjectDown(); // Function ShooterGame.InteractableUserComponent.UseAlternateObjectDown // (Final|Native|Private) // @ game+0x2f02090
	void TickUseButtonHeld(enum class EUseKeyType KeyType, float DeltaTime); // Function ShooterGame.InteractableUserComponent.TickUseButtonHeld // (Final|Native|Protected) // @ game+0x2f01c00
	void TickCurrentUsable(); // Function ShooterGame.InteractableUserComponent.TickCurrentUsable // (Final|Native|Protected) // @ game+0x2f01be0
	void ServerUpdateDebugServerCancelPoint(float NewCancelPoint); // Function ShooterGame.InteractableUserComponent.ServerUpdateDebugServerCancelPoint // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2f01a70
	void ServerUpdateDebugMode(int32_t NewMode); // Function ShooterGame.InteractableUserComponent.ServerUpdateDebugMode // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2f019e0
	void ServerNotifyClientPredictedUseEvent(struct FNetworkedPredictedUse PredictedUse); // Function ShooterGame.InteractableUserComponent.ServerNotifyClientPredictedUseEvent // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2f01940
	void PossessChanged(struct AController* Controller); // Function ShooterGame.InteractableUserComponent.PossessChanged // (Final|Native|Private) // @ game+0x2f018b0
	void OnUseInteractableObjectChanged(bool bStartUsing); // Function ShooterGame.InteractableUserComponent.OnUseInteractableObjectChanged // (Final|Native|Public) // @ game+0x2f01820
	void OnUseAlternateInteractableObjectChanged(bool bStartUsing); // Function ShooterGame.InteractableUserComponent.OnUseAlternateInteractableObjectChanged // (Final|Native|Public) // @ game+0x2f01790
	void OnRep_AuthCurrentUsingInfo(); // Function ShooterGame.InteractableUserComponent.OnRep_AuthCurrentUsingInfo // (Final|Native|Public) // @ game+0x2f01770
	void OnClearHeldInputs(); // Function ShooterGame.InteractableUserComponent.OnClearHeldInputs // (Final|Native|Public) // @ game+0x2f01590
	struct UUsableComponent* GetUsingComponent(); // Function ShooterGame.InteractableUserComponent.GetUsingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced300
	float GetUseObjectTotalTime(); // Function ShooterGame.InteractableUserComponent.GetUseObjectTotalTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f00f70
	float GetUseObjectTime(); // Function ShooterGame.InteractableUserComponent.GetUseObjectTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f00f40
	enum class EUseFinishType GetUseFinishType(); // Function ShooterGame.InteractableUserComponent.GetUseFinishType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f00f10
	struct UUsableComponent* GetBestUsableComponent(); // Function ShooterGame.InteractableUserComponent.GetBestUsableComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2effd60
	struct UUsableComponent* GetBestAlternateUsableComponent(); // Function ShooterGame.InteractableUserComponent.GetBestAlternateUsableComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2effd30
	void FindBestUsable(); // Function ShooterGame.InteractableUserComponent.FindBestUsable // (Final|Native|Protected) // @ game+0x2eff890
	void DeactivateCurrentContinuousUsable(); // Function ShooterGame.InteractableUserComponent.DeactivateCurrentContinuousUsable // (Final|Native|Public|BlueprintCallable) // @ game+0x2eff870
	bool CanUseComponent(struct UUsableComponent* TargetObject); // Function ShooterGame.InteractableUserComponent.CanUseComponent // (Final|Native|Public|Const) // @ game+0x2eff7d0
	bool CanSelectComponent(struct UUsableComponent* TargetObject); // Function ShooterGame.InteractableUserComponent.CanSelectComponent // (Final|Native|Public|Const) // @ game+0x2eff730
	void BeginUsingComponent(struct UUsableComponent* UsableComponent); // Function ShooterGame.InteractableUserComponent.BeginUsingComponent // (Final|Native|Protected) // @ game+0x2eff500
	void AuthUseComponent(struct UUsableComponent* ComponentToUse); // Function ShooterGame.InteractableUserComponent.AuthUseComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthUseButtonReleased(enum class EUseKeyType KeyType); // Function ShooterGame.InteractableUserComponent.AuthUseButtonReleased // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void AuthUseButtonPressed(enum class EUseKeyType KeyType); // Function ShooterGame.InteractableUserComponent.AuthUseButtonPressed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void AuthCancelUsingComponent(enum class EUsableCancelReason CancelReason); // Function ShooterGame.InteractableUserComponent.AuthCancelUsingComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void ActivateContinuousUsable(struct UUsableComponent* UsableComponent); // Function ShooterGame.InteractableUserComponent.ActivateContinuousUsable // (Final|Native|Public|BlueprintCallable) // @ game+0x2eff470
};

// Class ShooterGame.InventoryInitManager
// Size: 0x88 (Inherited: 0x80)
struct UInventoryInitManager : UInitSystem {
	struct UInventoryManager* InventoryManager; // 0x80(0x08)

	struct UInventoryInitManager* GetInventoryInitManager(struct UObject* WorldContextObject); // Function ShooterGame.InventoryInitManager.GetInventoryInitManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f00710
};

// Class ShooterGame.InventoryManager
// Size: 0x780 (Inherited: 0x30)
struct UInventoryManager : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct FMulticastInlineDelegate OnContentEquippedChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnJuiceBoxBalanceChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnAnyJuiceContentsStatusChanged; // 0x68(0x10)
	struct TArray<struct UBaseInventoryModel*> LastGameUnlocks; // 0x78(0x10)
	struct UBaseInventoryModel* PreviousUnlock; // 0x88(0x08)
	struct UBaseInventoryModel* NextUnlock; // 0x90(0x08)
	int32_t PreviousUnlockLevel; // 0x98(0x04)
	int32_t NextUnlockLevel; // 0x9c(0x04)
	bool DidLevelOnLastGame; // 0xa0(0x01)
	char pad_A1[0x7]; // 0xa1(0x07)
	struct UContentIndex* ContentIndex; // 0xa8(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0xb0(0x08)
	struct UContentManager* ContentManager; // 0xb8(0x08)
	struct UConfigManager* ConfigManager; // 0xc0(0x08)
	struct UStoreManager* StoreManager; // 0xc8(0x08)
	struct UAccountXPManager* AccountXPManager; // 0xd0(0x08)
	struct UFavoritesManager* FavoritesManager; // 0xd8(0x08)
	struct TArray<struct UEquippableInventoryModel*> EquippableModels; // 0xe0(0x10)
	struct TMap<struct UEquippableDataAsset*, struct UEquippableInventoryModel*> DataAssetToEquippableMap; // 0xf0(0x50)
	struct TMap<struct UEquippableSkinDataAsset*, struct UEquippableSkinInventoryModel*> DataAssetToEquippableSkinMap; // 0x140(0x50)
	struct TMap<struct UEquippableSkinLevelDataAsset*, struct UEquippableSkinLevelInventoryModel*> DataAssetToEquippableSkinLevelMap; // 0x190(0x50)
	struct TMap<struct UEquippableAttachmentDataAsset*, struct UEquippableAttachmentInventoryModel*> DataAssetToEquippableAttachmentMap; // 0x1e0(0x50)
	struct TMap<struct UEquippableSkinChromaDataAsset*, struct UEquippableSkinChromaInventoryModel*> DataAssetToEquippableSkinChromaMap; // 0x230(0x50)
	struct TArray<struct USprayInventoryModel*> SprayModels; // 0x280(0x10)
	struct TMap<struct USprayDataAsset*, struct USprayInventoryModel*> DataAssetToSprayMap; // 0x290(0x50)
	struct TMap<struct USprayLevelDataAsset*, struct USprayLevelInventoryModel*> DataAssetToSprayLevelMap; // 0x2e0(0x50)
	struct TMap<struct USprayEquipSlotDataAsset*, struct USprayEquipSlotInventoryModel*> DataAssetToSprayEquipSlotMap; // 0x330(0x50)
	struct TMap<struct UEquippableCharmDataAsset*, struct UEquippableCharmInventoryModel*> DataAssetToEquippableCharmMap; // 0x380(0x50)
	struct TMap<struct UEquippableCharmLevelDataAsset*, struct UEquippableCharmLevelInventoryModel*> DataAssetToEquippableCharmLevelMap; // 0x3d0(0x50)
	struct TMap<struct UPlayerCardDataAsset*, struct UPlayerCardInventoryModel*> DataAssetToPlayerCardMap; // 0x420(0x50)
	struct TMap<struct UPlayerTitleDataAsset*, struct UPlayerTitleInventoryModel*> DataAssetToPlayerTitleMap; // 0x470(0x50)
	struct TMap<struct UJuiceBoxDataAsset*, struct UJuiceBoxInventoryModel*> DataAssetToJuiceBoxMap; // 0x4c0(0x50)
	struct TMap<struct UCurrencyDataAsset*, struct UCurrencyInventoryModel*> DataAssetToCurrencyMap; // 0x510(0x50)
	struct TArray<struct UJuiceBoxInventoryModel*> JuiceBoxModels; // 0x560(0x10)
	struct TMap<struct ULevelBorderDataAsset*, struct ULevelBorderInventoryModel*> DataAssetToLevelBorderMap; // 0x570(0x50)
	struct TArray<struct UCharacterInventoryModel*> CharacterModels; // 0x5c0(0x10)
	struct TArray<struct UMapInventoryModel*> MapModels; // 0x5d0(0x10)
	struct TArray<struct UPremiumContractInventoryModel*> PremiumContractModels; // 0x5e0(0x10)
	struct TMap<struct UCharacterDataAsset*, struct UCharacterInventoryModel*> DataAssetToCharacterMap; // 0x5f0(0x50)
	struct TMap<struct UMapDataAsset*, struct UMapInventoryModel*> DataAssetToMapMap; // 0x640(0x50)
	struct TMap<struct UContractDataAssetV2*, struct UPremiumContractInventoryModel*> DataAssetToContractMap; // 0x690(0x50)
	struct TMap<struct FGuid, struct UEquippableCharmInstanceInventoryModel*> EquippableCharmInstanceMap; // 0x6e0(0x50)
	char pad_730[0x50]; // 0x730(0x50)

	void UpdateSprayOwnershipState(); // Function ShooterGame.InventoryManager.UpdateSprayOwnershipState // (Final|Native|Private) // @ game+0x2f02070
	void UpdateSprayLevelOwnershipState(); // Function ShooterGame.InventoryManager.UpdateSprayLevelOwnershipState // (Final|Native|Private) // @ game+0x2f02070
	void UpdatePremiumContractOwnershipState(); // Function ShooterGame.InventoryManager.UpdatePremiumContractOwnershipState // (Final|Native|Private) // @ game+0x2f02050
	void UpdatePlayerTitleOwnershipState(); // Function ShooterGame.InventoryManager.UpdatePlayerTitleOwnershipState // (Final|Native|Private) // @ game+0x2f02030
	void UpdatePlayerCardOwnershipState(); // Function ShooterGame.InventoryManager.UpdatePlayerCardOwnershipState // (Final|Native|Private) // @ game+0x2f02010
	void UpdateLevelBorderOwnershipState(); // Function ShooterGame.InventoryManager.UpdateLevelBorderOwnershipState // (Final|Native|Private) // @ game+0x2f01ff0
	void UpdateJuiceContentBalances(enum class EWalletType& TypeOfWallet); // Function ShooterGame.InventoryManager.UpdateJuiceContentBalances // (Final|Native|Private|HasOutParms) // @ game+0x2f01f60
	void UpdateJuiceBoxInventoryModels(); // Function ShooterGame.InventoryManager.UpdateJuiceBoxInventoryModels // (Final|Native|Private) // @ game+0x2f01f40
	void UpdateFullyUnlockedContentTypes(); // Function ShooterGame.InventoryManager.UpdateFullyUnlockedContentTypes // (Final|Native|Private) // @ game+0x2f01f20
	void UpdateFavoritesState(struct TMap<struct FGuid, enum class EFavoritesActionType>& ModifiedFavorites); // Function ShooterGame.InventoryManager.UpdateFavoritesState // (Final|Native|Private|HasOutParms) // @ game+0x2f01e10
	void UpdateEquippableSkinOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableSkinOwnershipState // (Final|Native|Private) // @ game+0x2f01df0
	void UpdateEquippableSkinLevelOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableSkinLevelOwnershipState // (Final|Native|Private) // @ game+0x2f01df0
	void UpdateEquippableSkinChromasOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableSkinChromasOwnershipState // (Final|Native|Private) // @ game+0x2f01dd0
	void UpdateEquippableCharmsOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableCharmsOwnershipState // (Final|Native|Private) // @ game+0x2f01db0
	void UpdateEquippableCharmLevelsOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableCharmLevelsOwnershipState // (Final|Native|Private) // @ game+0x2f01d90
	void UpdateEquippableAttachmentOwnershipState(); // Function ShooterGame.InventoryManager.UpdateEquippableAttachmentOwnershipState // (Final|Native|Private) // @ game+0x2f01d70
	void UpdateCurrencyInventoryModels(); // Function ShooterGame.InventoryManager.UpdateCurrencyInventoryModels // (Final|Native|Private) // @ game+0x2f01d50
	void UpdateContentForSubscriptionState(); // Function ShooterGame.InventoryManager.UpdateContentForSubscriptionState // (Final|Native|Private) // @ game+0x2f01d30
	void UpdateContentEquippedState(); // Function ShooterGame.InventoryManager.UpdateContentEquippedState // (Final|Native|Private) // @ game+0x2f01d10
	void UpdateContentEnablement(); // Function ShooterGame.InventoryManager.UpdateContentEnablement // (Final|Native|Private) // @ game+0x2f01cf0
	void UpdateCharacterOwnershipState(); // Function ShooterGame.InventoryManager.UpdateCharacterOwnershipState // (Final|Native|Private) // @ game+0x2f01cd0
	void OnEquippableCharmLevelsOwnershipChanged(); // Function ShooterGame.InventoryManager.OnEquippableCharmLevelsOwnershipChanged // (Final|Native|Private) // @ game+0x2f015b0
	void HandleUIDataLoadRequested(struct UBaseInventoryModel* InventoryModel, struct FDelegate Callback); // Function ShooterGame.InventoryManager.HandleUIDataLoadRequested // (Final|Native|Private) // @ game+0x2f00fa0
	struct USprayInventoryModel* GetSprayModel(struct USprayDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetSprayModel // (Final|Native|Public) // @ game+0x2f00e70
	struct USprayLevelInventoryModel* GetSprayLevelModel(struct USprayLevelDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetSprayLevelModel // (Final|Native|Public) // @ game+0x2f00dd0
	struct USprayEquipSlotInventoryModel* GetSprayEquipSlotModel(struct USprayEquipSlotDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetSprayEquipSlotModel // (Final|Native|Public) // @ game+0x2f00d30
	struct UPlayerTitleInventoryModel* GetPlayerTitleModel(struct UPlayerTitleDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetPlayerTitleModel // (Final|Native|Public) // @ game+0x2f00c90
	struct UPlayerCardInventoryModel* GetPlayerCardModel(struct UPlayerCardDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetPlayerCardModel // (Final|Native|Public) // @ game+0x2f00bf0
	struct ULevelBorderInventoryModel* GetLevelBorderModel(struct ULevelBorderDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetLevelBorderModel // (Final|Native|Public) // @ game+0x2f00b50
	struct UJuiceBoxInventoryModel* GetJuiceBoxModel(struct UJuiceBoxDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetJuiceBoxModel // (Final|Native|Public) // @ game+0x2f00ab0
	struct UBaseInventoryModel* GetInventoryModelFromItemID(struct FString ItemId); // Function ShooterGame.InventoryManager.GetInventoryModelFromItemID // (Final|Native|Public) // @ game+0x2f009f0
	struct UBaseInventoryModel* GetInventoryModelFromIDs(struct FString ItemId, struct FString ItemTypeID); // Function ShooterGame.InventoryManager.GetInventoryModelFromIDs // (Final|Native|Public) // @ game+0x2f008d0
	struct UBaseInventoryModel* GetInventoryModelForDataAsset(struct UAresBasePrimaryDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetInventoryModelForDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f00830
	struct UInventoryManager* GetInventoryManager(struct UObject* WorldContextObject); // Function ShooterGame.InventoryManager.GetInventoryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f007a0
	struct UPlayerTitleInventoryModel* GetEquippedPlayerTitleModel(); // Function ShooterGame.InventoryManager.GetEquippedPlayerTitleModel // (Final|Native|Public|Const) // @ game+0x2f006e0
	struct UPlayerCardInventoryModel* GetEquippedPlayerCardModel(); // Function ShooterGame.InventoryManager.GetEquippedPlayerCardModel // (Final|Native|Public|Const) // @ game+0x2f006b0
	struct ULevelBorderInventoryModel* GetEquippedLevelBorderModel(); // Function ShooterGame.InventoryManager.GetEquippedLevelBorderModel // (Final|Native|Public|Const) // @ game+0x2f00680
	struct UEquippableSkinInventoryModel* GetEquippableSkinModel(struct UEquippableSkinDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableSkinModel // (Final|Native|Public) // @ game+0x2f005e0
	struct UEquippableSkinLevelInventoryModel* GetEquippableSkinLevelModel(struct UEquippableSkinLevelDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableSkinLevelModel // (Final|Native|Public) // @ game+0x2f00540
	struct UEquippableSkinChromaInventoryModel* GetEquippableSkinChromaModel(struct UEquippableSkinChromaDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableSkinChromaModel // (Final|Native|Public) // @ game+0x2f004a0
	struct UEquippableInventoryModel* GetEquippableModel(struct UEquippableDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableModel // (Final|Native|Public) // @ game+0x2f00400
	struct UEquippableCharmInventoryModel* GetEquippableCharmModel(struct UEquippableCharmDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableCharmModel // (Final|Native|Public) // @ game+0x2f00360
	struct UEquippableCharmLevelInventoryModel* GetEquippableCharmLevelModel(struct UEquippableCharmLevelDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableCharmLevelModel // (Final|Native|Public) // @ game+0x2f002c0
	struct TArray<struct UEquippableCharmInstanceInventoryModel*> GetEquippableCharmInstances(struct UEquippableCharmDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableCharmInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f001d0
	struct UEquippableCharmInstanceInventoryModel* GetEquippableCharmInstance(struct FGuid& CharmInstanceID); // Function ShooterGame.InventoryManager.GetEquippableCharmInstance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2f00120
	struct UEquippableAttachmentInventoryModel* GetEquippableAttachmentModel(struct UEquippableAttachmentDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetEquippableAttachmentModel // (Final|Native|Public) // @ game+0x2f00080
	struct FString GetDisabledAndEquippedContentWarningMessage(); // Function ShooterGame.InventoryManager.GetDisabledAndEquippedContentWarningMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f00020
	struct UCurrencyInventoryModel* GetCurrencyModelByCurrencyID(struct FGuid CurrencyID); // Function ShooterGame.InventoryManager.GetCurrencyModelByCurrencyID // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2efff70
	struct UCurrencyInventoryModel* GetCurrencyModel(struct UCurrencyDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetCurrencyModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2effed0
	struct TArray<struct UCharacterInventoryModel*> GetCharacterModels(); // Function ShooterGame.InventoryManager.GetCharacterModels // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2effe30
	struct UCharacterInventoryModel* GetCharacterModel(struct UCharacterDataAsset* DataAsset); // Function ShooterGame.InventoryManager.GetCharacterModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2effd90
	struct TArray<struct USprayInventoryModel*> GetAllSprayModels(); // Function ShooterGame.InventoryManager.GetAllSprayModels // (Final|Native|Public|Const) // @ game+0x2effca0
	struct TArray<struct USprayEquipSlotInventoryModel*> GetAllSprayEquipSlotModels(); // Function ShooterGame.InventoryManager.GetAllSprayEquipSlotModels // (Final|Native|Public|Const) // @ game+0x2effc10
	struct TArray<struct UPlayerTitleInventoryModel*> GetAllPlayerTitleModels(); // Function ShooterGame.InventoryManager.GetAllPlayerTitleModels // (Final|Native|Public|Const) // @ game+0x2effb80
	struct TArray<struct UPlayerCardInventoryModel*> GetAllPlayerCardModels(); // Function ShooterGame.InventoryManager.GetAllPlayerCardModels // (Final|Native|Public|Const) // @ game+0x2effaf0
	struct TArray<struct ULevelBorderInventoryModel*> GetAllLevelBorderModels(); // Function ShooterGame.InventoryManager.GetAllLevelBorderModels // (Final|Native|Public|Const) // @ game+0x2effa60
	struct TArray<struct UJuiceBoxInventoryModel*> GetAllJuiceBoxModels(); // Function ShooterGame.InventoryManager.GetAllJuiceBoxModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eff9d0
	struct TArray<struct UEquippableCharmInstanceInventoryModel*> GetAllEquippableCharmInstances(); // Function ShooterGame.InventoryManager.GetAllEquippableCharmInstances // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eff940
	struct TArray<struct UCurrencyInventoryModel*> GetAllCurrencyModels(); // Function ShooterGame.InventoryManager.GetAllCurrencyModels // (Final|Native|Public|Const) // @ game+0x2eff8b0
	void BuildSprayEquipSlotCatalog(); // Function ShooterGame.InventoryManager.BuildSprayEquipSlotCatalog // (Final|Native|Private) // @ game+0x2eff710
	void BuildSprayCatalog(); // Function ShooterGame.InventoryManager.BuildSprayCatalog // (Final|Native|Private) // @ game+0x2eff6f0
	void BuildPremiumContractCatalog(); // Function ShooterGame.InventoryManager.BuildPremiumContractCatalog // (Final|Native|Private) // @ game+0x2eff6d0
	void BuildPlayerTitleCatalog(); // Function ShooterGame.InventoryManager.BuildPlayerTitleCatalog // (Final|Native|Private) // @ game+0x2eff6b0
	void BuildPlayerCardCatalog(); // Function ShooterGame.InventoryManager.BuildPlayerCardCatalog // (Final|Native|Private) // @ game+0x2eff690
	void BuildMapCatalog(); // Function ShooterGame.InventoryManager.BuildMapCatalog // (Final|Native|Private) // @ game+0x2eff670
	void BuildLevelBorderCatalog(); // Function ShooterGame.InventoryManager.BuildLevelBorderCatalog // (Final|Native|Private) // @ game+0x2eff650
	void BuildJuiceBoxCatalog(); // Function ShooterGame.InventoryManager.BuildJuiceBoxCatalog // (Final|Native|Private) // @ game+0x2eff630
	void BuildInitialCatalog(); // Function ShooterGame.InventoryManager.BuildInitialCatalog // (Final|Native|Private) // @ game+0x2eff610
	void BuildEquippableCatalog(); // Function ShooterGame.InventoryManager.BuildEquippableCatalog // (Final|Native|Private) // @ game+0x2eff5f0
	void BuildCurrencyCatalog(); // Function ShooterGame.InventoryManager.BuildCurrencyCatalog // (Final|Native|Private) // @ game+0x2eff5d0
	void BuildCharmCatalog(); // Function ShooterGame.InventoryManager.BuildCharmCatalog // (Final|Native|Private) // @ game+0x2eff5b0
	void BuildCharacterCatalog(); // Function ShooterGame.InventoryManager.BuildCharacterCatalog // (Final|Native|Private) // @ game+0x2eff590
};

// Class ShooterGame.SubscriptionOwnershipModel
// Size: 0x40 (Inherited: 0x30)
struct USubscriptionOwnershipModel : UObject {
	struct TArray<struct USubscriptionDataAsset*> OrderedSubscriptions; // 0x30(0x10)

	bool IsUnlockedBySubscription(); // Function ShooterGame.SubscriptionOwnershipModel.IsUnlockedBySubscription // (Final|Native|Public|BlueprintCallable) // @ game+0x2f09460
	struct USubscriptionDataAsset* GetHighestOwnedSubscriptionDataAsset(); // Function ShooterGame.SubscriptionOwnershipModel.GetHighestOwnedSubscriptionDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08cd0
};

// Class ShooterGame.BaseInventoryModel
// Size: 0x108 (Inherited: 0x30)
struct UBaseInventoryModel : UObject {
	struct FMulticastInlineDelegate OnIsEnabledChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnLoadingUIDataChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnIsOwnedChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnIsEquippedChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnBalanceChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnIsFavoritedChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnIsUnlockedChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnIsLoyaltyContentChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnIsOwnedOnlyByLoyaltyChanged; // 0xb0(0x10)
	char pad_C0[0x18]; // 0xc0(0x18)
	struct TWeakObjectPtr<struct UBaseContentUIData> BaseUIDataPtr; // 0xd8(0x08)
	struct FMulticastInlineDelegate OnSubscriptionsChanged; // 0xe0(0x10)
	bool bIsEnabled; // 0xf0(0x01)
	bool bLoadingUIData; // 0xf1(0x01)
	bool bIsOwned; // 0xf2(0x01)
	bool bIsFavorited; // 0xf3(0x01)
	bool bIsEquipped; // 0xf4(0x01)
	char pad_F5[0x3]; // 0xf5(0x03)
	int32_t iBalance; // 0xf8(0x04)
	bool bIsLoyaltyContent; // 0xfc(0x01)
	bool bIsCAPF2PContent; // 0xfd(0x01)
	bool bIsUnlockedByConfig; // 0xfe(0x01)
	char pad_FF[0x1]; // 0xff(0x01)
	struct USubscriptionOwnershipModel* SubscriptionStatus; // 0x100(0x08)

	void GetUIData(struct FDelegate Callback); // Function ShooterGame.BaseInventoryModel.GetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x2f09320
	struct USubscriptionOwnershipModel* GetSubscriptionModel(); // Function ShooterGame.BaseInventoryModel.GetSubscriptionModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2f09260
	bool GetLoadingUIData(); // Function ShooterGame.BaseInventoryModel.GetLoadingUIData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08ef0
	bool GetIsUnlockedOnlyBySubscription(); // Function ShooterGame.BaseInventoryModel.GetIsUnlockedOnlyBySubscription // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f08ec0
	bool GetIsUnlockedBySubscription(); // Function ShooterGame.BaseInventoryModel.GetIsUnlockedBySubscription // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08e90
	bool GetIsUnlocked(); // Function ShooterGame.BaseInventoryModel.GetIsUnlocked // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08e50
	bool GetIsOwnedOnlyByLoyalty(); // Function ShooterGame.BaseInventoryModel.GetIsOwnedOnlyByLoyalty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08e20
	bool GetIsOwned(); // Function ShooterGame.BaseInventoryModel.GetIsOwned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08df0
	bool GetIsLoyaltyContent(); // Function ShooterGame.BaseInventoryModel.GetIsLoyaltyContent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08dc0
	bool GetIsFavorited(); // Function ShooterGame.BaseInventoryModel.GetIsFavorited // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08d90
	bool GetIsEquipped(); // Function ShooterGame.BaseInventoryModel.GetIsEquipped // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08d60
	bool GetIsEnabled(); // Function ShooterGame.BaseInventoryModel.GetIsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08d30
	bool GetIsCAPF2PContent(); // Function ShooterGame.BaseInventoryModel.GetIsCAPF2PContent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08d00
	bool GetIsBaseContent(); // Function ShooterGame.BaseInventoryModel.GetIsBaseContent // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2198650
	int32_t GetBalance(); // Function ShooterGame.BaseInventoryModel.GetBalance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dea500
};

// Class ShooterGame.EquippableInventoryModel
// Size: 0x190 (Inherited: 0x108)
struct UEquippableInventoryModel : UBaseInventoryModel {
	struct UEquippableDataAsset* EquippableDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnEquippedSkinChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnEquippedAttachmentAdded; // 0x120(0x10)
	struct FMulticastInlineDelegate OnEquippedAttachmentRemoved; // 0x130(0x10)
	struct FMulticastInlineDelegate OnEquippedCharmChanged; // 0x140(0x10)
	struct TArray<struct UEquippableSkinInventoryModel*> PossibleSkins; // 0x150(0x10)
	struct TArray<struct UEquippableAttachmentInventoryModel*> PossibleAttachments; // 0x160(0x10)
	struct UEquippableSkinInventoryModel* EquippedSkin; // 0x170(0x08)
	struct UEquippableCharmInstanceInventoryModel* EquippedCharmInstance; // 0x178(0x08)
	struct TArray<struct UEquippableAttachmentInventoryModel*> EquippedAttachments; // 0x180(0x10)

	struct UEquippableSkinInventoryModel* GetEquippedSkin(); // Function ShooterGame.EquippableInventoryModel.GetEquippedSkin // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df9c60
	struct UEquippableCharmInstanceInventoryModel* GetEquippedCharmInstance(); // Function ShooterGame.EquippableInventoryModel.GetEquippedCharmInstance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df9d50
	struct TArray<struct UEquippableAttachmentInventoryModel*> GetEquippedAttachments(); // Function ShooterGame.EquippableInventoryModel.GetEquippedAttachments // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08be0
	struct UEquippableUIData* GetEquippableUIData(bool& IsValid); // Function ShooterGame.EquippableInventoryModel.GetEquippableUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f08b40
};

// Class ShooterGame.CharacterInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UCharacterInventoryModel : UBaseInventoryModel {
	struct UCharacterDataAsset* CharacterDataAsset; // 0x108(0x08)

	struct UCharacterUIData* GetCharacterUIData(bool& IsValid); // Function ShooterGame.CharacterInventoryModel.GetCharacterUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f086e0
};

// Class ShooterGame.MapInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UMapInventoryModel : UBaseInventoryModel {
	struct UMapDataAsset* MapDataAsset; // 0x108(0x08)

	struct UMapUIData* GetMapUIData(bool& IsValid); // Function ShooterGame.MapInventoryModel.GetMapUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f08f20
};

// Class ShooterGame.EquippableSkinLevelInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct UEquippableSkinLevelInventoryModel : UBaseInventoryModel {
	struct UEquippableSkinLevelDataAsset* EquippableSkinLevelDataAsset; // 0x108(0x08)
	struct UEquippableSkinInventoryModel* ParentSkin; // 0x110(0x08)

	struct UEquippableSkinLevelUIData* GetEquippableSkinLevelUIData(bool& IsValid); // Function ShooterGame.EquippableSkinLevelInventoryModel.GetEquippableSkinLevelUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f08a00
};

// Class ShooterGame.EquippableSkinInventoryModel
// Size: 0x160 (Inherited: 0x108)
struct UEquippableSkinInventoryModel : UBaseInventoryModel {
	struct UEquippableSkinDataAsset* EquippableSkinDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnEquippedChromaChanged; // 0x110(0x10)
	struct UEquippableInventoryModel* ParentEquippable; // 0x120(0x08)
	struct TArray<struct UEquippableSkinChromaInventoryModel*> PossibleChromas; // 0x128(0x10)
	struct TArray<struct UEquippableSkinLevelInventoryModel*> PossibleLevels; // 0x138(0x10)
	struct FMulticastInlineDelegate OnOwnedUpgradesChanged; // 0x148(0x10)
	struct UEquippableSkinChromaInventoryModel* EquippedChroma; // 0x158(0x08)

	bool IsOwnedAndHasNoShards(); // Function ShooterGame.EquippableSkinInventoryModel.IsOwnedAndHasNoShards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f09430
	bool IsFullyUpgraded(); // Function ShooterGame.EquippableSkinInventoryModel.IsFullyUpgraded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f09400
	int32_t GetTotalUpgrades(); // Function ShooterGame.EquippableSkinInventoryModel.GetTotalUpgrades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f092f0
	int32_t GetTotalLevels(); // Function ShooterGame.EquippableSkinInventoryModel.GetTotalLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f092c0
	int32_t GetTotalChromas(); // Function ShooterGame.EquippableSkinInventoryModel.GetTotalChromas // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f09290
	int32_t GetOwnedUpgrades(); // Function ShooterGame.EquippableSkinInventoryModel.GetOwnedUpgrades // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f09020
	int32_t GetOwnedLevels(); // Function ShooterGame.EquippableSkinInventoryModel.GetOwnedLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08ff0
	int32_t GetOwnedChromasIncludingDefault(); // Function ShooterGame.EquippableSkinInventoryModel.GetOwnedChromasIncludingDefault // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08fc0
	struct UEquippableSkinChromaInventoryModel* GetEquippedChroma(); // Function ShooterGame.EquippableSkinInventoryModel.GetEquippedChroma // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08c70
	struct UEquippableSkinUIData* GetEquippableSkinUIData(bool& IsValid); // Function ShooterGame.EquippableSkinInventoryModel.GetEquippableSkinUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f08aa0
};

// Class ShooterGame.EquippableAttachmentInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct UEquippableAttachmentInventoryModel : UBaseInventoryModel {
	struct UEquippableAttachmentDataAsset* EquippableAttachmentDataAsset; // 0x108(0x08)
	struct UEquippableInventoryModel* ParentEquippable; // 0x110(0x08)

	struct UEquippableAttachmentUIData* GetEquippableAttachmentUIData(bool& IsValid); // Function ShooterGame.EquippableAttachmentInventoryModel.GetEquippableAttachmentUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f08780
};

// Class ShooterGame.EquippableSkinChromaInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct UEquippableSkinChromaInventoryModel : UBaseInventoryModel {
	struct UEquippableSkinChromaDataAsset* EquippableSkinChromaDataAsset; // 0x108(0x08)
	struct UEquippableSkinInventoryModel* ParentSkin; // 0x110(0x08)

	bool IsDefaultChroma(); // Function ShooterGame.EquippableSkinChromaInventoryModel.IsDefaultChroma // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f093d0
	struct UEquippableSkinChromaUIData* GetEquippableSkinChromaUIData(bool& IsValid); // Function ShooterGame.EquippableSkinChromaInventoryModel.GetEquippableSkinChromaUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f08960
};

// Class ShooterGame.SprayEquipSlotInventoryModel
// Size: 0x128 (Inherited: 0x108)
struct USprayEquipSlotInventoryModel : UBaseInventoryModel {
	struct USprayEquipSlotDataAsset* SprayEquipSlotDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnEquippedSprayChanged; // 0x110(0x10)
	struct USprayInventoryModel* EquippedSpray; // 0x120(0x08)

	struct USprayEquipSlotUIData* GetSprayEquipSlotUIData(bool& IsValid); // Function ShooterGame.SprayEquipSlotInventoryModel.GetSprayEquipSlotUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f09050
	struct USprayInventoryModel* GetEquippedSpray(); // Function ShooterGame.SprayEquipSlotInventoryModel.GetEquippedSpray // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f08ca0
};

// Class ShooterGame.SprayLevelInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct USprayLevelInventoryModel : UBaseInventoryModel {
	struct USprayLevelDataAsset* SprayLevelDataAsset; // 0x108(0x08)
	struct USprayInventoryModel* ParentSpray; // 0x110(0x08)

	struct USprayLevelUIData* GetSprayLevelUIData(bool& IsValid); // Function ShooterGame.SprayLevelInventoryModel.GetSprayLevelUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f09120
};

// Class ShooterGame.SprayInventoryModel
// Size: 0x138 (Inherited: 0x108)
struct USprayInventoryModel : UBaseInventoryModel {
	struct USprayDataAsset* SprayDataAsset; // 0x108(0x08)
	struct FMulticastInlineDelegate OnSprayLevelChanged; // 0x110(0x10)
	struct TArray<struct USprayLevelInventoryModel*> PossibleLevels; // 0x120(0x10)
	struct USprayLevelInventoryModel* SprayLevel; // 0x130(0x08)

	struct USprayUIData* GetSprayUIData(bool& IsValid); // Function ShooterGame.SprayInventoryModel.GetSprayUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f091c0
	struct USprayLevelInventoryModel* GetSprayLevel(); // Function ShooterGame.SprayInventoryModel.GetSprayLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f090f0
};

// Class ShooterGame.EquippableCharmInventoryModel
// Size: 0x120 (Inherited: 0x108)
struct UEquippableCharmInventoryModel : UBaseInventoryModel {
	struct UEquippableCharmDataAsset* EquippableCharmDataAsset; // 0x108(0x08)
	struct TArray<struct UEquippableCharmLevelInventoryModel*> LevelInventoryModels; // 0x110(0x10)

	struct UEquippableCharmUIData* GetEquippableCharmUIData(bool& IsValid); // Function ShooterGame.EquippableCharmInventoryModel.GetEquippableCharmUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f088c0
};

// Class ShooterGame.EquippableCharmLevelInventoryModel
// Size: 0x120 (Inherited: 0x108)
struct UEquippableCharmLevelInventoryModel : UBaseInventoryModel {
	struct UEquippableCharmLevelDataAsset* EquippableCharmLevelDataAsset; // 0x108(0x08)
	struct UEquippableCharmDataAsset* BaseCharmDataAsset; // 0x110(0x08)
	struct UEquippableCharmInventoryModel* BaseCharmInventoryModel; // 0x118(0x08)

	struct UEquippableCharmLevelUIData* GetEquippableCharmLevelUIData(bool& IsValid); // Function ShooterGame.EquippableCharmLevelInventoryModel.GetEquippableCharmLevelUIData // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08820
};

// Class ShooterGame.EquippableCharmInstanceInventoryModel
// Size: 0x78 (Inherited: 0x30)
struct UEquippableCharmInstanceInventoryModel : UObject {
	struct FMulticastInlineDelegate OnLevelChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnAssignedEquippableChanged; // 0x40(0x10)
	struct FGuid InstanceId; // 0x50(0x10)
	struct UEquippableDataAsset* AssignedEquippable; // 0x60(0x08)
	struct UEquippableCharmDataAsset* EquippableCharmDataAsset; // 0x68(0x08)
	struct UEquippableCharmLevelDataAsset* EquippableCharmLevelDataAsset; // 0x70(0x08)

	void SetCharmLevel(struct UEquippableCharmLevelDataAsset* CharmLevelDataAsset); // Function ShooterGame.EquippableCharmInstanceInventoryModel.SetCharmLevel // (Final|Native|Public) // @ game+0x2f09510
	void SetAssignedEquippable(struct UEquippableDataAsset* Equippable); // Function ShooterGame.EquippableCharmInstanceInventoryModel.SetAssignedEquippable // (Final|Native|Public) // @ game+0x2f09480
};

// Class ShooterGame.PremiumContractInventoryModel
// Size: 0x118 (Inherited: 0x108)
struct UPremiumContractInventoryModel : UBaseInventoryModel {
	struct FGuid ID; // 0x108(0x10)
};

// Class ShooterGame.InventoryOfferModel
// Size: 0x68 (Inherited: 0x30)
struct UInventoryOfferModel : UObject {
	int32_t Price; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct TArray<struct UBaseInventoryModel*> EntitlementGrants; // 0x38(0x10)
	struct TArray<struct UBaseInventoryModel*> BonusEntitlementGrants; // 0x48(0x10)
	struct FString OfferId; // 0x58(0x10)
};

// Class ShooterGame.PlayerCardInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UPlayerCardInventoryModel : UBaseInventoryModel {
	struct UPlayerCardDataAsset* PlayerCardDataAsset; // 0x108(0x08)
};

// Class ShooterGame.LevelBorderInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct ULevelBorderInventoryModel : UBaseInventoryModel {
	struct ULevelBorderDataAsset* LevelBorderDataAsset; // 0x108(0x08)
};

// Class ShooterGame.PlayerTitleInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UPlayerTitleInventoryModel : UBaseInventoryModel {
	struct UPlayerTitleDataAsset* PlayerTitleDataAsset; // 0x108(0x08)
};

// Class ShooterGame.JuiceBoxInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UJuiceBoxInventoryModel : UBaseInventoryModel {
	struct UJuiceBoxDataAsset* DataAsset; // 0x108(0x08)
};

// Class ShooterGame.CurrencyInventoryModel
// Size: 0x110 (Inherited: 0x108)
struct UCurrencyInventoryModel : UBaseInventoryModel {
	struct UCurrencyDataAsset* DataAsset; // 0x108(0x08)
};

// Class ShooterGame.PreloadableAsset
// Size: 0x30 (Inherited: 0x30)
struct UPreloadableAsset : UInterface {
};

// Class ShooterGame.RiotLogin
// Size: 0x30 (Inherited: 0x30)
struct URiotLogin : UInterface {
};

// Class ShooterGame.ItemSlot
// Size: 0x48 (Inherited: 0x30)
struct UItemSlot : UObject {
	enum class EAresItemSlot SlotType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct AAresItem* Contents; // 0x38(0x08)
	struct UAresInventory* Inventory; // 0x40(0x08)

	bool TryGetIndexForItem(struct AAresItem* item, char& OutIndex); // Function ShooterGame.ItemSlot.TryGetIndexForItem // (Native|Public|HasOutParms|Const) // @ game+0x2f12f60
	bool RemoveItem(struct AAresItem* item); // Function ShooterGame.ItemSlot.RemoveItem // (Native|Public) // @ game+0x2f12980
	void OnRep_Contents(); // Function ShooterGame.ItemSlot.OnRep_Contents // (Final|Native|Public) // @ game+0x2f12940
	bool IsFull(); // Function ShooterGame.ItemSlot.IsFull // (Native|Public|Const) // @ game+0x2dc37f0
	struct AAresItem* GetLastItem(); // Function ShooterGame.ItemSlot.GetLastItem // (Native|Public|Const) // @ game+0x2f12320
	int32_t GetItemQuantityByClass(struct AAresItem* ItemClass); // Function ShooterGame.ItemSlot.GetItemQuantityByClass // (Native|Public|Const) // @ game+0x2f11c80
	int32_t GetItemCount(); // Function ShooterGame.ItemSlot.GetItemCount // (Native|Public|Const) // @ game+0x2f11c40
	struct AAresItem* GetItemByIndex(int32_t Index); // Function ShooterGame.ItemSlot.GetItemByIndex // (Native|Public|Const) // @ game+0x2f11ba0
	int32_t GetCapacity(); // Function ShooterGame.ItemSlot.GetCapacity // (Native|Public|Const) // @ game+0x2f11b40
	struct AAresItem* FindPreviousItem(struct AAresItem* StartingItem); // Function ShooterGame.ItemSlot.FindPreviousItem // (Native|Public|Const) // @ game+0x2f11a90
	struct AAresItem* FindNextItem(struct AAresItem* StartingItem); // Function ShooterGame.ItemSlot.FindNextItem // (Native|Public|Const) // @ game+0x2f119e0
	struct AAresItem* FindItemByClass(struct AAresItem* ItemClass); // Function ShooterGame.ItemSlot.FindItemByClass // (Native|Public|Const) // @ game+0x2f11930
	struct TArray<struct AAresItem*> FindIncompatibleItems(struct TArray<enum class EAresItemSlot>& CompatibleSlotTypes); // Function ShooterGame.ItemSlot.FindIncompatibleItems // (Native|Public|HasOutParms|Const) // @ game+0x2f11820
	bool ContainsItem(struct AAresItem* item); // Function ShooterGame.ItemSlot.ContainsItem // (Native|Public|Const) // @ game+0x2f11770
	bool AddItem(struct AAresItem* item); // Function ShooterGame.ItemSlot.AddItem // (Native|Public) // @ game+0x2f114c0
};

// Class ShooterGame.JuiceBoxUIData
// Size: 0xb8 (Inherited: 0x90)
struct UJuiceBoxUIData : UBaseContentUIData {
	bool UseModelViewerOverrides; // 0x90(0x01)
	char pad_91[0x3]; // 0x91(0x03)
	struct FVector CameraPosition; // 0x94(0x0c)
	float DefaultFOV; // 0xa0(0x04)
	float MaxFOV; // 0xa4(0x04)
	float MinFOV; // 0xa8(0x04)
	struct FVector PivotPoint; // 0xac(0x0c)
};

// Class ShooterGame.JuiceBoxDataAsset
// Size: 0xb8 (Inherited: 0x50)
struct UJuiceBoxDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> Currency; // 0x50(0x30)
	struct TSoftClassPtr<UObject> UIData; // 0x80(0x30)
	struct AEffectContainer* Effect; // 0xb0(0x08)
};

// Class ShooterGame.JuiceBoxShopWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct UJuiceBoxShopWidget : UUserWidget {
	struct UStoreViewModelV2* StoreViewModel; // 0x2c8(0x08)
	struct UStoreViewControllerV2* StoreViewController; // 0x2d0(0x08)

	struct UStoreViewModelV2* GetViewModel(); // Function ShooterGame.JuiceBoxShopWidget.GetViewModel // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e493d0
	struct UStoreViewControllerV2* GetViewController(); // Function ShooterGame.JuiceBoxShopWidget.GetViewController // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e493b0
};

// Class ShooterGame.JuiceScreenViewController
// Size: 0x120 (Inherited: 0x80)
struct UJuiceScreenViewController : UInitSystem {
	struct UJuiceScreenViewModel* ViewModel; // 0x80(0x08)
	struct FMulticastInlineDelegate OnJuiceContentsReloaded; // 0x88(0x10)
	struct FGuid JuiceCraftOrderID; // 0x98(0x10)
	struct FGuid JuiceCraftXID; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnJuiceCraftingStateChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnJuiceCraftOrderSubmitted; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnJuiceCraftOrderComplete; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnJuiceCraftOrderFailed; // 0xe8(0x10)
	struct UConfigManager* ConfigManager; // 0xf8(0x08)
	struct UPurchaseManager* PurchaseManager; // 0x100(0x08)
	struct UStoreManager* StoreManager; // 0x108(0x08)
	struct UInventoryManager* InventoryManager; // 0x110(0x08)
	struct UContentIndex* ContentIndex; // 0x118(0x08)

	void UpdateJuiceContentMapping(struct TArray<struct FGuid> UpdatedIDs); // Function ShooterGame.JuiceScreenViewController.UpdateJuiceContentMapping // (Final|Native|Public) // @ game+0x2f13070
	void SubmitJuiceCraftOrder(); // Function ShooterGame.JuiceScreenViewController.SubmitJuiceCraftOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x2f12f40
	void SelectTargetJuiceReward(struct FGuid RewardContentID); // Function ShooterGame.JuiceScreenViewController.SelectTargetJuiceReward // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2f12c90
	void SelectJuiceContentForCrafting(struct FGuid JuiceContentID); // Function ShooterGame.JuiceScreenViewController.SelectJuiceContentForCrafting // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2f12bf0
	void RemoveJuiceContentFromCrafting(struct UJuiceContentViewModel* JuiceContent); // Function ShooterGame.JuiceScreenViewController.RemoveJuiceContentFromCrafting // (Final|Native|Public|BlueprintCallable) // @ game+0x2f12a30
	void OnJuiceCraftSubmitOrderError(); // Function ShooterGame.JuiceScreenViewController.OnJuiceCraftSubmitOrderError // (Final|Native|Public) // @ game+0x2deb6b0
	void OnJuiceCraftOrderSubmittedInternal(struct FGuid& SubmittedOrderID, struct FGuid& SubmittedOrderXID); // Function ShooterGame.JuiceScreenViewController.OnJuiceCraftOrderSubmittedInternal // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f12840
	void OnJuiceCraftOrderFailedInternal(struct FGuid& FailedOrderID, struct FGuid& FailedOrderXID); // Function ShooterGame.JuiceScreenViewController.OnJuiceCraftOrderFailedInternal // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f12740
	void OnJuiceCraftOrderCompleteInternal(struct FGuid& CompletedOrderID, struct FGuid& CompletedOrderXID); // Function ShooterGame.JuiceScreenViewController.OnJuiceCraftOrderCompleteInternal // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f12640
	bool IsJuiceEnergyAutoSpendEnabled(); // Function ShooterGame.JuiceScreenViewController.IsJuiceEnergyAutoSpendEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f12610
	bool IsCrafting(); // Function ShooterGame.JuiceScreenViewController.IsCrafting // (Final|Native|Public|BlueprintCallable) // @ game+0x2f12530
	void ClearJuiceCraftingTray(); // Function ShooterGame.JuiceScreenViewController.ClearJuiceCraftingTray // (Final|Native|Public|BlueprintCallable) // @ game+0x2f11730
};

// Class ShooterGame.JuiceContentViewModel
// Size: 0x60 (Inherited: 0x30)
struct UJuiceContentViewModel : UObject {
	enum class EJuiceContentViewModelType JuiceContentType; // 0x30(0x01)
	enum class EJuiceContentViewModelLocation Location; // 0x31(0x01)
	char pad_32[0x2]; // 0x32(0x02)
	int32_t JuiceTrayLocationIndex; // 0x34(0x04)
	struct FGuid JuiceContentID; // 0x38(0x10)
	int32_t JuiceValue; // 0x48(0x04)
	int32_t JuiceCost; // 0x4c(0x04)
	bool IsBlueprint; // 0x50(0x01)
	bool IsPlaceholder; // 0x51(0x01)
	char pad_52[0x6]; // 0x52(0x06)
	struct UBaseInventoryModel* InventoryModel; // 0x58(0x08)
};

// Class ShooterGame.FilteredJuiceContentsViewModel
// Size: 0x58 (Inherited: 0x30)
struct UFilteredJuiceContentsViewModel : UObject {
	struct FString ContentsName; // 0x30(0x10)
	struct TArray<struct UJuiceContentViewModel*> JuiceContents; // 0x40(0x10)
	enum class EJuiceFilterViewType FilterType; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
};

// Class ShooterGame.JuiceContentReward
// Size: 0x50 (Inherited: 0x30)
struct UJuiceContentReward : UObject {
	enum class EJuiceRewardType RewardType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UBaseInventoryModel* RewardInventoryModel; // 0x38(0x08)
	struct FGuid RewardContentID; // 0x40(0x10)

	enum class EJuiceOrderRequestType GetJuiceOrderTypeForRewardType(); // Function ShooterGame.JuiceContentReward.GetJuiceOrderTypeForRewardType // (Final|Native|Public) // @ game+0x2f11f40
	struct FGuid GetItemTypeID(); // Function ShooterGame.JuiceContentReward.GetItemTypeID // (Final|Native|Public|HasDefaults) // @ game+0x2f11d30
};

// Class ShooterGame.JuiceScreenViewModel
// Size: 0x1a8 (Inherited: 0x30)
struct UJuiceScreenViewModel : UObject {
	struct FMulticastInlineDelegate OnJuiceTrayBlueprintChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnJuiceTraySelectedRewardChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnJuiceTrayContentsChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnJuiceTrayMessageChanged; // 0x60(0x10)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x70(0x08)
	struct TMap<struct FGuid, struct UJuiceContentViewModel*> JuiceContentMapping; // 0x78(0x50)
	struct TMap<enum class EJuiceFilterViewType, struct UFilteredJuiceContentsViewModel*> FilteredViewModels; // 0xc8(0x50)
	struct TArray<struct UJuiceContentViewModel*> JuiceTrayContents; // 0x118(0x10)
	struct TMap<struct FGuid, int32_t> JuiceTrayContentCounts; // 0x128(0x50)
	struct UJuiceContentViewModel* JuiceTrayBlueprint; // 0x178(0x08)
	struct UJuiceContentReward* JuiceTraySelectedReward; // 0x180(0x08)
	struct TArray<struct UJuiceContentReward*> JuiceTrayRewardOptions; // 0x188(0x10)
	int32_t JuiceTrayBlueprintCost; // 0x198(0x04)
	int32_t JuiceTrayContentsTotalValue; // 0x19c(0x04)
	int32_t JuiceTrayContentsEnergyOnlyTotal; // 0x1a0(0x04)
	enum class EJuiceTrayMessage JuiceTrayMessage; // 0x1a4(0x01)
	bool IsCraftingReadyToSubmit; // 0x1a5(0x01)
	char pad_1A6[0x2]; // 0x1a6(0x02)

	enum class EJuiceTrayMessage UpdateIsCraftingReadyToSubmit(); // Function ShooterGame.JuiceScreenViewModel.UpdateIsCraftingReadyToSubmit // (Final|Native|Public) // @ game+0x2f13040
	void SetJuiceTraySelectedReward(struct FGuid& RewardID); // Function ShooterGame.JuiceScreenViewModel.SetJuiceTraySelectedReward // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f12ea0
	void SetJuiceTrayMessage(enum class EJuiceTrayMessage Message); // Function ShooterGame.JuiceScreenViewModel.SetJuiceTrayMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x2f12e20
	void SetJuiceTrayBlueprint(struct FGuid& CurrencyID, bool AutoSpendEnergyEnabled); // Function ShooterGame.JuiceScreenViewModel.SetJuiceTrayBlueprint // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f12d30
	void RemoveJuiceContents(struct FGuid& CurrencyID); // Function ShooterGame.JuiceScreenViewModel.RemoveJuiceContents // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f12b50
	void RemoveJuiceContentFromTray(struct UJuiceContentViewModel* JuiceContent); // Function ShooterGame.JuiceScreenViewModel.RemoveJuiceContentFromTray // (Final|Native|Public) // @ game+0x2f12ac0
	void RemakeJuiceContentsList(); // Function ShooterGame.JuiceScreenViewModel.RemakeJuiceContentsList // (Final|Native|Public) // @ game+0x2f12960
	bool IsJuiceEnergy(struct FGuid& JuiceContentID); // Function ShooterGame.JuiceScreenViewModel.IsJuiceEnergy // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2f12560
	bool HasJuiceContent(struct FGuid& CurrencyID); // Function ShooterGame.JuiceScreenViewModel.HasJuiceContent // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f12480
	struct URewardModel* GetRewardModelForCraft(); // Function ShooterGame.JuiceScreenViewModel.GetRewardModelForCraft // (Final|Native|Public|BlueprintCallable) // @ game+0x2f12450
	struct TArray<struct UJuiceContentReward*> GetNextRewardOptionsForSkin(struct UEquippableSkinInventoryModel* EquippableSkinInventoryModel); // Function ShooterGame.JuiceScreenViewModel.GetNextRewardOptionsForSkin // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f12360
	struct UJuiceContentReward* GetJuiceTraySelectedReward(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTraySelectedReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f12300
	enum class EJuiceTrayMessage GetJuiceTrayMessage(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayMessage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f122e0
	int32_t GetJuiceTrayCountForContentIncludingBlueprint(struct FGuid& JuiceContentID); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayCountForContentIncludingBlueprint // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2f12230
	int32_t GetJuiceTrayCountForContent(struct FGuid& JuiceContentID); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayCountForContent // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2f12180
	struct TArray<struct UJuiceContentViewModel*> GetJuiceTrayContentsForConfirmation(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayContentsForConfirmation // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f120f0
	struct TArray<struct UJuiceContentViewModel*> GetJuiceTrayContentsAllDisplayItems(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayContentsAllDisplayItems // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f12060
	struct TArray<struct UJuiceContentViewModel*> GetJuiceTrayContents(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayContents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f11f90
	struct UJuiceContentViewModel* GetJuiceTrayBlueprint(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceTrayBlueprint // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f11f70
	struct UJuiceContentViewModel* GetJuiceContentsByID(struct FGuid& CurrencyID); // Function ShooterGame.JuiceScreenViewModel.GetJuiceContentsByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f11e90
	struct UFilteredJuiceContentsViewModel* GetJuiceContentsByFilter(enum class EJuiceFilterViewType FilterType); // Function ShooterGame.JuiceScreenViewModel.GetJuiceContentsByFilter // (Final|Native|Public|BlueprintCallable) // @ game+0x2f11e00
	struct TArray<struct UJuiceContentViewModel*> GetJuiceContents(); // Function ShooterGame.JuiceScreenViewModel.GetJuiceContents // (Final|Native|Public|BlueprintCallable) // @ game+0x2f11d70
	bool GetIsCraftingReadyToSubmit(); // Function ShooterGame.JuiceScreenViewModel.GetIsCraftingReadyToSubmit // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f11b80
	void ClearJuiceTray(); // Function ShooterGame.JuiceScreenViewModel.ClearJuiceTray // (Final|Native|Public) // @ game+0x2f11750
	void AddJuiceContentToTray(struct FGuid& CurrencyID); // Function ShooterGame.JuiceScreenViewModel.AddJuiceContentToTray // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f11570
	void AddJuiceContents(struct FGuid& CurrencyID, struct UBaseInventoryModel* InventoryModel, enum class EJuiceContentViewModelType JuiceContentType); // Function ShooterGame.JuiceScreenViewModel.AddJuiceContents // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2f11610
};

// Class ShooterGame.JumpAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UJumpAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.JumpAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UJumpAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.JumpLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.JumpUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.JumpingCrowdPathFollowingComponent
// Size: 0x2d8 (Inherited: 0x2d0)
struct UJumpingCrowdPathFollowingComponent : UCrowdFollowingComponent {
	struct UCharacterMovementComponent* CharacterMoveComp; // 0x2d0(0x08)
};

// Class ShooterGame.JumpingPathFollowingComponent
// Size: 0x2a0 (Inherited: 0x288)
struct UJumpingPathFollowingComponent : UPathFollowingComponent {
	float FlyingAcceptanceRadius; // 0x288(0x04)
	float HeightAcceptanceModifier; // 0x28c(0x04)
	struct UCharacterMovementComponent* CharacterMoveComp; // 0x290(0x08)
	char pad_298[0x8]; // 0x298(0x08)

	void OnPostProcessMove(struct UPathFollowingComponent* PathFollower, struct FVector& InOutVelocity); // Function ShooterGame.JumpingPathFollowingComponent.OnPostProcessMove // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x2f1a750
};

// Class ShooterGame.JumpLandAddLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandAddLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.JumpLandAddUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandAddUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.JumpLandAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.JumpLandAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.JumpLandLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.JumpLandUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UJumpLandUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.KeyLocationObject
// Size: 0x400 (Inherited: 0x3d0)
struct AKeyLocationObject : ATargetPoint {
	struct FName LocationName; // 0x3d0(0x0c)
	char pad_3DC[0x4]; // 0x3dc(0x04)
	struct FText LocalizedLocationName; // 0x3e0(0x18)
	enum class EAresTeam Team; // 0x3f8(0x01)
	char pad_3F9[0x7]; // 0x3f9(0x07)
};

// Class ShooterGame.KeyLocationVolume
// Size: 0x448 (Inherited: 0x418)
struct AKeyLocationVolume : APhysicsVolume {
	struct FString LocationName; // 0x418(0x10)
	struct FText LocalizedLocationName; // 0x428(0x18)
	struct TWeakObjectPtr<struct AKeyLocationObject> LinkedKeyLocationObject; // 0x440(0x08)
};

// Class ShooterGame.KillBannerData
// Size: 0x30 (Inherited: 0x30)
struct UKillBannerData : UObject {
};

// Class ShooterGame.KillFeedAssisterPortraits_Base
// Size: 0x2f8 (Inherited: 0x2c8)
struct UKillFeedAssisterPortraits_Base : UUserWidget {
	struct UImage* BGGradient; // 0x2c8(0x08)
	struct UImage* AssistPortrait1; // 0x2d0(0x08)
	struct UImage* AssistPortrait2; // 0x2d8(0x08)
	struct UImage* AssistPortrait3; // 0x2e0(0x08)
	struct UImage* AssistPortrait4; // 0x2e8(0x08)
	struct UOverlay* MeBorder; // 0x2f0(0x08)
};

// Class ShooterGame.KillFeedParticipant_Base
// Size: 0x360 (Inherited: 0x2c8)
struct UKillFeedParticipant_Base : UUserWidget {
	struct UImage* BGGradient; // 0x2c8(0x08)
	struct UImage* Portrait; // 0x2d0(0x08)
	struct UTextBlock* PlayerName; // 0x2d8(0x08)
	struct UOverlay* UltimateOverlay; // 0x2e0(0x08)
	struct UImage* UltimateActiveVFX; // 0x2e8(0x08)
	struct USizeBox* UltimateAbilityIconSizeBox; // 0x2f0(0x08)
	struct UImage* UltimateAbilityIcon; // 0x2f8(0x08)
	struct USizeBox* AssistSizeBox; // 0x300(0x08)
	struct UImage* AssistImage; // 0x308(0x08)
	struct USizeBox* WeaponSizeBox; // 0x310(0x08)
	struct UImage* WeaponImage; // 0x318(0x08)
	struct USizeBox* WallPenSizeBox; // 0x320(0x08)
	struct UImage* WallPenImage; // 0x328(0x08)
	struct USizeBox* HeadshotSizeBox; // 0x330(0x08)
	struct UImage* HeadshotImage; // 0x338(0x08)
	struct UOverlay* MeBorder; // 0x340(0x08)
	struct UImage* TopGradient; // 0x348(0x08)
	struct UImage* BotGradient; // 0x350(0x08)
	struct UImage* MeDiamondImage; // 0x358(0x08)
};

// Class ShooterGame.KillFeedRow_Base
// Size: 0x318 (Inherited: 0x2c8)
struct UKillFeedRow_Base : UUserWidget {
	struct UImage* OnFireVFX; // 0x2c8(0x08)
	struct UKillFeedAssisterPortraits_Base* KillFeedAssisterPortraits; // 0x2d0(0x08)
	struct UOverlay* Numerals; // 0x2d8(0x08)
	struct UImage* NumberBacker; // 0x2e0(0x08)
	struct UTextBlock* KillNumberText; // 0x2e8(0x08)
	struct UKillFeedParticipant_Base* KillFeedParticipant1; // 0x2f0(0x08)
	struct UKillFeedParticipant_Base* KillFeedParticipant2; // 0x2f8(0x08)
	struct UImage* ArrowRight; // 0x300(0x08)
	struct UImage* ArrowLeft; // 0x308(0x08)
	struct UImage* AnimateIn; // 0x310(0x08)
};

// Class ShooterGame.KillCalloutHUDElement_Base
// Size: 0x2e0 (Inherited: 0x2d8)
struct UKillCalloutHUDElement_Base : UCoordinatedHUDElement {
	struct UVerticalBox* VerticalBoxForKillRows; // 0x2d8(0x08)
};

// Class ShooterGame.KillProxyComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UKillProxyComponent : UActorComponent {
	struct TArray<struct FGameplayTag> ProxyTags; // 0xe8(0x10)

	void ProxyKillToPlayer(struct AShooterCharacter* KillerCharacter, struct AShooterCharacter* KilledCharacter, struct UDamageResponse* Response); // Function ShooterGame.KillProxyComponent.ProxyKillToPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3b50
};

// Class ShooterGame.KillStreakComponent
// Size: 0x110 (Inherited: 0xe8)
struct UKillStreakComponent : UActorComponent {
	char pad_E8[0x28]; // 0xe8(0x28)

	void ResetKills(); // Function ShooterGame.KillStreakComponent.ResetKills // (Final|Native|Public|BlueprintCallable) // @ game+0x2f1a820
	int32_t GetNumKillsStreak(); // Function ShooterGame.KillStreakComponent.GetNumKillsStreak // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f1a4b0
	int32_t GetNumKillsCurrentLife(); // Function ShooterGame.KillStreakComponent.GetNumKillsCurrentLife // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f1a490
	void ClientRPCOnPlayerKill(int32_t LocalNumKillsStreak, bool bWasHeadshot); // Function ShooterGame.KillStreakComponent.ClientRPCOnPlayerKill // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x2f1a150
};

// Class ShooterGame.LadderComponent
// Size: 0xe8 (Inherited: 0xe8)
struct ULadderComponent : UActorComponent {
};

// Class ShooterGame.LatencyService
// Size: 0xa0 (Inherited: 0x80)
struct ULatencyService : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x90(0x08)
	struct UPingManager* PingManager; // 0x98(0x08)
};

// Class ShooterGame.LazyPlatformWidgetLoader_Base
// Size: 0x308 (Inherited: 0x2c8)
struct ULazyPlatformWidgetLoader_Base : UUserWidget {
	enum class EAresPlatformWidgetFamily WidgetFamily; // 0x2c8(0x01)
	char pad_2C9[0x3]; // 0x2c9(0x03)
	struct FName WidgetID; // 0x2cc(0x0c)
	struct FMulticastInlineDelegate OnWidgetLoaded; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnWidgetLoadFailed; // 0x2e8(0x10)
	struct UUserWidget* CurrentWidgetInstance; // 0x2f8(0x08)
	struct UUserWidget* CurrentWidgetClass; // 0x300(0x08)

	struct UUserWidget* GetWidgetInstance(struct UUserWidget* WidgetBaseClass, bool LoadBlockingIfNotYetLoaded); // Function ShooterGame.LazyPlatformWidgetLoader_Base.GetWidgetInstance // (Final|Native|Public|BlueprintCallable) // @ game+0x2f1a590
};

// Class ShooterGame.LeftGripUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct ULeftGripUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.LegalInfoManager
// Size: 0xd0 (Inherited: 0x80)
struct ULegalInfoManager : UInitSystem {
	struct FString EndUserLicenseAgreement; // 0x80(0x10)
	struct FString PrivacyPolicy; // 0x90(0x10)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	struct ULegalInfoService* LegalInfoService; // 0xa8(0x08)
	char pad_B0[0x20]; // 0xb0(0x20)

	struct FString GetPrivacyPolicy(); // Function ShooterGame.LegalInfoManager.GetPrivacyPolicy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f1a4d0
	struct ULegalInfoManager* GetLegalInfoManager(struct UObject* WorldContextObject); // Function ShooterGame.LegalInfoManager.GetLegalInfoManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f1a400
	struct FString GetEndUserLicenseAgreement(); // Function ShooterGame.LegalInfoManager.GetEndUserLicenseAgreement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f1a3d0
};

// Class ShooterGame.LegalInfoService
// Size: 0x38 (Inherited: 0x30)
struct ULegalInfoService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.LevelBorderDataAsset
// Size: 0x88 (Inherited: 0x50)
struct ULevelBorderDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	int32_t StartingLevel; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
};

// Class ShooterGame.LevelBorderUIData
// Size: 0xa0 (Inherited: 0x90)
struct ULevelBorderUIData : UBaseContentUIData {
	struct UTexture* LevelNumberAppearance; // 0x90(0x08)
	struct UTexture* SmallPlayerCardAppearance; // 0x98(0x08)
};

// Class ShooterGame.LineCrosshairHudElement
// Size: 0x220 (Inherited: 0x178)
struct ULineCrosshairHudElement : UBaseCrosshairHudElement {
	bool bDoResolutionScaling; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	float SymmetricResolutionScalingThreshold; // 0x17c(0x04)
	struct FAresCrosshairImage CrosshairImages[0x5]; // 0x180(0xa0)
};

// Class ShooterGame.LineTargetingStateComponent
// Size: 0x458 (Inherited: 0x368)
struct ULineTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnValidTargetSelected; // 0x368(0x10)
	struct FMulticastInlineDelegate OnInvalidTargetSelected; // 0x378(0x10)
	float TargetingRange; // 0x388(0x04)
	float LineWidth; // 0x38c(0x04)
	bool OthersSeeTargeting; // 0x390(0x01)
	char pad_391[0x3]; // 0x391(0x03)
	float PlacementCheckRadius; // 0x394(0x04)
	struct TArray<struct FName> TagsPreventingPlacement; // 0x398(0x10)
	enum class ECollisionChannel TraceChannel; // 0x3a8(0x01)
	bool bUseComplexCollision; // 0x3a9(0x01)
	char pad_3AA[0x96]; // 0x3aa(0x96)
	bool bDrawDebugTargeting; // 0x440(0x01)
	char pad_441[0x17]; // 0x441(0x17)

	bool TargetingIsValid(); // Function ShooterGame.LineTargetingStateComponent.TargetingIsValid // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure) // @ game+0x2f1a840
	bool IsPlacementBlocked(struct FHitResult& TargetPoint); // Function ShooterGame.LineTargetingStateComponent.IsPlacementBlocked // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f1a660
	struct FHitResult GetTargetingResult(); // Function ShooterGame.LineTargetingStateComponent.GetTargetingResult // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f1a500
	void ForceTickScriptState(float DeltaTimeSeconds, float SubframeTimeOffset); // Function ShooterGame.LineTargetingStateComponent.ForceTickScriptState // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f1a300
	void AddCancelTargetingResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed); // Function ShooterGame.LineTargetingStateComponent.AddCancelTargetingResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x2f19f60
};

// Class ShooterGame.ListEntryPerSlotConfigurer
// Size: 0x30 (Inherited: 0x30)
struct UListEntryPerSlotConfigurer : UInterface {
};

// Class ShooterGame.ListEntrySlotConfigurer
// Size: 0x30 (Inherited: 0x30)
struct UListEntrySlotConfigurer : UInterface {

	void UnbindOnSlotSettingsChanged(struct FDelegate& Delegate); // Function ShooterGame.ListEntrySlotConfigurer.UnbindOnSlotSettingsChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f1a880
	void ConfigureEntrySlot(struct UObject* Slot, int32_t ListIndex); // Function ShooterGame.ListEntrySlotConfigurer.ConfigureEntrySlot // (Native|Public|BlueprintCallable|Const) // @ game+0x2f1a230
	void BindOnSlotSettingsChanged(struct FDelegate& Delegate); // Function ShooterGame.ListEntrySlotConfigurer.BindOnSlotSettingsChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2d95860
};

// Class ShooterGame.ListEntrySlotConfigurerFactory
// Size: 0x30 (Inherited: 0x30)
struct UListEntrySlotConfigurerFactory : UInterface {

	struct TScriptInterface<IListEntrySlotConfigurer> GetConfigurer(); // Function ShooterGame.ListEntrySlotConfigurerFactory.GetConfigurer // (Native|Public|BlueprintCallable) // @ game+0x2f20f80
	void DestroyPerSlotConfigurer(struct TScriptInterface<IListEntryPerSlotConfigurer> Configurer); // Function ShooterGame.ListEntrySlotConfigurerFactory.DestroyPerSlotConfigurer // (Native|Public|BlueprintCallable) // @ game+0x2f20d50
	struct TScriptInterface<IListEntryPerSlotConfigurer> CreatePerSlotConfigurer(struct UObject* Slot); // Function ShooterGame.ListEntrySlotConfigurerFactory.CreatePerSlotConfigurer // (Native|Public|BlueprintCallable) // @ game+0x2f20ca0
};

// Class ShooterGame.ListItemDisplayEntry
// Size: 0x30 (Inherited: 0x30)
struct UListItemDisplayEntry : UInterface {

	void SetSharedListItemData(struct FWildcard& NewValue); // Function ShooterGame.ListItemDisplayEntry.SetSharedListItemData // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2f21ce0
	void SetSelected(bool NewValue); // Function ShooterGame.ListItemDisplayEntry.SetSelected // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2db8490
	void SetListItemOwner(struct TScriptInterface<IListItemDisplayEntryOwner>& NewValue); // Function ShooterGame.ListItemDisplayEntry.SetListItemOwner // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2f21990
	void SetListItemData(struct FWildcard& NewValue); // Function ShooterGame.ListItemDisplayEntry.SetListItemData // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2f218b0
	void SetListIndex(int32_t NewValue); // Function ShooterGame.ListItemDisplayEntry.SetListIndex // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2f21820
};

// Class ShooterGame.ListItemDisplayEntryBase
// Size: 0x300 (Inherited: 0x2e0)
struct UListItemDisplayEntryBase : UAnimatableUserWidget {
	char pad_2E0[0x8]; // 0x2e0(0x08)
	struct TScriptInterface<IListItemDisplayEntryOwner> ListItemOwner; // 0x2e8(0x10)
	int32_t ListIndex; // 0x2f8(0x04)
	bool bSelected; // 0x2fc(0x01)
	char pad_2FD[0x3]; // 0x2fd(0x03)

	void OnSelectedChanged(bool bOldSelected, bool bNewSelected); // Function ShooterGame.ListItemDisplayEntryBase.OnSelectedChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x2f216b0
	void OnListIndexChanged(int32_t OldListIndex, int32_t NewListIndex); // Function ShooterGame.ListItemDisplayEntryBase.OnListIndexChanged // (Native|Event|Protected|BlueprintEvent) // @ game+0x2f215d0
	void NotifyOwnerListEntryActivated(enum class EListItemDisplayEntryActivationType ActivationType, struct FWildcard Context); // Function ShooterGame.ListItemDisplayEntryBase.NotifyOwnerListEntryActivated // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f21470
};

// Class ShooterGame.ListItemDisplayEntryOwner
// Size: 0x30 (Inherited: 0x30)
struct UListItemDisplayEntryOwner : UInterface {

	void NotifyListEntryActivated(struct UObject* Source, struct FListItemDisplayEntryActivatedData& NotificationData); // Function ShooterGame.ListItemDisplayEntryOwner.NotifyListEntryActivated // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f21340
};

// Class ShooterGame.ListViewList
// Size: 0x410 (Inherited: 0x258)
struct UListViewList : UListViewBase {
	char pad_258[0xc8]; // 0x258(0xc8)
	struct FMulticastInlineDelegate OnItemActivated; // 0x320(0x10)
	enum class EOrientation Orientation; // 0x330(0x01)
	enum class ESelectionMode SelectionMode; // 0x331(0x01)
	enum class EConsumeMouseWheel ConsumeMouseWheel; // 0x332(0x01)
	bool bClearSelectionOnClick; // 0x333(0x01)
	bool bIsFocusable; // 0x334(0x01)
	char pad_335[0x3]; // 0x335(0x03)
	float EntrySpacing; // 0x338(0x04)
	bool bReturnFocusToSelection; // 0x33c(0x01)
	char pad_33D[0x3]; // 0x33d(0x03)
	struct TArray<struct FWildcard> ListItems; // 0x340(0x10)
	struct FWildcard SharedListItemData; // 0x350(0x40)
	struct TScriptInterface<IOrderedListModel> ListModel; // 0x390(0x10)
	char pad_3A0[0x10]; // 0x3a0(0x10)
	struct FMulticastInlineDelegate BP_OnEntryInitialized; // 0x3b0(0x10)
	struct FMulticastInlineDelegate BP_OnItemClicked; // 0x3c0(0x10)
	struct FMulticastInlineDelegate BP_OnItemDoubleClicked; // 0x3d0(0x10)
	struct FMulticastInlineDelegate BP_OnItemIsHoveredChanged; // 0x3e0(0x10)
	struct FMulticastInlineDelegate BP_OnItemSelectionChanged; // 0x3f0(0x10)
	struct FMulticastInlineDelegate BP_OnItemScrolledIntoView; // 0x400(0x10)

	void SetSelectionMode(enum class ESelectionMode SelectionMode); // Function ShooterGame.ListViewList.SetSelectionMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2f21c60
	void SetSelectedIndex(int32_t Index); // Function ShooterGame.ListViewList.SetSelectedIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2f21bd0
	void SetListModel(struct TScriptInterface<IOrderedListModel> NewValue); // Function ShooterGame.ListViewList.SetListModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2f21a30
	void ScrollIndexIntoView(int32_t Index); // Function ShooterGame.ListViewList.ScrollIndexIntoView // (Final|Native|Public|BlueprintCallable) // @ game+0x2f21790
	void NavigateToIndex(int32_t Index); // Function ShooterGame.ListViewList.NavigateToIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x2f212b0
	bool IsRefreshPending(); // Function ShooterGame.ListViewList.IsRefreshPending // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f21240
	void HandleListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.ListViewList.HandleListModelChange // (Native|Protected|HasOutParms) // @ game+0x2f21110
	void EntryActivatedMulticastDelegate__DelegateSignature(struct UListViewList* Source, struct FListItemDisplayEntryActivatedEventData EventData); // DelegateFunction ShooterGame.ListViewList.EntryActivatedMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x3520f50
	void BP_SetSharedListItemData(int32_t NewValue); // Function ShooterGame.ListViewList.BP_SetSharedListItemData // (Final|Native|Public|BlueprintCallable) // @ game+0x2c9bbc0
	void BP_SetSelectedItem(struct FWildcard& item); // Function ShooterGame.ListViewList.BP_SetSelectedItem // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x2f20400
	void BP_SetItemSelection(struct FWildcard& item, bool bSelected); // Function ShooterGame.ListViewList.BP_SetItemSelection // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x2f202d0
	void BP_ScrollItemIntoView(struct FWildcard& item); // Function ShooterGame.ListViewList.BP_ScrollItemIntoView // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x2f201f0
	void BP_NavigateToItem(struct FWildcard& item); // Function ShooterGame.ListViewList.BP_NavigateToItem // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x2f20110
	bool BP_IsItemVisible(struct FWildcard& item); // Function ShooterGame.ListViewList.BP_IsItemVisible // (Final|Native|Private|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f20030
	bool BP_GetSelectedItems(struct TArray<struct FWildcard>& Items); // Function ShooterGame.ListViewList.BP_GetSelectedItems // (Final|Native|Private|HasOutParms|BlueprintCallable|Const) // @ game+0x2f1ff30
	struct FWildcard BP_GetSelectedItem(); // Function ShooterGame.ListViewList.BP_GetSelectedItem // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f1feb0
	int32_t BP_GetNumItemsSelected(); // Function ShooterGame.ListViewList.BP_GetNumItemsSelected // (Final|Native|Private|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f1fe80
	void BP_ClearSelection(); // Function ShooterGame.ListViewList.BP_ClearSelection // (Final|Native|Private|BlueprintCallable) // @ game+0x2f1fe60
	void BP_CancelScrollIntoView(); // Function ShooterGame.ListViewList.BP_CancelScrollIntoView // (Final|Native|Private|BlueprintCallable) // @ game+0x2f1fe40
};

// Class ShooterGame.LiveStoryNPCActor
// Size: 0x3d8 (Inherited: 0x3d0)
struct ALiveStoryNPCActor : AActor {
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x3d0(0x08)
};

// Class ShooterGame.LoadTimeMetricsStatics
// Size: 0x30 (Inherited: 0x30)
struct ULoadTimeMetricsStatics : UObject {

	void PostTelemetryClientStartupTime(struct UObject* WorldContextObject); // Function ShooterGame.LoadTimeMetricsStatics.PostTelemetryClientStartupTime // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d54b90
};

// Class ShooterGame.LocalePreferenceManager
// Size: 0xc8 (Inherited: 0x80)
struct ULocalePreferenceManager : UInitSystem {
	struct URiotProductManager* RiotProductManager; // 0x80(0x08)
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x88(0x08)
	struct FString ProductLocaleURL; // 0x90(0x10)
	struct FString Locale; // 0xa0(0x10)
	struct TArray<struct FString> AvailableLocales; // 0xb0(0x10)
	bool bIsInitalized; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)

	void SetRiotClientLocale(struct FString LocaleValue); // Function ShooterGame.LocalePreferenceManager.SetRiotClientLocale // (Final|Native|Public|BlueprintCallable) // @ game+0x2f21ad0
	bool IsValid(); // Function ShooterGame.LocalePreferenceManager.IsValid // (Final|Native|Public|BlueprintCallable) // @ game+0x2f21270
	struct FString GetRiotClientLocale(); // Function ShooterGame.LocalePreferenceManager.GetRiotClientLocale // (Final|Native|Public|BlueprintCallable) // @ game+0x2f21060
	struct FString GetDeviceLocale(); // Function ShooterGame.LocalePreferenceManager.GetDeviceLocale // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2f20fd0
	struct TArray<struct FString> GetAvailableLocales(); // Function ShooterGame.LocalePreferenceManager.GetAvailableLocales // (Final|Native|Public|BlueprintCallable) // @ game+0x2f20e00
};

// Class ShooterGame.LocationalEffectManagerComponent
// Size: 0x1a0 (Inherited: 0x178)
struct ULocationalEffectManagerComponent : UEffectManagerComponent {
	struct TArray<struct FPendingStartEffect> DeferredLocationalEffects; // 0x178(0x10)
	struct TArray<struct TWeakObjectPtr<struct AEffectContainer>> LocalOneShotEffects; // 0x188(0x10)
	struct URemoteClientMovementComponent* RemoteClientMovementComponent; // 0x198(0x08)

	void ClientUpdateServerEffectsForManager(struct UEffectManagerComponent* Manager, struct TArray<struct FActiveEffectInfo> NewServerActiveEffects); // Function ShooterGame.LocationalEffectManagerComponent.ClientUpdateServerEffectsForManager // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2f20b40
	void ClientStopContinuousEffectAtLocation(struct FEffectID EffectID, float StopMovementTime); // Function ShooterGame.LocationalEffectManagerComponent.ClientStopContinuousEffectAtLocation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2f20a40
	void ClientPlayOneShotEffectAtLocation(struct AEffectContainer* EffectContainer, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, float StartMovementTime); // Function ShooterGame.LocationalEffectManagerComponent.ClientPlayOneShotEffectAtLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x2f207e0
	void ClientPlayContinuousEffectAtLocation(struct AEffectContainer* EffectContainer, struct FEffectID EffectID, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, float StartMovementTime); // Function ShooterGame.LocationalEffectManagerComponent.ClientPlayContinuousEffectAtLocation // (Net|NetReliableNative|Event|Public|HasDefaults|NetClient) // @ game+0x2f20500
	void ClientCleanUpLocationalEffects(); // Function ShooterGame.LocationalEffectManagerComponent.ClientCleanUpLocationalEffects // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2dc3390
};

// Class ShooterGame.LoginQueueManager
// Size: 0x148 (Inherited: 0x80)
struct ULoginQueueManager : UInitSystem {
	struct FMulticastInlineDelegate OnQueueUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnLoginReady; // 0x90(0x10)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct USessionService* SessionService; // 0xa8(0x08)
	struct URSOManager* RSOManager; // 0xb0(0x08)
	struct ULoginQueueService* LoginQueueService; // 0xb8(0x08)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct FString LoginToken; // 0xc8(0x10)
	struct FString QueueToken; // 0xd8(0x10)
	struct FLoginQueueQueueToken QueueTokenInfo; // 0xe8(0x18)
	struct FString RegionOverride; // 0x100(0x10)
	char pad_110[0x38]; // 0x110(0x38)

	bool IsQueued(); // Function ShooterGame.LoginQueueManager.IsQueued // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f29b00
	bool IsLoginReady(); // Function ShooterGame.LoginQueueManager.IsLoginReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f29ad0
	int32_t GetLoginQueueWaitSeconds(); // Function ShooterGame.LoginQueueManager.GetLoginQueueWaitSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f29990
	int32_t GetLoginQueuePosition(); // Function ShooterGame.LoginQueueManager.GetLoginQueuePosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f29960
	struct ULoginQueueManager* GetLoginQueueManager(struct UObject* WorldContextObject); // Function ShooterGame.LoginQueueManager.GetLoginQueueManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f298d0
};

// Class ShooterGame.LoginQueueService
// Size: 0x38 (Inherited: 0x30)
struct ULoginQueueService : UObject {
	char pad_30[0x8]; // 0x30(0x08)
};

// Class ShooterGame.Look2AnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct ULook2AnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.LookAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct ULookAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.MainMenuCheatManager
// Size: 0x80 (Inherited: 0x80)
struct UMainMenuCheatManager : UAresCheatManagerBase {

	void UnlockAllSprays(); // Function ShooterGame.MainMenuCheatManager.UnlockAllSprays // (Final|Exec|Native|Private) // @ game+0x2f2a950
	void UnlockAllSkins(); // Function ShooterGame.MainMenuCheatManager.UnlockAllSkins // (Final|Exec|Native|Private) // @ game+0x2f2a950
	void UnlockAllPlayerTitles(); // Function ShooterGame.MainMenuCheatManager.UnlockAllPlayerTitles // (Final|Exec|Native|Private) // @ game+0x2f2a950
	void UnlockAllPlayerCards(); // Function ShooterGame.MainMenuCheatManager.UnlockAllPlayerCards // (Final|Exec|Native|Private) // @ game+0x2f2a950
	void UnlockAllBuddies(); // Function ShooterGame.MainMenuCheatManager.UnlockAllBuddies // (Final|Exec|Native|Private) // @ game+0x2f2a950
	void ShowSecretUserWidget(struct FString WidgetPath); // Function ShooterGame.MainMenuCheatManager.ShowSecretUserWidget // (Final|Exec|Native|Private) // @ game+0x2d0cd00
	void SetPatchNoteVersion(struct FString Override); // Function ShooterGame.MainMenuCheatManager.SetPatchNoteVersion // (Final|Exec|Native|Private) // @ game+0x2f2a500
	void SetHideAccountLevel(bool bHideAccountLevel); // Function ShooterGame.MainMenuCheatManager.SetHideAccountLevel // (Final|Exec|Native|Private) // @ game+0x2f2a3e0
	void SetGamePodOverride(struct FString GamePodOverride); // Function ShooterGame.MainMenuCheatManager.SetGamePodOverride // (Final|Exec|Native|Private) // @ game+0x2f2a330
	void SetForceGameProcessing(int32_t ForceGameProcessing); // Function ShooterGame.MainMenuCheatManager.SetForceGameProcessing // (Final|Exec|Native|Private) // @ game+0x2f2a2a0
	void SetConfigurationValue(struct FString Name, struct FString Value); // Function ShooterGame.MainMenuCheatManager.SetConfigurationValue // (Final|Exec|Native|Private) // @ game+0x2ef8850
	void SetActiveSeason(struct FString Override); // Function ShooterGame.MainMenuCheatManager.SetActiveSeason // (Final|Exec|Native|Private) // @ game+0x2f2a1f0
	void SetActiveEvent(struct FString Override); // Function ShooterGame.MainMenuCheatManager.SetActiveEvent // (Final|Exec|Native|Private) // @ game+0x2f2a140
	void SetAccountLevel(int32_t Level); // Function ShooterGame.MainMenuCheatManager.SetAccountLevel // (Final|Exec|Native|Private) // @ game+0x2f2a0b0
	void ResetPatchNotes(); // Function ShooterGame.MainMenuCheatManager.ResetPatchNotes // (Final|Exec|Native|Private) // @ game+0x2f2a090
	void PushDebugNotification(int32_t ActionCount); // Function ShooterGame.MainMenuCheatManager.PushDebugNotification // (Final|Exec|Native|Private) // @ game+0x2f29dc0
	void PackmanSetThreadEnabled(int32_t Enabled); // Function ShooterGame.MainMenuCheatManager.PackmanSetThreadEnabled // (Final|Exec|Native|Private) // @ game+0x2ca3d20
	void PackmanSetThreadDelay(int32_t NewMilliseconds); // Function ShooterGame.MainMenuCheatManager.PackmanSetThreadDelay // (Final|Exec|Native|Private) // @ game+0x2ca3d20
	void PackmanSetReencryptMaximum(int32_t Count); // Function ShooterGame.MainMenuCheatManager.PackmanSetReencryptMaximum // (Final|Exec|Native|Private) // @ game+0x2ca3d20
	void PackmanResetReencryptCount(); // Function ShooterGame.MainMenuCheatManager.PackmanResetReencryptCount // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	void PackmanReencryptNow(int32_t PercentageOfPages); // Function ShooterGame.MainMenuCheatManager.PackmanReencryptNow // (Final|Exec|Native|Private) // @ game+0x2ca3d20
	void Logout(); // Function ShooterGame.MainMenuCheatManager.Logout // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	void LogNotifications(); // Function ShooterGame.MainMenuCheatManager.LogNotifications // (Final|Exec|Native|Private) // @ game+0x2f29da0
	void LoadDebugPaymentsURL(struct FString DebugURL); // Function ShooterGame.MainMenuCheatManager.LoadDebugPaymentsURL // (Final|Exec|Native|Private) // @ game+0x2d0cd00
	void LetsGoToNorCal(); // Function ShooterGame.MainMenuCheatManager.LetsGoToNorCal // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	void JoinMatch(struct FString MatchID, struct FString TeamID, struct FString Agents); // Function ShooterGame.MainMenuCheatManager.JoinMatch // (Final|Exec|Native|Private) // @ game+0x2f29b30
	void FetchChatFriendsMetadata(); // Function ShooterGame.MainMenuCheatManager.FetchChatFriendsMetadata // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	void ClearEntitlementsLocally(); // Function ShooterGame.MainMenuCheatManager.ClearEntitlementsLocally // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	void ClearDisabledProxyAddresses(); // Function ShooterGame.MainMenuCheatManager.ClearDisabledProxyAddresses // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	void AddDisabledProxyAddress(struct FString ProxyPath); // Function ShooterGame.MainMenuCheatManager.AddDisabledProxyAddress // (Final|Exec|Native|Private) // @ game+0x2d0cd00
};

// Class ShooterGame.MainMenuGameMode
// Size: 0x4c0 (Inherited: 0x4c0)
struct AMainMenuGameMode : AGameMode {
};

// Class ShooterGame.MainMenuModalDialogueWidget
// Size: 0x2d0 (Inherited: 0x2c8)
struct UMainMenuModalDialogueWidget : UUserWidget {
	struct UMainMenuQueuedDialogueModel* DialogueModel; // 0x2c8(0x08)

	void SetViewContext(struct UMainMenuQueuedDialogueModel* InDialogueModel); // Function ShooterGame.MainMenuModalDialogueWidget.SetViewContext // (Final|Native|Public|BlueprintCallable) // @ game+0x2f2a7f0
	void OnViewContextSet(); // Function ShooterGame.MainMenuModalDialogueWidget.OnViewContextSet // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void HandleDialogueDeclined(); // Function ShooterGame.MainMenuModalDialogueWidget.HandleDialogueDeclined // (Final|Native|Public|BlueprintCallable) // @ game+0x2f29a30
	void HandleDialogueCreated(); // Function ShooterGame.MainMenuModalDialogueWidget.HandleDialogueCreated // (Final|Native|Public|BlueprintCallable) // @ game+0x2f29a10
	void HandleDialogueAccepted(); // Function ShooterGame.MainMenuModalDialogueWidget.HandleDialogueAccepted // (Final|Native|Public|BlueprintCallable) // @ game+0x2f299f0
};

// Class ShooterGame.MainMenuParentWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct UMainMenuParentWidget : UUserWidget {
	struct UMainMenuViewModel* ViewModel; // 0x2c8(0x08)
	struct UMainMenuViewController* ViewController; // 0x2d0(0x08)

	void SetViewContext(struct UMainMenuViewModel* InViewModel, struct UMainMenuViewController* InViewController); // Function ShooterGame.MainMenuParentWidget.SetViewContext // (Final|Native|Public) // @ game+0x2f2a880
	void OnViewContextSet(); // Function ShooterGame.MainMenuParentWidget.OnViewContextSet // (Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.MainMenuStateV2
// Size: 0xc8 (Inherited: 0x90)
struct UMainMenuStateV2 : UStaticGameFlowState {
	struct FMulticastInlineDelegate OnMatchmakingMatchFoundChanged; // 0x90(0x10)
	char pad_A0[0x18]; // 0xa0(0x18)
	struct UPartyManager* PartyManager; // 0xb8(0x08)
	struct UCoreGameManager* CoreGameManager; // 0xc0(0x08)

	float GetMatchmakingMatchFoundDurationSeconds(); // Function ShooterGame.MainMenuStateV2.GetMatchmakingMatchFoundDurationSeconds // (Final|Native|Public|BlueprintCallable) // @ game+0x2f299c0
};

// Class ShooterGame.MainMenuTelemetryManager
// Size: 0x48 (Inherited: 0x30)
struct UMainMenuTelemetryManager : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x38(0x08)
	struct UUITelemetryManager* UITelemetryManager; // 0x40(0x08)

	void RecordViewStateChange(struct UObject* WorldContextObject, enum class EAresMainMenuTopNavigationState CurrentState, enum class EAresMainMenuTopNavigationState NewState); // Function ShooterGame.MainMenuTelemetryManager.RecordViewStateChange // (Final|Native|Public) // @ game+0x2f29ee0
	bool RecordChangeForState(enum class EAresMainMenuTopNavigationState State); // Function ShooterGame.MainMenuTelemetryManager.RecordChangeForState // (Final|Native|Private|Const) // @ game+0x2f29e50
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.MainMenuTelemetryManager.HandleGameFlowStateChanged // (Final|Native|Private) // @ game+0x2f29a50
};

// Class ShooterGame.MainMenuViewController
// Size: 0x90 (Inherited: 0x30)
struct UMainMenuViewController : UGetOuterWorldObject {
	struct UMainMenuViewModel* ViewModel; // 0x30(0x08)
	struct UAresClientGameInstance* AresClientGameInstance; // 0x38(0x08)
	struct TMap<enum class EAresMainMenuTopNavigationState, struct UUserWidget*> StateWidgets; // 0x40(0x50)

	struct UUserWidget* RequestViewStateChange(enum class EAresMainMenuTopNavigationState NewState); // Function ShooterGame.MainMenuViewController.RequestViewStateChange // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2f29ff0
	void LeavePrelude(); // Function ShooterGame.MainMenuViewController.LeavePrelude // (Final|Native|Public|BlueprintCallable) // @ game+0x2f29d80
	void InitCompleted(); // Function ShooterGame.MainMenuViewController.InitCompleted // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void EnterPrelude(); // Function ShooterGame.MainMenuViewController.EnterPrelude // (Final|Native|Public|BlueprintCallable) // @ game+0x2f298b0
};

// Class ShooterGame.NavBarMenu
// Size: 0x30 (Inherited: 0x30)
struct UNavBarMenu : UInterface {

	bool HandleBackRequest(); // Function ShooterGame.NavBarMenu.HandleBackRequest // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	struct FAresMainMenuNavBarData GetNavBarData(); // Function ShooterGame.NavBarMenu.GetNavBarData // (Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x3520f50
};

// Class ShooterGame.MainMenuQueuedDialogueModel
// Size: 0x88 (Inherited: 0x30)
struct UMainMenuQueuedDialogueModel : UObject {
	struct UMainMenuModalDialogueWidget* WidgetClass; // 0x30(0x08)
	struct FDelegate OnDialogueCreated; // 0x38(0x14)
	struct FDelegate OnDialogueAccepted; // 0x4c(0x14)
	struct FDelegate OnDialogueDeclined; // 0x60(0x14)
	char pad_74[0x4]; // 0x74(0x04)
	struct FMulticastInlineDelegate OnDialogueCompleted; // 0x78(0x10)
};

// Class ShooterGame.MainMenuViewModel
// Size: 0x78 (Inherited: 0x30)
struct UMainMenuViewModel : UObject {
	enum class EAresMainMenuTopNavigationState MenuState; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct UUserWidget* MenuWidget; // 0x38(0x08)
	bool bInPrelude; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct FMulticastInlineDelegate OnNavigationStateChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnNavigationStateRepeated; // 0x58(0x10)
	struct FMulticastInlineDelegate OnInPreludeChanged; // 0x68(0x10)

	void SetInPrelude(bool bNewInPrelude); // Function ShooterGame.MainMenuViewModel.SetInPrelude // (Final|Native|Public) // @ game+0x2f2a470
	bool IsInPrelude(); // Function ShooterGame.MainMenuViewModel.IsInPrelude // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e66150
	enum class EAresMainMenuTopNavigationState GetNavigationState(); // Function ShooterGame.MainMenuViewModel.GetNavigationState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x22535f0
	struct UUserWidget* GetCurrentStateWidget(); // Function ShooterGame.MainMenuViewModel.GetCurrentStateWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e3ae20
};

// Class ShooterGame.ShooterPlayerController
// Size: 0xb78 (Inherited: 0x988)
struct AShooterPlayerController : AAresPlayerController {
	struct FVisualizeRestoreData VisualizeRestoreData; // 0x988(0xa0)
	char pad_A28[0x10]; // 0xa28(0x10)
	bool bShowPossessedCharacterForDebugCharacterNetworking; // 0xa38(0x01)
	char pad_A39[0x7]; // 0xa39(0x07)
	struct FMulticastInlineDelegate OnMountAutoZipline; // 0xa40(0x10)
	struct FMulticastInlineDelegate OnSuppressed; // 0xa50(0x10)
	uint64_t DebugSubscriptionFlags; // 0xa60(0x08)
	struct FMulticastInlineDelegate OnCharacterRespawned; // 0xa68(0x10)
	char pad_A78[0x10]; // 0xa78(0x10)
	int32_t LastSmokeFrameID; // 0xa88(0x04)
	float CurrentSmokeOpacity; // 0xa8c(0x04)
	struct UVoteControllerComponent* VoteControllerComponent; // 0xa90(0x08)
	struct UCopyCrosshairCommandComponent* CopyCrosshairCommandComponent; // 0xa98(0x08)
	struct FRateLimiter ShopScreenPurchaseRateLimiter; // 0xaa0(0x30)
	char pad_AD0[0x8]; // 0xad0(0x08)
	struct UViewerFogOfWarComponent* FogOfWarComponent; // 0xad8(0x08)
	struct USceneComponent* LookAtTarget; // 0xae0(0x08)
	struct FVector2D LookAtRotationalExtents; // 0xae8(0x08)
	char pad_AF0[0x58]; // 0xaf0(0x58)
	struct FRateLimiter DiagnosticsRateLimiter; // 0xb48(0x30)

	void VisualizeUmbraObjectTypesStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeUmbraObjectTypesStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void VisualizeUmbraObjectTypesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeUmbraObjectTypesFunc // (Final|Native|Private|HasOutParms) // @ game+0x30e3c40
	void VisualizeUmbraBackfacesStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeUmbraBackfacesStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void VisualizeUmbraBackfacesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeUmbraBackfacesFunc // (Final|Native|Private|HasOutParms) // @ game+0x30e3c40
	void VisualizeSurfacesWeaponStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeSurfacesWeaponStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void VisualizeSurfacesPlayerStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeSurfacesPlayerStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void VisualizeSurfacesFunc(enum class EVisualizeSurfacesFilter Filter, struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeSurfacesFunc // (Final|Native|Private|HasOutParms) // @ game+0x30e3d70
	void VisualizeMipLevelsStaticFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeMipLevelsStaticFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void VisualizeMipLevelsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.VisualizeMipLevelsFunc // (Final|Native|Private|HasOutParms) // @ game+0x30e3c40
	void TrySprayV2(int32_t SlotIndex); // Function ShooterGame.ShooterPlayerController.TrySprayV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x30e3bb0
	void TrySpray(); // Function ShooterGame.ShooterPlayerController.TrySpray // (Final|Native|Public|BlueprintCallable) // @ game+0x30e3b90
	void SpawnActorTestCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.SpawnActorTestCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void SetPlayerPositionAndRotationCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.SetPlayerPositionAndRotationCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void SetHitchWatch(bool bEnable); // Function ShooterGame.ShooterPlayerController.SetHitchWatch // (Final|Exec|Native|Public) // @ game+0x30e3b00
	void ServerTrySprayV2Internal(int32_t SlotIndex); // Function ShooterGame.ShooterPlayerController.ServerTrySprayV2Internal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2f76cb0
	void ServerTrySprayInternal(); // Function ShooterGame.ShooterPlayerController.ServerTrySprayInternal // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x30e3ad0
	void ServerSetTeam(struct FString TeamName); // Function ShooterGame.ShooterPlayerController.ServerSetTeam // (Final|Native|Public) // @ game+0x2d0cd00
	void ServerSetDesiredClassForNextRound(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerController.ServerSetDesiredClassForNextRound // (Final|Native|Public|BlueprintCallable) // @ game+0x2d0cd00
	void ServerSetDesiredClassAndRespawn(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerController.ServerSetDesiredClassAndRespawn // (Final|Native|Public|BlueprintCallable) // @ game+0x2d0cd00
	void ServerSetDesiredClass(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerController.ServerSetDesiredClass // (Final|Native|Public) // @ game+0x2d0cd00
	void ServerSell(struct AAresItem* ItemToSell, enum class EAresItemSlot TargetSlot, enum class EAresPurchasableType Type); // Function ShooterGame.ShooterPlayerController.ServerSell // (BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x30e39c0
	void ServerRequestSetMatchTimeoutCheat(bool bStartTimeout, float Duration); // Function ShooterGame.ShooterPlayerController.ServerRequestSetMatchTimeoutCheat // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x30e38e0
	void ServerRequestPauseMatchTimerCheat(bool bWantsToPause); // Function ShooterGame.ShooterPlayerController.ServerRequestPauseMatchTimerCheat // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x30e3840
	void ServerRequestLiveDiagnostics(); // Function ShooterGame.ShooterPlayerController.ServerRequestLiveDiagnostics // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2f755c0
	void ServerRemove(struct AAresItem* ItemToRemove, enum class EAresItemSlot TargetSlot, enum class EAresPurchasableType Type); // Function ShooterGame.ShooterPlayerController.ServerRemove // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30e3730
	void ServerPurchase(struct AAresItem* ItemToPurchase, enum class EAresItemSlot TargetSlot, enum class EAresPurchasableType Type); // Function ShooterGame.ShooterPlayerController.ServerPurchase // (BlueprintAuthorityOnly|Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x30e3620
	void ServerNotifyReconnectTelemetryDetails(enum class EReconnectTelemetryType ReconnectType, struct FString Context); // Function ShooterGame.ShooterPlayerController.ServerNotifyReconnectTelemetryDetails // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30e3520
	void ServerMarkPreDisconnectReason(enum class EPlayerDisconnectReason DisconnectReason, struct FString Context); // Function ShooterGame.ShooterPlayerController.ServerMarkPreDisconnectReason // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30e3420
	void ServerMakeGunRequest(struct UAresPurchasableEquippable* PurchasableToRequest); // Function ShooterGame.ShooterPlayerController.ServerMakeGunRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30e3390
	void ServerGrantMoney(int32_t Amount); // Function ShooterGame.ShooterPlayerController.ServerGrantMoney // (Final|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void ServerFulfillOtherPlayerGunRequest(struct UAresPurchasableEquippable* PurchasableToFulfill, struct AShooterPlayerState* FulfilleePlayerState); // Function ShooterGame.ShooterPlayerController.ServerFulfillOtherPlayerGunRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30e32b0
	void ServerCancelGunRequest(struct UAresPurchasableEquippable* PurchasableToCancel); // Function ShooterGame.ShooterPlayerController.ServerCancelGunRequest // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30e3220
	void SellCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.SellCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void RestoreVisualizeMaterials(); // Function ShooterGame.ShooterPlayerController.RestoreVisualizeMaterials // (Final|Native|Private) // @ game+0x1e6e7b0
	void Respawn(); // Function ShooterGame.ShooterPlayerController.Respawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30e3200
	void RemoveSubframeInputAction(struct FName ActionName); // Function ShooterGame.ShooterPlayerController.RemoveSubframeInputAction // (Final|Native|Public|BlueprintCallable) // @ game+0x30e3160
	void RegisterLiveDiagnosticsSettingsBindings(); // Function ShooterGame.ShooterPlayerController.RegisterLiveDiagnosticsSettingsBindings // (Final|Native|Private) // @ game+0x30e3140
	void ReapplyBindingsOnCharacterChange(struct AShooterCharacter* NewValue); // Function ShooterGame.ShooterPlayerController.ReapplyBindingsOnCharacterChange // (Final|Native|Private) // @ game+0x30e30b0
	void PurchaseCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.PurchaseCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void PrintSafeZones(); // Function ShooterGame.ShooterPlayerController.PrintSafeZones // (Final|Exec|Native|Public) // @ game+0x30e3090
	void OnRequestDestroyWindow(); // Function ShooterGame.ShooterPlayerController.OnRequestDestroyWindow // (Final|Native|Protected) // @ game+0x30e3070
	void OnQuitGameInstance(bool bForceImmediate); // Function ShooterGame.ShooterPlayerController.OnQuitGameInstance // (Final|Native|Protected) // @ game+0x30e2fe0
	void OnPlatformUnhealthy(enum class EPlatformFaultReason& Reason); // Function ShooterGame.ShooterPlayerController.OnPlatformUnhealthy // (Final|Native|Protected|HasOutParms) // @ game+0x30e2f50
	void OnLiveDiagnosticsSettingChanged(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.ShooterPlayerController.OnLiveDiagnosticsSettingChanged // (Final|Native|Private) // @ game+0x30e2e30
	void OnInteractionTargetChanged(bool InDoesHaveInteractionTarget); // Function ShooterGame.ShooterPlayerController.OnInteractionTargetChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x30e2da0
	void OnCoachInitialized(); // Function ShooterGame.ShooterPlayerController.OnCoachInitialized // (Final|Native|Protected) // @ game+0x30e2d80
	bool IsRapidMapPingEnabled(); // Function ShooterGame.ShooterPlayerController.IsRapidMapPingEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9a0
	bool IsCoach(); // Function ShooterGame.ShooterPlayerController.IsCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e2d50
	void GrantPurchasableCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.GrantPurchasableCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void GrantEquippableCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.GrantEquippableCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	struct UVoteControllerComponent* GetVoteControllerComponent(); // Function ShooterGame.ShooterPlayerController.GetVoteControllerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30e2d20
	struct TArray<struct AShooterPlayerController*> GetTeammates(); // Function ShooterGame.ShooterPlayerController.GetTeammates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e2020
	struct AShooterPlayerState* GetShooterPlayerState(); // Function ShooterGame.ShooterPlayerController.GetShooterPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e2cf0
	void GetPlayerPositionAndRotationCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.GetPlayerPositionAndRotationCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x30e2bd0
	struct AOwnerExclusivePlayerInfo* GetOwnerExclusivePlayerInfo(); // Function ShooterGame.ShooterPlayerController.GetOwnerExclusivePlayerInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e2ba0
	float GetMouseZoomSensitivity(); // Function ShooterGame.ShooterPlayerController.GetMouseZoomSensitivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e2b70
	float GetMouseSensitivity(); // Function ShooterGame.ShooterPlayerController.GetMouseSensitivity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e2b40
	void GetDefaultEquipKeyForItem(enum class EAresItemSlot ItemSlot, int32_t SlotIndex, struct FKey& OutKey); // Function ShooterGame.ShooterPlayerController.GetDefaultEquipKeyForItem // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e29d0
	struct UCopyCrosshairCommandComponent* GetCopyCrosshairCommandComponent(); // Function ShooterGame.ShooterPlayerController.GetCopyCrosshairCommandComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30e29a0
	void DumpLiveDiagnostics(); // Function ShooterGame.ShooterPlayerController.DumpLiveDiagnostics // (Final|Native|Public) // @ game+0x30e2980
	void DebugToggleRapidMapPingFunc(struct UWorld* World); // Function ShooterGame.ShooterPlayerController.DebugToggleRapidMapPingFunc // (Final|Native|Static|Private) // @ game+0x2d54b90
	void DebugSubscriptionHelper(enum class EDebugSubscription DebugSubscription, struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.DebugSubscriptionHelper // (Final|Native|Static|Private|HasOutParms) // @ game+0x30e2820
	void DebugSubscriptionFlagsChanged(); // Function ShooterGame.ShooterPlayerController.DebugSubscriptionFlagsChanged // (Final|Native|Private) // @ game+0x1e6e7b0
	void DebugMessage(struct FString Message); // Function ShooterGame.ShooterPlayerController.DebugMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30e2760
	void ClientUpdateCalloutVolumes(struct AShooterCharacter* UpdateCharacter, struct FName TeamName, struct FCharacterReveal RevealData); // Function ShooterGame.ShooterPlayerController.ClientUpdateCalloutVolumes // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30e2600
	void ClientReceiveServerLiveDiagnostics(struct FString ServerDiagnosticData); // Function ShooterGame.ShooterPlayerController.ClientReceiveServerLiveDiagnostics // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x30e2540
	void ClientNotifyKilledEnemy(struct AShooterCharacter* KilledCharacter, int32_t MultikillLevel); // Function ShooterGame.ShooterPlayerController.ClientNotifyKilledEnemy // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30e2460
	void ClientGameModeCheatDisplayMessage(struct FString Message); // Function ShooterGame.ShooterPlayerController.ClientGameModeCheatDisplayMessage // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30e23a0
	void ClientForcePlayerLookAt(struct USceneComponent* NewLookAtTarget, float MaxPitchOffset, float MaxYawOffset); // Function ShooterGame.ShooterPlayerController.ClientForcePlayerLookAt // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30e2290
	void ClientClearPlayerLookAt(); // Function ShooterGame.ShooterPlayerController.ClientClearPlayerLookAt // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30e2260
	bool CanShop(); // Function ShooterGame.ShooterPlayerController.CanShop // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e2230
	void AutomationSimulateInputUp(enum class EAresAutomationInput Input); // Function ShooterGame.ShooterPlayerController.AutomationSimulateInputUp // (Final|Native|Public|BlueprintCallable) // @ game+0x30e21b0
	void AutomationSimulateInputDown(enum class EAresAutomationInput Input); // Function ShooterGame.ShooterPlayerController.AutomationSimulateInputDown // (Final|Native|Public|BlueprintCallable) // @ game+0x30e2130
	void AutomationSimulateInput(enum class EAresAutomationInput Input); // Function ShooterGame.ShooterPlayerController.AutomationSimulateInput // (Final|Native|Public|BlueprintCallable) // @ game+0x30e20b0
	void AuthSuicide(); // Function ShooterGame.ShooterPlayerController.AuthSuicide // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthResetPlayerController(); // Function ShooterGame.ShooterPlayerController.AuthResetPlayerController // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthPossessSpawnedCharacter(); // Function ShooterGame.ShooterPlayerController.AuthPossessSpawnedCharacter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthPlayerControllerCheat(struct FString CheatString); // Function ShooterGame.ShooterPlayerController.AuthPlayerControllerCheat // (Final|Native|Public) // @ game+0x1e6e9a0
	struct TArray<struct AShooterPlayerController*> AuthGetTeammates(); // Function ShooterGame.ShooterPlayerController.AuthGetTeammates // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30e2020
	void ApplyActionBindingsCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.ApplyActionBindingsCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void AimAssistCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterPlayerController.AimAssistCommandFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	void AddSubframeInputAction(struct FName ActionName); // Function ShooterGame.ShooterPlayerController.AddSubframeInputAction // (Final|Native|Public|BlueprintCallable) // @ game+0x30e1f80
};

// Class ShooterGame.MannequinPlayerControllerBase
// Size: 0xb78 (Inherited: 0xb78)
struct AMannequinPlayerControllerBase : AShooterPlayerController {

	void MannequinPlayerInit(struct AShooterCharacter* ExecutingCharacter, struct TArray<struct FString>& Params); // Function ShooterGame.MannequinPlayerControllerBase.MannequinPlayerInit // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void DestroyPlayer(); // Function ShooterGame.MannequinPlayerControllerBase.DestroyPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2f29890
};

// Class ShooterGame.ManualNumericProgressModel
// Size: 0x88 (Inherited: 0x88)
struct UManualNumericProgressModel : UManualNumericProgressModelBase {

	void SetProgressValueMaximum(int64_t NewValue); // Function ShooterGame.ManualNumericProgressModel.SetProgressValueMaximum // (Final|Native|Public|BlueprintCallable) // @ game+0x2f2a760
	void SetProgressValueCurrent(int64_t NewValue); // Function ShooterGame.ManualNumericProgressModel.SetProgressValueCurrent // (Final|Native|Public|BlueprintCallable) // @ game+0x2f2a6d0
	void SetProgressValue(struct FNumericProgressValue& NewValue); // Function ShooterGame.ManualNumericProgressModel.SetProgressValue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f2a630
	void SetProgressState(struct FProgressModelState NewValue); // Function ShooterGame.ManualNumericProgressModel.SetProgressState // (Final|Native|Public|BlueprintCallable) // @ game+0x2f2a5b0
	void CompleteProgress(); // Function ShooterGame.ManualNumericProgressModel.CompleteProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x2f29870
	void ClearProgressValue(); // Function ShooterGame.ManualNumericProgressModel.ClearProgressValue // (Final|Native|Public|BlueprintCallable) // @ game+0x2f29850
};

// Class ShooterGame.MapLoadModel
// Size: 0x78 (Inherited: 0x30)
struct UMapLoadModel : UObject {
	char pad_30[0x28]; // 0x30(0x28)
	struct FString MapName; // 0x58(0x10)
	bool bMapReady; // 0x68(0x01)
	bool bMapComplete; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)
	struct UConfigManager* ConfigManager; // 0x70(0x08)

	void Update(); // Function ShooterGame.MapLoadModel.Update // (Final|Native|Private) // @ game+0x2f36a80
	void HandleMainMenuViewControllerInit(); // Function ShooterGame.MapLoadModel.HandleMainMenuViewControllerInit // (Final|Native|Private) // @ game+0x2f35d70
	void HandleGamePhaseChanged(enum class EAresGamePhase NewPhase, int32_t RoundNumber); // Function ShooterGame.MapLoadModel.HandleGamePhaseChanged // (Final|Native|Private) // @ game+0x2f35ca0
	void HandleAresPlayerStateChanged(struct AAresPlayerStateBase* NewValue); // Function ShooterGame.MapLoadModel.HandleAresPlayerStateChanged // (Final|Native|Private) // @ game+0x2f359f0
};

// Class ShooterGame.MapPingComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UMapPingComponent : UActorComponent {
	struct TArray<struct FActivePingData> ActivePingData; // 0xe8(0x10)

	bool ValidateNewPing(struct FMapPingData& PingData, struct FVector& Location, struct TArray<struct FActivePingData>& ActivePings, struct FEffectData& NewPingEffectData); // Function ShooterGame.MapPingComponent.ValidateNewPing // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2f36aa0
	void OnNewPing(enum class EMapPingType PingType, int32_t PingIndex, struct FVector& Location); // Function ShooterGame.MapPingComponent.OnNewPing // (Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x3520f50
	bool MapPingValid(struct FVector& Location, enum class EMapPingType PingType, int32_t PingIndex); // Function ShooterGame.MapPingComponent.MapPingValid // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2f361b0
	struct TArray<struct FMapPingData> GetMegaMapPings(); // Function ShooterGame.MapPingComponent.GetMegaMapPings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f358b0
	struct TArray<struct FMapPingData> GetFirstPersonPings(); // Function ShooterGame.MapPingComponent.GetFirstPersonPings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f355f0
	void CreateMapPing(struct FVector Location, enum class EMapPingType PingType, int32_t PingIndex); // Function ShooterGame.MapPingComponent.CreateMapPing // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults|BlueprintCallable|NetValidate) // @ game+0x2f34ef0
	void CancelPing(struct FActivePingData& PingData); // Function ShooterGame.MapPingComponent.CancelPing // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f34c80
};

// Class ShooterGame.MapSelectScreen
// Size: 0x2c8 (Inherited: 0x2c8)
struct UMapSelectScreen : UDesignableUserWidget {
};

// Class ShooterGame.MapTargetingStateComponent
// Size: 0x470 (Inherited: 0x368)
struct UMapTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnMapLocationSelected; // 0x368(0x10)
	struct FMulticastInlineDelegate OnInvalidMapLocation; // 0x378(0x10)
	enum class ETargettingRotation TransformRotation; // 0x388(0x01)
	char pad_389[0x7]; // 0x389(0x07)
	struct UClickableMapWidget* MapInteractionClass; // 0x390(0x08)
	bool bCloseMapOnSilence; // 0x398(0x01)
	bool bHideMinimap; // 0x399(0x01)
	char pad_39A[0x6]; // 0x39a(0x06)
	struct UClickableMapWidget* MapInteractionWidget; // 0x3a0(0x08)
	struct UWidgetComponent* WorldWidgetComponent; // 0x3a8(0x08)
	bool bAwaitingServerValidation; // 0x3b0(0x01)
	char pad_3B1[0x3]; // 0x3b1(0x03)
	struct TWeakObjectPtr<struct AAresPlayerController> MapOpenController; // 0x3b4(0x08)
	char pad_3BC[0x4]; // 0x3bc(0x04)
	struct UStateComponent* MapCloseState; // 0x3c0(0x08)
	struct AAresPlayerController* InteractingController; // 0x3c8(0x08)
	struct UInputComponent* InputComponent; // 0x3d0(0x08)
	struct FVector2D LocalHitLocation; // 0x3d8(0x08)
	struct FVector2D LastLocalHitLocation; // 0x3e0(0x08)
	char pad_3E8[0x88]; // 0x3e8(0x88)

	void WidgetSetup(struct UClickableMapWidget* Widget); // Function ShooterGame.MapTargetingStateComponent.WidgetSetup // (Native|Event|Protected|BlueprintEvent) // @ game+0x2f36ce0
	void SetWorldMapWidget(struct UWidgetComponent* WidgetComponent); // Function ShooterGame.MapTargetingStateComponent.SetWorldMapWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x2f366d0
	void SetOutputContext(struct FTransform& MapTransform); // Function ShooterGame.MapTargetingStateComponent.SetOutputContext // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintEvent) // @ game+0x2f365f0
	void SetMapCloseState(struct UStateComponent* State); // Function ShooterGame.MapTargetingStateComponent.SetMapCloseState // (Final|Native|Public|BlueprintCallable) // @ game+0x2e908a0
	void ServerValidateMapClick(struct TArray<struct FVector> MapLocations); // Function ShooterGame.MapTargetingStateComponent.ServerValidateMapClick // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2f364b0
	void ServerMapClosed(); // Function ShooterGame.MapTargetingStateComponent.ServerMapClosed // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2cc8e70
	void RightMouseButtonReleased(); // Function ShooterGame.MapTargetingStateComponent.RightMouseButtonReleased // (Final|Native|Private) // @ game+0x2f36490
	void RightMouseButtonPressed(); // Function ShooterGame.MapTargetingStateComponent.RightMouseButtonPressed // (Final|Native|Private) // @ game+0x2f36470
	void OnAbilitySilenced(); // Function ShooterGame.MapTargetingStateComponent.OnAbilitySilenced // (Final|Native|Private) // @ game+0x2f36420
	void MulticastRespondToValidMapClick(struct TArray<struct FVector> WorldLocation); // Function ShooterGame.MapTargetingStateComponent.MulticastRespondToValidMapClick // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2f36370
	void MulticastInvalidMapClick(struct FVector WorldLocation); // Function ShooterGame.MapTargetingStateComponent.MulticastInvalidMapClick // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults) // @ game+0x2f362e0
	bool MapLocationIsValid(struct FVector WorldLocation, struct FVector& UpdatedLocation); // Function ShooterGame.MapTargetingStateComponent.MapLocationIsValid // (Native|Event|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintEvent) // @ game+0x2f360b0
	void LocationSelectWorld(struct FVector& MapLocation); // Function ShooterGame.MapTargetingStateComponent.LocationSelectWorld // (Final|Native|Private|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2f36020
	void LocationSelectMultipleWorld(struct TArray<struct FVector>& MapLocations); // Function ShooterGame.MapTargetingStateComponent.LocationSelectMultipleWorld // (Final|Native|Private|HasOutParms|BlueprintCallable) // @ game+0x2f35f70
	void LeftMouseButtonReleased(); // Function ShooterGame.MapTargetingStateComponent.LeftMouseButtonReleased // (Final|Native|Private) // @ game+0x2f35f50
	void LeftMouseButtonPressed(); // Function ShooterGame.MapTargetingStateComponent.LeftMouseButtonPressed // (Final|Native|Private) // @ game+0x2f35f30
	bool IsActionBoundToKey(struct FName ActionName, struct FKey Key); // Function ShooterGame.MapTargetingStateComponent.IsActionBoundToKey // (Final|Native|Private) // @ game+0x2f35dc0
	struct FVector2D GetMouseLocationOnWorldWidget(); // Function ShooterGame.MapTargetingStateComponent.GetMouseLocationOnWorldWidget // (Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f35940
	void FakeLocationClicked(struct FVector WorldLocation); // Function ShooterGame.MapTargetingStateComponent.FakeLocationClicked // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d52e10
	void ClientMapClosed(); // Function ShooterGame.MapTargetingStateComponent.ClientMapClosed // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2cc8720
	void ClientCloseMap(); // Function ShooterGame.MapTargetingStateComponent.ClientCloseMap // (Final|Native|Private) // @ game+0x2f34d20
};

// Class ShooterGame.MassRewardsCeremonyUIData
// Size: 0xa8 (Inherited: 0x90)
struct UMassRewardsCeremonyUIData : UBaseContentUIData {
	struct FText UIScreenTitle; // 0x90(0x18)
};

// Class ShooterGame.MassRewardsCeremonyDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UMassRewardsCeremonyDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.MassRewardsManager
// Size: 0xb0 (Inherited: 0x80)
struct UMassRewardsManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UContentIndex* ContentIndex; // 0x90(0x08)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x98(0x08)
	struct UMassRewardsService* MassRewardsService; // 0xa0(0x08)
	struct UMassRewardViewModel* ViewModel; // 0xa8(0x08)

	struct UMassRewardViewModel* GetViewModel(); // Function ShooterGame.MassRewardsManager.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34b50
	struct UMassRewardCeremonyViewModel* GetTestRankedCeremonyViewModel(); // Function ShooterGame.MassRewardsManager.GetTestRankedCeremonyViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2f359c0
	struct UMassRewardsManager* Get(struct UWorld* FromWorld); // Function ShooterGame.MassRewardsManager.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f35440
};

// Class ShooterGame.MassRewardsService
// Size: 0x38 (Inherited: 0x30)
struct UMassRewardsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MassRewardCeremonyViewModel
// Size: 0x58 (Inherited: 0x30)
struct UMassRewardCeremonyViewModel : UObject {
	enum class EMassRewardCeremonyType Type; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct URewardModel*> Rewards; // 0x38(0x10)
	char pad_48[0x10]; // 0x48(0x10)
};

// Class ShooterGame.MassRewardRankedCeremonyViewModel
// Size: 0x68 (Inherited: 0x58)
struct UMassRewardRankedCeremonyViewModel : UMassRewardCeremonyViewModel {
	struct UCompetitiveSeasonDataAsset* CompetitiveSeason; // 0x58(0x08)
	struct USeasonDataAsset* Season; // 0x60(0x08)
};

// Class ShooterGame.MassRewardTitledCeremonyViewModel
// Size: 0x70 (Inherited: 0x58)
struct UMassRewardTitledCeremonyViewModel : UMassRewardCeremonyViewModel {
	struct FText UIScreenTitle; // 0x58(0x18)
};

// Class ShooterGame.MassRewardViewModel
// Size: 0x40 (Inherited: 0x30)
struct UMassRewardViewModel : UObject {
	struct TArray<struct UMassRewardCeremonyViewModel*> Ceremonies; // 0x30(0x10)

	struct UMassRewardCeremonyViewModel* PopCeremony(); // Function ShooterGame.MassRewardViewModel.PopCeremony // (Final|Native|Public|BlueprintCallable) // @ game+0x2f36440
	bool HasCeremony(); // Function ShooterGame.MassRewardViewModel.HasCeremony // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f35d90
};

// Class ShooterGame.MatchDetailsViewModel
// Size: 0x290 (Inherited: 0x30)
struct UMatchDetailsViewModel : UObject {
	struct FProcessedMatchDetails Data; // 0x30(0x238)
	struct FString TargetSubject; // 0x268(0x10)
	struct FMulticastInlineDelegate OnContentLoaded; // 0x278(0x10)
	char pad_288[0x8]; // 0x288(0x08)

	void SetMapUIData(struct UBaseContentUIData* BaseUIData); // Function ShooterGame.MatchDetailsViewModel.SetMapUIData // (Final|Native|Public) // @ game+0x2f36560
	void HandleCharacterAssetsLoaded(struct FCharacterHandles& Characters); // Function ShooterGame.MatchDetailsViewModel.HandleCharacterAssetsLoaded // (Final|Native|Public|HasOutParms) // @ game+0x2f35b90
	void HandleArmorAssetsLoaded(struct FArmorHandles& Armors); // Function ShooterGame.MatchDetailsViewModel.HandleArmorAssetsLoaded // (Final|Native|Public|HasOutParms) // @ game+0x2f35a80
	struct FName GetTargetSubjectCharacterName(); // Function ShooterGame.MatchDetailsViewModel.GetTargetSubjectCharacterName // (Final|Native|Public|BlueprintCallable) // @ game+0x2f35980
	struct TArray<struct FName> GetEnemyCharacterNames(); // Function ShooterGame.MatchDetailsViewModel.GetEnemyCharacterNames // (Final|Native|Public|BlueprintCallable) // @ game+0x2f35560
	struct TArray<struct FName> GetAllyCharacterNames(); // Function ShooterGame.MatchDetailsViewModel.GetAllyCharacterNames // (Final|Native|Public|BlueprintCallable) // @ game+0x2f354d0
	struct TArray<struct FMatchDetailsEnemyInteractionList> CreateEnemyInteractions(struct FString Subject, enum class EMatchDetailsEnemyInteractionSort SortBehavior); // Function ShooterGame.MatchDetailsViewModel.CreateEnemyInteractions // (Final|Native|Public|BlueprintCallable) // @ game+0x2f34d40
};

// Class ShooterGame.MatchDetailsManager
// Size: 0x160 (Inherited: 0x80)
struct UMatchDetailsManager : UInitSystem {
	struct FMulticastInlineDelegate OnNewMatch; // 0x80(0x10)
	struct URMSManager* RMSManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct UMatchDetailsService* MatchDetailsService; // 0xa0(0x08)
	struct UInventoryManager* InventoryManager; // 0xa8(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0xb0(0x08)
	struct UContentIndex* ContentIndex; // 0xb8(0x08)
	char pad_C0[0xa0]; // 0xc0(0xa0)

	struct TArray<struct FPlayerDetailsDTO> SortBySubject(struct TArray<struct FPlayerDetailsDTO>& Players); // Function ShooterGame.MatchDetailsManager.SortBySubject // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2f368f0
	struct TArray<struct FPlayerDetailsDTO> SortByScore(struct TArray<struct FPlayerDetailsDTO>& Players); // Function ShooterGame.MatchDetailsManager.SortByScore // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2f36760
	struct UMatchDetailsManager* GetMatchDetailsManager(struct UObject* WorldContextObject); // Function ShooterGame.MatchDetailsManager.GetMatchDetailsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f35820
	void GetMatchDetails(struct FString MatchID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.MatchDetailsManager.GetMatchDetails // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f35680
	void DebugOverrideMatchDetails(struct FString MatchID, struct FMatchDetailsDebugOverrides& Overrides, struct FDelegate& OnSuccess); // Function ShooterGame.MatchDetailsManager.DebugOverrideMatchDetails // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f352b0
	struct UMatchDetailsViewModel* CreateViewModel(struct UObject* WorldContextObject, struct FMatchDetailsDTO& Input, struct FString TargetSubject); // Function ShooterGame.MatchDetailsManager.CreateViewModel // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f350c0
};

// Class ShooterGame.MatchDetailsService
// Size: 0x38 (Inherited: 0x30)
struct UMatchDetailsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MatchHistoryManager
// Size: 0x150 (Inherited: 0x80)
struct UMatchHistoryManager : UInitSystem {
	struct URSOManager* RSOManager; // 0x80(0x08)
	struct UMatchHistoryService* MatchHistoryService; // 0x88(0x08)
	struct UMatchDetailsManager* MatchDetailsManager; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	char pad_A8[0xa8]; // 0xa8(0xa8)

	void OnGameFlowStateUpdated(enum class EGameFlowStateType NewState); // Function ShooterGame.MatchHistoryManager.OnGameFlowStateUpdated // (Final|Native|Private) // @ game+0x2f3ef80
	struct UMatchHistoryManager* GetMatchHistoryManager(struct UObject* WorldContextObject); // Function ShooterGame.MatchHistoryManager.GetMatchHistoryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f3e890
};

// Class ShooterGame.MatchHistoryScreenV2
// Size: 0x2d0 (Inherited: 0x2c8)
struct UMatchHistoryScreenV2 : UUserWidget {
	struct UMatchHistoryViewController* MatchHistoryViewController; // 0x2c8(0x08)
};

// Class ShooterGame.MatchHistoryService
// Size: 0x38 (Inherited: 0x30)
struct UMatchHistoryService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MatchHistoryViewController
// Size: 0x148 (Inherited: 0x30)
struct UMatchHistoryViewController : UObject {
	struct FString Subject; // 0x30(0x10)
	struct UMatchHistoryViewModel* MatchHistoryViewModel; // 0x40(0x08)
	struct TMap<struct FLeaderboardMapKey, struct ULeaderboardViewModel*> LeaderboardModels; // 0x48(0x50)
	struct UMatchHistoryManager* MatchHistoryManager; // 0x98(0x08)
	struct UInventoryManager* InventoryManager; // 0xa0(0x08)
	struct UMMRManager* MMRManager; // 0xa8(0x08)
	struct TMap<struct FGuid, struct UCharacterUIData*> CharacterUIData; // 0xb0(0x50)
	struct UMatchViewDataContext* MatchViewDataContext; // 0x100(0x08)
	struct UContentIndex* ContentIndex; // 0x108(0x08)
	struct UContentManager* ContentManager; // 0x110(0x08)
	struct UConfigManager* ConfigManager; // 0x118(0x08)
	struct URSOManager* RSOManager; // 0x120(0x08)
	char pad_128[0x20]; // 0x128(0x20)

	void UpdateMyLeaderboardPlayerAnonymized(); // Function ShooterGame.MatchHistoryViewController.UpdateMyLeaderboardPlayerAnonymized // (Final|Native|Private) // @ game+0x2f3f300
	void UpdateLeaderboardAnonymize(struct FGuid& SeasonID, struct FDelegate OnError); // Function ShooterGame.MatchHistoryViewController.UpdateLeaderboardAnonymize // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2f3f1f0
	void SetPlayerSubject(struct FString Subject); // Function ShooterGame.MatchHistoryViewController.SetPlayerSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3f140
	struct UMatchHistoryViewModel* GetViewModel(); // Function ShooterGame.MatchHistoryViewController.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3ee80
	struct ULeaderboardViewModel* GetLeaderboardModel(struct FString SearchStr, struct FGuid& SeasonID); // Function ShooterGame.MatchHistoryViewController.GetLeaderboardModel // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2f3e520
	void FetchMMRInfo(); // Function ShooterGame.MatchHistoryViewController.FetchMMRInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3e3a0
	void FetchMatchHistory(struct FString QueueID); // Function ShooterGame.MatchHistoryViewController.FetchMatchHistory // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3e3c0
	void FetchLeaderboard(struct FGuid& SeasonID, struct FString SearchStr, int32_t StartIndex, int32_t EndIndex); // Function ShooterGame.MatchHistoryViewController.FetchLeaderboard // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2f3e1f0
};

// Class ShooterGame.MatchPlayerScoreBreakdown
// Size: 0x60 (Inherited: 0x30)
struct UMatchPlayerScoreBreakdown : UObject {
	enum class EAresPlayerRelationship PlayerCategory; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t Score; // 0x34(0x04)
	struct FGuid CharacterID; // 0x38(0x10)
	struct FMulticastInlineDelegate OnContentLoaded; // 0x48(0x10)
	struct UCharacterUIData* CharacterData; // 0x58(0x08)
};

// Class ShooterGame.MatchViewDataContext
// Size: 0x40 (Inherited: 0x30)
struct UMatchViewDataContext : UObject {
	struct FString Subject; // 0x30(0x10)
};

// Class ShooterGame.LeaderboardPlayerModel
// Size: 0x88 (Inherited: 0x30)
struct ULeaderboardPlayerModel : UObject {
	struct FString Subject; // 0x30(0x10)
	struct FString GameName; // 0x40(0x10)
	struct FString TagLine; // 0x50(0x10)
	struct UPlayerCardDataAsset* PlayerCard; // 0x60(0x08)
	struct UPlayerTitleDataAsset* Title; // 0x68(0x08)
	int32_t RankedRating; // 0x70(0x04)
	int32_t CompetitiveTier; // 0x74(0x04)
	int32_t NumberOfWins; // 0x78(0x04)
	int32_t Rank; // 0x7c(0x04)
	bool IsAnonymized; // 0x80(0x01)
	bool IsBanned; // 0x81(0x01)
	bool IsSeparator; // 0x82(0x01)
	char pad_83[0x5]; // 0x83(0x05)
};

// Class ShooterGame.LeaderboardViewModel
// Size: 0x180 (Inherited: 0x30)
struct ULeaderboardViewModel : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct TMap<int32_t, struct ULeaderboardPlayerModel*> Players; // 0x50(0x50)
	struct USeasonDataAsset* Season; // 0xa0(0x08)
	struct UCompetitiveSeasonDataAsset* CompetitiveSeason; // 0xa8(0x08)
	struct TMap<int32_t, struct FLeaderboardTierDetails> TierDetails; // 0xb0(0x50)
	int32_t TotalSeparators; // 0x100(0x04)
	int32_t TotalPlayers; // 0x104(0x04)
	char pad_108[0x8]; // 0x108(0x08)
	struct FMulticastInlineDelegate IsOnLeaderboardChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate IsAnonymizedChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate MyPlayerRankChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnLeaderboardPlayersAdded; // 0x140(0x10)
	struct FMulticastInlineDelegate OnLoadingChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnLeaderboardError; // 0x160(0x10)
	struct FMulticastInlineDelegate OnEmptyChanged; // 0x170(0x10)

	bool IsOnLeaderboard(); // Function ShooterGame.LeaderboardViewModel.IsOnLeaderboard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3ef60
	bool IsLeaderboardLoading(); // Function ShooterGame.LeaderboardViewModel.IsLeaderboardLoading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22535f0
	bool IsFirstPlayerBig(); // Function ShooterGame.LeaderboardViewModel.IsFirstPlayerBig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f3ef00
	bool IsEmpty(); // Function ShooterGame.LeaderboardViewModel.IsEmpty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22535d0
	bool IsAnonymized(); // Function ShooterGame.LeaderboardViewModel.IsAnonymized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3eeb0
	int32_t GetTotalPageCount(); // Function ShooterGame.LeaderboardViewModel.GetTotalPageCount // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f3ee50
	bool GetPagePlayersByPageNum(int32_t PageNum, int32_t& StartIndex, struct TArray<struct ULeaderboardPlayerModel*>& OutPlayers); // Function ShooterGame.LeaderboardViewModel.GetPagePlayersByPageNum // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f3eac0
	int32_t GetPageNumberForRank(int32_t RankPosition); // Function ShooterGame.LeaderboardViewModel.GetPageNumberForRank // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f3ea20
	int32_t GetNumSeparatorsBeforeRankPosition(int32_t RankPosition); // Function ShooterGame.LeaderboardViewModel.GetNumSeparatorsBeforeRankPosition // (Final|Native|Public) // @ game+0x2f3e980
	int32_t GetMyPlayerRank(); // Function ShooterGame.LeaderboardViewModel.GetMyPlayerRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3e960
	struct TMap<int32_t, struct FLeaderboardTierDetails> GetLeaderboardSeparators(); // Function ShooterGame.LeaderboardViewModel.GetLeaderboardSeparators // (Final|Native|Public) // @ game+0x2f3e7b0
	struct FString GetLeaderboardSearchStr(); // Function ShooterGame.LeaderboardViewModel.GetLeaderboardSearchStr // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3e770
	bool GetLeaderboardPlayers(int32_t StartIndex, int32_t EndIndex, struct TArray<struct ULeaderboardPlayerModel*>& OutPlayers); // Function ShooterGame.LeaderboardViewModel.GetLeaderboardPlayers // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f3e630
	bool DidLeaderboardError(); // Function ShooterGame.LeaderboardViewModel.DidLeaderboardError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2253630
};

// Class ShooterGame.MatchViewModel
// Size: 0x170 (Inherited: 0x30)
struct UMatchViewModel : UObject {
	int32_t Kills; // 0x30(0x04)
	int32_t Deaths; // 0x34(0x04)
	int32_t Assists; // 0x38(0x04)
	int32_t RoundsWon; // 0x3c(0x04)
	int32_t RoundsLost; // 0x40(0x04)
	int32_t Points; // 0x44(0x04)
	int32_t HighestEnemyPoints; // 0x48(0x04)
	bool DidPlayerWinMatch; // 0x4c(0x01)
	enum class EMatchOutcome PlayerMatchOutcome; // 0x4d(0x01)
	char pad_4E[0x2]; // 0x4e(0x02)
	int32_t TeamTotalPointsScoredInMatch; // 0x50(0x04)
	int32_t PlayerPointsScoredInMatch; // 0x54(0x04)
	struct FMatchScoreBreakdown Scores; // 0x58(0x38)
	struct FGuid CharacterID; // 0x90(0x10)
	struct FString QueueID; // 0xa0(0x10)
	bool IsRanked; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
	struct FString MatchID; // 0xb8(0x10)
	struct FDateTime GameStartTime; // 0xc8(0x08)
	struct FTimespan GameLength; // 0xd0(0x08)
	bool HasData; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)
	struct FMulticastInlineDelegate OnContentLoaded; // 0xe0(0x10)
	struct UCharacterUIData* CharacterData; // 0xf0(0x08)
	struct UMapDataAsset* MapData; // 0xf8(0x08)
	struct UGameModeDataAsset* GameModeData; // 0x100(0x08)
	struct USeasonDataAsset* SeasonData; // 0x108(0x08)
	struct UCompetitiveSeasonDataAsset* CompetitiveSeasonData; // 0x110(0x08)
	struct FMulticastInlineDelegate OnMMRDataLoaded; // 0x118(0x10)
	struct FMMRMatchInfo MMRMatchInfo; // 0x128(0x30)
	struct TArray<int32_t> SortedPointsAllTeams; // 0x158(0x10)
	struct UMatchViewDataContext* DataContext; // 0x168(0x08)

	void SetData(struct FMatchDetailsDTO& MatchDetailsDTO); // Function ShooterGame.MatchViewModel.SetData // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f3f000
	struct TArray<int32_t> GetSortedPointsAllTeams(); // Function ShooterGame.MatchViewModel.GetSortedPointsAllTeams // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3ed80
};

// Class ShooterGame.MatchHistoryViewModel
// Size: 0xf0 (Inherited: 0x30)
struct UMatchHistoryViewModel : UObject {
	struct FMulticastInlineDelegate OnMatchHistoryViewModelLoadingStateChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMatchHistoryViewModelErrorStateChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnMMRDataLoaded; // 0x50(0x10)
	struct FMulticastInlineDelegate OnMatchHistoryViewModelLoadedMatch; // 0x60(0x10)
	int32_t TotalGamesNeededForRating; // 0x70(0x04)
	int32_t RecentGamesNeededForRating; // 0x74(0x04)
	int32_t CurrentSeasonGamesNeededForRating; // 0x78(0x04)
	int32_t TotalGamesNeededForLeaderboard; // 0x7c(0x04)
	struct TArray<struct UMatchViewModel*> LoadedMatches; // 0x80(0x10)
	struct TMap<struct FGuid, struct FProcessedSeasonInfo> SeasonInfo; // 0x90(0x50)
	char pad_E0[0x8]; // 0xe0(0x08)
	struct UContentIndex* ContentIndex; // 0xe8(0x08)

	bool IsMMRErrorState(); // Function ShooterGame.MatchHistoryViewModel.IsMMRErrorState // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3ef30
	bool IsErrorState(); // Function ShooterGame.MatchHistoryViewModel.IsErrorState // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3eed0
	void GetSeasonInfo(struct FGuid SeasonID, struct FProcessedSeasonInfo& OutSeason); // Function ShooterGame.MatchHistoryViewModel.GetSeasonInfo // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2f3ec10
	struct TArray<struct UMatchViewModel*> GetMatches(); // Function ShooterGame.MatchHistoryViewModel.GetMatches // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3e920
	bool GetIsLoadingData(); // Function ShooterGame.MatchHistoryViewModel.GetIsLoadingData // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3e4f0
	bool GetHasLoadedMMRData(); // Function ShooterGame.MatchHistoryViewModel.GetHasLoadedMMRData // (Final|Native|Public|BlueprintCallable) // @ game+0x2f3e4c0
};

// Class ShooterGame.MatchInfoHudElement
// Size: 0x8a0 (Inherited: 0x58)
struct UMatchInfoHudElement : UAresHudElement {
	struct FTeamScore AllyTeamScore; // 0x58(0x178)
	struct FTeamScore EnemyTeamScore; // 0x1d0(0x178)
	struct FTeamIcons TeamIconTuning; // 0x348(0x50)
	struct FTeamMoney AllyTeamMoney; // 0x398(0x148)
	struct FTeamMoney EnemyTeamMoney; // 0x4e0(0x148)
	struct FMatchTimer MatchTimerDisplay; // 0x628(0xb8)
	struct FRoundNumber RoundNumberDisplay; // 0x6e0(0xa0)
	struct FGamePausedText GamePausedTextDisplay; // 0x780(0x120)

	struct FText GetRoundTimerText(float TimeSeconds); // Function ShooterGame.MatchInfoHudElement.GetRoundTimerText // (Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
	struct FString GetRoundTimerString(float TimeSeconds); // Function ShooterGame.MatchInfoHudElement.GetRoundTimerString // (Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
	struct FText GetRoundNotifyText(); // Function ShooterGame.MatchInfoHudElement.GetRoundNotifyText // (Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
	struct FString GetRoundNotifyString(); // Function ShooterGame.MatchInfoHudElement.GetRoundNotifyString // (Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
	struct FLinearColor GetMatchTImerDrawColor(float TimeSeconds); // Function ShooterGame.MatchInfoHudElement.GetMatchTImerDrawColor // (Event|Protected|HasDefaults|BlueprintEvent|Const) // @ game+0x3520f50
};

// Class ShooterGame.MatchmakingManager
// Size: 0xf8 (Inherited: 0x80)
struct UMatchmakingManager : UInitSystem {
	struct FMulticastInlineDelegate OnQueueStatusUpdated; // 0x80(0x10)
	struct UMatchmakingService* MatchmakingService; // 0x90(0x08)
	struct UConfigManager* ConfigManager; // 0x98(0x08)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	struct UPartyModel* PartyModel; // 0xa8(0x08)
	struct UPlatformSessionManager* SessionManager; // 0xb0(0x08)
	struct FAresQueueStatus QueueStatus; // 0xb8(0x20)
	char pad_D8[0x18]; // 0xd8(0x18)
	bool bQueueStatusUpdateInProgress; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)

	void SetSelectedQueueID(struct FString QueueID); // Function ShooterGame.MatchmakingManager.SetSelectedQueueID // (Final|Native|Public|BlueprintCallable) // @ game+0x2f47210
	bool IsQueueStatusEnabled(); // Function ShooterGame.MatchmakingManager.IsQueueStatusEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f470e0
	struct FAresQueueStatus GetQueueStatus(); // Function ShooterGame.MatchmakingManager.GetQueueStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f47080
	struct UMatchmakingManager* GetMatchmakingManager(struct UObject* WorldContextObject); // Function ShooterGame.MatchmakingManager.GetMatchmakingManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f46ff0
};

// Class ShooterGame.MatchmakingQueueDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct UMatchmakingQueueDataAsset : UAresBasePrimaryDataAsset {
	struct FString QueueID; // 0x50(0x10)
	struct FText DropdownText; // 0x60(0x18)
	struct FText SelectedText; // 0x78(0x18)
	struct TSoftClassPtr<UObject> UIData; // 0x90(0x30)
};

// Class ShooterGame.MatchmakingQueueUIData
// Size: 0xb0 (Inherited: 0x90)
struct UMatchmakingQueueUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
	bool IsBeta; // 0xa8(0x01)
	char pad_A9[0x7]; // 0xa9(0x07)
};

// Class ShooterGame.MatchmakingService
// Size: 0x38 (Inherited: 0x30)
struct UMatchmakingService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MatchRecoveryGameDataEventSubscriptions
// Size: 0x48 (Inherited: 0x30)
struct UMatchRecoveryGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class ShooterGame.MatchResultEventCollector
// Size: 0xb0 (Inherited: 0x30)
struct UMatchResultEventCollector : UObject {
	struct FMulticastInlineDelegate OnMatchResultsCollected; // 0x30(0x10)
	struct UWorld* TheWorld; // 0x40(0x08)
	struct TMap<struct FString, struct UStruct*> EventTypes; // 0x48(0x50)
	char pad_98[0x18]; // 0x98(0x18)

	void RegisterEventType(struct FString EventType, struct UStruct* StructDefinition); // Function ShooterGame.MatchResultEventCollector.RegisterEventType // (Final|Native|Public|BlueprintCallable) // @ game+0x2f47110
	void AddEvent(struct UMatchResultEventCollector* Collector, struct FName EventType, struct TFieldPath<FProperty> anyStruct); // Function ShooterGame.MatchResultEventCollector.AddEvent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2f46eb0
};

// Class ShooterGame.Megamap
// Size: 0x2c8 (Inherited: 0x2c8)
struct UMegamap : UUserWidget {

	void OnShow(); // Function ShooterGame.Megamap.OnShow // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnHide(); // Function ShooterGame.Megamap.OnHide // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.MegamapCoordinator
// Size: 0x68 (Inherited: 0x30)
struct UMegamapCoordinator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnMegamapToggled; // 0x38(0x10)
	struct AAresPlayerController* PlayerController; // 0x48(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x50(0x08)
	struct UMegamap* Megamap; // 0x58(0x08)
	char pad_60[0x8]; // 0x60(0x08)

	void HandleClose(); // Function ShooterGame.MegamapCoordinator.HandleClose // (Final|Native|Public) // @ game+0x2f4cf20
};

// Class ShooterGame.MegapacketComponent
// Size: 0x3e0 (Inherited: 0xe8)
struct UMegapacketComponent : UActorComponent {
	char pad_E8[0x2f8]; // 0xe8(0x2f8)

	struct FString ProvisionFlowToString(enum class EProvisioningFlowID ProvisioningFlowID); // Function ShooterGame.MegapacketComponent.ProvisionFlowToString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f4d4f0
	enum class EProvisioningFlowID ProvisionFlowFromString(struct FString ProvisioningFlowID); // Function ShooterGame.MegapacketComponent.ProvisionFlowFromString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f4d3f0
	enum class EProvisioningFlowID GetProvisioningFlow(); // Function ShooterGame.MegapacketComponent.GetProvisioningFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d0d420
	bool GetMegapacket(struct FMegapacket& MegapacketOut); // Function ShooterGame.MegapacketComponent.GetMegapacket // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f4ce10
	struct FString GetConfigurationString(struct FName Name, struct FString DefaultValue); // Function ShooterGame.MegapacketComponent.GetConfigurationString // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f4ccb0
	float GetConfigurationFloat(struct FName Name, float DefaultValue); // Function ShooterGame.MegapacketComponent.GetConfigurationFloat // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f4cbb0
	bool GetConfigurationBool(struct FName Name, bool DefaultValue); // Function ShooterGame.MegapacketComponent.GetConfigurationBool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f4cab0
};

// Class ShooterGame.MeleeAttackStateComponent
// Size: 0x308 (Inherited: 0x2c8)
struct UMeleeAttackStateComponent : UScriptStateComponent {
	float AttackDistance; // 0x2c8(0x04)
	float BackstabAngleDegrees; // 0x2cc(0x04)
	float OuterHitSphereRadius; // 0x2d0(0x04)
	float InnerHitSphereRadius; // 0x2d4(0x04)
	struct FAresMeleeTuning AttackEffectTuning; // 0x2d8(0x18)
	struct FAresMeleeTuning BackstabAttackEffectTuning; // 0x2f0(0x18)

	void MulticastHitImpact(struct FHitResult HitResult, bool bWasBackstab); // Function ShooterGame.MeleeAttackStateComponent.MulticastHitImpact // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2f4d270
	void MulticastDrawMeleeDebug(struct FHitResult OutHit, struct FVector CameraLocation, struct FVector CameraAim, bool bWasHit, bool bWasBackstab, bool bWasPreciseHit, struct FReplicatedDebugHitRegSample HitRegSample); // Function ShooterGame.MeleeAttackStateComponent.MulticastDrawMeleeDebug // (Final|Net|NetReliableNative|Event|NetMulticast|Private|HasDefaults|Const) // @ game+0x2f4cf40
};

// Class ShooterGame.MemoryPerfStatsReport
// Size: 0x1e8 (Inherited: 0xe8)
struct UMemoryPerfStatsReport : UActorComponent {
	struct FMemoryPerfStatsComponent MemoryPerfStatsComponent; // 0xe8(0x100)

	void SendReport(struct FString Agent, struct FString Map, struct FString GameMode, struct FString TestSuite, struct FString TestCase, struct FString TestScenario, struct FString MatchID, struct UTelemetryManager* TelemetryManager); // Function ShooterGame.MemoryPerfStatsReport.SendReport // (Final|Native|Public) // @ game+0x2f4d5c0
};

// Class ShooterGame.MenuStackEntry
// Size: 0x90 (Inherited: 0x30)
struct UMenuStackEntry : UObject {
	struct UUserWidget* Content; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
	struct FMulticastInlineDelegate OnOpen; // 0x48(0x10)
	struct FMulticastInlineDelegate OnClose; // 0x58(0x10)
	struct FMulticastInlineDelegate OnDismissed; // 0x68(0x10)
	struct FMenuMusic MenuMusic; // 0x78(0x10)
	enum class EMenuStackEntryFlags Flags; // 0x88(0x04)
	char pad_8C[0x4]; // 0x8c(0x04)
};

// Class ShooterGame.MenuStackManager
// Size: 0xd0 (Inherited: 0x30)
struct UMenuStackManager : UObject {
	struct FMulticastInlineDelegate OnMenuOpened; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMenuClosed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCurrentMenuMusicChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnTopNavBarCompatibleEntryChanged; // 0x60(0x10)
	struct TArray<struct UMenuStackEntry*> OpenedMenus; // 0x70(0x10)
	struct TArray<struct UMenuStackEntry*> ClosedMenus; // 0x80(0x10)
	struct UUserWidget* DefaultInputOwner; // 0x90(0x08)
	struct TScriptInterface<INavBarMenu> TopNavBarMenu; // 0x98(0x10)
	struct TWeakObjectPtr<struct UPanelWidget> MenuContainer; // 0xa8(0x08)
	struct TWeakObjectPtr<struct UPanelWidget> PopupContainer; // 0xb0(0x08)
	struct FMenuMusic CurrentMenuMusic; // 0xb8(0x10)
	bool bBusy; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)

	void UnregisterWidget(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.MenuStackManager.UnregisterWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2f55a20
	void SetPopupContainer(struct UPanelWidget* Container); // Function ShooterGame.MenuStackManager.SetPopupContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x2f55910
	void SetMenuContainer(struct UPanelWidget* Container); // Function ShooterGame.MenuStackManager.SetMenuContainer // (Final|Native|Public|BlueprintCallable) // @ game+0x2f557b0
	void SetDismissable(struct UUserWidget* Widget, bool bDismissable); // Function ShooterGame.MenuStackManager.SetDismissable // (Final|Native|Public|BlueprintCallable) // @ game+0x2f556e0
	void SetCurrentMenuMusic(struct FMenuMusic NewValue); // Function ShooterGame.MenuStackManager.SetCurrentMenuMusic // (Final|Native|Private) // @ game+0x2f55650
	void Reset(); // Function ShooterGame.MenuStackManager.Reset // (Final|Native|Private) // @ game+0x2f55630
	bool RequestPop(); // Function ShooterGame.MenuStackManager.RequestPop // (Final|Native|Public|BlueprintCallable) // @ game+0x2f55600
	void RemoveWidgetFromOpenList(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.RemoveWidgetFromOpenList // (Final|Native|Public|BlueprintCallable) // @ game+0x2f55530
	struct UMenuStackEntry* RegisterPersistentPopupWidget(struct UUserWidget* Widget, bool bIsModal, bool bIsDismissable, bool bLetterbox, enum class EMenuWidgetState InitialWidgetState); // Function ShooterGame.MenuStackManager.RegisterPersistentPopupWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2f55350
	struct UMenuStackEntry* RegisterPersistentMenuWidget(struct UUserWidget* Widget, bool bIsDismissable, bool bLetterbox, enum class EMenuWidgetState InitialWidgetState); // Function ShooterGame.MenuStackManager.RegisterPersistentMenuWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2f551c0
	bool Pop(); // Function ShooterGame.MenuStackManager.Pop // (Final|Native|Public|BlueprintCallable) // @ game+0x2f55190
	void OpenRegisteredWidget(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.MenuStackManager.OpenRegisteredWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2f55100
	struct UMenuStackEntry* OpenPopupV2(struct UUserWidget* Widget, struct FMenuMusic MenuMusic, bool bIsModal, bool bIsDismissable, bool bLetterbox); // Function ShooterGame.MenuStackManager.OpenPopupV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x2f54f10
	struct UMenuStackEntry* OpenPopup(struct UUserWidget* Widget, bool bIsModal, bool bIsDismissable, bool bLetterbox); // Function ShooterGame.MenuStackManager.OpenPopup // (Final|Native|Public|BlueprintCallable) // @ game+0x2f54d80
	struct UMenuStackEntry* OpenMenuV2(struct UUserWidget* Widget, struct FMenuMusic MenuMusic, bool bIsDismissable, bool bLetterbox); // Function ShooterGame.MenuStackManager.OpenMenuV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x2f54bf0
	struct UMenuStackEntry* OpenMenu(struct UUserWidget* Widget, bool bIsDismissable, bool bLetterbox); // Function ShooterGame.MenuStackManager.OpenMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x2f54ad0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.MenuStackManager.OnBugCommand // (Final|Native|Private) // @ game+0x2f547e0
	bool IsMenuOpenByType(struct UObject* WidgetType); // Function ShooterGame.MenuStackManager.IsMenuOpenByType // (Final|Native|Public|BlueprintCallable) // @ game+0x2f54620
	void HandleWorldCleanup(struct UWorld* World); // Function ShooterGame.MenuStackManager.HandleWorldCleanup // (Final|Native|Private) // @ game+0x2f54530
	void HandleDismissInput(); // Function ShooterGame.MenuStackManager.HandleDismissInput // (Final|Native|Public) // @ game+0x2f54060
	struct UMenuStackEntry* GetTopOpenWidgetEntry(); // Function ShooterGame.MenuStackManager.GetTopOpenWidgetEntry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f53f10
	struct TScriptInterface<INavBarMenu> GetTopNavBarCompatibleMenu(); // Function ShooterGame.MenuStackManager.GetTopNavBarCompatibleMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f53ed0
	struct UUserWidget* GetOwnerForInputHandling(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.GetOwnerForInputHandling // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f53e00
	int32_t GetNumEntries(); // Function ShooterGame.MenuStackManager.GetNumEntries // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2301a60
	struct FMenuMusic GetCurrentMenuMusic(); // Function ShooterGame.MenuStackManager.GetCurrentMenuMusic // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f53d10
	struct UMenuStackEntry* FindRegisteredWidgetByClass(struct UObject* WidgetClass); // Function ShooterGame.MenuStackManager.FindRegisteredWidgetByClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2f53c70
	void CloseWidgetOnly(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.CloseWidgetOnly // (Final|Native|Public|BlueprintCallable) // @ game+0x2f53be0
	void CloseRegisteredWidget(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.MenuStackManager.CloseRegisteredWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x2f53b50
	void CloseByType(struct UObject* WidgetType); // Function ShooterGame.MenuStackManager.CloseByType // (Final|Native|Public|BlueprintCallable) // @ game+0x2f53ac0
	void CloseAllAboveByType(struct UObject* WidgetType); // Function ShooterGame.MenuStackManager.CloseAllAboveByType // (Final|Native|Public|BlueprintCallable) // @ game+0x2f53a30
	void CloseAllAbove(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.CloseAllAbove // (Final|Native|Public|BlueprintCallable) // @ game+0x2f539a0
	void CloseAll(); // Function ShooterGame.MenuStackManager.CloseAll // (Final|Native|Public|BlueprintCallable) // @ game+0x2f53980
	void Close(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.Close // (Final|Native|Public|BlueprintCallable) // @ game+0x2f538f0
	void AddWidgetToOpenList(struct UUserWidget* Widget); // Function ShooterGame.MenuStackManager.AddWidgetToOpenList // (Final|Native|Public|BlueprintCallable) // @ game+0x2f53780
};

// Class ShooterGame.MenuStackWidget
// Size: 0x30 (Inherited: 0x30)
struct UMenuStackWidget : UInterface {

	enum class EMenuStackWidget_RequestCloseMenuResult RequestCloseMenu(); // Function ShooterGame.MenuStackWidget.RequestCloseMenu // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2f555c0
	void OnRegister(struct UMenuStackEntry* RegisteredEntry); // Function ShooterGame.MenuStackWidget.OnRegister // (Native|Event|Public|BlueprintEvent) // @ game+0x2f549a0
	void OnOpen(); // Function ShooterGame.MenuStackWidget.OnOpen // (Native|Event|Public|BlueprintEvent) // @ game+0x2f54970
	void OnClose(); // Function ShooterGame.MenuStackWidget.OnClose // (Native|Event|Public|BlueprintEvent) // @ game+0x2f54940
};

// Class ShooterGame.MinimapVisionConesBlockerComponent
// Size: 0x510 (Inherited: 0x500)
struct UMinimapVisionConesBlockerComponent : UAresMinimapComponent {
	bool bShowVisualizationMesh; // 0x4f8(0x01)
	char pad_501[0xf]; // 0x501(0x0f)

	void HandleTransformChanged(struct USceneComponent* InComponent, enum class EUpdateTransformFlags InTransformFlags, enum class ETeleportType InTeleportType); // Function ShooterGame.MinimapVisionConesBlockerComponent.HandleTransformChanged // (Final|Native|Public) // @ game+0x2f54400
};

// Class ShooterGame.MinimapVisionConesBlockerLineComponent
// Size: 0x510 (Inherited: 0x510)
struct UMinimapVisionConesBlockerLineComponent : UMinimapVisionConesBlockerComponent {
};

// Class ShooterGame.MinimapVisionConesBlockerRectComponent
// Size: 0x510 (Inherited: 0x510)
struct UMinimapVisionConesBlockerRectComponent : UMinimapVisionConesBlockerComponent {
};

// Class ShooterGame.MinimapVisionConesBlockerCircleComponent
// Size: 0x510 (Inherited: 0x510)
struct UMinimapVisionConesBlockerCircleComponent : UMinimapVisionConesBlockerComponent {
};

// Class ShooterGame.MinimapVisionConesComponent
// Size: 0x5a0 (Inherited: 0x500)
struct UMinimapVisionConesComponent : UAresMinimapComponent {
	char pad_500[0xa0]; // 0x500(0xa0)

	void UpdateShouldDrawCone(); // Function ShooterGame.MinimapVisionConesComponent.UpdateShouldDrawCone // (Final|Native|Protected) // @ game+0x2f55ab0
	void OnBoolSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.MinimapVisionConesComponent.OnBoolSettingChanged // (Final|Native|Public) // @ game+0x2f546c0
	bool IsEnabled(); // Function ShooterGame.MinimapVisionConesComponent.IsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f545f0
	void HandleVisionConesGenerated(); // Function ShooterGame.MinimapVisionConesComponent.HandleVisionConesGenerated // (Final|Native|Public) // @ game+0x2f54510
	void HandleBlockerChanged(struct UMinimapVisionConesBlockerComponent* BlockerComponent); // Function ShooterGame.MinimapVisionConesComponent.HandleBlockerChanged // (Final|Native|Public) // @ game+0x2f53fd0
};

// Class ShooterGame.MissingMinimapWidget
// Size: 0x2e8 (Inherited: 0x2e0)
struct UMissingMinimapWidget : UAresMinimapWidget {
	float LastSeen; // 0x2e0(0x04)
	char pad_2E4[0x4]; // 0x2e4(0x04)

	void SetState(float bLastSeen); // Function ShooterGame.MissingMinimapWidget.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0x2f559a0
};

// Class ShooterGame.Mission
// Size: 0x4c0 (Inherited: 0x3d0)
struct AMission : AActor {
	struct FMulticastInlineDelegate OnMissionReset; // 0x3d0(0x10)
	struct FMulticastInlineDelegate OnShowMissionUIChanged; // 0x3e0(0x10)
	struct FMulticastInlineDelegate OnObjectiveCompleted; // 0x3f0(0x10)
	struct FMulticastInlineDelegate OnObjectiveFailed; // 0x400(0x10)
	struct FMulticastInlineDelegate OnObjectiveStatusChanged; // 0x410(0x10)
	struct FMulticastInlineDelegate OnObjectiveProgressChanged; // 0x420(0x10)
	struct FMulticastInlineDelegate OnMissionStatusChanged; // 0x430(0x10)
	struct FMulticastInlineDelegate OnMissionActivated; // 0x440(0x10)
	struct FMulticastInlineDelegate OnMissionCompleted; // 0x450(0x10)
	struct FMulticastInlineDelegate OnMissionFailed; // 0x460(0x10)
	bool bShowMissionUI; // 0x470(0x01)
	char pad_471[0x7]; // 0x471(0x07)
	struct FText Title; // 0x478(0x18)
	struct FMissionStatusTracker Status; // 0x490(0x08)
	struct AShooterPlayerState* ShooterPlayerOwner; // 0x498(0x08)
	bool bInitializedObjectives; // 0x4a0(0x01)
	char pad_4A1[0x17]; // 0x4a1(0x17)
	bool bAutoShowMissionUIWhenAssigned; // 0x4b8(0x01)
	char pad_4B9[0x7]; // 0x4b9(0x07)

	void OnRep_Status(struct FMissionStatusTracker OldStatus); // Function ShooterGame.Mission.OnRep_Status // (Native|Protected) // @ game+0x2f54a30
	void OnRep_ShowMissionUI(); // Function ShooterGame.Mission.OnRep_ShowMissionUI // (Native|Protected) // @ game+0x2d56e00
	void InitObjectives(); // Function ShooterGame.Mission.InitObjectives // (Native|Protected) // @ game+0x2f545c0
	void HandleObjectiveStatusEvent(struct UObjectiveComponent* ChangedObjective, enum class EObjectiveType ObjectiveType, enum class EObjectiveStatus OldStatus, enum class EObjectiveStatus NewStatus, int32_t OldProgress, int32_t NewProgress); // Function ShooterGame.Mission.HandleObjectiveStatusEvent // (Native|Protected) // @ game+0x2f54220
	void HandleMissionStatusChanged(enum class EMissionStatus OldStatus); // Function ShooterGame.Mission.HandleMissionStatusChanged // (Native|Protected) // @ game+0x2f54080
	struct TArray<struct UObjectiveComponent*> GetVisibleObjectives(); // Function ShooterGame.Mission.GetVisibleObjectives // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f53f40
	struct TArray<struct UObjectiveComponent*> GetObjectives(); // Function ShooterGame.Mission.GetObjectives // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f53d70
	enum class EMissionStatus GetMissionStatus(); // Function ShooterGame.Mission.GetMissionStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f53d40
	void ClientUpdateMissionStatus(enum class EMissionStatus OldStatus, struct FMissionStatusTracker NewStatus); // Function ShooterGame.Mission.ClientUpdateMissionStatus // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x2f53810
	void ClientHandleMissionReset(); // Function ShooterGame.Mission.ClientHandleMissionReset // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x2dbc5c0
	void AuthSetMissionStatus(enum class EMissionStatus Status); // Function ShooterGame.Mission.AuthSetMissionStatus // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void AuthResetMission(); // Function ShooterGame.Mission.AuthResetMission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthAssignToPlayer(struct AShooterPlayerState* PlayerState); // Function ShooterGame.Mission.AuthAssignToPlayer // (Final|Native|Public) // @ game+0x2cb4be0
};

// Class ShooterGame.MissionGameStateComponent
// Size: 0x1c8 (Inherited: 0x170)
struct UMissionGameStateComponent : UBaseGameStateComponent {
	struct FMulticastInlineDelegate OnMissionActivated; // 0x170(0x10)
	struct FMulticastInlineDelegate OnMissionCompleted; // 0x180(0x10)
	struct FMulticastInlineDelegate OnMissionFailed; // 0x190(0x10)
	struct UBaseGameStateComponent* NextGameStateOnComplete; // 0x1a0(0x08)
	struct UBaseGameStateComponent* NextGameStateOnFailure; // 0x1a8(0x08)
	struct AMission* MissionClass; // 0x1b0(0x08)
	struct AMission* Mission; // 0x1b8(0x08)
	bool bAutoAssignMission; // 0x1c0(0x01)
	char pad_1C1[0x7]; // 0x1c1(0x07)

	struct AMission* TryGetMission(); // Function ShooterGame.MissionGameStateComponent.TryGetMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec220
	void SetNextState(struct UBaseGameStateComponent* MissionCompletedNextState, struct UBaseGameStateComponent* MissionFailedNextState); // Function ShooterGame.MissionGameStateComponent.SetNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x2f55840
	void HandleMissionStatusEvent(struct AMission* ChangedMission, enum class EMissionStatus OldStatus, enum class EMissionStatus NewStatus); // Function ShooterGame.MissionGameStateComponent.HandleMissionStatusEvent // (Native|Protected) // @ game+0x2f54110
	struct AShooterPlayerState* GetSoloPlayerState(); // Function ShooterGame.MissionGameStateComponent.GetSoloPlayerState // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f53ea0
	void AuthAssignMission(bool bResetMission); // Function ShooterGame.MissionGameStateComponent.AuthAssignMission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
};

// Class ShooterGame.MissionManagerComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UMissionManagerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnActiveMissionChanged; // 0xe8(0x10)
	char pad_F8[0x40]; // 0xf8(0x40)
	struct AMission* ActiveMission; // 0x138(0x08)
	struct TArray<struct AMission*> Missions; // 0x140(0x10)
	bool bMissionsCanGrantXP; // 0x150(0x01)
	char pad_151[0x7]; // 0x151(0x07)
	struct TMap<struct TSoftClassPtr<UObject>, struct FMegapacketMission> MegapacketMissionMap; // 0x158(0x50)

	void OnRep_Missions(struct TArray<struct AMission*> OldMissions); // Function ShooterGame.MissionManagerComponent.OnRep_Missions // (Final|Native|Protected) // @ game+0x2f5d5b0
	void OnRep_ActiveMission(struct AMission* OldMission); // Function ShooterGame.MissionManagerComponent.OnRep_ActiveMission // (Final|Native|Protected) // @ game+0x2f5d520
	void HandleObjectiveProgress(struct UObjectiveComponent* ChangedObjective, enum class EObjectiveType Type, enum class EObjectiveStatus OldStatus, enum class EObjectiveStatus NewStatus); // Function ShooterGame.MissionManagerComponent.HandleObjectiveProgress // (Final|Native|Public) // @ game+0x2f5d240
	void HandleMissionStatusChanged(struct AMission* Mission, enum class EMissionStatus OldStatus, enum class EMissionStatus NewStatus); // Function ShooterGame.MissionManagerComponent.HandleMissionStatusChanged // (Final|Native|Public) // @ game+0x2f5d130
	struct AShooterPlayerState* GetOwningPlayer(); // Function ShooterGame.MissionManagerComponent.GetOwningPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5cd80
	struct AMission* GetActiveMission(); // Function ShooterGame.MissionManagerComponent.GetActiveMission // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5c7d0
	void AuthClearMission(); // Function ShooterGame.MissionManagerComponent.AuthClearMission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthAssignMission(struct AMission* NewMission); // Function ShooterGame.MissionManagerComponent.AuthAssignMission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
};

// Class ShooterGame.MissionSettingsScreen
// Size: 0x2e0 (Inherited: 0x2c8)
struct UMissionSettingsScreen : UUserWidget {
	struct UMissionSettingsScreenCoordinator* MissionSettingsScreenCoordinator; // 0x2c8(0x08)
	struct FMulticastInlineDelegate OnScreenVisbilityChanged; // 0x2d0(0x10)
};

// Class ShooterGame.MissionSettingsScreenCoordinator
// Size: 0x50 (Inherited: 0x30)
struct UMissionSettingsScreenCoordinator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x38(0x08)
	struct UMissionSettingsScreen* MissionSettingsScreen; // 0x40(0x08)
	struct AGameStateBase* GameState; // 0x48(0x08)

	void ToggleVisibilityFromInput(); // Function ShooterGame.MissionSettingsScreenCoordinator.ToggleVisibilityFromInput // (Final|Native|Private) // @ game+0x2f5d8d0
	void ToggleVisibility(); // Function ShooterGame.MissionSettingsScreenCoordinator.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2f5d8b0
	void SetVisibility(bool bVisible); // Function ShooterGame.MissionSettingsScreenCoordinator.SetVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2f5d820
	struct AGameStateBase* GetGameState(); // Function ShooterGame.MissionSettingsScreenCoordinator.GetGameState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5ccc0
	bool CanToggleVisibilityFromInput(); // Function ShooterGame.MissionSettingsScreenCoordinator.CanToggleVisibilityFromInput // (Event|Public|BlueprintEvent|Const) // @ game+0x3520f50
};

// Class ShooterGame.MMRManager
// Size: 0x388 (Inherited: 0x80)
struct UMMRManager : UInitSystem {
	struct FMulticastInlineDelegate OnPlayerUpdated; // 0x80(0x10)
	char pad_90[0xe8]; // 0x90(0xe8)
	struct UConfigManager* ConfigManager; // 0x178(0x08)
	struct URMSManager* RMSManager; // 0x180(0x08)
	struct URSOManager* RSOManager; // 0x188(0x08)
	struct UContentIndex* ContentIndex; // 0x190(0x08)
	struct UContentManager* ContentManager; // 0x198(0x08)
	struct UMMRService* MMRService; // 0x1a0(0x08)
	char pad_1A8[0x8]; // 0x1a8(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x1b0(0x08)
	char pad_1B8[0x1d0]; // 0x1b8(0x1d0)

	void UpdateHideActRankBadge(bool Hide, struct FDelegate OnError); // Function ShooterGame.MMRManager.UpdateHideActRankBadge // (Final|Native|Public|BlueprintCallable) // @ game+0x2f5d8f0
	void SetPlayer(struct FMMRPlayer& NewPlayer); // Function ShooterGame.MMRManager.SetPlayer // (Final|Native|Private|HasOutParms) // @ game+0x2f5d6d0
	void RefreshPlayer(); // Function ShooterGame.MMRManager.RefreshPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2f5d6b0
	bool IsPromotion(struct FMMRMatchInfo& Match); // Function ShooterGame.MMRManager.IsPromotion // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5d460
	bool IsDemotion(struct FMMRMatchInfo& Match); // Function ShooterGame.MMRManager.IsDemotion // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5d3a0
	void GetSeasonInfoForQueue(struct FGuid SeasonID, struct FString QueueID, struct FProcessedSeasonInfo& OutSeasonInfo); // Function ShooterGame.MMRManager.GetSeasonInfoForQueue // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2f5cf00
	bool GetPlayer(struct FMMRPlayer& OutPlayer); // Function ShooterGame.MMRManager.GetPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5cdb0
	struct UMMRManager* GetMMRManager(struct UObject* WorldContextObject); // Function ShooterGame.MMRManager.GetMMRManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f5ccf0
	struct FString GetDefaultTournamentQueue(); // Function ShooterGame.MMRManager.GetDefaultTournamentQueue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f5cc30
	struct FString GetDefaultCompetitiveQueue(); // Function ShooterGame.MMRManager.GetDefaultCompetitiveQueue // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f5cba0
	bool GetCurrentSeasonInfoForQueue(struct FString QueueID, struct FProcessedSeasonInfo& OutSeasonInfo); // Function ShooterGame.MMRManager.GetCurrentSeasonInfoForQueue // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f5c9d0
	bool GetCurrentSeasonID(struct FGuid& OutCurrentSeasonID); // Function ShooterGame.MMRManager.GetCurrentSeasonID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2f5c920
	bool GetCompetitiveUpdateForMatch(struct FString MatchID, struct FMMRMatchInfo& OutMatchInfo); // Function ShooterGame.MMRManager.GetCompetitiveUpdateForMatch // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f5c800
	void DebugOverrideSeasonInfo(struct FString QueueID, struct FString SeasonID, int32_t NumWins, int32_t RankIndex, int32_t CapstoneWins, int32_t Rank, struct TMap<int32_t, int32_t> WinsByTier, int32_t LeaderboardPosition); // Function ShooterGame.MMRManager.DebugOverrideSeasonInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x2f5c3d0
	void DebugOverrideCompetitiveUpdateForMatch(struct FString MatchID, int32_t TierBeforeUpdate, int32_t TierAfterUpdate, int32_t TierProgressBeforeUpdate, int32_t TierProgressAfterUpdate, int32_t RankedRatingDelta, int32_t afkPenalty, int32_t RankedRatingPerformanceBonus); // Function ShooterGame.MMRManager.DebugOverrideCompetitiveUpdateForMatch // (Final|Native|Public|BlueprintCallable) // @ game+0x2f5c150
};

// Class ShooterGame.MMRService
// Size: 0x38 (Inherited: 0x30)
struct UMMRService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.MobileBlueprintFunctionLibrary
// Size: 0x30 (Inherited: 0x30)
struct UMobileBlueprintFunctionLibrary : UBlueprintFunctionLibrary {

	bool IsMobilePlatform(); // Function ShooterGame.MobileBlueprintFunctionLibrary.IsMobilePlatform // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21ac3c0
	float GetFOVModifiedDelta(struct UObject* WorldContextObject, float InDelta); // Function ShooterGame.MobileBlueprintFunctionLibrary.GetFOVModifiedDelta // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f673b0
	enum class EDeviceType GetDeviceType(); // Function ShooterGame.MobileBlueprintFunctionLibrary.GetDeviceType // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f67320
	int32_t GetCharacterHUDDesignerPreset(); // Function ShooterGame.MobileBlueprintFunctionLibrary.GetCharacterHUDDesignerPreset // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d554b0
	bool GetCachedDirectConnectSettings(struct FDirectConnectSettings& Settings); // Function ShooterGame.MobileBlueprintFunctionLibrary.GetCachedDirectConnectSettings // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f671e0
	void CacheDirectConnectSettings(struct FDirectConnectSettings& Settings); // Function ShooterGame.MobileBlueprintFunctionLibrary.CacheDirectConnectSettings // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2f66b10
};

// Class ShooterGame.MobileDeviceTelemetryComponent
// Size: 0x150 (Inherited: 0xe8)
struct UMobileDeviceTelemetryComponent : UActorComponent {
	char pad_E8[0x68]; // 0xe8(0x68)

	void OnRoundStart(int32_t RoundNumberBeginning); // Function ShooterGame.MobileDeviceTelemetryComponent.OnRoundStart // (Final|Native|Public) // @ game+0x2f67ae0
	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.MobileDeviceTelemetryComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x2f67a50
};

// Class ShooterGame.MobileOverlayViewController
// Size: 0x70 (Inherited: 0x30)
struct UMobileOverlayViewController : UObject {
	struct FMulticastInlineDelegate OnCurrentOverlayMenuChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnTextChatPanelRequested; // 0x40(0x10)
	struct FMulticastInlineDelegate OnSocialPanelRequested; // 0x50(0x10)
	struct UTextChatPanelViewController* TextChatPanelViewController; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	void RequestOverlayMenu(enum class EMobileOverlayMenuID NewValue); // Function ShooterGame.MobileOverlayViewController.RequestOverlayMenu // (Final|Native|Public|BlueprintCallable) // @ game+0x2f67c30
	void OpenTextChatConversation(struct TScriptInterface<ITextChatConversation> Conversation); // Function ShooterGame.MobileOverlayViewController.OpenTextChatConversation // (Final|Native|Public|BlueprintCallable) // @ game+0x2f67b90
	void OpenSocialPanel(); // Function ShooterGame.MobileOverlayViewController.OpenSocialPanel // (Final|Native|Public|BlueprintCallable) // @ game+0x2f67b70
	enum class EMobileOverlayMenuID GetCurrentOverlayMenu(); // Function ShooterGame.MobileOverlayViewController.GetCurrentOverlayMenu // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f672f0
};

// Class ShooterGame.MockRewinder
// Size: 0x48 (Inherited: 0x30)
struct UMockRewinder : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.ModalManager
// Size: 0x58 (Inherited: 0x30)
struct UModalManager : UObject {
	struct FMulticastInlineDelegate OnNotificationDequeued; // 0x30(0x10)
	struct UQueuedNotification* CurrentNotification; // 0x40(0x08)
	struct TArray<struct UQueuedNotification*> InternalQueue; // 0x48(0x10)

	void OnCurrentModalDisposed(struct UQueuedNotification* Notification); // Function ShooterGame.ModalManager.OnCurrentModalDisposed // (Final|Native|Private) // @ game+0x2f67840
	bool HasCurrentNotification(); // Function ShooterGame.ModalManager.HasCurrentNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f67600
	struct UQueuedNotification* GetCurrentNotification(); // Function ShooterGame.ModalManager.GetCurrentNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3ee80
	struct UQueuedNotification* EnqueueGenericNotificationAsModal(struct UGenericNotification* NotificationData); // Function ShooterGame.ModalManager.EnqueueGenericNotificationAsModal // (Final|Native|Public|BlueprintCallable) // @ game+0x2f67140
	struct UQueuedNotification* EnqueueGenericModal(struct FText Title, struct FText Message, enum class EAresNotificationType NotificationType, struct FText PrimaryActionButtonText, bool ShowSecondaryActionButton, struct FText SecondaryActionButtonText, bool ShowDismissActionButton, struct FText DismissActionButtonText); // Function ShooterGame.ModalManager.EnqueueGenericModal // (Final|Native|Public|BlueprintCallable) // @ game+0x2f66da0
};

// Class ShooterGame.ModeComponent
// Size: 0x118 (Inherited: 0xe8)
struct UModeComponent : UActorComponent {
	struct FMulticastInlineDelegate OnModeChanged; // 0xe8(0x10)
	struct FModeVariables AuthModeVariables; // 0xf8(0x08)
	struct FModeVariables ClientPredictedModeVariables; // 0x100(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimerClassOverride; // 0x108(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x110(0x08)

	void SetNumModes(int32_t Num); // Function ShooterGame.ModeComponent.SetNumModes // (Final|Native|Public|BlueprintCallable) // @ game+0x2f67e00
	void SetMode(int32_t ModeNumber); // Function ShooterGame.ModeComponent.SetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2f67cb0
	void OnRep_ModeVariables(); // Function ShooterGame.ModeComponent.OnRep_ModeVariables // (Final|Native|Private) // @ game+0x2f679a0
	int32_t GetNumModes(); // Function ShooterGame.ModeComponent.GetNumModes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f67570
	int32_t GetNextMode(); // Function ShooterGame.ModeComponent.GetNextMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f67540
	int32_t GetMode(); // Function ShooterGame.ModeComponent.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f674e0
};

// Class ShooterGame.ModeGameDataEventSubscriptions
// Size: 0x38 (Inherited: 0x30)
struct UModeGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
};

// Class ShooterGame.ModifiedListModelBase
// Size: 0x78 (Inherited: 0x58)
struct UModifiedListModelBase : UWrapperListModel {
	struct TArray<struct FWildcard> ModifiedListItemDataCache; // 0x58(0x10)
	struct TArray<bool> DirtyFlags; // 0x68(0x10)

	struct FWildcard ModifyListItem(struct FWildcard ListItem, struct FWildcard OldModifiedItem); // Function ShooterGame.ModifiedListModelBase.ModifyListItem // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x2f67630
	void BP_NotifyModificationRuleChanged(); // Function ShooterGame.ModifiedListModelBase.BP_NotifyModificationRuleChanged // (Final|Native|Protected|BlueprintCallable) // @ game+0x2f66af0
};

// Class ShooterGame.ModifiedListModel
// Size: 0x88 (Inherited: 0x78)
struct UModifiedListModel : UModifiedListModelBase {
	char pad_78[0x10]; // 0x78(0x10)

	void SetModificationDelegate(struct FDelegate& Delegate); // Function ShooterGame.ModifiedListModel.SetModificationDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f67d40
	void NotifyModificationRuleChanged(); // Function ShooterGame.ModifiedListModel.NotifyModificationRuleChanged // (Final|Native|Public|BlueprintCallable) // @ game+0x2f66af0
	struct UModifiedListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, struct FDelegate& ModificationDelegate, struct UObject* Outer); // Function ShooterGame.ModifiedListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2f66c20
};

// Class ShooterGame.MoneyManagementComponent
// Size: 0x120 (Inherited: 0xe8)
struct UMoneyManagementComponent : UActorComponent {
	int32_t EnergyCostInMoney; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FMulticastInlineDelegate OnMoneyUpdated; // 0xf0(0x10)
	int32_t Money; // 0x100(0x04)
	int32_t TotalMoneyGranted; // 0x104(0x04)
	int32_t MoneyGainedSinceLastRound; // 0x108(0x04)
	int32_t MoneyOverMaxSinceLastRound; // 0x10c(0x04)
	int32_t Energy; // 0x110(0x04)
	int32_t TotalEnergyGranted; // 0x114(0x04)
	int32_t NumRefundableEnergy; // 0x118(0x04)
	int32_t Experience; // 0x11c(0x04)

	void OnRep_Money(int32_t& OldMoney); // Function ShooterGame.MoneyManagementComponent.OnRep_Money // (Final|Native|Protected|HasOutParms) // @ game+0x2f679c0
	void OnGamePhaseChanged(enum class EAresGamePhase NewGamePhase, int32_t RoundNumberEnded); // Function ShooterGame.MoneyManagementComponent.OnGamePhaseChanged // (Final|Native|Public) // @ game+0x2f678d0
	int32_t GetTotalMoneyGranted(); // Function ShooterGame.MoneyManagementComponent.GetTotalMoneyGranted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f675d0
	int32_t GetTotalEnergyGranted(); // Function ShooterGame.MoneyManagementComponent.GetTotalEnergyGranted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f675a0
	int32_t GetRefundableEnergy(); // Function ShooterGame.MoneyManagementComponent.GetRefundableEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4660
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.MoneyManagementComponent.GetPlayerState // (Final|Native|Protected) // @ game+0x2f5cd80
	int32_t GetMoneyOverMaxSinceLastRound(); // Function ShooterGame.MoneyManagementComponent.GetMoneyOverMaxSinceLastRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f67510
	int32_t GetMoney(); // Function ShooterGame.MoneyManagementComponent.GetMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ca4630
	int32_t GetMaxExperience(); // Function ShooterGame.MoneyManagementComponent.GetMaxExperience // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f674b0
	int32_t GetMaxEnergy(); // Function ShooterGame.MoneyManagementComponent.GetMaxEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f67480
	int32_t GetExperience(); // Function ShooterGame.MoneyManagementComponent.GetExperience // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f67380
	int32_t GetEnergy(); // Function ShooterGame.MoneyManagementComponent.GetEnergy // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f67350
	void AuthSetMoney(int32_t MoneyToSet); // Function ShooterGame.MoneyManagementComponent.AuthSetMoney // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void AuthSetExperience(int32_t Amount); // Function ShooterGame.MoneyManagementComponent.AuthSetExperience // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void AuthSetEnergy(int32_t Amount); // Function ShooterGame.MoneyManagementComponent.AuthSetEnergy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void AuthResetMoney(); // Function ShooterGame.MoneyManagementComponent.AuthResetMoney // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2dea400
	void AuthResetExperience(); // Function ShooterGame.MoneyManagementComponent.AuthResetExperience // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2dea400
	void AuthResetEnergy(); // Function ShooterGame.MoneyManagementComponent.AuthResetEnergy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2dea400
	void AuthResetCurrencies(); // Function ShooterGame.MoneyManagementComponent.AuthResetCurrencies // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2f66ad0
	int32_t AuthRemoveMoneyGainedSinceLastRound(); // Function ShooterGame.MoneyManagementComponent.AuthRemoveMoneyGainedSinceLastRound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ee0680
	void AuthRemoveEnergy(int32_t EnergyToRemove, enum class EIsRefundable Refundable); // Function ShooterGame.MoneyManagementComponent.AuthRemoveEnergy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2f66a00
	void AuthRefundCost(struct UAresPurchasable* WhichPurchasable, int32_t RefundValue); // Function ShooterGame.MoneyManagementComponent.AuthRefundCost // (Final|Native|Public) // @ game+0x2f66720
	void AuthGiveMoney(int32_t MoneyToGive, struct FName RewardName); // Function ShooterGame.MoneyManagementComponent.AuthGiveMoney // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2f66920
	void AuthGiveExperience(int32_t ExperienceToGive, struct FName RewardName, enum class EIsRefundable Refundable); // Function ShooterGame.MoneyManagementComponent.AuthGiveExperience // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2f667f0
	void AuthGiveEnergy(int32_t EnergyToGive, struct FName RewardName, enum class EIsRefundable Refundable); // Function ShooterGame.MoneyManagementComponent.AuthGiveEnergy // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2f667f0
	void AuthDeductCost(struct UAresPurchasable* WhichPurchasable, int32_t Cost); // Function ShooterGame.MoneyManagementComponent.AuthDeductCost // (Final|Native|Public) // @ game+0x2f66720
};

// Class ShooterGame.MovementTimeShiftMonitor
// Size: 0x128 (Inherited: 0x30)
struct UMovementTimeShiftMonitor : UObject {
	char pad_30[0xf8]; // 0x30(0xf8)
};

// Class ShooterGame.MultiItemSlot
// Size: 0x60 (Inherited: 0x48)
struct UMultiItemSlot : UItemSlot {
	int32_t Capacity; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TArray<struct AAresItem*> MultiContents; // 0x50(0x10)
};

// Class ShooterGame.MultiTransitionStateComponent
// Size: 0x400 (Inherited: 0x3a0)
struct UMultiTransitionStateComponent : UTimedStateComponent {
	struct TArray<struct FScriptStateEffectInfo> DefaultEffects; // 0x3a0(0x10)
	struct TMap<enum class EAresItemSlot, struct FScriptStateEffectInfoArray> TransitionEffectsMap; // 0x3b0(0x50)
};

// Class ShooterGame.MutableEntryTileView
// Size: 0x8e8 (Inherited: 0x3c8)
struct UMutableEntryTileView : UTileView {
	struct FScrollBarStyle WidgetBarStyle; // 0x3c8(0x518)
	float ScrollbarThickness; // 0x8e0(0x04)
	char pad_8E4[0x4]; // 0x8e4(0x04)

	void SetTileAlignment(enum class EListItemAlignment Alignment); // Function ShooterGame.MutableEntryTileView.SetTileAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6eb90
	void SetOrientation(enum class EOrientation ViewOrientation); // Function ShooterGame.MutableEntryTileView.SetOrientation // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6eb10
	void SetEntryWidgetClass(struct UUserWidget* WidgetClass); // Function ShooterGame.MutableEntryTileView.SetEntryWidgetClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6e9f0
	void SetEntrySpacing(float Spacing); // Function ShooterGame.MutableEntryTileView.SetEntrySpacing // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6e970
};

// Class ShooterGame.MutedPatternsManager
// Size: 0x2a8 (Inherited: 0x80)
struct UMutedPatternsManager : UInitSystem {
	struct FMulticastInlineDelegate OnMutedPatternsDictionaryUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnFeatureToggleChanged; // 0x90(0x10)
	char pad_A0[0x180]; // 0xa0(0x180)
	struct UAresSettingsManager* AresSettingsManager; // 0x220(0x08)
	struct TScriptInterface<IAresStringListSettingModel> StringListModel; // 0x228(0x10)
	struct UConfigManager* ConfigManager; // 0x238(0x08)
	char pad_240[0x48]; // 0x240(0x48)
	struct URSOManager* RSOManager; // 0x288(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x290(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x298(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0x2a0(0x08)

	bool StringContainsAnyPattern(struct FString inString); // Function ShooterGame.MutedPatternsManager.StringContainsAnyPattern // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f6ec10
	void OnSettingsCommit(); // Function ShooterGame.MutedPatternsManager.OnSettingsCommit // (Final|Native|Private) // @ game+0x2f6e710
	bool MaskPatternsInString(struct FString& InOutString); // Function ShooterGame.MutedPatternsManager.MaskPatternsInString // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f6e5a0
	bool IsFeatureEnabled(); // Function ShooterGame.MutedPatternsManager.IsFeatureEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f6e580
	void HandleMutedWordsListChanged(struct UObject* Source); // Function ShooterGame.MutedPatternsManager.HandleMutedWordsListChanged // (Final|Native|Private) // @ game+0x2f6e4c0
	struct UMutedPatternsManager* GetMutedPatternsManager(struct UObject* WorldContextObject); // Function ShooterGame.MutedPatternsManager.GetMutedPatternsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f6e200
};

// Class ShooterGame.NativePlatformFriendsManager
// Size: 0x1a8 (Inherited: 0x80)
struct UNativePlatformFriendsManager : UInitSystem {
	struct FMulticastInlineDelegate OnFriendsListChanged; // 0x80(0x10)
	char pad_90[0x58]; // 0x90(0x58)
	struct TMap<struct FString, struct TWeakObjectPtr<struct UPlatformPlayer>> PlayerCache; // 0xe8(0x50)
	struct TArray<struct USocialPlayer*> SortedPlayers; // 0x138(0x10)
	struct TMap<struct FString, struct TWeakObjectPtr<struct UPlatformPlayer>> NativePlayerCache; // 0x148(0x50)
	char pad_198[0x10]; // 0x198(0x10)

	void UpdateNativePlatformFriendsList(); // Function ShooterGame.NativePlatformFriendsManager.UpdateNativePlatformFriendsList // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6ecd0
	void SetFriendsListPollingForUpdates(bool bShouldPollForUpdates); // Function ShooterGame.NativePlatformFriendsManager.SetFriendsListPollingForUpdates // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6ea80
	void SendFriendRequestThroughNativeSubsystem(struct UPlatformPlayer* PlatformPlayer, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.NativePlatformFriendsManager.SendFriendRequestThroughNativeSubsystem // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6e820
	void OpenNativePlatformPlayerProfile(struct UPlatformPlayer* PlatformPlayer, struct FDelegate OnProfileUIClosed); // Function ShooterGame.NativePlatformFriendsManager.OpenNativePlatformPlayerProfile // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6e730
	struct TArray<struct USocialPlayer*> GetNativePlatformPlayers(); // Function ShooterGame.NativePlatformFriendsManager.GetNativePlatformPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f6e350
	struct UPlatformPlayer* GetNativePlatformPlayerBySubject(struct FString GameName); // Function ShooterGame.NativePlatformFriendsManager.GetNativePlatformPlayerBySubject // (Final|Native|Public|BlueprintCallable) // @ game+0x2f6e290
};

// Class ShooterGame.NativePlatformSaveSystem
// Size: 0x1b8 (Inherited: 0x30)
struct UNativePlatformSaveSystem : UObject {
	char pad_30[0x188]; // 0x30(0x188)
};

// Class ShooterGame.NavArea_Fly
// Size: 0x50 (Inherited: 0x50)
struct UNavArea_Fly : UNavArea {
};

// Class ShooterGame.NavArea_Jump
// Size: 0x50 (Inherited: 0x50)
struct UNavArea_Jump : UNavArea {
};

// Class ShooterGame.NavAreaMeta_SwitchByTeamRole
// Size: 0xa0 (Inherited: 0x50)
struct UNavAreaMeta_SwitchByTeamRole : UNavAreaMeta {
	struct TMap<enum class EAresTeamRole, struct UNavAreaBase*> NavAreaClassesByTeamRole; // 0x50(0x50)
};

// Class ShooterGame.NavFilter_QuerierClassOverrides
// Size: 0x60 (Inherited: 0x50)
struct UNavFilter_QuerierClassOverrides : UNavigationQueryFilter {
	struct TArray<struct FNavQuerierClassOverride> QuerierClassOverrides; // 0x50(0x10)
};

// Class ShooterGame.NavFilterMeta_SwitchByTeamRole
// Size: 0xa0 (Inherited: 0x50)
struct UNavFilterMeta_SwitchByTeamRole : UNavigationQueryFilter {
	struct TMap<enum class EAresTeamRole, struct UNavigationQueryFilter*> NavFilterClassesByTeamRole; // 0x50(0x50)
};

// Class ShooterGame.NavLinkDropOff
// Size: 0x400 (Inherited: 0x3d0)
struct ANavLinkDropOff : AActor {
	char pad_3D0[0x10]; // 0x3d0(0x10)
	float DropOffDistance; // 0x3e0(0x04)
	float MaxDropOff; // 0x3e4(0x04)
	float MaxJumpHeight; // 0x3e8(0x04)
	char pad_3EC[0x14]; // 0x3ec(0x14)
};

// Class ShooterGame.NavLinkDropOffGenerator
// Size: 0x428 (Inherited: 0x3d0)
struct ANavLinkDropOffGenerator : AActor {
	char pad_3D0[0x10]; // 0x3d0(0x10)
	float DropOffSeparation; // 0x3e0(0x04)
	float DropOffDistance; // 0x3e4(0x04)
	float MaxStepUpHeight; // 0x3e8(0x04)
	float MinStepDownHeight; // 0x3ec(0x04)
	float MaxDropOff; // 0x3f0(0x04)
	float MaxJumpHeight; // 0x3f4(0x04)
	float BaseLift; // 0x3f8(0x04)
	float BaseBackOff; // 0x3fc(0x04)
	struct FName IgnoreObjectsWithTag; // 0x400(0x0c)
	char pad_40C[0x4]; // 0x40c(0x04)
	struct TArray<struct FNavigationLink> PointLinks; // 0x410(0x10)
	char pad_420[0x8]; // 0x420(0x08)

	void OnNavigationGenerated(struct ANavigationData* NavData); // Function ShooterGame.NavLinkDropOffGenerator.OnNavigationGenerated // (Final|Native|Private) // @ game+0x2f6e660
	bool HasValidData(); // Function ShooterGame.NavLinkDropOffGenerator.HasValidData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f6e550
};

// Class ShooterGame.NavLinkDropOffIgnoreVolumeBase
// Size: 0x3d8 (Inherited: 0x3d0)
struct ANavLinkDropOffIgnoreVolumeBase : AActor {
	struct UBoxComponent* IgnoreVolume; // 0x3d0(0x08)
};

// Class ShooterGame.NavPointComponent
// Size: 0x6d0 (Inherited: 0x6b0)
struct UNavPointComponent : UWidgetComponent {
	struct FVector2D SceneScale; // 0x6b0(0x08)
	float MinOnScreenSize; // 0x6b8(0x04)
	float MaxOnScreenSize; // 0x6bc(0x04)
	struct AShooterCharacter* OwningCharacter; // 0x6c0(0x08)
	struct AAresPlayerController* LocalPC; // 0x6c8(0x08)
};

// Class ShooterGame.NavPointWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct UNavPointWidget : UUserWidget {
	struct AShooterCharacter* OwningCharacter; // 0x2c8(0x08)
	float LowHealthThreshold; // 0x2d0(0x04)
	bool bIsLowHealth; // 0x2d4(0x01)
	bool bIsUltimateReady; // 0x2d5(0x01)
	char pad_2D6[0x2]; // 0x2d6(0x02)

	void OnUltimateStatusChanged(); // Function ShooterGame.NavPointWidget.OnUltimateStatusChanged // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnHealthStatusChanged(); // Function ShooterGame.NavPointWidget.OnHealthStatusChanged // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.NetworkedRandomNumberGeneratorComponent
// Size: 0x118 (Inherited: 0xe8)
struct UNetworkedRandomNumberGeneratorComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	int32_t AuthInitialRandomSeed; // 0x100(0x04)
	int32_t AuthCurrentRandomSeed; // 0x104(0x04)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimerClassOverride; // 0x108(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x110(0x08)

	void OnRep_InitialRandomSeed(); // Function ShooterGame.NetworkedRandomNumberGeneratorComponent.OnRep_InitialRandomSeed // (Final|Native|Private) // @ game+0x2f6e6f0
	void OnRep_CurrentRandomSeed(); // Function ShooterGame.NetworkedRandomNumberGeneratorComponent.OnRep_CurrentRandomSeed // (Final|Native|Private) // @ game+0x2f679a0
	int32_t GetAndConsumeCurrentSeed(); // Function ShooterGame.NetworkedRandomNumberGeneratorComponent.GetAndConsumeCurrentSeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f6e1d0
};

// Class ShooterGame.NetworkStreamableInterface
// Size: 0x30 (Inherited: 0x30)
struct UNetworkStreamableInterface : UInterface {
};

// Class ShooterGame.NetworkStreamComponent
// Size: 0x108 (Inherited: 0xe8)
struct UNetworkStreamComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bIsProcessingStreamData; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct AShooterCharacter* ShooterCharacterOwner; // 0xf8(0x08)
	float LastCaptureTime; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)
};

// Class ShooterGame.NeutralTeamComponent
// Size: 0xf8 (Inherited: 0xf8)
struct UNeutralTeamComponent : UBaseTeamComponent {
};

// Class ShooterGame.NotificationManager
// Size: 0x50 (Inherited: 0x30)
struct UNotificationManager : UObject {
	struct UNotificationsModel* NotificationsModel; // 0x30(0x08)
	struct FMulticastInlineDelegate OnNotificationRequeued; // 0x38(0x10)
	struct UThreadedChatManager* ThreadedChatManager; // 0x48(0x08)

	void PushNotification(struct UNotification* Notification, bool ShouldShowChatMessage, enum class EMessagePartType PartType); // Function ShooterGame.NotificationManager.PushNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x2f768f0
	struct UNotificationsModel* GetNotificationsModel(); // Function ShooterGame.NotificationManager.GetNotificationsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47ec0
	void EnqueueToastsRelatedToSubject(struct FString Subject); // Function ShooterGame.NotificationManager.EnqueueToastsRelatedToSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x2f759b0
	struct UNotificationsViewModel* CreateNotificationsViewModel(); // Function ShooterGame.NotificationManager.CreateNotificationsViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f758f0
};

// Class ShooterGame.NotificationsModel
// Size: 0x60 (Inherited: 0x30)
struct UNotificationsModel : UObject {
	struct FMulticastInlineDelegate OnNotificationAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnNotificationRemoved; // 0x40(0x10)
	struct TArray<struct UNotification*> Notifications; // 0x50(0x10)

	struct TArray<struct UNotification*> GetNotificationsByRelatedSubject(struct FString Subject); // Function ShooterGame.NotificationsModel.GetNotificationsByRelatedSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f75c10
	struct TArray<struct UNotification*> GetNotifications(); // Function ShooterGame.NotificationsModel.GetNotifications // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f75b80
};

// Class ShooterGame.NotificationsViewModel
// Size: 0x78 (Inherited: 0x30)
struct UNotificationsViewModel : UObject {
	struct FMulticastInlineDelegate OnNotificationAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnNotificationRemoved; // 0x40(0x10)
	struct UNotificationsModel* NotificationsModel; // 0x50(0x08)
	struct TArray<struct UNotification*> ToastViewQueue; // 0x58(0x10)
	struct TArray<struct UNotification*> DisplayedToasts; // 0x68(0x10)

	struct UNotification* PopToast(); // Function ShooterGame.NotificationsViewModel.PopToast // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f768c0
	void NotificationDisplayFinished(struct UNotification* Notification); // Function ShooterGame.NotificationsViewModel.NotificationDisplayFinished // (Final|Native|Public|BlueprintCallable) // @ game+0x2f761a0
	void HandleNotificationRemoved(struct UNotification* Notification); // Function ShooterGame.NotificationsViewModel.HandleNotificationRemoved // (Final|Native|Private) // @ game+0x2f76030
	void HandleNotificationAdded(struct UNotification* Notification); // Function ShooterGame.NotificationsViewModel.HandleNotificationAdded // (Final|Native|Private) // @ game+0x2f75fa0
	struct TArray<struct UNotification*> GetToastViewQueue(); // Function ShooterGame.NotificationsViewModel.GetToastViewQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x2f75de0
	struct TArray<struct UNotification*> GetDisplayedToasts(); // Function ShooterGame.NotificationsViewModel.GetDisplayedToasts // (Final|Native|Public|BlueprintCallable) // @ game+0x2f75af0
	void EnqueueToastForViewing(struct UNotification* Notification); // Function ShooterGame.NotificationsViewModel.EnqueueToastForViewing // (Final|Native|Public|BlueprintCallable) // @ game+0x2f75920
	bool ContainsPendingToasts(); // Function ShooterGame.NotificationsViewModel.ContainsPendingToasts // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f758c0
};

// Class ShooterGame.NPELoader
// Size: 0x90 (Inherited: 0x80)
struct UNPELoader : UInitSystem {
	struct UMMRManager* MMRManager; // 0x80(0x08)
	struct UGameFlowPredictionManager* GameFlowPredictionManager; // 0x88(0x08)
};

// Class ShooterGame.NumericProgressModel
// Size: 0x30 (Inherited: 0x30)
struct UNumericProgressModel : UInterface {

	void UnbindProgressValueChanged(struct FDelegate& Delegate); // Function ShooterGame.NumericProgressModel.UnbindProgressValueChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f76eb0
	bool HasProgressValue(); // Function ShooterGame.NumericProgressModel.HasProgressValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eeeb50
	struct FNumericProgressValue GetProgressValue(); // Function ShooterGame.NumericProgressModel.GetProgressValue // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f75d70
	void BindProgressValueChanged(struct FDelegate& Delegate); // Function ShooterGame.NumericProgressModel.BindProgressValueChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f1a880
};

// Class ShooterGame.ObjectiveComponent
// Size: 0x170 (Inherited: 0xe8)
struct UObjectiveComponent : UActorComponent {
	struct FMulticastInlineDelegate OnObjectiveReset; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnObjectiveStatusOrProgressChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnObjectiveActivated; // 0x108(0x10)
	struct FMulticastInlineDelegate OnObjectiveCompleted; // 0x118(0x10)
	struct FMulticastInlineDelegate OnObjectiveFailed; // 0x128(0x10)
	char SortIndex; // 0x138(0x01)
	enum class EObjectiveType ObjectiveType; // 0x139(0x01)
	char pad_13A[0x2]; // 0x13a(0x02)
	int32_t ProgressToComplete; // 0x13c(0x04)
	struct FText DefaultDescription; // 0x140(0x18)
	char PlatformVisibility; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	struct FObjectiveStatusTracker Status; // 0x15c(0x08)
	int32_t Progress; // 0x164(0x04)
	struct AMission* Mission; // 0x168(0x08)

	void OnRep_Status(struct FObjectiveStatusTracker OldStatus); // Function ShooterGame.ObjectiveComponent.OnRep_Status // (Native|Protected) // @ game+0x2f765f0
	void OnRep_Progress(int32_t OldProgress); // Function ShooterGame.ObjectiveComponent.OnRep_Progress // (Native|Protected) // @ game+0x2f76560
	bool IsVisibleOnPlatform(enum class EAresObjectivePlatformVisibility PlatformsToCheck); // Function ShooterGame.ObjectiveComponent.IsVisibleOnPlatform // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f760f0
	bool IsVisible(); // Function ShooterGame.ObjectiveComponent.IsVisible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f760c0
	enum class EObjectiveStatus GetStatus(); // Function ShooterGame.ObjectiveComponent.GetStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f75db0
	int32_t GetProgress(); // Function ShooterGame.ObjectiveComponent.GetProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f75d40
	struct FText GetDescription(); // Function ShooterGame.ObjectiveComponent.GetDescription // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2f75a80
	void ClientUpdateObjectiveStatus(enum class EObjectiveStatus OldStatus, struct FObjectiveStatusTracker NewStatus); // Function ShooterGame.ObjectiveComponent.ClientUpdateObjectiveStatus // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x2f757e0
	void ClientHandleObjectiveReset(); // Function ShooterGame.ObjectiveComponent.ClientHandleObjectiveReset // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x2eb23c0
	void AuthResetObjective(); // Function ShooterGame.ObjectiveComponent.AuthResetObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthFailObjective(); // Function ShooterGame.ObjectiveComponent.AuthFailObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthCompleteObjective(); // Function ShooterGame.ObjectiveComponent.AuthCompleteObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthAddProgress(int32_t ProgressAmount); // Function ShooterGame.ObjectiveComponent.AuthAddProgress // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void AuthActivateObjective(); // Function ShooterGame.ObjectiveComponent.AuthActivateObjective // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
};

// Class ShooterGame.ObjectWithWorldContext
// Size: 0x38 (Inherited: 0x30)
struct UObjectWithWorldContext : UObject {
	struct UWorld* World; // 0x30(0x08)
};

// Class ShooterGame.ObservableArrayWrapperListModel
// Size: 0x98 (Inherited: 0x48)
struct UObservableArrayWrapperListModel : UOrderedListModelBase {
	struct UObject* BackingArrayOwner; // 0x48(0x08)
	char pad_50[0x48]; // 0x50(0x48)
};

// Class ShooterGame.UnorderedMapModelBase
// Size: 0x48 (Inherited: 0x30)
struct UUnorderedMapModelBase : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.ObservableMapWrapperModel
// Size: 0x88 (Inherited: 0x48)
struct UObservableMapWrapperModel : UUnorderedMapModelBase {
	struct UObject* BackingMapOwner; // 0x48(0x08)
	char pad_50[0x38]; // 0x50(0x38)
};

// Class ShooterGame.ObserverGameDataEventSubscriptions
// Size: 0x38 (Inherited: 0x30)
struct UObserverGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
};

// Class ShooterGame.ObserverPawn
// Size: 0x480 (Inherited: 0x458)
struct AObserverPawn : ASpectatorPawn {
	struct UCalloutRegionTrackingComponent* CalloutRegionTrackingComponent; // 0x458(0x08)
	struct UGamepadTuningDataAsset* GamepadTuningData; // 0x460(0x08)
	float WalkSpeedMultiplier; // 0x468(0x04)
	float RunSpeedMultiplier; // 0x46c(0x04)
	char pad_470[0x10]; // 0x470(0x10)

	void OnObserverWalkSpeedChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.ObserverPawn.OnObserverWalkSpeedChanged // (Final|Native|Public) // @ game+0x2f76450
	void OnObserverRunSpeedChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.ObserverPawn.OnObserverRunSpeedChanged // (Final|Native|Public) // @ game+0x2f76340
	void OnMouseSensitivityChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.ObserverPawn.OnMouseSensitivityChanged // (Final|Native|Public) // @ game+0x2f76230
};

// Class ShooterGame.ObserverPawnMovement
// Size: 0x208 (Inherited: 0x198)
struct UObserverPawnMovement : USpectatorPawnMovement {
	char pad_198[0x70]; // 0x198(0x70)
};

// Class ShooterGame.ObserverPlayerController
// Size: 0xa30 (Inherited: 0x988)
struct AObserverPlayerController : AAresPlayerController {
	struct UFreeCamComponent* FreeCamComponent; // 0x988(0x08)
	struct UProjectileFollowComponent* ProjectileFollowComponent; // 0x990(0x08)
	struct FMulticastInlineDelegate OnOutlinesChanged; // 0x998(0x10)
	bool bUseBroadcastHud; // 0x9a8(0x01)
	char pad_9A9[0x7]; // 0x9a9(0x07)
	struct TMap<struct TSoftClassPtr<UObject>, struct TSoftClassPtr<UObject>> BroadcastHudOverrides; // 0x9b0(0x50)
	struct UActorVisualizationComponent* SightLinesComponent; // 0xa00(0x08)
	struct UObserverViewOptionsComponent* ClientPredictedObserverViewOptionsComponent; // 0xa08(0x08)
	char pad_A10[0x20]; // 0xa10(0x20)

	void UpdateOutlines(); // Function ShooterGame.ObserverPlayerController.UpdateOutlines // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void UpdateHandednessTeamBased(); // Function ShooterGame.ObserverPlayerController.UpdateHandednessTeamBased // (Final|Native|Protected) // @ game+0x2f76f70
	bool TrySpectateSpecificPlayerWithCinematicCamera(struct AShooterPlayerState* PlayerStateToSpectate); // Function ShooterGame.ObserverPlayerController.TrySpectateSpecificPlayerWithCinematicCamera // (Final|Native|Public) // @ game+0x2f76e10
	void ToggleSightLines(); // Function ShooterGame.ObserverPlayerController.ToggleSightLines // (Final|Native|Protected) // @ game+0x2f76df0
	void ToggleMinimap(); // Function ShooterGame.ObserverPlayerController.ToggleMinimap // (Final|Native|Public) // @ game+0x2f76dd0
	void StopFollowingCurrentTarget(); // Function ShooterGame.ObserverPlayerController.StopFollowingCurrentTarget // (Final|Native|Protected) // @ game+0x1e6e7b0
	void ServerReplicateObserverMove(struct FObserverPawnMove SavedMove); // Function ShooterGame.ObserverPlayerController.ServerReplicateObserverMove // (Net|Native|Event|Public|NetServer) // @ game+0x2f76d40
	void ServerFollowPrev(int32_t AckIndex); // Function ShooterGame.ObserverPlayerController.ServerFollowPrev // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2f76cb0
	void ServerFollowNext(int32_t AckIndex); // Function ShooterGame.ObserverPlayerController.ServerFollowNext // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2f76c20
	void ServerEnterCinematicCamera(struct FCinematicCameraData CameraData); // Function ShooterGame.ObserverPlayerController.ServerEnterCinematicCamera // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2f76ad0
	void ServerChangeObserverViewOptions(struct FObserverViewOptionsNetworkedData InObserverViewOptionsNetworkedData); // Function ShooterGame.ObserverPlayerController.ServerChangeObserverViewOptions // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2f76a40
	void RequestFollowPrev(); // Function ShooterGame.ObserverPlayerController.RequestFollowPrev // (Final|Native|Public) // @ game+0x2f76a20
	void RequestFollowNext(); // Function ShooterGame.ObserverPlayerController.RequestFollowNext // (Final|Native|Public) // @ game+0x2f76a00
	void OutlinesNone(); // Function ShooterGame.ObserverPlayerController.OutlinesNone // (Final|Native|Protected) // @ game+0x2f768a0
	void OutlinesFriendly(); // Function ShooterGame.ObserverPlayerController.OutlinesFriendly // (Final|Native|Protected) // @ game+0x2f76880
	void OutlinesEnemy(); // Function ShooterGame.ObserverPlayerController.OutlinesEnemy // (Final|Native|Protected) // @ game+0x2f76860
	void OutlinesAll(); // Function ShooterGame.ObserverPlayerController.OutlinesAll // (Final|Native|Protected) // @ game+0x2f76840
	void OnViewTargetChanged(struct FViewTargetInfo& Info); // Function ShooterGame.ObserverPlayerController.OnViewTargetChanged // (Final|Native|Protected|HasOutParms) // @ game+0x2f767b0
	void OnTeamColorSettingsChange(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.ObserverPlayerController.OnTeamColorSettingsChange // (Final|Native|Protected) // @ game+0x2f76690
	void OnSpectateInOrderRequestReceived(bool bFromPlayerInput); // Function ShooterGame.ObserverPlayerController.OnSpectateInOrderRequestReceived // (Final|Native|Public) // @ game+0x2d67650
	void OnAuthViewTargetChanged(); // Function ShooterGame.ObserverPlayerController.OnAuthViewTargetChanged // (Final|Native|Protected) // @ game+0x1e6e7b0
	void OnAuthFreeCamToggled(bool bFreeCamEnabled); // Function ShooterGame.ObserverPlayerController.OnAuthFreeCamToggled // (Final|Native|Public) // @ game+0x2d67650
	void ModifyObservePlayer(); // Function ShooterGame.ObserverPlayerController.ModifyObservePlayer // (Final|Native|Protected) // @ game+0x2f76180
	void HandleFollowerViewTargetOptionsChanged(); // Function ShooterGame.ObserverPlayerController.HandleFollowerViewTargetOptionsChanged // (Final|Native|Protected) // @ game+0x2f75f80
	void HandleFollowerViewTargetChanged(struct AObserverPlayerState* CurrentObserver, struct AObserverPlayerState* OldFollowTarget, struct AObserverPlayerState* NewFollowTarget); // Function ShooterGame.ObserverPlayerController.HandleFollowerViewTargetChanged // (Final|Native|Protected) // @ game+0x2f75e70
	struct AObserverPlayerState* GetObserverPlayerState(); // Function ShooterGame.ObserverPlayerController.GetObserverPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f75d10
	struct UObserverViewOptionsComponent* GetClientPredictedObserverViewOptionsComponent(); // Function ShooterGame.ObserverPlayerController.GetClientPredictedObserverViewOptionsComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f75a60
	void ClientReceiveRemoteCharacterAndFreeCamUpdates(struct TArray<struct FRemoteCharacterUpdate> RemoteCharacterUpdates, struct TArray<struct FObserverPawnMove> FreeCamMoves); // Function ShooterGame.ObserverPlayerController.ClientReceiveRemoteCharacterAndFreeCamUpdates // (Net|Native|Event|Public|NetClient) // @ game+0x2f756a0
	void ClientReceiveFreeCamUpdates(struct TArray<struct FObserverPawnMove> FreeCamMoves); // Function ShooterGame.ObserverPlayerController.ClientReceiveFreeCamUpdates // (Net|Native|Event|Public|NetClient) // @ game+0x2f755f0
	void ClientHandleInvalidViewTarget(); // Function ShooterGame.ObserverPlayerController.ClientHandleInvalidViewTarget // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x2f755c0
	void ClearCinematicCameraFlag(); // Function ShooterGame.ObserverPlayerController.ClearCinematicCameraFlag // (Final|Native|Public) // @ game+0x2f755a0
	void CancelModifyObservePlayer(); // Function ShooterGame.ObserverPlayerController.CancelModifyObservePlayer // (Final|Native|Protected) // @ game+0x2f75580
	void AuthNotifySubscribersOfViewTargetChange(); // Function ShooterGame.ObserverPlayerController.AuthNotifySubscribersOfViewTargetChange // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthClearStateOnSpectateSpecific(); // Function ShooterGame.ObserverPlayerController.AuthClearStateOnSpectateSpecific // (Final|Native|Public) // @ game+0x1e6e7b0
};

// Class ShooterGame.ObserverPlayerState
// Size: 0x6d8 (Inherited: 0x670)
struct AObserverPlayerState : AAresPlayerStateBase {
	struct FMulticastInlineDelegate OnFollowTargetChanged; // 0x670(0x10)
	char pad_680[0x10]; // 0x680(0x10)
	struct TArray<struct FObfuscatedPlayerInformation> AllPlayersObfuscatedPlayerInformation; // 0x690(0x10)
	struct FTimerHandle UpdateObfuscatedPlayerInformationRetryHandle; // 0x6a0(0x08)
	struct TArray<struct AObserverPlayerState*> ViewTargetFollowers; // 0x6a8(0x10)
	struct AObserverPlayerState* FollowTarget; // 0x6b8(0x08)
	char pad_6C0[0x8]; // 0x6c0(0x08)
	struct UObserverViewOptionsComponent* ReplicatedObserverViewOptionsComponent; // 0x6c8(0x08)
	char pad_6D0[0x8]; // 0x6d0(0x08)

	void OnRep_ObfuscatedPlayerInformation(); // Function ShooterGame.ObserverPlayerState.OnRep_ObfuscatedPlayerInformation // (Final|Native|Public) // @ game+0x2f7ce60
	void OnRep_FollowTarget(struct AObserverPlayerState* OldFollowTarget); // Function ShooterGame.ObserverPlayerState.OnRep_FollowTarget // (Final|Native|Public) // @ game+0x2f7cdd0
	void HandleControllerObserverViewOptionsChanged(); // Function ShooterGame.ObserverPlayerState.HandleControllerObserverViewOptionsChanged // (Final|Native|Protected) // @ game+0x2f7ca00
};

// Class ShooterGame.ObserverTeamComponent
// Size: 0x100 (Inherited: 0xf8)
struct UObserverTeamComponent : UBaseTeamComponent {
	bool bIsModerator; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	bool IsModerator(); // Function ShooterGame.ObserverTeamComponent.IsModerator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df4550
};

// Class ShooterGame.ObserverViewOptionsComponent
// Size: 0x108 (Inherited: 0xe8)
struct UObserverViewOptionsComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct FObserverViewOptionsNetworkedData ObserverViewOptionsNetworkedData; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void OnRep_ObserverViewOptions(); // Function ShooterGame.ObserverViewOptionsComponent.OnRep_ObserverViewOptions // (Final|Native|Private) // @ game+0x2f7ce80
	bool GetSightLinesEnabled(); // Function ShooterGame.ObserverViewOptionsComponent.GetSightLinesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f7c850
	bool GetMinimapEnabled(); // Function ShooterGame.ObserverViewOptionsComponent.GetMinimapEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f7c5c0
	bool GetFriendlyOutlinesEnabled(); // Function ShooterGame.ObserverViewOptionsComponent.GetFriendlyOutlinesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f7c400
	bool GetEnemyOutlinesEnabled(); // Function ShooterGame.ObserverViewOptionsComponent.GetEnemyOutlinesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f7c3e0
};

// Class ShooterGame.OcclusionPathComponent
// Size: 0x208 (Inherited: 0xe8)
struct UOcclusionPathComponent : UActorComponent {
	struct FRuntimeFloatCurve DistanceToOcclusionCurve; // 0xe8(0x88)
	struct TArray<struct FRoomInfo> Rooms; // 0x170(0x10)
	struct TArray<struct FPortalInfo> Portals; // 0x180(0x10)
	char pad_190[0x78]; // 0x190(0x78)

	void OnAudioOcclusionZoneOwnerEndPlay(struct AActor* Actor, enum class EEndPlayReason EndPlayReason); // Function ShooterGame.OcclusionPathComponent.OnAudioOcclusionZoneOwnerEndPlay // (Final|Native|Public) // @ game+0x2f7cbe0
	float GetOcclusionPathDistance(struct FHitResult& BlockedHit, struct UAresAudioComponent* AudioComponent); // Function ShooterGame.OcclusionPathComponent.GetOcclusionPathDistance // (Final|BlueprintCosmetic|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f7c620
	void GenerateAudioGraph(); // Function ShooterGame.OcclusionPathComponent.GenerateAudioGraph // (Final|Native|Public) // @ game+0x2f7c310
	bool CanUseOcclusionPathing(); // Function ShooterGame.OcclusionPathComponent.CanUseOcclusionPathing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f7c2e0
};

// Class ShooterGame.OnGroundEquippableSearchComponent
// Size: 0x130 (Inherited: 0xe8)
struct UOnGroundEquippableSearchComponent : UActorComponent {
	float OnGroundEquippableSearchRadius; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct FMulticastInlineDelegate OnGroundEquippablesUpdated; // 0xf0(0x10)
	struct FVector TeamOnGroundSearchCenter; // 0x100(0x0c)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct TArray<struct AAresOnGroundEquippable*> TeamOnGroundEquippables; // 0x110(0x10)
	struct FName TeamNameToSearch; // 0x120(0x0c)
	char pad_12C[0x4]; // 0x12c(0x04)

	void UpdateOnGroundEquippables(struct AActor* Searcher); // Function ShooterGame.OnGroundEquippableSearchComponent.UpdateOnGroundEquippables // (Final|Native|Private) // @ game+0x2f7d670
	struct TArray<struct AAresOnGroundEquippable*> GetOnGroundEquippables(struct AShooterCharacter* Character); // Function ShooterGame.OnGroundEquippableSearchComponent.GetOnGroundEquippables // (Final|Native|Public|BlueprintCallable) // @ game+0x2f7c760
	void DefineOnGroundEquippableSearchPoints(); // Function ShooterGame.OnGroundEquippableSearchComponent.DefineOnGroundEquippableSearchPoints // (Native|Event|Public|BlueprintEvent) // @ game+0x2ca3cf0
};

// Class ShooterGame.OnlineIdentityManager
// Size: 0x50 (Inherited: 0x30)
struct UOnlineIdentityManager : UObject {
	struct URSOManager* RSOManager; // 0x30(0x08)
	char pad_38[0x18]; // 0x38(0x18)

	void OnRSOManagerInitialized(); // Function ShooterGame.OnlineIdentityManager.OnRSOManagerInitialized // (Final|Native|Protected) // @ game+0x2f7cdb0
	void OnInitStatusChanged(enum class EAresPlatformInitStatus Status); // Function ShooterGame.OnlineIdentityManager.OnInitStatusChanged // (Final|Native|Protected) // @ game+0x2f7ccd0
};

// Class ShooterGame.OptionsScreen
// Size: 0x2c8 (Inherited: 0x2c8)
struct UOptionsScreen : UUserWidget {

	void ReceiveMenuStackEntry(struct UMenuStackEntry* OptionsMenuStackEntry); // Function ShooterGame.OptionsScreen.ReceiveMenuStackEntry // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void OnOpened(); // Function ShooterGame.OptionsScreen.OnOpened // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void OnClosed(); // Function ShooterGame.OptionsScreen.OnClosed // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.OptionsScreenCoordinator
// Size: 0x88 (Inherited: 0x30)
struct UOptionsScreenCoordinator : UObject {
	char pad_30[0x38]; // 0x30(0x38)
	struct UShooterUICoordinator* ShooterUICoordinator; // 0x68(0x08)
	struct AAresPlayerController* PlayerController; // 0x70(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x78(0x08)
	struct UMenuStackEntry* OptionsMenuStackEntry; // 0x80(0x08)

	void OnOpenOptionsScreenTouchInput(); // Function ShooterGame.OptionsScreenCoordinator.OnOpenOptionsScreenTouchInput // (Final|Native|Private) // @ game+0x2f7cd70
	void OnOpenOptionsScreenInput(); // Function ShooterGame.OptionsScreenCoordinator.OnOpenOptionsScreenInput // (Final|Native|Private) // @ game+0x2f7cd50
	void OnOpenedOptionsScreen(); // Function ShooterGame.OptionsScreenCoordinator.OnOpenedOptionsScreen // (Final|Native|Private) // @ game+0x2f7cd90
	void OnClosedOptionsScreen(); // Function ShooterGame.OptionsScreenCoordinator.OnClosedOptionsScreen // (Final|Native|Private) // @ game+0x2f7ccb0
};

// Class ShooterGame.OrderedListModel
// Size: 0x30 (Inherited: 0x30)
struct UOrderedListModel : UInterface {

	void UnbindOnChange(struct FDelegate& Delegate); // Function ShooterGame.OrderedListModel.UnbindOnChange // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d95860
	int32_t GetNum(); // Function ShooterGame.OrderedListModel.GetNum // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f7c5e0
	void BindOnChange(struct FDelegate& Delegate); // Function ShooterGame.OrderedListModel.BindOnChange // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d96a30
};

// Class ShooterGame.OrderedListModelBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UOrderedListModelBlueprintLibrary : UBlueprintFunctionLibrary {

	void TryGetReplacedEventDataPure(struct FOrderedListModelChangeEventData& EventData, struct FOrderedListModelChangeEventData_Replaced& SubEventData, bool& bSucceeded); // Function ShooterGame.OrderedListModelBlueprintLibrary.TryGetReplacedEventDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f7d4f0
	void TryGetReorderedEventDataPure(struct FOrderedListModelChangeEventData& EventData, struct FOrderedListModelChangeEventData_Reordered& SubEventData, bool& bSucceeded); // Function ShooterGame.OrderedListModelBlueprintLibrary.TryGetReorderedEventDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f7d370
	void TryGetRemovedEventDataPure(struct FOrderedListModelChangeEventData& EventData, struct FOrderedListModelChangeEventData_Removed& SubEventData, bool& bSucceeded); // Function ShooterGame.OrderedListModelBlueprintLibrary.TryGetRemovedEventDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f7d1f0
	void TryGetInsertedEventDataPure(struct FOrderedListModelChangeEventData& EventData, struct FOrderedListModelChangeEventData_Inserted& SubEventData, bool& bSucceeded); // Function ShooterGame.OrderedListModelBlueprintLibrary.TryGetInsertedEventDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f7d070
	int32_t IndexOfByKey(struct TScriptInterface<IOrderedListModel> Target, int32_t Key); // Function ShooterGame.OrderedListModelBlueprintLibrary.IndexOfByKey // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2c2b550
	void GetSingleItem(struct FWildcard& item, struct TScriptInterface<IOrderedListModel> Target, int32_t Index); // Function ShooterGame.OrderedListModelBlueprintLibrary.GetSingleItem // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f7c870
	void GetItemRange(struct TArray<struct FWildcard>& Items, struct TScriptInterface<IOrderedListModel> Target, struct FIndexRange& Range); // Function ShooterGame.OrderedListModelBlueprintLibrary.GetItemRange // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2f7c420
	void Break_OrderedListModelChangeEventData(struct FOrderedListModelChangeEventData& EventData, enum class EOrderedListModelChangeEventType& EventType); // Function ShooterGame.OrderedListModelBlueprintLibrary.Break_OrderedListModelChangeEventData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f7c1c0
};

// Class ShooterGame.ParallelAnimationConductorNode
// Size: 0xe0 (Inherited: 0xa8)
struct UParallelAnimationConductorNode : UAnimationConductorNodeBase {
	struct FAnimationConductorNodeSignalCondition ItemTerminationCondition; // 0xa8(0x14)
	char pad_BC[0x4]; // 0xbc(0x04)
	struct TArray<struct FParallelAnimationConductorNode_InternalChildData> ChildList; // 0xc0(0x10)
	char pad_D0[0x10]; // 0xd0(0x10)

	void SetChildNodeList(struct TArray<struct TScriptInterface<IAnimationConductorNode>>& NewValue); // Function ShooterGame.ParallelAnimationConductorNode.SetChildNodeList // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f88360
	void RemoveChildNode(struct TScriptInterface<IAnimationConductorNode> Node); // Function ShooterGame.ParallelAnimationConductorNode.RemoveChildNode // (Final|Native|Public|BlueprintCallable) // @ game+0x2f87fb0
	void RemoveAllChildNodes(); // Function ShooterGame.ParallelAnimationConductorNode.RemoveAllChildNodes // (Final|Native|Public|BlueprintCallable) // @ game+0x2f87f90
	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.ParallelAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x2f86430
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.ParallelAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x2f86350
	struct UParallelAnimationConductorNode* Create(struct TArray<struct TScriptInterface<IAnimationConductorNode>>& ChildList, struct FAnimationConductorNodeSignalCondition& ItemTerminationCondition, struct UObject* Outer); // Function ShooterGame.ParallelAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2f852d0
	void AddChildNode(struct TScriptInterface<IAnimationConductorNode> Node); // Function ShooterGame.ParallelAnimationConductorNode.AddChildNode // (Final|Native|Public|BlueprintCallable) // @ game+0x2f847d0
};

// Class ShooterGame.PartyNotificationNameRequest
// Size: 0x50 (Inherited: 0x30)
struct UPartyNotificationNameRequest : UObject {
	struct UPlatformPlayer* Player; // 0x30(0x08)
	struct UThreadedChatManager* ThreadedChatManager; // 0x38(0x08)
	char pad_40[0x10]; // 0x40(0x10)

	void OnPlayerPresenceUpdated(struct FDisplayName& DisplayName); // Function ShooterGame.PartyNotificationNameRequest.OnPlayerPresenceUpdated // (Final|Native|Public|HasOutParms) // @ game+0x2f87bb0
};

// Class ShooterGame.PartyChatManager
// Size: 0x60 (Inherited: 0x30)
struct UPartyChatManager : UObject {
	struct UPartyModel* PartyModel; // 0x30(0x08)
	struct UThreadedChatManager* ThreadedChatManager; // 0x38(0x08)
	struct FString LastPartyIDOnAdd; // 0x40(0x10)
	struct TArray<struct UPartyNotificationNameRequest*> CurrentRequests; // 0x50(0x10)

	void OnRequestRemoved(struct UPartyMessageModel* Message); // Function ShooterGame.PartyChatManager.OnRequestRemoved // (Final|Native|Public) // @ game+0x2f87d20
	void OnPlayerRemovedFromParty(struct UPartyPlayerModel* Player); // Function ShooterGame.PartyChatManager.OnPlayerRemovedFromParty // (Final|Native|Public) // @ game+0x2f87c90
	void OnPlayerAddedToParty(struct UPartyPlayerModel* Player); // Function ShooterGame.PartyChatManager.OnPlayerAddedToParty // (Final|Native|Public) // @ game+0x2f87b20
	void OnPartyChanged(struct FString ID); // Function ShooterGame.PartyChatManager.OnPartyChanged // (Final|Native|Public) // @ game+0x2f87a70
	void OnPartyAccessibilityChanged(enum class EAresPartyAccessibility Accessibility); // Function ShooterGame.PartyChatManager.OnPartyAccessibilityChanged // (Final|Native|Public) // @ game+0x2f879f0
	void OnOwnerTransferred(struct UPartyPlayerModel* Player); // Function ShooterGame.PartyChatManager.OnOwnerTransferred // (Final|Native|Public) // @ game+0x2f87960
	void OnLeavingMatchmakingChanged(bool IsLeavingMatchmaking); // Function ShooterGame.PartyChatManager.OnLeavingMatchmakingChanged // (Final|Native|Public) // @ game+0x2f878d0
	void OnInviteRemoved(struct UPartyMessageModel* Message); // Function ShooterGame.PartyChatManager.OnInviteRemoved // (Final|Native|Public) // @ game+0x2f87840
};

// Class ShooterGame.PartyManager
// Size: 0x530 (Inherited: 0x80)
struct UPartyManager : UInitSystem {
	struct FMulticastInlineDelegate OnInviteActionSucceeded; // 0x80(0x10)
	struct FMulticastInlineDelegate OnQueueConfigUpdated; // 0x90(0x10)
	struct FMulticastInlineDelegate OnSendInviteFailed; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnSendInviteSucceeded; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnCurrentPartyUpdated; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnCustomGameConfigsUpdated; // 0xd0(0x10)
	char pad_E0[0x330]; // 0xe0(0x330)
	struct UPartyService* PartyService; // 0x410(0x08)
	struct URSOManager* RSOManager; // 0x418(0x08)
	struct URMSManager* RMSManager; // 0x420(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x428(0x08)
	struct UConfigManager* ConfigManager; // 0x430(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x438(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x440(0x08)
	struct UPingManager* PingManager; // 0x448(0x08)
	char pad_450[0x10]; // 0x450(0x10)
	struct FCustomGameConfigs CustomGameConfigs; // 0x460(0x90)
	bool bHasInitialCustomGameConfigs; // 0x4f0(0x01)
	char pad_4F1[0x3f]; // 0x4f1(0x3f)

	void UpdateReadyStatus(bool IsReady); // Function ShooterGame.PartyManager.UpdateReadyStatus // (Final|Native|Public) // @ game+0x2f88ad0
	bool TransferOwner(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.TransferOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x2f88950
	enum class EPartyErrorEnum StringToPartyErrorEnum(struct FString errorStr); // Function ShooterGame.PartyManager.StringToPartyErrorEnum // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2f888a0
	bool SetPreferredGamePods(struct TMap<struct FString, bool>& PreferredGamePodsMap, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.SetPreferredGamePods // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f88710
	bool SetLookingForMore(bool LookingForMore, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.SetLookingForMore // (Final|Native|Public|BlueprintCallable) // @ game+0x2f88600
	void SetForceGameProcessing(bool ForcePostProcessing, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.SetForceGameProcessing // (Final|Native|Public|BlueprintCallable) // @ game+0x2f884a0
	bool SetAccessibility(enum class EAresPartyAccessibility Accessibility, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.SetAccessibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2f88260
	bool RequestToJoinParty(struct FString PartyID, struct TArray<struct FString>& Subjects, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.RequestToJoinParty // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f88050
	void RefreshCurrentPlayer(); // Function ShooterGame.PartyManager.RefreshCurrentPlayer // (Final|Native|Private) // @ game+0x2f87f70
	void RefreshCurrentParty(); // Function ShooterGame.PartyManager.RefreshCurrentParty // (Final|Native|Private) // @ game+0x2f87f50
	void OverrideGamePod(struct FString GamePodOverride, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.OverrideGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x2f87dd0
	void OnSessionLoopStateChanged(); // Function ShooterGame.PartyManager.OnSessionLoopStateChanged // (Final|Native|Private) // @ game+0x2f87db0
	void OnGameFlowUpdated(enum class EGameFlowStateType GameFlowType); // Function ShooterGame.PartyManager.OnGameFlowUpdated // (Final|Native|Private) // @ game+0x2f877c0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PartyManager.OnBugCommand // (Final|Native|Private) // @ game+0x2f87660
	bool LeaveMatchmakingQueue(struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.LeaveMatchmakingQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x2f87480
	bool LeaveCurrentPartyV2(struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.LeaveCurrentPartyV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x2f873c0
	bool KickFromTournamentParty(struct FString RosterID, struct FString Subject, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.KickFromTournamentParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f87240
	bool KickFromParty(struct FString Subject, struct FDelegate CompletedCallback); // Function ShooterGame.PartyManager.KickFromParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f87120
	bool JoinPartySolo(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.JoinPartySolo // (Final|Native|Public|BlueprintCallable) // @ game+0x2f86fa0
	bool JoinOrCreateRosterParty(struct FString RosterID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.JoinOrCreateRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f86e20
	bool JoinMatch(struct FString MatchID, struct FString TeamID, struct TMap<struct FString, struct FString> AgentSelections, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.JoinMatch // (Final|Native|Public) // @ game+0x2f86b30
	bool IsOwner(); // Function ShooterGame.PartyManager.IsOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f86b00
	bool IsInitialized(); // Function ShooterGame.PartyManager.IsInitialized // (Final|Native|Public|BlueprintCallable) // @ game+0x2f86ad0
	bool InviteToPartyByDisplayName(struct FString Name, struct FString Tag, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.InviteToPartyByDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x2f868f0
	bool InviteToParty(struct TArray<struct FString> Subjects, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.InviteToParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f86720
	bool HasCurrentPlayer(); // Function ShooterGame.PartyManager.HasCurrentPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f866f0
	bool HasCurrentParty(); // Function ShooterGame.PartyManager.HasCurrentParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f866c0
	void HandleReconcileSuccess(struct FPartyPlayer& Player); // Function ShooterGame.PartyManager.HandleReconcileSuccess // (Final|Native|Private|HasOutParms) // @ game+0x2f865b0
	void HandleReconcileError(struct FAmbassadorError& Error); // Function ShooterGame.PartyManager.HandleReconcileError // (Final|Native|Private|HasOutParms) // @ game+0x2f864c0
	struct TArray<struct FQueueConfig> GetQueueConfigs(); // Function ShooterGame.PartyManager.GetQueueConfigs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f86290
	bool GetQueueConfig(struct FString QueueID, struct FQueueConfig& Out); // Function ShooterGame.PartyManager.GetQueueConfig // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f86120
	enum class EAresPartyState GetPreviousPartyState(); // Function ShooterGame.PartyManager.GetPreviousPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f860f0
	struct TArray<struct FQueueConfig> GetPremierQueueConfigs(); // Function ShooterGame.PartyManager.GetPremierQueueConfigs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f86030
	struct TArray<struct FQueueConfig> GetPlayScreenQueueConfigs(); // Function ShooterGame.PartyManager.GetPlayScreenQueueConfigs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f85f70
	struct UPartyManager* GetPartyManager(struct UObject* WorldContextObject); // Function ShooterGame.PartyManager.GetPartyManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f85ee0
	bool GetOwner(struct FAresParty& AresParty, struct FAresPartyMember& OutOwner); // Function ShooterGame.PartyManager.GetOwner // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f85be0
	struct FCustomGameConfigs GetCustomGameConfigs(); // Function ShooterGame.PartyManager.GetCustomGameConfigs // (Final|Native|Public|BlueprintCallable) // @ game+0x2f85ad0
	bool GetCurrentPlayer(struct FPartyPlayer& Player); // Function ShooterGame.PartyManager.GetCurrentPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f859b0
	enum class EStateTransitionReason GetCurrentPartyStateTransitionReason(); // Function ShooterGame.PartyManager.GetCurrentPartyStateTransitionReason // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f85980
	enum class EAresPartyState GetCurrentPartyState(); // Function ShooterGame.PartyManager.GetCurrentPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f85950
	bool GetCurrentParty(struct FAresParty& Party); // Function ShooterGame.PartyManager.GetCurrentParty // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f85870
	bool EnterMatchmakingQueue(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.EnterMatchmakingQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x2f85740
	bool DeclineRequest(struct FString RequestID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.DeclineRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x2f855c0
	bool DeclineInvite(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.DeclineInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x2f85440
	bool ConvertRosterPartyToDefault(struct FString RosterID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertRosterPartyToDefault // (Final|Native|Public|BlueprintCallable) // @ game+0x2f85150
	bool ConvertCurrentToRosterParty(struct FString RosterID, struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertCurrentToRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f84f70
	bool ConvertCurrentToPremierParty(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertCurrentToPremierParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f84e40
	bool ConvertCurrentToDefaultParty(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertCurrentToDefaultParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f84cc0
	bool ConvertCurrentToCustomGame(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ConvertCurrentToCustomGame // (Final|Native|Public|BlueprintCallable) // @ game+0x2f84b90
	bool ChangeQueue(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.ChangeQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x2f84a10
	void BalanceTeams(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.BalanceTeams // (Final|Native|Public|BlueprintCallable) // @ game+0x2f84890
	bool AcceptInvite(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyManager.AcceptInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x2f84650
};

// Class ShooterGame.PartyMatchmakingModel
// Size: 0x58 (Inherited: 0x30)
struct UPartyMatchmakingModel : UObject {
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0x40(0x10)
	int32_t PartySize; // 0x50(0x04)
	int32_t MaxPartySize; // 0x54(0x04)

	int32_t GetPartySize(); // Function ShooterGame.PartyMatchmakingModel.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e0b090
	int32_t GetMaxPartySize(); // Function ShooterGame.PartyMatchmakingModel.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d8e0
};

// Class ShooterGame.PartyMessageModel
// Size: 0x88 (Inherited: 0x30)
struct UPartyMessageModel : UObject {
	struct FMulticastInlineDelegate OnMarkedForDeletion; // 0x30(0x10)
	bool bMarkedForDeletion; // 0x40(0x01)
	enum class EPartyMessageStatus LocalStatus; // 0x41(0x01)
	char pad_42[0x6]; // 0x42(0x06)
	struct FString ID; // 0x48(0x10)
	enum class EPartyMessageType MessageType; // 0x58(0x01)
	char pad_59[0x7]; // 0x59(0x07)
	struct FString PartyID; // 0x60(0x10)
	struct UPlatformPlayer* Sender; // 0x70(0x08)
	struct UPlatformPlayer* Receiver; // 0x78(0x08)
	struct FDateTime CreatedAt; // 0x80(0x08)

	bool IsMarkedForDeletion(); // Function ShooterGame.PartyMessageModel.IsMarkedForDeletion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x21ac390
	struct UPlatformPlayer* GetSender(); // Function ShooterGame.PartyMessageModel.GetSender // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e1a0
	struct UPlatformPlayer* GetReceiver(); // Function ShooterGame.PartyMessageModel.GetReceiver // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2301ce0
	struct FString GetPartyID(); // Function ShooterGame.PartyMessageModel.GetPartyID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8da50
	enum class EPartyMessageType GetMessageType(); // Function ShooterGame.PartyMessageModel.GetMessageType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d9c0
	enum class EPartyMessageStatus GetLocalStatus(); // Function ShooterGame.PartyMessageModel.GetLocalStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d8b0
	struct FString GetID(); // Function ShooterGame.PartyMessageModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d770
	struct FDateTime GetCreatedAt(); // Function ShooterGame.PartyMessageModel.GetCreatedAt // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d4e0
};

// Class ShooterGame.PartyErrorNotification
// Size: 0x50 (Inherited: 0x30)
struct UPartyErrorNotification : UObject {
	bool HasBeenSeen; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct TArray<struct UPartyPlayerModel*> ErroredPlayers; // 0x38(0x10)
	enum class EAresPartyErrorNotificationType ErrorNotificationType; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)

	enum class EAresPartyErrorNotificationType GetErrorNotificationType(); // Function ShooterGame.PartyErrorNotification.GetErrorNotificationType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d680
	struct TArray<struct UPartyPlayerModel*> GetErroredPlayers(); // Function ShooterGame.PartyErrorNotification.GetErroredPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d6b0
};

// Class ShooterGame.PartyModel
// Size: 0x690 (Inherited: 0x30)
struct UPartyModel : UObject {
	struct FMulticastInlineDelegate OnIDChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnQueueEntryTimeChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnLocalQueueEntryTimeChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnAccessibilityChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnReceivedInviteAdded; // 0x80(0x10)
	struct FMulticastInlineDelegate OnReceivedInviteRemoved; // 0x90(0x10)
	struct FMulticastInlineDelegate OnSentInviteAdded; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnSentInviteRemoved; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnRequestAdded; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnRequestRemoved; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnMemberAdded; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnMemberRemoved; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnOwnerTransferred; // 0x100(0x10)
	struct FMulticastInlineDelegate OnIsOwnerChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnMatchmakingChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnIsTournamentChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnLeavingMatchmakingChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnIsPartyEligibleForPremierChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnMinPartySizeChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnHighSkillPartySizeChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnHasInvalidPartySizeChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnUseHighSkillPartySizeChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnQueueIDChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnChatConnectedChanged; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnPartySkillDisparityTooHighChanged; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnIsFullPartyAndBypassSkillRestrictionsChanged; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnSkillDisparityRRPenaltyChanged; // 0x200(0x10)
	struct FMulticastInlineDelegate OnErrorNotificationChanged; // 0x210(0x10)
	struct FMulticastInlineDelegate OnQueueDelayChanged; // 0x220(0x10)
	struct FMulticastInlineDelegate OnQueueRestrictionsChanged; // 0x230(0x10)
	struct FMulticastInlineDelegate OnIsEntirePartyReadyChanged; // 0x240(0x10)
	struct FMulticastInlineDelegate OnEligibleQueuesChanged; // 0x250(0x10)
	struct FMulticastInlineDelegate OnPreferredGamePodsChanged; // 0x260(0x10)
	struct FMulticastInlineDelegate OnSocialXPStateChanged; // 0x270(0x10)
	struct FMulticastInlineDelegate OnTournamentIdChanged; // 0x280(0x10)
	struct FMulticastInlineDelegate OnIsRosterPartyChanged; // 0x290(0x10)
	struct FMulticastInlineDelegate OnTournamentDataChanged; // 0x2a0(0x10)
	struct FString ID; // 0x2b0(0x10)
	enum class EPartyViewState CurrentState; // 0x2c0(0x01)
	char pad_2C1[0x7]; // 0x2c1(0x07)
	struct FDateTime QueueEntryTime; // 0x2c8(0x08)
	struct FDateTime LocalQueueEntryTime; // 0x2d0(0x08)
	enum class EAresPartyAccessibility Accessibility; // 0x2d8(0x01)
	char pad_2D9[0x7]; // 0x2d9(0x07)
	struct TMap<struct FString, struct UPartyMessageModel*> ReceivedInvites_Backing; // 0x2e0(0x50)
	char pad_330[0x28]; // 0x330(0x28)
	struct TMap<struct FString, struct UPartyMessageModel*> SentInvites; // 0x358(0x50)
	struct TMap<struct FString, struct UPartyMessageModel*> Requests_Backing; // 0x3a8(0x50)
	char pad_3F8[0x28]; // 0x3f8(0x28)
	struct TMap<struct FString, struct UPartyPlayerModel*> Members_Backing; // 0x420(0x50)
	char pad_470[0x28]; // 0x470(0x28)
	struct TMap<struct FString, struct UPartyPlayerModel*> NonReadyMembers; // 0x498(0x50)
	struct TSet<struct FString> EligibleQueues; // 0x4e8(0x50)
	struct UPartyPlayerModel* Owner; // 0x538(0x08)
	bool bOwner; // 0x540(0x01)
	char pad_541[0x7]; // 0x541(0x07)
	struct UCustomGameModel* CustomGameModel; // 0x548(0x08)
	int32_t MaxPartySize; // 0x550(0x04)
	int32_t MinPartySize; // 0x554(0x04)
	int32_t HighSkillPartySize; // 0x558(0x04)
	bool bUseHighSkillPartySize; // 0x55c(0x01)
	char pad_55D[0x3]; // 0x55d(0x03)
	struct FString QueueID; // 0x560(0x10)
	float SkillDisparityRRPenalty; // 0x570(0x04)
	bool bMatchmaking; // 0x574(0x01)
	bool bIsTournament; // 0x575(0x01)
	bool bIsRosterParty; // 0x576(0x01)
	bool bMatchmadeGame; // 0x577(0x01)
	bool bLeavingMatchmaking; // 0x578(0x01)
	bool bIsChatConnected; // 0x579(0x01)
	bool bIsPartyEligibleForPremier; // 0x57a(0x01)
	bool bIsPartySkillDisparityTooHigh; // 0x57b(0x01)
	bool bIsFullPartyAndBypassSkillRestrictions; // 0x57c(0x01)
	char pad_57D[0x3]; // 0x57d(0x03)
	struct UPartyErrorNotification* ErrorNotification; // 0x580(0x08)
	bool bHasQueueDelay; // 0x588(0x01)
	char pad_589[0x7]; // 0x589(0x07)
	struct TMap<struct FString, struct FQueueIneligiblePlayers> QueueIDToRestrictedPlayers; // 0x590(0x50)
	struct FDateTime QueueDelayFinishedTime; // 0x5e0(0x08)
	bool bIsEntirePartyReady; // 0x5e8(0x01)
	char pad_5E9[0x7]; // 0x5e9(0x07)
	struct TMap<struct FString, bool> PreferredGamePods; // 0x5f0(0x50)
	enum class ESocialXPState SocialXPState; // 0x640(0x01)
	char pad_641[0x7]; // 0x641(0x07)
	struct FString TournamentID; // 0x648(0x10)
	struct FTournamentData TournamentData; // 0x658(0x30)
	bool bHasInvalidPartySize; // 0x688(0x01)
	char pad_689[0x7]; // 0x689(0x07)

	bool UseHighSkillPartySize(); // Function ShooterGame.PartyModel.UseHighSkillPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8eca0
	bool ShouldFakeFullParty(); // Function ShooterGame.PartyModel.ShouldFakeFullParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f8ec70
	void SetState(enum class EPartyViewState NewValue); // Function ShooterGame.PartyModel.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0x2f8ebf0
	void SetQueueEntryTime(struct FDateTime& NewValue); // Function ShooterGame.PartyModel.SetQueueEntryTime // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2f8eb60
	void SetLocalQueueEntryTime(struct FDateTime& NewValue); // Function ShooterGame.PartyModel.SetLocalQueueEntryTime // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2f8ead0
	void SetID(struct FString NewValue); // Function ShooterGame.PartyModel.SetID // (Final|Native|Public|BlueprintCallable) // @ game+0x2f8ea20
	void SetAccessibility(enum class EAresPartyAccessibility NewValue); // Function ShooterGame.PartyModel.SetAccessibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2f8e9a0
	bool IsTournament(); // Function ShooterGame.PartyModel.IsTournament // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e970
	bool IsRosterParty(); // Function ShooterGame.PartyModel.IsRosterParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e940
	bool IsQueueRestricted(struct FString InputID); // Function ShooterGame.PartyModel.IsQueueRestricted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e830
	bool IsPartySkillDisparityTooHigh(); // Function ShooterGame.PartyModel.IsPartySkillDisparityTooHigh // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e800
	bool IsPartyEligibleForPremier(); // Function ShooterGame.PartyModel.IsPartyEligibleForPremier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e7d0
	bool IsOwner(); // Function ShooterGame.PartyModel.IsOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e7a0
	bool IsMatchmaking(); // Function ShooterGame.PartyModel.IsMatchmaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e770
	bool IsFullPartyAndBypassSkillRestrictions(); // Function ShooterGame.PartyModel.IsFullPartyAndBypassSkillRestrictions // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e750
	bool IsEntirePartyReady(); // Function ShooterGame.PartyModel.IsEntirePartyReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e720
	bool IsChatConnected(); // Function ShooterGame.PartyModel.IsChatConnected // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e6f0
	bool HasQueueDelay(); // Function ShooterGame.PartyModel.HasQueueDelay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e6c0
	bool HasMember(struct FString Subject); // Function ShooterGame.PartyModel.HasMember // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e600
	bool HasInvalidPartySize(); // Function ShooterGame.PartyModel.HasInvalidPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e5d0
	struct FString GetTournamentId(); // Function ShooterGame.PartyModel.GetTournamentId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e4f0
	struct FTournamentData GetTournamentData(); // Function ShooterGame.PartyModel.GetTournamentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e320
	enum class EPartyViewState GetState(); // Function ShooterGame.PartyModel.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e2f0
	float GetSkillDisparityRRPenalty(); // Function ShooterGame.PartyModel.GetSkillDisparityRRPenalty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e2d0
	struct TMap<struct FString, struct UPartyMessageModel*> GetSentInvites(); // Function ShooterGame.PartyModel.GetSentInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e1d0
	struct TArray<struct FString> GetSelectedGamePods(); // Function ShooterGame.PartyModel.GetSelectedGamePods // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e110
	struct TScriptInterface<IUnorderedMapModel> GetRequestsMapModel(); // Function ShooterGame.PartyModel.GetRequestsMapModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8e0d0
	struct TMap<struct FString, struct UPartyMessageModel*> GetRequests(); // Function ShooterGame.PartyModel.GetRequests // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8dfd0
	struct TScriptInterface<IUnorderedMapModel> GetReceivedInvitesMapModel(); // Function ShooterGame.PartyModel.GetReceivedInvitesMapModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8df90
	struct TMap<struct FString, struct UPartyMessageModel*> GetReceivedInvites(); // Function ShooterGame.PartyModel.GetReceivedInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8de90
	struct TArray<struct FString> GetQueueRestrictedPlayers(struct FString InputID); // Function ShooterGame.PartyModel.GetQueueRestrictedPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8dd40
	struct FString GetQueueID(); // Function ShooterGame.PartyModel.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8dcb0
	struct FDateTime GetQueueEntryTime(); // Function ShooterGame.PartyModel.GetQueueEntryTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8dc70
	struct FDateTime GetQueueDelayOverTime(); // Function ShooterGame.PartyModel.GetQueueDelayOverTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8dc30
	struct TMap<struct FString, bool> GetPreferredGamePods(); // Function ShooterGame.PartyModel.GetPreferredGamePods // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8db10
	int32_t GetPartySize(); // Function ShooterGame.PartyModel.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8dae0
	struct UPartyPlayerModel* GetOwner(); // Function ShooterGame.PartyModel.GetOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec3d0
	struct TMap<struct FString, struct UPartyPlayerModel*> GetNonReadyMembers(); // Function ShooterGame.PartyModel.GetNonReadyMembers // (Final|Native|Public|BlueprintCallable) // @ game+0x2f8da10
	int32_t GetMinPartySize(); // Function ShooterGame.PartyModel.GetMinPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d9f0
	struct TScriptInterface<IUnorderedMapModel> GetMembersModel(); // Function ShooterGame.PartyModel.GetMembersModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d980
	struct TMap<struct FString, struct UPartyPlayerModel*> GetMembers(); // Function ShooterGame.PartyModel.GetMembers // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x2f8d940
	int32_t GetMaxPartySize(); // Function ShooterGame.PartyModel.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d910
	struct FDateTime GetLocalQueueEntryTime(); // Function ShooterGame.PartyModel.GetLocalQueueEntryTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d870
	bool GetLeavingMatchmaking(); // Function ShooterGame.PartyModel.GetLeavingMatchmaking // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d840
	struct FString GetID(); // Function ShooterGame.PartyModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d7b0
	int32_t GetHighSkillPartySize(); // Function ShooterGame.PartyModel.GetHighSkillPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d740
	struct UPartyErrorNotification* GetErrorNotification(); // Function ShooterGame.PartyModel.GetErrorNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d650
	struct TSet<struct FString> GetEligibleQueues(); // Function ShooterGame.PartyModel.GetEligibleQueues // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d520
	struct UCustomGameModel* GetCustomGameModel(); // Function ShooterGame.PartyModel.GetCustomGameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cec520
	enum class EAresPartyAccessibility GetAccessibility(); // Function ShooterGame.PartyModel.GetAccessibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f8d4b0
};

// Class ShooterGame.AcceptSuccessWrapper
// Size: 0x48 (Inherited: 0x30)
struct UAcceptSuccessWrapper : UObject {
	struct UGenericNotification* Notification; // 0x30(0x08)
	struct UNotificationManager* NotificationManager; // 0x38(0x08)
	struct UPartyNotificationManager* Parent; // 0x40(0x08)

	void OnAcceptSuccess(); // Function ShooterGame.AcceptSuccessWrapper.OnAcceptSuccess // (Final|Native|Public) // @ game+0x2f99a20
};

// Class ShooterGame.PartyNotificationManager
// Size: 0xa8 (Inherited: 0x30)
struct UPartyNotificationManager : UObject {
	struct UPartyViewController* PartyViewController; // 0x30(0x08)
	struct UPartyModel* PartyModel; // 0x38(0x08)
	struct USocialViewControllerV3* SocialViewController; // 0x40(0x08)
	struct UNotificationManager* NotificationManager; // 0x48(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x50(0x08)
	struct TMap<struct FString, struct UAcceptSuccessWrapper*> OutgoingNotifications; // 0x58(0x50)

	void RemoveOutgoingNotification(struct FString ID); // Function ShooterGame.PartyNotificationManager.RemoveOutgoingNotification // (Final|Native|Public) // @ game+0x2f99a40
	void OnAcceptRequestError(struct FString Reason); // Function ShooterGame.PartyNotificationManager.OnAcceptRequestError // (Final|Native|Private) // @ game+0x2f99970
	void OnAcceptInviteError(struct FString Reason); // Function ShooterGame.PartyNotificationManager.OnAcceptInviteError // (Final|Native|Public) // @ game+0x2f998c0
	void HandleSocialPartyMessageRemoved(struct UPartyMessageModel* Message); // Function ShooterGame.PartyNotificationManager.HandleSocialPartyMessageRemoved // (Final|Native|Private) // @ game+0x2f99630
	void HandleSocialPartyMessageAdded(struct UPartyMessageModel* Message); // Function ShooterGame.PartyNotificationManager.HandleSocialPartyMessageAdded // (Final|Native|Private) // @ game+0x2f995a0
	void HandleSendInviteRequestSuccess(); // Function ShooterGame.PartyNotificationManager.HandleSendInviteRequestSuccess // (Final|Native|Private) // @ game+0x2f99580
	void HandleSendInviteRequestError(); // Function ShooterGame.PartyNotificationManager.HandleSendInviteRequestError // (Final|Native|Private) // @ game+0x2f99560
	void HandleRequestRemoved(struct UPartyMessageModel* Request); // Function ShooterGame.PartyNotificationManager.HandleRequestRemoved // (Final|Native|Private) // @ game+0x2f99440
	void HandleRequestAdded(struct UPartyMessageModel* Request); // Function ShooterGame.PartyNotificationManager.HandleRequestAdded // (Final|Native|Private) // @ game+0x2f994d0
	void HandleReceivedInviteRemoved(struct UPartyMessageModel* Invite); // Function ShooterGame.PartyNotificationManager.HandleReceivedInviteRemoved // (Final|Native|Private) // @ game+0x2f99440
	void HandleReceivedInviteAdded(struct UPartyMessageModel* Invite); // Function ShooterGame.PartyNotificationManager.HandleReceivedInviteAdded // (Final|Native|Private) // @ game+0x2f993b0
	void HandleDeclineRequestAction(struct UGenericNotification* Notification); // Function ShooterGame.PartyNotificationManager.HandleDeclineRequestAction // (Final|Native|Private) // @ game+0x2f99320
	void HandleDeclineInviteAction(struct UGenericNotification* Notification); // Function ShooterGame.PartyNotificationManager.HandleDeclineInviteAction // (Final|Native|Private) // @ game+0x2f99290
	void HandleAcceptRequestAction(struct UGenericNotification* Notification); // Function ShooterGame.PartyNotificationManager.HandleAcceptRequestAction // (Final|Native|Private) // @ game+0x2f99200
	void HandleAcceptInviteAction(struct UGenericNotification* Notification); // Function ShooterGame.PartyNotificationManager.HandleAcceptInviteAction // (Final|Native|Private) // @ game+0x2f99170
};

// Class ShooterGame.PartyPlayerModel
// Size: 0x1e8 (Inherited: 0x30)
struct UPartyPlayerModel : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnIsOwnerChanged; // 0x38(0x10)
	struct FMulticastInlineDelegate OnIsReadyChanged; // 0x48(0x10)
	struct FMulticastInlineDelegate OnSeasonalInfoChanged; // 0x58(0x10)
	struct FMulticastInlineDelegate OnCompetitiveTierChanged; // 0x68(0x10)
	struct FMulticastInlineDelegate OnQueueEligibleRemainingAccountLevelsChanged; // 0x78(0x10)
	struct FMulticastInlineDelegate OnQueueEligibleRemainingGamesChanged; // 0x88(0x10)
	struct FMulticastInlineDelegate OnQueueEligibleRemainingWinsChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnPingsChanged; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnIneligibleRosterPartyMemberReasonChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnIneligibleToPlayWithSubjectsChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnIsModeratorChanged; // 0xd8(0x10)
	struct FMulticastInlineDelegate OnUsingBroadcastHUDChanged; // 0xe8(0x10)
	int32_t CustomTeamSlotIndex; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct UPlatformPlayer* PlatformPlayer; // 0x100(0x08)
	int32_t CompetitiveTier; // 0x108(0x04)
	char pad_10C[0x6c]; // 0x10c(0x6c)
	int32_t QueueEligibleRemainingAccountLevels; // 0x178(0x04)
	char pad_17C[0x4]; // 0x17c(0x04)
	struct TArray<struct FPingInfo> Pings; // 0x180(0x10)
	struct TSet<struct FString> IneligibleToPlayWithSubjects; // 0x190(0x50)
	enum class ERosterPartyMemberEligibility IneligibleRosterPartyMemberReason; // 0x1e0(0x01)
	bool bOwner; // 0x1e1(0x01)
	bool bReady; // 0x1e2(0x01)
	bool bIsModerator; // 0x1e3(0x01)
	bool bUsingBroadcastHUD; // 0x1e4(0x01)
	char pad_1E5[0x3]; // 0x1e5(0x03)

	bool UsingBroadcastHUD(); // Function ShooterGame.PartyPlayerModel.UsingBroadcastHUD // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f99af0
	bool IsReady(); // Function ShooterGame.PartyPlayerModel.IsReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f99890
	bool IsOwner(); // Function ShooterGame.PartyPlayerModel.IsOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f99720
	bool IsModerator(); // Function ShooterGame.PartyPlayerModel.IsModerator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f996f0
	bool IsEligible(); // Function ShooterGame.PartyPlayerModel.IsEligible // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f996c0
	struct FString GetSubject(); // Function ShooterGame.PartyPlayerModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f99130
	struct FPartyMemberSeasonalInfo GetSeasonalInfo(); // Function ShooterGame.PartyPlayerModel.GetSeasonalInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f99080
	int32_t GetQueueEligibleRemainingWins(); // Function ShooterGame.PartyPlayerModel.GetQueueEligibleRemainingWins // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f99060
	int32_t GetQueueEligibleRemainingGames(); // Function ShooterGame.PartyPlayerModel.GetQueueEligibleRemainingGames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f99060
	int32_t GetQueueEligibleRemainingAccountLevels(); // Function ShooterGame.PartyPlayerModel.GetQueueEligibleRemainingAccountLevels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f99030
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.PartyPlayerModel.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f09260
	struct TArray<struct FPingInfo> GetPings(); // Function ShooterGame.PartyPlayerModel.GetPings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f98f40
	struct FPingInfo GetLowestPing(); // Function ShooterGame.PartyPlayerModel.GetLowestPing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f98eb0
	struct TSet<struct FString> GetIneligibleToPlayWithSubjects(); // Function ShooterGame.PartyPlayerModel.GetIneligibleToPlayWithSubjects // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f98db0
	enum class ERosterPartyMemberEligibility GetIneligibleRosterPartyMemberReason(); // Function ShooterGame.PartyPlayerModel.GetIneligibleRosterPartyMemberReason // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f98d80
	int32_t GetCompetitiveTier(); // Function ShooterGame.PartyPlayerModel.GetCompetitiveTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f98d50
	void DebugSetSeasonalInfo(struct FPartyMemberSeasonalInfo NewValue); // Function ShooterGame.PartyPlayerModel.DebugSetSeasonalInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x2f98c20
	bool CanPingGamePod(struct FString GamePod); // Function ShooterGame.PartyPlayerModel.CanPingGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x2f98b60
};

// Class ShooterGame.PartyService
// Size: 0x38 (Inherited: 0x30)
struct UPartyService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)

	bool IsOwner(struct FAresParty& Party, struct FString Subject); // Function ShooterGame.PartyService.IsOwner // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2f99750
};

// Class ShooterGame.PartyViewController
// Size: 0x148 (Inherited: 0x80)
struct UPartyViewController : UInitSystem {
	struct FMulticastInlineDelegate OnSendInviteSuccess; // 0x80(0x10)
	struct FMulticastInlineDelegate OnSendInviteFailure; // 0x90(0x10)
	struct UPartyModel* PartyModel; // 0xa0(0x08)
	struct UPartyManager* PartyManager; // 0xa8(0x08)
	struct UFriendsManager* FriendsManager; // 0xb0(0x08)
	struct UConfigManager* ConfigManager; // 0xb8(0x08)
	struct URSOManager* RSOManager; // 0xc0(0x08)
	struct UCoreGameManager* CoreGameManager; // 0xc8(0x08)
	struct UCustomGameManager* CustomGameManager; // 0xd0(0x08)
	struct UContentManager* ContentManager; // 0xd8(0x08)
	struct UPartyChatManager* PartyChatManager; // 0xe0(0x08)
	struct UMatchmakingManager* MatchmakingManager; // 0xe8(0x08)
	struct UContentIndex* ContentIndex; // 0xf0(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0xf8(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x100(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0x108(0x08)
	struct URosterManager* RosterManager; // 0x110(0x08)
	char pad_118[0x18]; // 0x118(0x18)
	struct UGameFeatureTogglesComponent* GameFeatureTogglesComponent; // 0x130(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x138(0x08)
	struct UNotificationManager* NotificationManager; // 0x140(0x08)

	bool TransferOwner(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.TransferOwner // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa14a0
	void StartCustomGame(struct FDelegate OnSuccess, struct FDelegate OnError, struct UObject* WorldContextObject); // Function ShooterGame.PartyViewController.StartCustomGame // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa1350
	void SetUseBots(bool UseBots); // Function ShooterGame.PartyViewController.SetUseBots // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa12c0
	void SetPreferredGamePod(struct FString GamePod, bool bIsSelected); // Function ShooterGame.PartyViewController.SetPreferredGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa11c0
	void SetPlayerModeratorStatus(struct FString Subject, bool ModeratorStatus); // Function ShooterGame.PartyViewController.SetPlayerModeratorStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa10c0
	void SetPlayerBroadcastHUDStatus(struct FString Subject, bool BroadcastHUDStatus); // Function ShooterGame.PartyViewController.SetPlayerBroadcastHUDStatus // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0fc0
	void SetMode(struct FString Mode); // Function ShooterGame.PartyViewController.SetMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0f10
	void SetMap(struct FString Map); // Function ShooterGame.PartyViewController.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0e60
	void SetGamePod(struct FString GamePod); // Function ShooterGame.PartyViewController.SetGamePod // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0db0
	void SetBooleanGameRule(enum class EGameRuleBoolName GameRuleName, bool GameRuleValue); // Function ShooterGame.PartyViewController.SetBooleanGameRule // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0ce0
	void SetAccessibility(enum class EAresPartyAccessibility Accessibility); // Function ShooterGame.PartyViewController.SetAccessibility // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0c60
	void RequestToJoin(struct FString PartyID, struct TArray<struct FString>& Subjects, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.RequestToJoin // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fa0a50
	void OnGameFlowStateUpdated(enum class EGameFlowStateType NewState); // Function ShooterGame.PartyViewController.OnGameFlowStateUpdated // (Final|Native|Private) // @ game+0x2fa09a0
	void OnChatSessionUpdated(); // Function ShooterGame.PartyViewController.OnChatSessionUpdated // (Final|Native|Private) // @ game+0x2fa0980
	void MakeRosterParty(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.MakeRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0800
	void LeaveParty(); // Function ShooterGame.PartyViewController.LeaveParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa07e0
	void LeaveMatchmaking(); // Function ShooterGame.PartyViewController.LeaveMatchmaking // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa07c0
	bool KickFromTournamentParty(struct FString RosterID, struct FString Subject, struct FDelegate CompletedCallback); // Function ShooterGame.PartyViewController.KickFromTournamentParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0640
	bool KickFromParty(struct FString Subject, struct FDelegate CompletedCallback); // Function ShooterGame.PartyViewController.KickFromParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0520
	void JoinTeam(enum class ETeam Team); // Function ShooterGame.PartyViewController.JoinTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa04a0
	bool JoinPartySolo(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.JoinPartySolo // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0320
	void JoinOrCreateRosterParty(struct FString RosterID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.JoinOrCreateRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa01a0
	void JoinMatchmaking(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.JoinMatchmaking // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0080
	bool IsServiceSideReadyCheckEnabled(); // Function ShooterGame.PartyViewController.IsServiceSideReadyCheckEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa0050
	bool HasInviteFromSubject(struct FString Subject); // Function ShooterGame.PartyViewController.HasInviteFromSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9ff60
	void HandleSendInviteSuccess(); // Function ShooterGame.PartyViewController.HandleSendInviteSuccess // (Final|Native|Public) // @ game+0x2f9ff40
	void HandleSendInviteFailure(); // Function ShooterGame.PartyViewController.HandleSendInviteFailure // (Final|Native|Public) // @ game+0x2f9ff20
	void HandlePlayerUpdated(); // Function ShooterGame.PartyViewController.HandlePlayerUpdated // (Final|Native|Private) // @ game+0x2f9ff00
	void HandlePartyUpdated(); // Function ShooterGame.PartyViewController.HandlePartyUpdated // (Final|Native|Private) // @ game+0x2f9fee0
	void HandleInviteActionSuccess(struct FString PartyID, enum class EPartyManagerInviteAction Action); // Function ShooterGame.PartyViewController.HandleInviteActionSuccess // (Final|Native|Private) // @ game+0x2f9fde0
	void HandleContentUpdated(); // Function ShooterGame.PartyViewController.HandleContentUpdated // (Final|Native|Private) // @ game+0x2f9fdc0
	struct TArray<struct FPingInfo> GetGamePodPingsSortedByOwnerLatency(struct FString Subject); // Function ShooterGame.PartyViewController.GetGamePodPingsSortedByOwnerLatency // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9f870
	struct TArray<struct FPingInfo> GetGamePodPings(struct FString Subject); // Function ShooterGame.PartyViewController.GetGamePodPings // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9f770
	void DeclineRequest(struct FString RequestID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.DeclineRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9f5f0
	void DeclineInvite(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.DeclineInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9f470
	void CreateInviteByDisplayName(struct FString DisplayName, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.CreateInviteByDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9f2f0
	void CreateInvite(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.CreateInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9f170
	void ConvertToPremierParty(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ConvertToPremierParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9f050
	void ConvertToMatchmakingParty(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ConvertToMatchmakingParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9eed0
	void ConvertToDefaultParty(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ConvertToDefaultParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9ed50
	void ConvertToCustomParty(struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ConvertToCustomParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9ec30
	void ChangeQueue(struct FString QueueID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.ChangeQueue // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9eab0
	void BalanceTeams(); // Function ShooterGame.PartyViewController.BalanceTeams // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9ea90
	void AcceptInviteByPlayerSubject(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.AcceptInviteByPlayerSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9e910
	void AcceptInvite(struct FString PartyID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.PartyViewController.AcceptInvite // (Final|Native|Public|BlueprintCallable) // @ game+0x2f9e790
};

// Class ShooterGame.PatchAvailabilityManager
// Size: 0xb8 (Inherited: 0x80)
struct UPatchAvailabilityManager : UInitSystem {
	struct FMulticastInlineDelegate OnPatchAvailable; // 0x80(0x10)
	bool bPatchAvailable; // 0x90(0x01)
	bool bInitialized; // 0x91(0x01)
	char pad_92[0x6]; // 0x92(0x06)
	struct UPatchAvailabilityService* PatchAvailabilityService; // 0x98(0x08)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	char pad_A8[0x10]; // 0xa8(0x10)

	bool IsPatchAvailable(); // Function ShooterGame.PatchAvailabilityManager.IsPatchAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fa0020
	struct UPatchAvailabilityManager* GetPatchAvailabilityManager(struct UObject* WorldContextObject); // Function ShooterGame.PatchAvailabilityManager.GetPatchAvailabilityManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f9f970
};

// Class ShooterGame.PatchAvailabilityService
// Size: 0x40 (Inherited: 0x30)
struct UPatchAvailabilityService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
	char pad_38[0x8]; // 0x38(0x08)
};

// Class ShooterGame.PatchManager
// Size: 0x168 (Inherited: 0x80)
struct UPatchManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnPatchPreviewDone; // 0x98(0x10)
	struct UPatchService* PatchService; // 0xa8(0x08)
	struct URiotProductManager* RiotProductManager; // 0xb0(0x08)
	struct URSOManager* RSOManager; // 0xb8(0x08)
	struct URiotClientConfigManager* RiotClientConfigManager; // 0xc0(0x08)
	struct ULocalePreferenceManager* LocalePreferenceManager; // 0xc8(0x08)
	char pad_D0[0x8]; // 0xd0(0x08)
	struct FString PatchUrl; // 0xd8(0x10)
	struct FString PatchState; // 0xe8(0x10)
	float PatchedPercentage; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct FString PatchPreviewState; // 0x100(0x10)
	uint64_t PatchPreviewDownloadMB; // 0x110(0x08)
	uint64_t PatchDiskSizeDiff; // 0x118(0x08)
	bool PatchFailed; // 0x120(0x01)
	bool PatchFiles; // 0x121(0x01)
	char pad_122[0x46]; // 0x122(0x46)

	bool PatchPreviewDone(); // Function ShooterGame.PatchManager.PatchPreviewDone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fa0a20
	float GetPercetagePatched(); // Function ShooterGame.PatchManager.GetPercetagePatched // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f9fda0
	int32_t GetPatchPReviewDownloadMB(); // Function ShooterGame.PatchManager.GetPatchPReviewDownloadMB // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f9fd80
	struct UPatchManager* GetPatchManager(struct UObject* WorldContextObject); // Function ShooterGame.PatchManager.GetPatchManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f9fa20
	int32_t GetPatchDiskSizeDiff(); // Function ShooterGame.PatchManager.GetPatchDiskSizeDiff // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f9fa00
};

// Class ShooterGame.PatchNotesManager
// Size: 0xa0 (Inherited: 0x30)
struct UPatchNotesManager : UObject {
	struct FPatchNotes CachedPatchNotes; // 0x30(0x40)
	char pad_70[0x18]; // 0x70(0x18)
	struct UPatchNotesService* PatchNotesService; // 0x88(0x08)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)

	enum class EAresPatchNoteType GetPatchNoteTypeFromString(struct FString Type); // Function ShooterGame.PatchNotesManager.GetPatchNoteTypeFromString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2f9fab0
	struct UPatchNotesManager* GetPatchNotesManager(struct UObject* WorldContextObject); // Function ShooterGame.PatchNotesManager.GetPatchNotesManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2f9fcf0
	void GetPatchNotes(struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PatchNotesManager.GetPatchNotes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2f9fbb0
};

// Class ShooterGame.PatchNotesService
// Size: 0x38 (Inherited: 0x30)
struct UPatchNotesService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PatchService
// Size: 0x38 (Inherited: 0x30)
struct UPatchService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.MobileVirtualCurrencyProduct
// Size: 0x78 (Inherited: 0x30)
struct UMobileVirtualCurrencyProduct : UObject {
	struct FString ProductId; // 0x30(0x10)
	struct FString Title; // 0x40(0x10)
	struct FString Description; // 0x50(0x10)
	int32_t Amount; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)
	struct FString FormattedPrice; // 0x68(0x10)
};

// Class ShooterGame.PaymentsManager
// Size: 0xd0 (Inherited: 0x80)
struct UPaymentsManager : UInitSystem {
	struct FMulticastInlineDelegate OnGetPurchaseURLSuccess; // 0x80(0x10)
	struct FMulticastInlineDelegate OnGetPurchaseURLError; // 0x90(0x10)
	struct FMulticastInlineDelegate OnMobileProductsChanged; // 0xa0(0x10)
	struct UPaymentsService* PaymentsService; // 0xb0(0x08)
	struct UConfigManager* ConfigManager; // 0xb8(0x08)
	struct TArray<struct UMobileVirtualCurrencyProduct*> VirtualCurrencyProducts; // 0xc0(0x10)

	void RefreshMobileProductList(); // Function ShooterGame.PaymentsManager.RefreshMobileProductList // (Final|Native|Private|BlueprintCallable) // @ game+0x2fa9f70
	void InitiateMobilePurchase(struct FString IAPProductId); // Function ShooterGame.PaymentsManager.InitiateMobilePurchase // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa9ad0
	bool GetVPPurchaseDisabled(); // Function ShooterGame.PaymentsManager.GetVPPurchaseDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fa9990
	struct TArray<struct UMobileVirtualCurrencyProduct*> GetVirtualCurrencyProducts(); // Function ShooterGame.PaymentsManager.GetVirtualCurrencyProducts // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fa99c0
	void GetPurchaseGameCurrencyURL(); // Function ShooterGame.PaymentsManager.GetPurchaseGameCurrencyURL // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa9970
};

// Class ShooterGame.PaymentsService
// Size: 0x38 (Inherited: 0x30)
struct UPaymentsService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.ZoomLevelStateComponent
// Size: 0x3d0 (Inherited: 0x368)
struct UZoomLevelStateComponent : URespondToEventStateComponent {
	enum class EZoomStateLevel ZoomLevel; // 0x368(0x01)
	char pad_369[0x7]; // 0x369(0x07)
	struct FMulticastInlineDelegate OnRejectZoomInvalidState; // 0x370(0x10)
	bool bCanInterruptTransitions; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)
	struct UEquippableStateMachineComponent* PrimaryStateMachine; // 0x388(0x08)
	struct UScriptStateComponent* ZoomDisabledState; // 0x390(0x08)
	struct TArray<struct UFiringStateComponent*> FiringStates; // 0x398(0x10)
	enum class EZoomFiringBehavior FiringBehavior; // 0x3a8(0x01)
	char pad_3A9[0x7]; // 0x3a9(0x07)
	struct UZoomComponent* ZoomComponent; // 0x3b0(0x08)
	struct AShooterCharacter* CurrentOwningCharacter; // 0x3b8(0x08)
	struct TArray<struct FZoomValidStates> ValidStates; // 0x3c0(0x10)

	void ZoomTransitionStatusChanged(struct UZoomComponent* InZoomComponent); // Function ShooterGame.ZoomLevelStateComponent.ZoomTransitionStatusChanged // (Final|Native|Private) // @ game+0x31995b0
	void ZoomDisabledChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ZoomLevelStateComponent.ZoomDisabledChanged // (Final|Native|Private|HasOutParms) // @ game+0x31993e0
	void SetZoomDisabledState(struct UScriptStateComponent* DisabledState); // Function ShooterGame.ZoomLevelStateComponent.SetZoomDisabledState // (Final|Native|Public|BlueprintCallable) // @ game+0x3199200
	void SetValidStates(struct TArray<struct UScriptStateComponent*>& StateList, bool bInvalidStates, struct UScriptStateComponent* StateToTransitionTo); // Function ShooterGame.ZoomLevelStateComponent.SetValidStates // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x31990b0
	void SetFiringBehavior(struct TArray<struct UFiringStateComponent*>& NewFiringStates, enum class EZoomFiringBehavior Behavior); // Function ShooterGame.ZoomLevelStateComponent.SetFiringBehavior // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3198fb0
	void PrimaryStateChanged(struct UStateComponent* OldState, struct UStateComponent* EnteredState); // Function ShooterGame.ZoomLevelStateComponent.PrimaryStateChanged // (Final|Native|Private) // @ game+0x3198ee0
	void HandleReadyToFire(struct UFiringStateComponent* FiringState); // Function ShooterGame.ZoomLevelStateComponent.HandleReadyToFire // (Final|Native|Private) // @ game+0x3198b90
	void ClearValidStates(); // Function ShooterGame.ZoomLevelStateComponent.ClearValidStates // (Final|Native|Public|BlueprintCallable) // @ game+0x3198b50
};

// Class ShooterGame.PendingZoomLevelStateComponent
// Size: 0x3d8 (Inherited: 0x3d0)
struct UPendingZoomLevelStateComponent : UZoomLevelStateComponent {
	struct UZoomLevelStateComponent* PendingReturnState; // 0x3d0(0x08)

	void SetPendingReturnState(struct UZoomLevelStateComponent* ReturnState); // Function ShooterGame.PendingZoomLevelStateComponent.SetPendingReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x2faa280
};

// Class ShooterGame.PersonalizationComponent
// Size: 0x100 (Inherited: 0xe8)
struct UPersonalizationComponent : UActorComponent {
	struct TArray<struct FEquippableMapping> SelectedV2; // 0xe8(0x10)
	struct UContentIndex* ContentIndex; // 0xf8(0x08)

	void ServerAddForcedAttachmentsToSelection(); // Function ShooterGame.PersonalizationComponent.ServerAddForcedAttachmentsToSelection // (Final|Native|Private) // @ game+0x2faa060
	struct AAresItem* AuthSpawnItemFromDataAsset(struct UEquippableDataAsset* ItemDataAsset); // Function ShooterGame.PersonalizationComponent.AuthSpawnItemFromDataAsset // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x2d2b840
	struct AAresItem* AuthSpawnItemFromBase(struct AAresItem* item); // Function ShooterGame.PersonalizationComponent.AuthSpawnItemFromBase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|Const) // @ game+0x2d2b840
};

// Class ShooterGame.PersonalizationManagerV2
// Size: 0x2b8 (Inherited: 0x80)
struct UPersonalizationManagerV2 : UInitSystem {
	char pad_80[0x128]; // 0x80(0x128)
	struct FPlayerMapping PlayerMapping; // 0x1a8(0x68)
	struct UPersonalizationService* PersonalizationService; // 0x210(0x08)
	struct UConfigManager* ConfigManager; // 0x218(0x08)
	struct URSOManager* RSOManager; // 0x220(0x08)
	struct URMSManager* RMSManager; // 0x228(0x08)
	struct UContentIndex* ContentIndex; // 0x230(0x08)
	struct UContentManager* ContentManager; // 0x238(0x08)
	struct UStoreManager* StoreManager; // 0x240(0x08)
	struct UInventoryManager* InventoryManager; // 0x248(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x250(0x08)
	char pad_258[0x30]; // 0x258(0x30)
	struct FMulticastInlineDelegate OnPlayerCardsEnabledChanged; // 0x288(0x10)
	struct FMulticastInlineDelegate OnPlayerTitlesEnabledChanged; // 0x298(0x10)
	struct FMulticastInlineDelegate OnIncognitoChanged; // 0x2a8(0x10)

	bool UseWidePlayerIdentityV2(); // Function ShooterGame.PersonalizationManagerV2.UseWidePlayerIdentityV2 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2faa350
	void UpdatePlayerMapping(); // Function ShooterGame.PersonalizationManagerV2.UpdatePlayerMapping // (Final|Native|Private) // @ game+0x2faa330
	void SetIncognito(bool NewValue); // Function ShooterGame.PersonalizationManagerV2.SetIncognito // (Final|Native|Public|BlueprintCallable) // @ game+0x2faa1f0
	void SetHideAccountLevel(bool bHideAccountLevel); // Function ShooterGame.PersonalizationManagerV2.SetHideAccountLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x2faa160
	bool PreferredLevelBordersIsEnabled(); // Function ShooterGame.PersonalizationManagerV2.PreferredLevelBordersIsEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fa9dc0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PersonalizationManagerV2.OnBugCommand // (Final|Native|Private) // @ game+0x2fa9c00
	bool IsIncognito(); // Function ShooterGame.PersonalizationManagerV2.IsIncognito // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fa9bd0
	void HandlePlayerTitlesEnabledChanged(); // Function ShooterGame.PersonalizationManagerV2.HandlePlayerTitlesEnabledChanged // (Final|Native|Private) // @ game+0x2fa9ab0
	void HandlePlayerCardsEnabledChanged(); // Function ShooterGame.PersonalizationManagerV2.HandlePlayerCardsEnabledChanged // (Final|Native|Private) // @ game+0x2fa9a90
	struct UPersonalizationManagerV2* GetPersonalizationManagerV2(struct UObject* WorldContextObject); // Function ShooterGame.PersonalizationManagerV2.GetPersonalizationManagerV2 // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fa98a0
};

// Class ShooterGame.PersonalizationService
// Size: 0x38 (Inherited: 0x30)
struct UPersonalizationService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PingRequest
// Size: 0x148 (Inherited: 0x80)
struct UPingRequest : UInitSystem {
	char pad_80[0xb0]; // 0x80(0xb0)
	struct UPingManager* PingManager; // 0x130(0x08)
	char pad_138[0x10]; // 0x138(0x10)
};

// Class ShooterGame.PingService
// Size: 0x38 (Inherited: 0x30)
struct UPingService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PingManager
// Size: 0x1b0 (Inherited: 0x80)
struct UPingManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct UPlatformSessionManager* SessionManager; // 0x98(0x08)
	struct UPartyManager* PartyManager; // 0xa0(0x08)
	struct UPingService* PingService; // 0xa8(0x08)
	struct UConfigManager* ConfigManager; // 0xb0(0x08)
	struct UObject* Outer; // 0xb8(0x08)
	char pad_C0[0x8]; // 0xc0(0x08)
	struct TMap<struct FString, struct FPingRequestContainer> PingRequestsByEndpointName; // 0xc8(0x50)
	struct TMap<struct FString, struct FPingRequestContainer> InProgressPingRequestsByEndpointName; // 0x118(0x50)
	char pad_168[0x48]; // 0x168(0x48)

	void UpdatePings(); // Function ShooterGame.PingManager.UpdatePings // (Final|Native|Private) // @ game+0x2faa310
	void RequestRefresh(); // Function ShooterGame.PingManager.RequestRefresh // (Final|Native|Private) // @ game+0x2faa040
	void ProcessPingPacketReceived(struct FString& Destination, struct FString& DestinationAddress, int32_t PingInMillis); // Function ShooterGame.PingManager.ProcessPingPacketReceived // (Final|Native|Public|HasOutParms) // @ game+0x2fa9df0
	void OnCustomGameConfigFetched(); // Function ShooterGame.PingManager.OnCustomGameConfigFetched // (Final|Native|Private) // @ game+0x2fa9d60
};

// Class ShooterGame.PipResourceComponent
// Size: 0x120 (Inherited: 0x118)
struct UPipResourceComponent : UResourceComponent {
	int32_t MaxPips; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)

	int32_t GetMaxPips(); // Function ShooterGame.PipResourceComponent.GetMaxPips // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f9fa00
	void AuthResetPips(); // Function ShooterGame.PipResourceComponent.AuthResetPips // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
};

// Class ShooterGame.PlacementTargetingStateComponent
// Size: 0x560 (Inherited: 0x368)
struct UPlacementTargetingStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnValidTargetSelected; // 0x368(0x10)
	struct FMulticastInlineDelegate OnInvalidTargetSelected; // 0x378(0x10)
	float MaxTargetHeightFromFloor; // 0x388(0x04)
	char pad_38C[0x4]; // 0x38c(0x04)
	struct TArray<struct FName> TagsPreventingPlacement; // 0x390(0x10)
	bool bCanPlaceOnGameObjects; // 0x3a0(0x01)
	bool bLimitHeightAbovePlayerFloor; // 0x3a1(0x01)
	char pad_3A2[0x2]; // 0x3a2(0x02)
	float MaxTargetHeightFromPlayerFloor; // 0x3a4(0x04)
	char pad_3A8[0x8]; // 0x3a8(0x08)
	struct FTransform PlacementOffset; // 0x3b0(0x30)
	float PlacementRadius; // 0x3e0(0x04)
	float PlacementWallBuffer; // 0x3e4(0x04)
	bool bPlaceFlat; // 0x3e8(0x01)
	char pad_3E9[0x3]; // 0x3e9(0x03)
	float WallAngle; // 0x3ec(0x04)
	bool bWalkableRequired; // 0x3f0(0x01)
	bool bEncroachCheck; // 0x3f1(0x01)
	enum class EEncroachCheckFailureMode EncroachCheckFailureMode; // 0x3f2(0x01)
	bool bEncroachUsesIgnoredActors; // 0x3f3(0x01)
	float EncroachCheckBuffer; // 0x3f4(0x04)
	float EncroachCheckHalfHeight; // 0x3f8(0x04)
	float EncroachCheckRadius; // 0x3fc(0x04)
	enum class ECollisionChannel EncroachChannel; // 0x400(0x01)
	enum class ENavmeshProjection NavmeshProjection; // 0x401(0x01)
	char pad_402[0x2]; // 0x402(0x02)
	struct FVector NavmeshSearchExtents; // 0x404(0x0c)
	bool bLineOfSightRequired; // 0x410(0x01)
	char pad_411[0x7]; // 0x411(0x07)
	struct TArray<float> LineOfSightTargetOffsets; // 0x418(0x10)
	bool bLedgePlacement; // 0x428(0x01)
	char pad_429[0x3]; // 0x429(0x03)
	float LedgeSearchDistance; // 0x42c(0x04)
	float TargetingRange; // 0x430(0x04)
	float TargetingMaxHeight; // 0x434(0x04)
	bool OthersSeeTargeting; // 0x438(0x01)
	enum class ECollisionChannel TraceChannel; // 0x439(0x01)
	char pad_43A[0x2]; // 0x43a(0x02)
	struct FHitResult LastHitResult; // 0x43c(0x94)
	char pad_4D0[0x30]; // 0x4d0(0x30)
	bool bDrawDebugTargeting; // 0x500(0x01)
	char pad_501[0x1f]; // 0x501(0x1f)
	struct TArray<struct AActor*> ActorsIgnoredForTraces; // 0x520(0x10)
	float FloorTraceAboveNavmeshHeight; // 0x530(0x04)
	float FloorTraceBelowNavmeshHeight; // 0x534(0x04)
	bool bIgnoreShooterCharacters; // 0x538(0x01)
	char pad_539[0x7]; // 0x539(0x07)
	struct TArray<struct AShooterCharacter*> CachedShooterCharacters; // 0x540(0x10)
	char pad_550[0x10]; // 0x550(0x10)

	void SetAdjustedPlacement(struct FTransform& NewTransform); // Function ShooterGame.PlacementTargetingStateComponent.SetAdjustedPlacement // (Final|Native|Protected|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2faa080
	void ReportServerPlacementInvalid(struct FString Error); // Function ShooterGame.PlacementTargetingStateComponent.ReportServerPlacementInvalid // (Final|Native|Private|Const) // @ game+0x2fa9f90
	bool PlacementIsValid(); // Function ShooterGame.PlacementTargetingStateComponent.PlacementIsValid // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x2fa9d80
	struct FTransform GetPlacementResult(); // Function ShooterGame.PlacementTargetingStateComponent.GetPlacementResult // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fa9930
	void ClientReportServerPlacementInvalid(struct FString Error); // Function ShooterGame.PlacementTargetingStateComponent.ClientReportServerPlacementInvalid // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x2fa97e0
	void AdjustTargeting(); // Function ShooterGame.PlacementTargetingStateComponent.AdjustTargeting // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void AddCancelTargetingResponse(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction, struct UStateComponent* ChangeToState, float ResponseDelay, bool bCanRespondOutOfGameplay, bool bCanRespondWhileSuppressed); // Function ShooterGame.PlacementTargetingStateComponent.AddCancelTargetingResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x2fa95f0
};

// Class ShooterGame.PlatformDelegates
// Size: 0x30 (Inherited: 0x30)
struct UPlatformDelegates : UObject {
};

// Class ShooterGame.PlatformFaultedStateV2
// Size: 0x90 (Inherited: 0x90)
struct UPlatformFaultedStateV2 : UStaticGameFlowState {
};

// Class ShooterGame.PlatformInitializerV2
// Size: 0xa0 (Inherited: 0x30)
struct UPlatformInitializerV2 : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TMap<struct UInitSystem*, struct FPlatformInitializerEntry> Systems; // 0x48(0x50)
	enum class EAresPlatformInitStatus Status; // 0x98(0x01)
	bool bAdvancing; // 0x99(0x01)
	bool bPendingAdvance; // 0x9a(0x01)
	bool bMinimumPlatformInit; // 0x9b(0x01)
	enum class EPlatformInitErrorReason FailureReason; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)

	bool CheckTimeouts(float DeltaTime); // Function ShooterGame.PlatformInitializerV2.CheckTimeouts // (Final|Native|Protected) // @ game+0x2fb4a30
};

// Class ShooterGame.PlatformInitSettingsManager
// Size: 0x88 (Inherited: 0x80)
struct UPlatformInitSettingsManager : UInitSystem {
	char pad_80[0x8]; // 0x80(0x08)
};

// Class ShooterGame.PlatformMetricsScaler
// Size: 0x170 (Inherited: 0x160)
struct UPlatformMetricsScaler : UPanelWidget {
	char pad_160[0x10]; // 0x160(0x10)
};

// Class ShooterGame.PlatformMetricsScalerSlot
// Size: 0x50 (Inherited: 0x40)
struct UPlatformMetricsScalerSlot : UPanelSlot {
	char pad_40[0x10]; // 0x40(0x10)
};

// Class ShooterGame.PlatformPlayer
// Size: 0x568 (Inherited: 0x30)
struct UPlatformPlayer : UObject {
	struct FMulticastInlineDelegate OnTrueDisplayNameChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnAnonymizedDisplayNameChanged; // 0x40(0x10)
	char pad_50[0x10]; // 0x50(0x10)
	struct FMulticastInlineDelegate OnClientVersionChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnPresenceStateChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnProductChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnIsValidAresPresenceChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnSessionLoopStateChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnPartyOwnerSessionLoopStateChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnPartyOwnerMatchMapChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnProvisioningFlowChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnPartyOwnerProvisioningFlowChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPartyOwnerMatchScoreChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnMatchMapChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnPartyIDChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnIsPartyOwnerChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnPartyStateChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnPartyAccessibilityChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnPartyClientVersionChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnIsInvitableChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnIsOwnerTransferrableChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnIsKickableChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnIsInvitedChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnIsFriendChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnQueueIDChanged; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnQueueEntryTimeChanged; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnTournamentDataChanged; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnPlayerCardChanged; // 0x200(0x10)
	struct FMulticastInlineDelegate OnPlayerTitleChanged; // 0x210(0x10)
	struct FMulticastInlineDelegate OnLoyaltyStatusChanged; // 0x220(0x10)
	struct FMulticastInlineDelegate OnActiveSubscriptionsChanged; // 0x230(0x10)
	struct FMulticastInlineDelegate OnSeasonBadgeInfoChanged; // 0x240(0x10)
	struct FMulticastInlineDelegate OnAccountLevelChanged; // 0x250(0x10)
	struct FMulticastInlineDelegate OnLevelBorderChanged; // 0x260(0x10)
	struct FMulticastInlineDelegate OnHideAccountLevelChanged; // 0x270(0x10)
	struct FMulticastInlineDelegate OnCompetitiveTierChanged; // 0x280(0x10)
	struct FMulticastInlineDelegate OnLeaderboardPositionChanged; // 0x290(0x10)
	char pad_2A0[0x1b0]; // 0x2a0(0x1b0)
	bool HideAccountLevel; // 0x450(0x01)
	char pad_451[0x3]; // 0x451(0x03)
	int32_t AccountLevel; // 0x454(0x04)
	int32_t CompetitiveTier; // 0x458(0x04)
	int32_t LeaderboardPosition; // 0x45c(0x04)
	char pad_460[0xf8]; // 0x460(0xf8)
	struct TArray<struct USubscriptionDataAsset*> ActiveSubscriptions; // 0x558(0x10)

	bool PlayerHasAccessToAllAgentsFromSubscription(); // Function ShooterGame.PlatformPlayer.PlayerHasAccessToAllAgentsFromSubscription // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fb5690
	bool IsPlayerInRosterParty(struct FString RosterID); // Function ShooterGame.PlatformPlayer.IsPlayerInRosterParty // (Final|Native|Public|BlueprintCallable) // @ game+0x2fb5580
	bool IsInvited(); // Function ShooterGame.PlatformPlayer.IsInvited // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5560
	bool IsFriend(); // Function ShooterGame.PlatformPlayer.IsFriend // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5540
	struct FDisplayName GetTrueDisplayName(); // Function ShooterGame.PlatformPlayer.GetTrueDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb54e0
	struct FTournamentData GetTournamentData(); // Function ShooterGame.PlatformPlayer.GetTournamentData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5310
	struct FString GetSubject(); // Function ShooterGame.PlatformPlayer.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb52e0
	enum class ESessionLoopState GetSessionLoopState(); // Function ShooterGame.PlatformPlayer.GetSessionLoopState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb52c0
	struct FMMRSeasonBadgeInfo GetSeasonBadgeInfo(); // Function ShooterGame.PlatformPlayer.GetSeasonBadgeInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb51f0
	struct FString GetQueueID(); // Function ShooterGame.PlatformPlayer.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5110
	struct FDateTime GetQueueEntryTime(); // Function ShooterGame.PlatformPlayer.GetQueueEntryTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb50f0
	enum class EProvisioningFlowID GetProvisioningFlow(); // Function ShooterGame.PlatformPlayer.GetProvisioningFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb50d0
	enum class EChatPresenceProduct GetProduct(); // Function ShooterGame.PlatformPlayer.GetProduct // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb50b0
	enum class EChatPresenceState GetPresenceState(); // Function ShooterGame.PlatformPlayer.GetPresenceState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5090
	struct UPlayerTitleDataAsset* GetPlayerTitle(); // Function ShooterGame.PlatformPlayer.GetPlayerTitle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5070
	struct UPlayerCardDataAsset* GetPlayerCard(); // Function ShooterGame.PlatformPlayer.GetPlayerCard // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5050
	enum class EAresPartyState GetPartyState(); // Function ShooterGame.PlatformPlayer.GetPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5030
	int32_t GetPartySize(); // Function ShooterGame.PlatformPlayer.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb5010
	enum class ESessionLoopState GetPartyOwnerSessionLoopState(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerSessionLoopState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4ff0
	enum class EProvisioningFlowID GetPartyOwnerProvisioningFlow(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerProvisioningFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4fd0
	int32_t GetPartyOwnerMatchScoreEnemyTeam(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerMatchScoreEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4fb0
	int32_t GetPartyOwnerMatchScoreAllyTeam(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerMatchScoreAllyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4f90
	struct FString GetPartyOwnerMatchMap(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerMatchMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4f60
	struct FString GetPartyOwnerMatchCurrentTeam(); // Function ShooterGame.PlatformPlayer.GetPartyOwnerMatchCurrentTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4f30
	struct FString GetPartyID(); // Function ShooterGame.PlatformPlayer.GetPartyID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4f00
	struct FString GetPartyClientVersion(); // Function ShooterGame.PlatformPlayer.GetPartyClientVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4ed0
	enum class EAresPartyAccessibility GetPartyAccessibility(); // Function ShooterGame.PlatformPlayer.GetPartyAccessibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4eb0
	int32_t GetMaxPartySize(); // Function ShooterGame.PlatformPlayer.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4e90
	struct FString GetMatchMap(); // Function ShooterGame.PlatformPlayer.GetMatchMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4e60
	bool GetLoyaltyStatus(); // Function ShooterGame.PlatformPlayer.GetLoyaltyStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4e40
	struct ULevelBorderDataAsset* GetLevelBorder(); // Function ShooterGame.PlatformPlayer.GetLevelBorder // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4e20
	int32_t GetLeaderboardPosition(); // Function ShooterGame.PlatformPlayer.GetLeaderboardPosition // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4e00
	bool GetIsValidAresPresence(); // Function ShooterGame.PlatformPlayer.GetIsValidAresPresence // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4de0
	bool GetIsPartyOwner(); // Function ShooterGame.PlatformPlayer.GetIsPartyOwner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4dc0
	bool GetIsOwnerTransferrable(); // Function ShooterGame.PlatformPlayer.GetIsOwnerTransferrable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4da0
	bool GetIsMe(); // Function ShooterGame.PlatformPlayer.GetIsMe // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4d80
	bool GetIsKickable(); // Function ShooterGame.PlatformPlayer.GetIsKickable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4d60
	bool GetIsInvitable(); // Function ShooterGame.PlatformPlayer.GetIsInvitable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4d40
	bool GetIsAnonymous(); // Function ShooterGame.PlatformPlayer.GetIsAnonymous // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4d20
	int32_t GetHighestXPBoostFromSubscription(); // Function ShooterGame.PlatformPlayer.GetHighestXPBoostFromSubscription // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fb4cf0
	bool GetHideAccountLevel(); // Function ShooterGame.PlatformPlayer.GetHideAccountLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4cd0
	int32_t GetCompetitiveTier(); // Function ShooterGame.PlatformPlayer.GetCompetitiveTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4cb0
	struct FString GetClientVersion(); // Function ShooterGame.PlatformPlayer.GetClientVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4c80
	struct FDisplayName GetAnonymizedDisplayName(); // Function ShooterGame.PlatformPlayer.GetAnonymizedDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fb4c20
	void DebugSetSeasonBadgeInfo(struct FMMRSeasonBadgeInfo NewValue); // Function ShooterGame.PlatformPlayer.DebugSetSeasonBadgeInfo // (Final|Native|Public) // @ game+0x2fb4ac0
};

// Class ShooterGame.PlatformPlayerManager
// Size: 0x150 (Inherited: 0x80)
struct UPlatformPlayerManager : UInitSystem {
	struct UPresenceManager* PresenceManager; // 0x80(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x88(0x08)
	struct URSOManager* RSOManager; // 0x90(0x08)
	struct UPartyManager* PartyManager; // 0x98(0x08)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0xa8(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0xb0(0x08)
	struct UFriendsModel* FriendsModel; // 0xb8(0x08)
	struct UPartyModel* PartyModel; // 0xc0(0x08)
	struct UContentIndex* ContentIndex; // 0xc8(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0xd0(0x08)
	struct UAccountXPManager* AccountXPManager; // 0xd8(0x08)
	struct UCoreGameManager* CoreGameManager; // 0xe0(0x08)
	struct UStoreManager* StoreManager; // 0xe8(0x08)
	struct UPregameManager* PregameManager; // 0xf0(0x08)
	struct TMap<struct FString, struct TWeakObjectPtr<struct UPlatformPlayer>> PlayerCache; // 0xf8(0x50)
	bool bShouldUpdatePresences; // 0x148(0x01)
	char pad_149[0x7]; // 0x149(0x07)

	void UpdatePlayerWithPresenceInfo(struct UPlatformPlayer* Player, struct FAresPresenceInfo& PresenceInfo); // Function ShooterGame.PlatformPlayerManager.UpdatePlayerWithPresenceInfo // (Final|Native|Private|HasOutParms) // @ game+0x2fc1730
	void SetForceAllowPresencesUpdate(bool bNewValue); // Function ShooterGame.PlatformPlayerManager.SetForceAllowPresencesUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc0ea0
	void OnSentInvitesUpdated(struct UPartyMessageModel* MessageModel); // Function ShooterGame.PlatformPlayerManager.OnSentInvitesUpdated // (Final|Native|Private) // @ game+0x2fc0e10
	void OnGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.PlatformPlayerManager.OnGameFlowStateChanged // (Final|Native|Private) // @ game+0x2fc0d90
	void HandleSubscriptionStateUpdated(); // Function ShooterGame.PlatformPlayerManager.HandleSubscriptionStateUpdated // (Final|Native|Private) // @ game+0x2fc0a60
	void HandlePresencesUpdated(); // Function ShooterGame.PlatformPlayerManager.HandlePresencesUpdated // (Final|Native|Private) // @ game+0x2fc0a40
	void HandlePregameMatchUpdated(); // Function ShooterGame.PlatformPlayerManager.HandlePregameMatchUpdated // (Final|Native|Private) // @ game+0x2fc0a20
	void HandlePersonalizationUpdated(); // Function ShooterGame.PlatformPlayerManager.HandlePersonalizationUpdated // (Final|Native|Private) // @ game+0x2fc06f0
	void HandlePartyUpdated(); // Function ShooterGame.PlatformPlayerManager.HandlePartyUpdated // (Final|Native|Private) // @ game+0x2fc0a00
	void HandlePartyMemberRemoved(struct UPartyPlayerModel* PartyPlayerModel); // Function ShooterGame.PlatformPlayerManager.HandlePartyMemberRemoved // (Final|Native|Private) // @ game+0x2fc0970
	void HandlePartyMemberAdded(struct UPartyPlayerModel* PartyPlayerModel); // Function ShooterGame.PlatformPlayerManager.HandlePartyMemberAdded // (Final|Native|Private) // @ game+0x2fc0970
	void HandleHidePlayerNamesSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.PlatformPlayerManager.HandleHidePlayerNamesSettingChanged // (Final|Native|Private) // @ game+0x2fc0850
	void HandleFriendRemoved(struct UFriendModel* FriendModel); // Function ShooterGame.PlatformPlayerManager.HandleFriendRemoved // (Final|Native|Private) // @ game+0x2fc07c0
	void HandleFriendAdded(struct UFriendModel* FriendModel); // Function ShooterGame.PlatformPlayerManager.HandleFriendAdded // (Final|Native|Private) // @ game+0x2fc0730
	void HandleCoreGameMatchUpdated(); // Function ShooterGame.PlatformPlayerManager.HandleCoreGameMatchUpdated // (Final|Native|Private) // @ game+0x2fc0710
	void HandleAccountXPUpdated(); // Function ShooterGame.PlatformPlayerManager.HandleAccountXPUpdated // (Final|Native|Private) // @ game+0x2fc06f0
	struct UPlatformPlayer* GetPlayerBySubject(struct FString Subject); // Function ShooterGame.PlatformPlayerManager.GetPlayerBySubject // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc0090
	struct UPlatformPlayer* GetPlayerByGameNameAndTag(struct FString GameName, struct FString Tag); // Function ShooterGame.PlatformPlayerManager.GetPlayerByGameNameAndTag // (Final|Native|Public|BlueprintCallable) // @ game+0x2fbff70
	struct UPlatformPlayer* GetPlayerByDisplayName(struct FString DisplayName); // Function ShooterGame.PlatformPlayerManager.GetPlayerByDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x2fbfeb0
	struct UPlatformPlayer* GetPlayerByChatPid(struct FString Pid); // Function ShooterGame.PlatformPlayerManager.GetPlayerByChatPid // (Final|Native|Public|BlueprintCallable) // @ game+0x2fbfdf0
	struct UPlatformPlayer* GetPlayerByChatAddressableName(struct FString DisplayName); // Function ShooterGame.PlatformPlayerManager.GetPlayerByChatAddressableName // (Final|Native|Public|BlueprintCallable) // @ game+0x2fbfd30
	struct UPlatformPlayerManager* GetPlatformPlayerManager(struct UObject* WorldContextObject); // Function ShooterGame.PlatformPlayerManager.GetPlatformPlayerManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fbfb80
	struct UPlatformPlayer* GetLocalPlatformPlayer(); // Function ShooterGame.PlatformPlayerManager.GetLocalPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fbf7b0
	struct TArray<struct UPlatformPlayer*> GetFriendsByGameName(struct FString GameName); // Function ShooterGame.PlatformPlayerManager.GetFriendsByGameName // (Final|Native|Public|BlueprintCallable) // @ game+0x2fbf650
	void ForcePresencesUpdated(); // Function ShooterGame.PlatformPlayerManager.ForcePresencesUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x2fbf470
	void DebugSetSeasonBadgeInfo(struct FString Subject, struct FMMRSeasonBadgeInfo SeasonBadgeInfo); // Function ShooterGame.PlatformPlayerManager.DebugSetSeasonBadgeInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x2fbf2b0
	void AnonymizePregamePlayers(); // Function ShooterGame.PlatformPlayerManager.AnonymizePregamePlayers // (Final|Native|Private) // @ game+0x2fbef90
	void AnonymizeCoreGamePlayers(); // Function ShooterGame.PlatformPlayerManager.AnonymizeCoreGamePlayers // (Final|Native|Private) // @ game+0x2fbef70
};

// Class ShooterGame.PlatformSessionManager
// Size: 0x208 (Inherited: 0x80)
struct UPlatformSessionManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnSessionLoopStateChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnPlaytimeNotification; // 0xa8(0x10)
	char pad_B8[0x50]; // 0xb8(0x50)
	struct FSessionDTO Session; // 0x108(0xb8)
	char pad_1C0[0x8]; // 0x1c0(0x08)
	struct USessionService* SessionService; // 0x1c8(0x08)
	struct URSOManager* RSOManager; // 0x1d0(0x08)
	struct URMSManager* RMSManager; // 0x1d8(0x08)
	struct UConfigManager* ConfigManager; // 0x1e0(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x1e8(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x1f0(0x08)
	struct ULoginQueueManager* LoginQueueManager; // 0x1f8(0x08)
	char pad_200[0x8]; // 0x200(0x08)

	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PlatformSessionManager.OnBugCommand // (Final|Native|Private) // @ game+0x2fc0c30
	bool IsSessionValid(); // Function ShooterGame.PlatformSessionManager.IsSessionValid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fc0c00
	struct FSessionDTO GetSession(); // Function ShooterGame.PlatformSessionManager.GetSession // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fc0180
	enum class ESessionLoopState GetPreviousLoopState(); // Function ShooterGame.PlatformSessionManager.GetPreviousLoopState // (Final|Native|Public|Const) // @ game+0x2fc0150
	struct UPlatformSessionManager* GetPlatformSessionManager(struct UObject* WorldContextObject); // Function ShooterGame.PlatformSessionManager.GetPlatformSessionManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fbfc10
	struct FDateTime GetLoginRestrictionExpiry(); // Function ShooterGame.PlatformSessionManager.GetLoginRestrictionExpiry // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fbf7e0
	enum class ESessionLoopState GetCurrentLoopState(); // Function ShooterGame.PlatformSessionManager.GetCurrentLoopState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fbf500
};

// Class ShooterGame.PlaybackManager
// Size: 0x58 (Inherited: 0x30)
struct UPlaybackManager : UObject {
	char pad_30[0x28]; // 0x30(0x28)
};

// Class ShooterGame.PlayerAffinityManager
// Size: 0x118 (Inherited: 0x80)
struct UPlayerAffinityManager : UInitSystem {
	struct URiotClientConfigManager* RiotClientConfigManager; // 0x80(0x08)
	char pad_88[0x8]; // 0x88(0x08)
	struct UPlayerAffinityService* PlayerAffinityService; // 0x90(0x08)
	struct FString Affinity; // 0x98(0x10)
	struct FPlayerAffinityToken AffinityToken; // 0xa8(0x10)
	struct FString GameShardZoneOverride; // 0xb8(0x10)
	struct FString PlayerAffinityOverride; // 0xc8(0x10)
	bool bIgnorePlayerAffinity; // 0xd8(0x01)
	char pad_D9[0x3f]; // 0xd9(0x3f)

	struct UPlayerAffinityManager* GetPlayerAffinityManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerAffinityManager.GetPlayerAffinityManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fbfca0
	struct FString GetGameShardZone(); // Function ShooterGame.PlayerAffinityManager.GetGameShardZone // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fbf750
	struct FString GetAffinityToken(); // Function ShooterGame.PlayerAffinityManager.GetAffinityToken // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fbf4d0
	struct FString GetAffinity(); // Function ShooterGame.PlayerAffinityManager.GetAffinity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fbf490
};

// Class ShooterGame.PlayerAffinityService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerAffinityService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PlayerAliasManager
// Size: 0x108 (Inherited: 0x80)
struct UPlayerAliasManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct UPlayerAliasService* PlayerAliasService; // 0x98(0x08)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	char pad_A8[0x60]; // 0xa8(0x60)

	void UpdateAlias(struct FPlayerAlias& Alias, struct FDelegate OnError); // Function ShooterGame.PlayerAliasManager.UpdateAlias // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fc15f0
	void CheckValidAlias(struct FPlayerAlias& Alias, struct FDelegate OnValid, struct FDelegate OnInvalidOrError); // Function ShooterGame.PlayerAliasManager.CheckValidAlias // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fbf110
	bool CanSetTagLine(); // Function ShooterGame.PlayerAliasManager.CanSetTagLine // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fbf0e0
};

// Class ShooterGame.PlayerAliasService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerAliasService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PlayerCardDataAsset
// Size: 0x1d0 (Inherited: 0x50)
struct UPlayerCardDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> Theme; // 0x80(0x30)
	struct TSoftObjectPtr<UTexture2D> LargeArt; // 0xb0(0x30)
	struct TSoftObjectPtr<UTexture2D> WideArt; // 0xe0(0x30)
	struct TSoftObjectPtr<UTexture2D> SmallArt; // 0x110(0x30)
	struct TSoftObjectPtr<UMaterial> LargeMaterial; // 0x140(0x30)
	struct TSoftObjectPtr<UMaterial> WideMaterial; // 0x170(0x30)
	struct TSoftObjectPtr<UMaterial> SmallMaterial; // 0x1a0(0x30)

	void SetWideMaterial(struct TSoftObjectPtr<UMaterial> NewMaterial); // Function ShooterGame.PlayerCardDataAsset.SetWideMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc14d0
	void SetWideArt(struct TSoftObjectPtr<UTexture2D> NewArt); // Function ShooterGame.PlayerCardDataAsset.SetWideArt // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc13b0
	void SetUIData(struct TSoftClassPtr<UObject> NewUIData); // Function ShooterGame.PlayerCardDataAsset.SetUIData // (Final|Native|Public|BlueprintCallable) // @ game+0x2e90930
	void SetSmallMaterial(struct TSoftObjectPtr<UMaterial> NewMaterial); // Function ShooterGame.PlayerCardDataAsset.SetSmallMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc1290
	void SetSmallArt(struct TSoftObjectPtr<UTexture2D> NewArt); // Function ShooterGame.PlayerCardDataAsset.SetSmallArt // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc1170
	void SetLargeMaterial(struct TSoftObjectPtr<UMaterial> NewMaterial); // Function ShooterGame.PlayerCardDataAsset.SetLargeMaterial // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc1050
	void SetLargeArt(struct TSoftObjectPtr<UTexture2D> NewArt); // Function ShooterGame.PlayerCardDataAsset.SetLargeArt // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc0f30
};

// Class ShooterGame.PlayerCardUIData
// Size: 0x90 (Inherited: 0x90)
struct UPlayerCardUIData : UBaseContentUIData {
};

// Class ShooterGame.PlayerDiscrepancyDetectionComponent
// Size: 0x118 (Inherited: 0xe8)
struct UPlayerDiscrepancyDetectionComponent : UActorComponent {
	char pad_E8[0x30]; // 0xe8(0x30)

	void AuthOnTeamChanged(); // Function ShooterGame.PlayerDiscrepancyDetectionComponent.AuthOnTeamChanged // (Final|Native|Protected) // @ game+0x2fbf0c0
	void AuthHandleConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.PlayerDiscrepancyDetectionComponent.AuthHandleConnectionStatusChanged // (Final|Native|Protected) // @ game+0x2fbefb0
};

// Class ShooterGame.PlayerFacingPerfMetric
// Size: 0xa8 (Inherited: 0x30)
struct UPlayerFacingPerfMetric : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnDataUpdated; // 0x38(0x10)
	char pad_48[0x60]; // 0x48(0x60)

	struct FString GetStatValueFormatted(int32_t Index, enum class EPlayerPerfStatField StatField, struct FString Format); // Function ShooterGame.PlayerFacingPerfMetric.GetStatValueFormatted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fc0550
	float GetStatValue(int32_t Index, enum class EPlayerPerfStatField StatField); // Function ShooterGame.PlayerFacingPerfMetric.GetStatValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fc0480
	struct FString GetStatTextValueFormatted(int32_t Index, enum class EPlayerPerfStatField StatField, struct FString Format); // Function ShooterGame.PlayerFacingPerfMetric.GetStatTextValueFormatted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fc02e0
	void GetMinAndMaxStatValues(enum class EPlayerPerfStatField StatField, int32_t NumValues, float& Min, float& Max); // Function ShooterGame.PlayerFacingPerfMetric.GetMinAndMaxStatValues // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fbfa10
};

// Class ShooterGame.PlayerFacingPerfManager
// Size: 0x68 (Inherited: 0x30)
struct UPlayerFacingPerfManager : UObject {
	char pad_30[0x28]; // 0x30(0x28)
	struct TArray<struct UPlayerFacingPerfMetric*> Metrics; // 0x58(0x10)

	bool IsMetricServerInfo(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.IsMetricServerInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fc0b80
	bool IsMetricReflexOnly(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.IsMetricReflexOnly // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fc0b00
	bool IsMetricDevOnly(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.IsMetricDevOnly // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fc0a80
	enum class EAresIntSettingName GetSettingForMetric(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.GetSettingForMetric // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fc0260
	struct FString GetMetricName(enum class EPlayerPerfMetricCategory Metric); // Function ShooterGame.PlayerFacingPerfManager.GetMetricName // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fbf980
	enum class EPlayerPerfMetricCategory GetMetricFromSetting(enum class EAresIntSettingName Setting); // Function ShooterGame.PlayerFacingPerfManager.GetMetricFromSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fbf900
	struct UPlayerFacingPerfMetric* GetMetric(enum class EPlayerPerfMetricCategory MetricCategory); // Function ShooterGame.PlayerFacingPerfManager.GetMetric // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fbf870
	struct FString GetFormattedMetricString(enum class EPlayerPerfMetricCategory MetricCategory, float CurrentValue); // Function ShooterGame.PlayerFacingPerfManager.GetFormattedMetricString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2fbf530
};

// Class ShooterGame.PlayerFacingPerfGraphWidgetBase
// Size: 0x3b0 (Inherited: 0x2c8)
struct UPlayerFacingPerfGraphWidgetBase : UUserWidget {
	float MaxYAxisTop; // 0x2c8(0x04)
	float MinYAxisTop; // 0x2cc(0x04)
	float MaxYAxisBottom; // 0x2d0(0x04)
	float MinYAxisBottom; // 0x2d4(0x04)
	float YAxisMargin; // 0x2d8(0x04)
	int32_t XAxisZoom; // 0x2dc(0x04)
	struct FLinearColor GraphBackgroundColor; // 0x2e0(0x10)
	struct UFont* Font; // 0x2f0(0x08)
	int32_t FontSize; // 0x2f8(0x04)
	char pad_2FC[0x4]; // 0x2fc(0x04)
	struct FText GraphTitle; // 0x300(0x18)
	enum class EPlayerPerfMetricCategory MetricCategory; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct TArray<struct FGraphMetricEntry> GraphMetrics; // 0x320(0x10)
	enum class EGraphDisplayType DisplayType; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct UPlayerFacingPerfMetric* Metric; // 0x338(0x08)
	char pad_340[0x70]; // 0x340(0x70)

	void Reinitialize(); // Function ShooterGame.PlayerFacingPerfGraphWidgetBase.Reinitialize // (Final|Native|Protected|BlueprintCallable) // @ game+0x2fc92d0
	struct FVector2D GetLocalWidgetDimensions(struct FPaintContext& Context); // Function ShooterGame.PlayerFacingPerfGraphWidgetBase.GetLocalWidgetDimensions // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x2fc8e60
};

// Class ShooterGame.UISurveyResponse
// Size: 0x38 (Inherited: 0x30)
struct UUISurveyResponse : UObject {
	int32_t questionId; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
};

// Class ShooterGame.LikertResponse
// Size: 0x40 (Inherited: 0x38)
struct ULikertResponse : UUISurveyResponse {
	int32_t LikertResponse; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
};

// Class ShooterGame.FreeTextResponse
// Size: 0x48 (Inherited: 0x38)
struct UFreeTextResponse : UUISurveyResponse {
	struct FString ResponseText; // 0x38(0x10)
};

// Class ShooterGame.UISurveyQuestion
// Size: 0x58 (Inherited: 0x30)
struct UUISurveyQuestion : UObject {
	int32_t ID; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FString Type; // 0x38(0x10)
	struct FString Question; // 0x48(0x10)
};

// Class ShooterGame.SurveyQuestionAndAnswer
// Size: 0x40 (Inherited: 0x30)
struct USurveyQuestionAndAnswer : UObject {
	struct UUISurveyQuestion* Question; // 0x30(0x08)
	struct UUISurveyResponse* Response; // 0x38(0x08)
};

// Class ShooterGame.UIPlayerSurvey
// Size: 0x78 (Inherited: 0x30)
struct UUIPlayerSurvey : UObject {
	bool IsSurveyAvailable; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	int32_t ID; // 0x34(0x04)
	struct FString Title; // 0x38(0x10)
	struct FString Caption; // 0x48(0x10)
	struct FString Type; // 0x58(0x10)
	struct TArray<struct USurveyQuestionAndAnswer*> SurveyData; // 0x68(0x10)
};

// Class ShooterGame.PlayerFeedbackManager
// Size: 0x78 (Inherited: 0x30)
struct UPlayerFeedbackManager : UObject {
	struct FMulticastInlineDelegate FOnSurveyFound; // 0x30(0x10)
	struct FMulticastInlineDelegate FOnSurveyResponseSent; // 0x40(0x10)
	struct UPlayerFeedbackService* PlayerFeedbackService; // 0x50(0x08)
	struct URSOManager* RSOManager; // 0x58(0x08)
	struct UUIPlayerSurvey* CurrentPlayerSurvey; // 0x60(0x08)
	struct TArray<struct UUISurveyResponse*> ResponsesForCurrentSurvey; // 0x68(0x10)

	void SubmitSurveyResponse(); // Function ShooterGame.PlayerFeedbackManager.SubmitSurveyResponse // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc9560
	void OpenNativeMobileReview(); // Function ShooterGame.PlayerFeedbackManager.OpenNativeMobileReview // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d56d50
	void OpenMobileReviewInAppStore(); // Function ShooterGame.PlayerFeedbackManager.OpenMobileReviewInAppStore // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d56d50
	struct UUIPlayerSurvey* GetSurvey(); // Function ShooterGame.PlayerFeedbackManager.GetSurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc90e0
	struct UPlayerFeedbackManager* GetPlayerFeedbackManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerFeedbackManager.GetPlayerFeedbackManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fc8f00
	void CheckForSurvey(); // Function ShooterGame.PlayerFeedbackManager.CheckForSurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc88d0
};

// Class ShooterGame.PlayerFeedbackService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerFeedbackService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PlayerFeedbackToolPluginManager
// Size: 0xb0 (Inherited: 0x80)
struct UPlayerFeedbackToolPluginManager : UInitSystem {
	char pad_80[0x20]; // 0x80(0x20)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct URSOManager* RSOManager; // 0xa8(0x08)

	struct FString GetShard(); // Function ShooterGame.PlayerFeedbackToolPluginManager.GetShard // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fc9050
	struct UPlayerFeedbackToolPluginManager* GetPlayerFeedbackToolPluginManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerFeedbackToolPluginManager.GetPlayerFeedbackToolPluginManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fc8fc0
	struct UPlayerFeedbackToolManager* GetPlayerFeedbackToolManager(); // Function ShooterGame.PlayerFeedbackToolPluginManager.GetPlayerFeedbackToolManager // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc8f90
};

// Class ShooterGame.PlayerFeedbackToolViewController
// Size: 0xa0 (Inherited: 0x30)
struct UPlayerFeedbackToolViewController : UObject {
	struct UPlayerFeedbackToolViewModel* ViewModel; // 0x30(0x08)
	bool bFeatureEnabled; // 0x38(0x01)
	char pad_39[0x7]; // 0x39(0x07)
	struct FMulticastInlineDelegate OnSurveyReceived; // 0x40(0x10)
	bool shouldTriggerNPESurvey; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct URSOManager* RSOManager; // 0x58(0x08)
	struct UConfigManager* ConfigManager; // 0x60(0x08)
	struct UContentManager* ContentManager; // 0x68(0x08)
	struct UPlayerFeedbackToolManager* PlayerFeedbackToolManager; // 0x70(0x08)
	struct UPlayerFeedbackToolPluginManager* PlayerFeedbackToolPluginManager; // 0x78(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x80(0x08)
	struct UMMRManager* MMRManager; // 0x88(0x08)
	char pad_90[0x9]; // 0x90(0x09)
	bool bSurveyLimitReached; // 0x99(0x01)
	char pad_9A[0x6]; // 0x9a(0x06)

	void UpdatePlayerSeenSurveyState(bool hasSeen); // Function ShooterGame.PlayerFeedbackToolViewController.UpdatePlayerSeenSurveyState // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc99e0
	void UpdateNPESurveyState(); // Function ShooterGame.PlayerFeedbackToolViewController.UpdateNPESurveyState // (Final|Native|Public) // @ game+0x2fc99c0
	bool TryGetSurveyWithPayload(enum class EPlayerFeedbackSurveySource& SurveyEvent, struct FPlayerFeedbackPayload FeedbackPayload); // Function ShooterGame.PlayerFeedbackToolViewController.TryGetSurveyWithPayload // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fc9840
	bool TryGetSurvey(enum class EPlayerFeedbackSurveySource& SurveyEvent); // Function ShooterGame.PlayerFeedbackToolViewController.TryGetSurvey // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fc96e0
	void TestTriggerSurveyEvent(enum class EPlayerFeedbackToolSurveyType SurveyType); // Function ShooterGame.PlayerFeedbackToolViewController.TestTriggerSurveyEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc9660
	void TestTriggerNPESurvey(); // Function ShooterGame.PlayerFeedbackToolViewController.TestTriggerNPESurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc9640
	bool RequestRateAllowsSurvey(); // Function ShooterGame.PlayerFeedbackToolViewController.RequestRateAllowsSurvey // (Final|Native|Private) // @ game+0x2fc92f0
	void Init(); // Function ShooterGame.PlayerFeedbackToolViewController.Init // (Final|Native|Public) // @ game+0x2fc92b0
	void HandleSurveyReceived(struct FPlayerFeedbackSurvey& survey); // Function ShooterGame.PlayerFeedbackToolViewController.HandleSurveyReceived // (Final|Native|Private|HasOutParms) // @ game+0x2fc9130
	void HandleShowPFTChanged(); // Function ShooterGame.PlayerFeedbackToolViewController.HandleShowPFTChanged // (Final|Native|Private) // @ game+0x2fc9110
	void CheckForExistingSurveys(); // Function ShooterGame.PlayerFeedbackToolViewController.CheckForExistingSurveys // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc88b0
};

// Class ShooterGame.PlayerFeedbackToolViewModel
// Size: 0x48 (Inherited: 0x30)
struct UPlayerFeedbackToolViewModel : UObject {
	bool LoginSurveyRequested; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FString SurveyEventType; // 0x38(0x10)

	struct FPlayerFeedbackPayload FillOutStorePurchasePayload(struct FString PurchaseSource, struct TArray<struct FString> PurchasedItems); // Function ShooterGame.PlayerFeedbackToolViewModel.FillOutStorePurchasePayload // (Final|Native|Public) // @ game+0x2fc8c80
	struct FPlayerFeedbackPayload FillOutEOGPayload(struct FName AgentPlayed, struct TArray<struct FName> AgentsPlayedAgainst, struct TArray<struct FName> AgentsPlayedWith, struct FString QueueID, struct FString MapID); // Function ShooterGame.PlayerFeedbackToolViewModel.FillOutEOGPayload // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc88f0
};

// Class ShooterGame.PlayerFeedbackToolWidget
// Size: 0x2f0 (Inherited: 0x2c8)
struct UPlayerFeedbackToolWidget : UUserWidget {
	bool bAnswersSubmitted; // 0x2c8(0x01)
	bool bFeatureEnabled; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
	struct FString SurveyEventType; // 0x2d0(0x10)
	struct UPlayerFeedbackToolManager* PlayerFeedbackToolManager; // 0x2e0(0x08)
	struct URSOManager* RSOManager; // 0x2e8(0x08)

	bool TryGetSurvey(struct FString SurveyEvent); // Function ShooterGame.PlayerFeedbackToolWidget.TryGetSurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc9780
	void SurveyReceivedEvent(struct FPlayerFeedbackSurvey& survey); // Function ShooterGame.PlayerFeedbackToolWidget.SurveyReceivedEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2fc9580
	void SubmitSurvey(bool OptedOutOfSurvey); // Function ShooterGame.PlayerFeedbackToolWidget.SubmitSurvey // (Final|Native|Public|BlueprintCallable) // @ game+0x2fc94d0
	void SubmitAllAnswersEvent(); // Function ShooterGame.PlayerFeedbackToolWidget.SubmitAllAnswersEvent // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2dc3390
	void SetAnswer(struct FPlayerFeedbackQuestion& Question, struct FString Key, struct FString Value); // Function ShooterGame.PlayerFeedbackToolWidget.SetAnswer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fc9320
	void HandleSurveyReceived(struct FPlayerFeedbackSurvey& survey); // Function ShooterGame.PlayerFeedbackToolWidget.HandleSurveyReceived // (Final|Native|Private|HasOutParms) // @ game+0x2fc91f0
};

// Class ShooterGame.PlayerGameDataEventSubscriptions
// Size: 0x48 (Inherited: 0x30)
struct UPlayerGameDataEventSubscriptions : UObject {
	struct UGameDataEventForwarder* GameDataEventForwarder; // 0x30(0x08)
	char pad_38[0x10]; // 0x38(0x10)
};

// Class ShooterGame.PlayerIdentityUpdater
// Size: 0x48 (Inherited: 0x30)
struct UPlayerIdentityUpdater : UObject {
	struct UPartyManager* PartyManager; // 0x30(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0x38(0x08)
	struct UAccountXPManager* AccountXPManager; // 0x40(0x08)

	void HandlePersonalizationUpdated(); // Function ShooterGame.PlayerIdentityUpdater.HandlePersonalizationUpdated // (Final|Native|Private) // @ game+0x2fd0630
	void HandleAccountLevelUpdated(); // Function ShooterGame.PlayerIdentityUpdater.HandleAccountLevelUpdated // (Final|Native|Private) // @ game+0x2fd04d0
};

// Class ShooterGame.PlayerListingManager
// Size: 0x100 (Inherited: 0x80)
struct UPlayerListingManager : UInitSystem {
	char pad_80[0x68]; // 0x80(0x68)
	struct UFriendsModel* FriendsModel; // 0xe8(0x08)
	struct UPartyManager* PartyManager; // 0xf0(0x08)
	struct URSOManager* RSOManager; // 0xf8(0x08)

	void HandleListSourcesUpdated(); // Function ShooterGame.PlayerListingManager.HandleListSourcesUpdated // (Final|Native|Private) // @ game+0x2fd0610
	void HandleFriendsModelChanged(struct UFriendModel* FriendModel); // Function ShooterGame.PlayerListingManager.HandleFriendsModelChanged // (Final|Native|Private) // @ game+0x2fd04f0
};

// Class ShooterGame.PlayerPurchaseablesComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UPlayerPurchaseablesComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bLoadPersistedItems; // 0xf0(0x01)
	bool bPreventWeaponDropOnDeath; // 0xf1(0x01)
	char pad_F2[0x6]; // 0xf2(0x06)

	bool PassesPurchasableFilters(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.PassesPurchasableFilters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fd11c0
	bool IsValidPurchasable(struct UAresPurchasable* PurchasableClass); // Function ShooterGame.PlayerPurchaseablesComponent.IsValidPurchasable // (Final|Native|Public|Const) // @ game+0x2fd0740
	bool IsPersistWeaponsEnabled(); // Function ShooterGame.PlayerPurchaseablesComponent.IsPersistWeaponsEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2da2fe0
	bool IsDropWeaponOnDeathEnabled(); // Function ShooterGame.PlayerPurchaseablesComponent.IsDropWeaponOnDeathEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2fd0710
	bool HasPurchasable(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.HasPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fd0670
	struct UAresPurchasableEquippable* GetValidPurchasableForItemClass(struct AAresItem* ItemClass); // Function ShooterGame.PlayerPurchaseablesComponent.GetValidPurchasableForItemClass // (Final|Native|Public|BlueprintCallable) // @ game+0x2fd0430
	int32_t GetTotalPurchases(); // Function ShooterGame.PlayerPurchaseablesComponent.GetTotalPurchases // (Final|Native|Public|Const) // @ game+0x2fd0400
	int32_t GetTotalPurchasablesOfType(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.GetTotalPurchasablesOfType // (Final|Native|Public|Const) // @ game+0x2fd0360
	int32_t GetPurchasableSlotTotal(struct AAresEquippableSlot* WhichSlot); // Function ShooterGame.PlayerPurchaseablesComponent.GetPurchasableSlotTotal // (Final|Native|Public|Const) // @ game+0x2fd02c0
	enum class EAresPurchasableReplaceType GetPurchasableReplaceType(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.GetPurchasableReplaceType // (Final|Native|Public|Const) // @ game+0x2fd0220
	int32_t GetPurchasableEquippableSlotTotal(struct AAresEquippableSlot* WhichSlot); // Function ShooterGame.PlayerPurchaseablesComponent.GetPurchasableEquippableSlotTotal // (Final|Native|Public|Const) // @ game+0x2fd0180
	struct AAresItem* GetItemClassForPurchasable(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.GetItemClassForPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fd0060
	int32_t GetEquippableCostFromPurchasable(struct AAresItem* EquippableClass); // Function ShooterGame.PlayerPurchaseablesComponent.GetEquippableCostFromPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fcffc0
	int32_t GetCostForPurchasable(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.GetCostForPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fcff20
	struct FPurchasableList GetAllValidPurchasables(); // Function ShooterGame.PlayerPurchaseablesComponent.GetAllValidPurchasables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fcfe90
	struct FPurchasableList GetAllOwnedPurchasables(); // Function ShooterGame.PlayerPurchaseablesComponent.GetAllOwnedPurchasables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fcfe00
	bool CanOnlyHavePurchasableByReplacement(struct UAresPurchasable* Purchasable, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.CanOnlyHavePurchasableByReplacement // (Final|Native|Public|Const) // @ game+0x2fcfd10
	bool CanHavePurchasable(struct UAresPurchasable* Purchasable); // Function ShooterGame.PlayerPurchaseablesComponent.CanHavePurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fcfc70
	bool CanFulfillOtherPlayerGunRequest(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.CanFulfillOtherPlayerGunRequest // (Final|Native|Public) // @ game+0x2fcfbd0
	bool CanAffordPurchasable(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.CanAffordPurchasable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fcfb30
	bool AuthTrySell(struct UAresPurchasable* WhichPurchasable, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.AuthTrySell // (Final|Native|Public|BlueprintCallable) // @ game+0x2d2b970
	bool AuthTryPurchase(struct UAresPurchasable* WhichPurchasable, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.AuthTryPurchase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d2b970
	bool AuthTryGrantPurchasableEquippable(struct UAresPurchasableEquippable* PurchasableEquippable); // Function ShooterGame.PlayerPurchaseablesComponent.AuthTryGrantPurchasableEquippable // (Final|Native|Public) // @ game+0x2fcfa70
	bool AuthTryFulfillMyGunRequest(struct UAresPurchasableEquippable* WhichPurchasable, struct AShooterPlayerState* FulfillerPlayerState); // Function ShooterGame.PlayerPurchaseablesComponent.AuthTryFulfillMyGunRequest // (Final|Native|Public) // @ game+0x2df2c10
	void AuthSetEnableWeaponDropOnDeath(bool bDropWeapon); // Function ShooterGame.PlayerPurchaseablesComponent.AuthSetEnableWeaponDropOnDeath // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2fcf9e0
	void AuthSetEnablePersistWeapons(bool bPersistWeapons); // Function ShooterGame.PlayerPurchaseablesComponent.AuthSetEnablePersistWeapons // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2fcf950
	void AuthSellPurchasable(struct UAresPurchasable* WhichPurchasable, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.AuthSellPurchasable // (Final|Native|Public) // @ game+0x2d22c60
	void AuthRemovePurchasable(struct UAresPurchasable* WhichPurchasable, enum class EInventoryTransaction TransactionType, enum class EAresItemSlot TargetSlot); // Function ShooterGame.PlayerPurchaseablesComponent.AuthRemovePurchasable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4c70
	void AuthRemoveAllPurchasableFilters(bool bDestroy); // Function ShooterGame.PlayerPurchaseablesComponent.AuthRemoveAllPurchasableFilters // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthRefundCost(struct UAresPurchasable* WhichPurchasable); // Function ShooterGame.PlayerPurchaseablesComponent.AuthRefundCost // (Final|Native|Public) // @ game+0x2cb4be0
	bool AuthGrantPurchasable(struct UAresPurchasable* Purchasable, bool AllowRefund, enum class EInventoryTransaction Transaction, enum class EAresItemSlot TargetSlot, struct AShooterPlayerState* PurchasingPlayer); // Function ShooterGame.PlayerPurchaseablesComponent.AuthGrantPurchasable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2fcf790
	bool AuthGrantItem(struct AAresItem* ItemToPurchase, enum class EAresPurchasableType Type, bool bAllowRefund); // Function ShooterGame.PlayerPurchaseablesComponent.AuthGrantItem // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2fcf680
	bool AuthForceGivePurchasable(struct UAresPurchasable* PurchasableClass, bool bAllowRefund); // Function ShooterGame.PlayerPurchaseablesComponent.AuthForceGivePurchasable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2fcf5b0
	struct UPurchasableFilterComponent* AuthAddPurchasableFilter(struct TArray<struct UAresPurchasable*> Allowlist, struct TArray<struct UAresPurchasable*> Denylist); // Function ShooterGame.PlayerPurchaseablesComponent.AuthAddPurchasableFilter // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2fcf420
};

// Class ShooterGame.PlayerReportSequence
// Size: 0xb0 (Inherited: 0x30)
struct UPlayerReportSequence : UObject {
	struct FString Offender; // 0x30(0x10)
	struct TArray<enum class EPlayerReportReason> Reasons; // 0x40(0x10)
	enum class EGameFlowStateType Location; // 0x50(0x01)
	char pad_51[0x7]; // 0x51(0x07)
	struct FString Comment; // 0x58(0x10)
	struct FString MatchID; // 0x68(0x10)
	struct FMulticastInlineDelegate OnSuccess; // 0x78(0x10)
	struct FMulticastInlineDelegate OnFailure; // 0x88(0x10)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x98(0x08)
	struct UPlayerReportService* ReportService; // 0xa0(0x08)
	struct URestrictionsService* RestrictionsService; // 0xa8(0x08)

	void Start(); // Function ShooterGame.PlayerReportSequence.Start // (Final|Native|Public) // @ game+0x2fd1510
	void OnTokenFetched(struct FString Token); // Function ShooterGame.PlayerReportSequence.OnTokenFetched // (Final|Native|Public) // @ game+0x2fd1110
};

// Class ShooterGame.PlayerReportManager
// Size: 0x68 (Inherited: 0x30)
struct UPlayerReportManager : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0x40(0x08)
	struct UPlayerReportSequence* ActiveReportSequence; // 0x48(0x08)
	struct UPlayerReportService* ReportService; // 0x50(0x08)
	struct URestrictionsService* RestrictionsService; // 0x58(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x60(0x08)

	void ReportPlayer(struct FString Offender, struct FString MatchID, struct TArray<enum class EPlayerReportReason>& Reasons, struct FString Comment, struct FDelegate OnSuccess, struct FDelegate OnFailure); // Function ShooterGame.PlayerReportManager.ReportPlayer // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fd1260
	struct UPlayerReportManager* GetPlayerReportManager(struct UObject* WorldContextObject); // Function ShooterGame.PlayerReportManager.GetPlayerReportManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fd00f0
	void EndPlayerReportSequence(); // Function ShooterGame.PlayerReportManager.EndPlayerReportSequence // (Final|Native|Public|BlueprintCallable) // @ game+0x2fcfde0
	void BroadcastReportSent(); // Function ShooterGame.PlayerReportManager.BroadcastReportSent // (Final|Native|Private) // @ game+0x2fcfb10
};

// Class ShooterGame.PlayerReportNotificationManager
// Size: 0x38 (Inherited: 0x30)
struct UPlayerReportNotificationManager : UObject {
	struct UNotificationManager* NotificationManager; // 0x30(0x08)

	void HandleReportSent(); // Function ShooterGame.PlayerReportNotificationManager.HandleReportSent // (Final|Native|Private) // @ game+0x2fd0650
	void HandleGenericDismiss(struct UGenericNotification* Notification); // Function ShooterGame.PlayerReportNotificationManager.HandleGenericDismiss // (Final|Native|Private) // @ game+0x2fd0580
};

// Class ShooterGame.PlayerReportService
// Size: 0x38 (Inherited: 0x30)
struct UPlayerReportService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PlayerScoreCombatTrackerComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UPlayerScoreCombatTrackerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)

	void ScoredKill(struct FScoreKillData& ScoreKillData); // Function ShooterGame.PlayerScoreCombatTrackerComponent.ScoredKill // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void ScoredDeath(struct UDamageResponse* Response, struct AOwnerExclusivePlayerInfo* Killer, struct TArray<struct FAresAssist>& AssistsList); // Function ShooterGame.PlayerScoreCombatTrackerComponent.ScoredDeath // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void ScoredAssist(struct UDamageResponse* KillingBlow, struct FAresAssist& AssistInfo, struct AOwnerExclusivePlayerInfo* Killer, struct AOwnerExclusivePlayerInfo* Assister); // Function ShooterGame.PlayerScoreCombatTrackerComponent.ScoredAssist // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void ReceivedDamage(struct UDamageResponse* Response); // Function ShooterGame.PlayerScoreCombatTrackerComponent.ReceivedDamage // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.PlayerScoreCombatTrackerComponent.GetPlayerState // (Final|Native|Public|BlueprintCallable) // @ game+0x2f5cd80
	void DealtDamage(struct UDamageResponse* Response); // Function ShooterGame.PlayerScoreCombatTrackerComponent.DealtDamage // (Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.PlayerScoreComponent
// Size: 0x110 (Inherited: 0xe8)
struct UPlayerScoreComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
	int32_t Score; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct TArray<struct FPlayerScoreDebugEntry> DebugEntries; // 0x100(0x10)

	void OnRep_Score(); // Function ShooterGame.PlayerScoreComponent.OnRep_Score // (Final|Native|Private) // @ game+0x2fd10f0
	int32_t GetScore(); // Function ShooterGame.PlayerScoreComponent.GetScore // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2dea500
	void AuthResetScore(); // Function ShooterGame.PlayerScoreComponent.AuthResetScore // (Final|Native|Public) // @ game+0x2dea400
	void AdjustScore(int32_t Delta, struct FName& Reason); // Function ShooterGame.PlayerScoreComponent.AdjustScore // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fcf340
};

// Class ShooterGame.PlayerSettingsTelemetry
// Size: 0x100 (Inherited: 0x80)
struct UPlayerSettingsTelemetry : UInitSystem {
	struct FMulticastInlineDelegate OnPlayerSettingsChangesCommitted; // 0x80(0x10)
	char pad_90[0x50]; // 0x90(0x50)
	struct UAresSettingsManager* AresSettingsManager; // 0xe0(0x08)
	struct URSOManager* RSOManager; // 0xe8(0x08)
	struct UTelemetrySampler* TelemetrySampler; // 0xf0(0x08)
	struct UTelemetryManager* TelemetryManager; // 0xf8(0x08)

	void OnAxisBindingSettingChanged(struct FString AxisName, int32_t BindIndex, float Scale, struct FString OldKey, struct FString NewKey); // Function ShooterGame.PlayerSettingsTelemetry.OnAxisBindingSettingChanged // (Final|Native|Public) // @ game+0x2fd0f00
	void OnAnyStringSettingChanged(enum class EAresStringSettingName SettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.PlayerSettingsTelemetry.OnAnyStringSettingChanged // (Final|Native|Private) // @ game+0x2fd0da0
	void OnAnyIntSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.PlayerSettingsTelemetry.OnAnyIntSettingChanged // (Final|Native|Private) // @ game+0x2fd0c90
	void OnAnyFloatSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.PlayerSettingsTelemetry.OnAnyFloatSettingChanged // (Final|Native|Private) // @ game+0x2fd0b80
	void OnAnyBoolSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.PlayerSettingsTelemetry.OnAnyBoolSettingChanged // (Final|Native|Private) // @ game+0x2fd0a60
	void OnActionBindingSettingChanged(struct FString ActionName, int32_t BindIndex, struct FInputChord& OldInput, struct FInputChord& NewInput); // Function ShooterGame.PlayerSettingsTelemetry.OnActionBindingSettingChanged // (Final|Native|Public|HasOutParms) // @ game+0x2fd07e0
};

// Class ShooterGame.PlayerSprayComponent
// Size: 0x110 (Inherited: 0xe8)
struct UPlayerSprayComponent : UActorComponent {
	struct USprayEquipSlotDataAsset* LastContextSprayed; // 0xe8(0x08)
	int32_t LastRoundSprayed; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct TArray<struct AEffectContainer*> ActiveSprays; // 0xf8(0x10)
	bool bInfiniteSprays; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)

	void OnSpraySpawned(struct AEffectContainer* SpawnedSpray); // Function ShooterGame.PlayerSprayComponent.OnSpraySpawned // (Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2fdaed0
	bool AuthPlayerTrySpray(struct AAresSpray* SprayToTrigger, struct USprayEquipSlotDataAsset* Context); // Function ShooterGame.PlayerSprayComponent.AuthPlayerTrySpray // (Final|Native|Public) // @ game+0x2df2c10
	void AuthOnPlayerSprayed(struct AAresSpray* UsedSpray, struct USprayEquipSlotDataAsset* Context); // Function ShooterGame.PlayerSprayComponent.AuthOnPlayerSprayed // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2fda140
	bool AuthIsInfiniteSpraysEnabled(); // Function ShooterGame.PlayerSprayComponent.AuthIsInfiniteSpraysEnabled // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cc4ab0
	bool AuthCanPlayerSpray(); // Function ShooterGame.PlayerSprayComponent.AuthCanPlayerSpray // (BlueprintAuthorityOnly|Native|Event|Protected|BlueprintCallable|BlueprintEvent) // @ game+0x2ddfdd0
};

// Class ShooterGame.PlayerTimelineDebugComponent
// Size: 0x160 (Inherited: 0xe8)
struct UPlayerTimelineDebugComponent : UActorComponent {
	char pad_E8[0x78]; // 0xe8(0x78)

	void OnMoveProcessingDelayDebugChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.PlayerTimelineDebugComponent.OnMoveProcessingDelayDebugChanged // (Final|Native|Public) // @ game+0x2fdae00
};

// Class ShooterGame.PlayerTitleUIData
// Size: 0x90 (Inherited: 0x90)
struct UPlayerTitleUIData : UBaseContentUIData {
};

// Class ShooterGame.PlayerTitleDataAsset
// Size: 0xb0 (Inherited: 0x50)
struct UPlayerTitleDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct FText TitleText; // 0x80(0x18)
	struct FText TitleTextAllCaps; // 0x98(0x18)

	struct FText GetTitleTextAllCaps(); // Function ShooterGame.PlayerTitleDataAsset.GetTitleTextAllCaps // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2fda540
};

// Class ShooterGame.PoolingResetInterface
// Size: 0x30 (Inherited: 0x30)
struct UPoolingResetInterface : UInterface {

	void InitializeForUse(); // Function ShooterGame.PoolingResetInterface.InitializeForUse // (Native|Event|Public|BlueprintEvent) // @ game+0x2f54940
	void CleanupForPooling(); // Function ShooterGame.PoolingResetInterface.CleanupForPooling // (Native|Event|Public|BlueprintEvent) // @ game+0x2fda240
};

// Class ShooterGame.PostProcessTintBlendable
// Size: 0x38 (Inherited: 0x30)
struct UPostProcessTintBlendable : UObject {
	char pad_30[0x8]; // 0x30(0x08)

	void UpdateSettings(struct FPostProcessSettings& CurrentSettings, struct FPostProcessSettings& OutSettings, float Weight); // Function ShooterGame.PostProcessTintBlendable.UpdateSettings // (Event|Public|HasOutParms|BlueprintEvent|Const) // @ game+0x3520f50
};

// Class ShooterGame.PrecalcProjectileCollisionComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UPrecalcProjectileCollisionComponent : UActorComponent {
	struct TArray<struct AActor*> ActorsToIgnore; // 0xe8(0x10)

	void OnActorOverlap(struct AActor* OverlappedActor, struct AActor* OtherActor); // Function ShooterGame.PrecalcProjectileCollisionComponent.OnActorOverlap // (Final|Native|Private) // @ game+0x2cc3bd0
};

// Class ShooterGame.PrecalculatedProjectileMovementComponent
// Size: 0x308 (Inherited: 0x2d8)
struct UPrecalculatedProjectileMovementComponent : UFiniteSpeedMovementComponent {
	float PrecalculatedMovementTime; // 0x2d8(0x04)
	float PrecalculatedTimestep; // 0x2dc(0x04)
	struct TArray<struct FCalculatedProjectileStep> ProjectilePath; // 0x2e0(0x10)
	struct USyncedTimerComponent* MovementSyncedTimer; // 0x2f0(0x08)
	char pad_2F8[0x10]; // 0x2f8(0x10)

	void SetSyncedTimer(struct USyncedTimerComponent* SyncedTimer); // Function ShooterGame.PrecalculatedProjectileMovementComponent.SetSyncedTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x2e9b970
	void MulticastSetPath(struct TArray<struct FCalculatedProjectileStep> NetworkedProjectilePath); // Function ShooterGame.PrecalculatedProjectileMovementComponent.MulticastSetPath // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x2fdab60
	void AuthPrecalculateMovement(); // Function ShooterGame.PrecalculatedProjectileMovementComponent.AuthPrecalculateMovement // (Final|Native|Private) // @ game+0x1e6e7b0
};

// Class ShooterGame.PreconstructedWidgetListModelMediator
// Size: 0xb0 (Inherited: 0x30)
struct UPreconstructedWidgetListModelMediator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnItemActivated; // 0x38(0x10)
	char pad_48[0x8]; // 0x48(0x08)
	struct TArray<struct TScriptInterface<IListItemDisplayEntry>> EntryList; // 0x50(0x10)
	struct TScriptInterface<IOrderedListModel> ListModel; // 0x60(0x10)
	struct FWildcard SharedListItemData; // 0x70(0x40)

	void SetOffset(int32_t NewValue); // Function ShooterGame.PreconstructedWidgetListModelMediator.SetOffset // (Final|Native|Public|BlueprintCallable) // @ game+0x2fdb1d0
	void SetListModel(struct TScriptInterface<IOrderedListModel> NewValue); // Function ShooterGame.PreconstructedWidgetListModelMediator.SetListModel // (Final|Native|Public|BlueprintCallable) // @ game+0x2fdb130
	void SetEntryList(struct TArray<struct TScriptInterface<IListItemDisplayEntry>> NewValue); // Function ShooterGame.PreconstructedWidgetListModelMediator.SetEntryList // (Final|Native|Public|BlueprintCallable) // @ game+0x2fdb010
	void HandleListModelChange(struct UObject* Source, struct FOrderedListModelChangeEventData& EventData); // Function ShooterGame.PreconstructedWidgetListModelMediator.HandleListModelChange // (Final|Native|Private|HasOutParms) // @ game+0x2fda5b0
	int32_t GetOffset(); // Function ShooterGame.PreconstructedWidgetListModelMediator.GetOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x22532b0
	struct TScriptInterface<IOrderedListModel> GetListModel(); // Function ShooterGame.PreconstructedWidgetListModelMediator.GetListModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fda500
	struct TArray<struct TScriptInterface<IListItemDisplayEntry>> GetEntryList(); // Function ShooterGame.PreconstructedWidgetListModelMediator.GetEntryList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fda440
	void EntryActivatedMulticastDelegate__DelegateSignature(struct UPreconstructedWidgetListModelMediator* Source, struct FListItemDisplayEntryActivatedEventData EventData); // DelegateFunction ShooterGame.PreconstructedWidgetListModelMediator.EntryActivatedMulticastDelegate__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x3520f50
	struct UPreconstructedWidgetListModelMediator* Create(struct TArray<struct TScriptInterface<IListItemDisplayEntry>> EntryList, struct TScriptInterface<IOrderedListModel> ListModel, struct UObject* Outer); // Function ShooterGame.PreconstructedWidgetListModelMediator.Create // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2fda290
	void BP_SetSharedListItemData(int32_t NewValue); // Function ShooterGame.PreconstructedWidgetListModelMediator.BP_SetSharedListItemData // (Final|Native|Public|BlueprintCallable) // @ game+0x2c2b410
	void BP_GetSharedListItemDataPure(int32_t& SharedData, bool& Succeeded); // Function ShooterGame.PreconstructedWidgetListModelMediator.BP_GetSharedListItemDataPure // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x2c2afe0
};

// Class ShooterGame.PregameCharacterSelectSpawner
// Size: 0x488 (Inherited: 0x3d0)
struct APregameCharacterSelectSpawner : AActor {
	struct AEffectContainer* NoCharacterSelectedFXC; // 0x3d0(0x08)
	struct AEffectContainer* WaitingForLoadFXC; // 0x3d8(0x08)
	struct UPregameViewController* PregameViewController; // 0x3e0(0x08)
	struct UPregameViewModel* PregameViewModel; // 0x3e8(0x08)
	struct UCharacterDataAsset* CurrentCharacter; // 0x3f0(0x08)
	bool bCharacterLockedIn; // 0x3f8(0x01)
	char pad_3F9[0x17]; // 0x3f9(0x17)
	struct FEffectID CurrentEffectID; // 0x410(0x20)
	struct FEffectData EffectData; // 0x430(0x58)

	void UpdateModel(); // Function ShooterGame.PregameCharacterSelectSpawner.UpdateModel // (Final|Native|Protected) // @ game+0x2fdb280
	void SetCharacter(struct UCharacterDataAsset* Character); // Function ShooterGame.PregameCharacterSelectSpawner.SetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2fdaf80
	void OverrideCharacter(struct FString CharacterPath); // Function ShooterGame.PregameCharacterSelectSpawner.OverrideCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e9a0
	void MatchStateChanged(enum class EPregameMatchState MatchState); // Function ShooterGame.PregameCharacterSelectSpawner.MatchStateChanged // (Final|Native|Protected) // @ game+0x2fdaae0
	void LockedIn(bool bLockedIn); // Function ShooterGame.PregameCharacterSelectSpawner.LockedIn // (Final|Native|Public|BlueprintCallable) // @ game+0x2fdaa50
	bool LoadAssets(); // Function ShooterGame.PregameCharacterSelectSpawner.LoadAssets // (Final|Native|Protected) // @ game+0x2fdaa20
	void Initialize(struct UPregameViewController* PregameViewController); // Function ShooterGame.PregameCharacterSelectSpawner.Initialize // (Final|Native|Public|BlueprintCallable) // @ game+0x2fda990
	void ClearModel(); // Function ShooterGame.PregameCharacterSelectSpawner.ClearModel // (Final|Native|Protected) // @ game+0x2fda270
};

// Class ShooterGame.PregamePlayerController
// Size: 0x990 (Inherited: 0x988)
struct APregamePlayerController : AAresPlayerController {
	struct UPregameViewController* PregameViewController; // 0x988(0x08)

	void UpdateMatchID(); // Function ShooterGame.PregamePlayerController.UpdateMatchID // (Final|Native|Private) // @ game+0x2fdb260
	void OnMapUpdated(struct UMapDataAsset* MapAsset); // Function ShooterGame.PregamePlayerController.OnMapUpdated // (Final|Native|Private) // @ game+0x2fdad70
	void CheatUnlockAllCharacters(); // Function ShooterGame.PregamePlayerController.CheatUnlockAllCharacters // (Final|Native|Public) // @ game+0x1e6e7b0
};

// Class ShooterGame.PregameCheatManager
// Size: 0x80 (Inherited: 0x80)
struct UPregameCheatManager : UAresCheatManagerBase {

	void UnlockAllCharacters(); // Function ShooterGame.PregameCheatManager.UnlockAllCharacters // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	void SetConfigurationValue(struct FString Name, struct FString Value); // Function ShooterGame.PregameCheatManager.SetConfigurationValue // (Final|Exec|Native|Private) // @ game+0x2ef8850
	void PregameStart(); // Function ShooterGame.PregameCheatManager.PregameStart // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
	void PregameExit(); // Function ShooterGame.PregameCheatManager.PregameExit // (Final|Exec|Native|Private) // @ game+0x1e6e7b0
};

// Class ShooterGame.PregameManager
// Size: 0x408 (Inherited: 0x80)
struct UPregameManager : UInitSystem {
	char pad_80[0x48]; // 0x80(0x48)
	bool bWasSessionAndPregameConsistent; // 0xc8(0x01)
	char pad_C9[0xf]; // 0xc9(0x0f)
	struct UPregameService* PregameService; // 0xd8(0x08)
	struct UConfigManager* ConfigManager; // 0xe0(0x08)
	struct URSOManager* RSOManager; // 0xe8(0x08)
	struct URMSManager* RMSManager; // 0xf0(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0xf8(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x100(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x108(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x110(0x08)
	char pad_118[0x2f0]; // 0x118(0x2f0)

	void RefreshCurrentMatch(); // Function ShooterGame.PregameManager.RefreshCurrentMatch // (Final|Native|Private) // @ game+0x2fdaf60
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.PregameManager.OnBugCommand // (Final|Native|Private) // @ game+0x2fdac10
	void HandleSessionLoopStateChange(); // Function ShooterGame.PregameManager.HandleSessionLoopStateChange // (Final|Native|Private) // @ game+0x2fda970
	void HandlePlayerRequestSuccess(struct FPregamePlayer& Player); // Function ShooterGame.PregameManager.HandlePlayerRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0x2fda8a0
	void HandleMatchRequestSuccess(struct FPregameMatch& Match); // Function ShooterGame.PregameManager.HandleMatchRequestSuccess // (Final|Native|Private|HasOutParms) // @ game+0x2fda7c0
	void HandleMatchRequestError(struct FAmbassadorError& Error); // Function ShooterGame.PregameManager.HandleMatchRequestError // (Final|Native|Private|HasOutParms) // @ game+0x2fda6d0
	void BackgroundPoll(); // Function ShooterGame.PregameManager.BackgroundPoll // (Final|Native|Private) // @ game+0x2fda220
};

// Class ShooterGame.PregameParentWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UPregameParentWidget : UUserWidget {
};

// Class ShooterGame.PregamePlayerActor
// Size: 0x3d0 (Inherited: 0x3d0)
struct APregamePlayerActor : AActor {
};

// Class ShooterGame.PregameGameMode
// Size: 0x4c0 (Inherited: 0x4c0)
struct APregameGameMode : AGameMode {
};

// Class ShooterGame.PregameService
// Size: 0x38 (Inherited: 0x30)
struct UPregameService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PregameStateV2
// Size: 0xa8 (Inherited: 0x90)
struct UPregameStateV2 : UStaticGameFlowState {
	struct FMulticastInlineDelegate OnMatchCancelled; // 0x90(0x10)
	struct UPregameManager* PregameManager; // 0xa0(0x08)
};

// Class ShooterGame.PregameViewController
// Size: 0x88 (Inherited: 0x30)
struct UPregameViewController : UObject {
	struct UPregameViewModel* ViewModel; // 0x30(0x08)
	struct UPregameViewModel* EditorViewModel; // 0x38(0x08)
	struct UConfigManager* ConfigManager; // 0x40(0x08)
	struct UPregameManager* PregameManager; // 0x48(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x50(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x58(0x08)
	struct UContentIndex* ContentIndex; // 0x60(0x08)
	struct UPartyManager* PartyManager; // 0x68(0x08)
	struct UCharacterDataAsset* CharacterPrediction; // 0x70(0x08)
	char pad_78[0x10]; // 0x78(0x10)

	bool UseEditorViewModel(); // Function ShooterGame.PregameViewController.UseEditorViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9a0
	void SetUseDelayedFinalization(bool NewValue); // Function ShooterGame.PregameViewController.SetUseDelayedFinalization // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe3830
	void SelectCharacter(struct UCharacterDataAsset* Character); // Function ShooterGame.PregameViewController.SelectCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe22b0
	void RefreshPregameTimer(); // Function ShooterGame.PregameViewController.RefreshPregameTimer // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2290
	void ReadyPlayer(); // Function ShooterGame.PregameViewController.ReadyPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2270
	void PickSide(struct FName& Side); // Function ShooterGame.PregameViewController.PickSide // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fe21d0
	void PickMap(struct UMapDataAsset* Map); // Function ShooterGame.PregameViewController.PickMap // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2140
	void LockCharacter(struct UCharacterDataAsset* Character); // Function ShooterGame.PregameViewController.LockCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2020
	bool IsCharacterDisabledForQueue(struct FGuid& CharacterID); // Function ShooterGame.PregameViewController.IsCharacterDisabledForQueue // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1e70
	struct UPregameViewModel* GetViewModel(); // Function ShooterGame.PregameViewController.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1e40
	void DelayedFinalizationComplete(); // Function ShooterGame.PregameViewController.DelayedFinalizationComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe1180
	void CastVote(struct FPregameCastVote& Vote); // Function ShooterGame.PregameViewController.CastVote // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2fe10c0
	void BanMap(struct UMapDataAsset* Map); // Function ShooterGame.PregameViewController.BanMap // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe1030
};

// Class ShooterGame.PregamePlayerModel
// Size: 0xe0 (Inherited: 0x30)
struct UPregamePlayerModel : UObject {
	struct FMulticastInlineDelegate OnTeamIDChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnCharacterChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnCompetitiveTierChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnIsCaptainChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnLockedInChanged; // 0x80(0x10)
	struct FString Subject; // 0x90(0x10)
	struct FName TeamID; // 0xa0(0x0c)
	char pad_AC[0x4]; // 0xac(0x04)
	struct UPlatformPlayer* PlatformPlayer; // 0xb0(0x08)
	struct FString DisplayName; // 0xb8(0x10)
	int32_t CompetitiveTier; // 0xc8(0x04)
	bool bIsCaptain; // 0xcc(0x01)
	char pad_CD[0x3]; // 0xcd(0x03)
	struct UCharacterDataAsset* Character; // 0xd0(0x08)
	bool bIsLockedIn; // 0xd8(0x01)
	bool bIsLocalPlayer; // 0xd9(0x01)
	char pad_DA[0x6]; // 0xda(0x06)

	void SetTeamID(struct FName NewTeamID); // Function ShooterGame.PregamePlayerModel.SetTeamID // (Final|Native|Public) // @ game+0x2fe33e0
	void SetIsLockedIn(bool NewValue); // Function ShooterGame.PregamePlayerModel.SetIsLockedIn // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2bb0
	void SetIsLocalPlayer(bool NewValue); // Function ShooterGame.PregamePlayerModel.SetIsLocalPlayer // (Final|Native|Public) // @ game+0x2fe28e0
	void SetIsCaptain(bool NewValue); // Function ShooterGame.PregamePlayerModel.SetIsCaptain // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2850
	void SetCompetitiveTier(int32_t NewCompetitiveTier); // Function ShooterGame.PregamePlayerModel.SetCompetitiveTier // (Final|Native|Public) // @ game+0x2fe25f0
	void SetCharacter(struct UCharacterDataAsset* NewCharacter); // Function ShooterGame.PregamePlayerModel.SetCharacter // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2490
	bool IsLockedIn(); // Function ShooterGame.PregamePlayerModel.IsLockedIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1fe0
	bool IsLocalPlayer(); // Function ShooterGame.PregamePlayerModel.IsLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1f40
	enum class EPregameTeamID GetTeamIDBP(); // Function ShooterGame.PregamePlayerModel.GetTeamIDBP // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1c40
	struct FString GetSubject(); // Function ShooterGame.PregamePlayerModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe19f0
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.PregamePlayerModel.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee7e50
	bool GetIsCaptain(); // Function ShooterGame.PregamePlayerModel.GetIsCaptain // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1550
	int32_t GetCompetitiveTier(); // Function ShooterGame.PregamePlayerModel.GetCompetitiveTier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1480
	struct UCharacterDataAsset* GetCharacter(); // Function ShooterGame.PregamePlayerModel.GetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced1a0
};

// Class ShooterGame.PregameTeamModel
// Size: 0xb8 (Inherited: 0x30)
struct UPregameTeamModel : UObject {
	struct FMulticastInlineDelegate OnRoleChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPlayerAdded; // 0x40(0x10)
	struct FMulticastInlineDelegate OnPlayerRemoved; // 0x50(0x10)
	struct FMulticastInlineDelegate OnNumPlayersLockedInChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnMajorityVoteWinnerChanged; // 0x70(0x10)
	struct FName ID; // 0x80(0x0c)
	struct FName Role; // 0x8c(0x0c)
	struct TArray<struct UPregamePlayerModel*> Players; // 0x98(0x10)
	int32_t NumPlayersLockedIn; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)
	struct UCharacterDataAsset* MajorityVoteWinner; // 0xb0(0x08)

	enum class EPregameTeamID TeamIDFromName(struct FName& ID); // Function ShooterGame.PregameTeamModel.TeamIDFromName // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2fe38e0
	void SetNumPlayersLockedIn(int32_t NewNumPlayersLockedIn); // Function ShooterGame.PregameTeamModel.SetNumPlayersLockedIn // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe3090
	struct FName NameFromTeamID(enum class EPregameTeamID ID); // Function ShooterGame.PregameTeamModel.NameFromTeamID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2fe20b0
	struct FName GetRole(); // Function ShooterGame.PregameTeamModel.GetRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe19a0
	struct TArray<struct UPregamePlayerModel*> GetPlayers(); // Function ShooterGame.PregameTeamModel.GetPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe17f0
	struct UCharacterDataAsset* GetMajorityVoteWinner(); // Function ShooterGame.PregameTeamModel.GetMajorityVoteWinner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe15d0
	enum class EPregameTeamID GetID(); // Function ShooterGame.PregameTeamModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1520
};

// Class ShooterGame.PregameViewModel
// Size: 0x4e0 (Inherited: 0x30)
struct UPregameViewModel : UObject {
	struct FMulticastInlineDelegate OnMatchIDChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnStateChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnTimeRemainingInPhaseChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnTimeRemainingInStepChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnIsPregameFinishedChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnMapChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnMapSelectPoolChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnBannedMapsChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnCastVotesChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnMapSelectStepsChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnMapSelectStepChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnTeam1Changed; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnGameModeChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnQueueIDChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnLocalPlayerChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnLocalCharacterChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerLockedInChanged; // 0x130(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerLockingInChanged; // 0x140(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerSpectatorChanged; // 0x150(0x10)
	struct FMulticastInlineDelegate OnIsLocalPlayerCoachChanged; // 0x160(0x10)
	struct FMulticastInlineDelegate OnCoachAdded; // 0x170(0x10)
	struct FMulticastInlineDelegate OnEnemyLockinCountChanged; // 0x180(0x10)
	struct FMulticastInlineDelegate OnEnemyTeamSizeChanged; // 0x190(0x10)
	struct FMulticastInlineDelegate OnTimeElapsedChanged; // 0x1a0(0x10)
	struct FMulticastInlineDelegate OnPregameLockInStateChanged; // 0x1b0(0x10)
	struct FMulticastInlineDelegate OnCharacterStateChanged; // 0x1c0(0x10)
	struct FMulticastInlineDelegate OnShowRankedIconsChanged; // 0x1d0(0x10)
	struct FMulticastInlineDelegate OnInitialized; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnTournamentMetadataChanged; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnTournamentRosterMetadataChanged; // 0x200(0x10)
	struct FMulticastInlineDelegate OnPregameDelayedFinalization; // 0x210(0x10)
	bool bInitialized; // 0x220(0x01)
	char pad_221[0x7]; // 0x221(0x07)
	struct UConfigManager* ConfigManager; // 0x228(0x08)
	struct FString MatchID; // 0x230(0x10)
	enum class EPregameMatchState State; // 0x240(0x01)
	char pad_241[0x3]; // 0x241(0x03)
	float TimeRemainingInPhase; // 0x244(0x04)
	struct FDateTime PhaseEndTime; // 0x248(0x08)
	float TimeRemainingInStep; // 0x250(0x04)
	char pad_254[0x4]; // 0x254(0x04)
	struct FDateTime StepEndTime; // 0x258(0x08)
	bool bIsPregameFinished; // 0x260(0x01)
	char pad_261[0x17]; // 0x261(0x17)
	struct TArray<struct FGuid> MapSelectPoolGuids; // 0x278(0x10)
	struct TArray<struct FGuid> BannedMapGuids; // 0x288(0x10)
	struct TArray<struct FPregameCastVoteInternal> CastedVotes; // 0x298(0x10)
	struct TArray<struct FPregameStep> MapSelectSteps; // 0x2a8(0x10)
	int32_t MapSelectStep; // 0x2b8(0x04)
	char pad_2BC[0x4]; // 0x2bc(0x04)
	struct FString Team1; // 0x2c0(0x10)
	struct UGameModeDataAsset* GameMode; // 0x2d0(0x08)
	struct FString QueueID; // 0x2d8(0x10)
	struct TMap<struct FName, struct UPregameTeamModel*> Teams; // 0x2e8(0x50)
	struct TMap<struct FName, struct UPregamePlayerModel*> Coaches; // 0x338(0x50)
	struct UPregamePlayerModel* LocalPlayer; // 0x388(0x08)
	bool bIsLocalPlayerLockedIn; // 0x390(0x01)
	bool bIsLocalPlayerLockingIn; // 0x391(0x01)
	bool bIsLocalPlayerSpectator; // 0x392(0x01)
	bool bIsLocalPlayerCoach; // 0x393(0x01)
	char pad_394[0x4]; // 0x394(0x04)
	struct UCharacterDataAsset* LocalCharacter; // 0x398(0x08)
	struct TMap<struct UCharacterDataAsset*, enum class EPregameCharacterState> CharacterStates; // 0x3a0(0x50)
	int32_t EnemyLockinCount; // 0x3f0(0x04)
	int32_t EnemyTeamSize; // 0x3f4(0x04)
	int32_t TimeElapsed; // 0x3f8(0x04)
	enum class EPregameLockInState LockInState; // 0x3fc(0x01)
	bool bShowRankedIcons; // 0x3fd(0x01)
	bool bAllowDuplicateAgents; // 0x3fe(0x01)
	char pad_3FF[0x1]; // 0x3ff(0x01)
	struct FTournamentMetadata TournamentMetadata; // 0x400(0x80)
	struct FTournamentRosterMetadata RosterMetadata; // 0x480(0x50)
	bool bUseDelayedFinalization; // 0x4d0(0x01)
	bool bIsDelayedFinalizationTriggered; // 0x4d1(0x01)
	char pad_4D2[0x6]; // 0x4d2(0x06)
	struct UContentIndex* ContentIndex; // 0x4d8(0x08)

	bool ShowRankedIcons(); // Function ShooterGame.PregameViewModel.ShowRankedIcons // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe38c0
	void SetTournamentRosterMetadata(struct FTournamentRosterMetadata NewValue); // Function ShooterGame.PregameViewModel.SetTournamentRosterMetadata // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe36e0
	void SetTournamentMetadata(struct FTournamentMetadata NewValue); // Function ShooterGame.PregameViewModel.SetTournamentMetadata // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe3510
	void SetTimeElapsed(int32_t NewTime); // Function ShooterGame.PregameViewModel.SetTimeElapsed // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe3480
	void SetTeam1(struct FString NewTeam); // Function ShooterGame.PregameViewModel.SetTeam1 // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe32e0
	void SetState(enum class EPregameMatchState NewState); // Function ShooterGame.PregameViewModel.SetState // (Final|Native|Public) // @ game+0x2fe3260
	void SetShowRankedIcons(bool NewValue); // Function ShooterGame.PregameViewModel.SetShowRankedIcons // (Final|Native|Public) // @ game+0x2fe31d0
	void SetQueueID(struct FString NewQueueID); // Function ShooterGame.PregameViewModel.SetQueueID // (Final|Native|Public) // @ game+0x2fe3120
	void SetMapSelectSteps(struct TArray<struct FPregameStep> NewSteps); // Function ShooterGame.PregameViewModel.SetMapSelectSteps // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2f90
	void SetMapSelectStep(int32_t NewStep); // Function ShooterGame.PregameViewModel.SetMapSelectStep // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2f00
	void SetMap(struct UMapDataAsset* NewMap); // Function ShooterGame.PregameViewModel.SetMap // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2e70
	void SetLockInState(enum class EPregameLockInState NewLockInState); // Function ShooterGame.PregameViewModel.SetLockInState // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2df0
	void SetLocalPlayer(struct UPregamePlayerModel* NewLocalPlayer); // Function ShooterGame.PregameViewModel.SetLocalPlayer // (Final|Native|Public) // @ game+0x2fe2d60
	void SetLocalCharacter(struct UCharacterDataAsset* NewCharacter); // Function ShooterGame.PregameViewModel.SetLocalCharacter // (Final|Native|Public) // @ game+0x2fe2cd0
	void SetIsPregameFinished(bool bNewIsFinished); // Function ShooterGame.PregameViewModel.SetIsPregameFinished // (Final|Native|Public) // @ game+0x2fe2c40
	void SetIsLocalPlayerSpectator(bool NewSpectator); // Function ShooterGame.PregameViewModel.SetIsLocalPlayerSpectator // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2b20
	void SetIsLocalPlayerLockingIn(bool NewState); // Function ShooterGame.PregameViewModel.SetIsLocalPlayerLockingIn // (Final|Native|Public) // @ game+0x2fe2a90
	void SetIsLocalPlayerLockedIn(bool NewState); // Function ShooterGame.PregameViewModel.SetIsLocalPlayerLockedIn // (Final|Native|Public) // @ game+0x2fe2a00
	void SetIsLocalPlayerCoach(bool NewIsCoach); // Function ShooterGame.PregameViewModel.SetIsLocalPlayerCoach // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2970
	void SetInitialized(); // Function ShooterGame.PregameViewModel.SetInitialized // (Final|Native|Public) // @ game+0x2fe2830
	void SetGameMode(struct UGameModeDataAsset* NewGameMode); // Function ShooterGame.PregameViewModel.SetGameMode // (Final|Native|Public) // @ game+0x2fe27a0
	void SetEnemyTeamSize(int32_t NewCount); // Function ShooterGame.PregameViewModel.SetEnemyTeamSize // (Final|Native|Public) // @ game+0x2fe2710
	void SetEnemyLockinCount(int32_t NewCount); // Function ShooterGame.PregameViewModel.SetEnemyLockinCount // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2680
	void SetCharacterState(struct UCharacterDataAsset* CharacterDataAsset, enum class EPregameCharacterState NewState); // Function ShooterGame.PregameViewModel.SetCharacterState // (Final|Native|Public) // @ game+0x2fe2520
	void SetCastedVotes(struct TArray<struct FPregameCastVote> NewVotes); // Function ShooterGame.PregameViewModel.SetCastedVotes // (Final|Native|Public|BlueprintCallable) // @ game+0x2fe2340
	bool IsPregameFinished(); // Function ShooterGame.PregameViewModel.IsPregameFinished // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe2000
	bool IsLocalPlayerSpectator(); // Function ShooterGame.PregameViewModel.IsLocalPlayerSpectator // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1fc0
	bool IsLocalPlayerLockingIn(); // Function ShooterGame.PregameViewModel.IsLocalPlayerLockingIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1fa0
	bool IsLocalPlayerLockedIn(); // Function ShooterGame.PregameViewModel.IsLocalPlayerLockedIn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1f80
	bool IsLocalPlayerCoach(); // Function ShooterGame.PregameViewModel.IsLocalPlayerCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1f60
	bool IsInitialized(); // Function ShooterGame.PregameViewModel.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1f20
	bool GetUseDelayedFinalization(); // Function ShooterGame.PregameViewModel.GetUseDelayedFinalization // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1e20
	struct FTournamentRosterMetadata GetTournamentRosterMetadata(); // Function ShooterGame.PregameViewModel.GetTournamentRosterMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1df0
	struct FTournamentMetadata GetTournamentMetadata(); // Function ShooterGame.PregameViewModel.GetTournamentMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1d80
	float GetTimerErrorMargin(); // Function ShooterGame.PregameViewModel.GetTimerErrorMargin // (Final|Native|Protected|Const) // @ game+0x2fe1d50
	float GetTimeRemainingInStep(); // Function ShooterGame.PregameViewModel.GetTimeRemainingInStep // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1cf0
	float GetTimeRemainingInPhase(); // Function ShooterGame.PregameViewModel.GetTimeRemainingInPhase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1c90
	int32_t GetTimeElapsed(); // Function ShooterGame.PregameViewModel.GetTimeElapsed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1c70
	struct FString GetTeam1(); // Function ShooterGame.PregameViewModel.GetTeam1 // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1ad0
	struct UPregameTeamModel* GetTeam(enum class EPregameTeamID ID); // Function ShooterGame.PregameViewModel.GetTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1bb0
	enum class EPregameMatchState GetState(); // Function ShooterGame.PregameViewModel.GetState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe19d0
	struct FString GetQueueID(); // Function ShooterGame.PregameViewModel.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe18c0
	struct FString GetMatchID(); // Function ShooterGame.PregameViewModel.GetMatchID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1710
	struct TArray<struct FPregameStep> GetMapSelectSteps(); // Function ShooterGame.PregameViewModel.GetMapSelectSteps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe16e0
	int32_t GetMapSelectStep(); // Function ShooterGame.PregameViewModel.GetMapSelectStep // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe16c0
	struct TArray<struct UMapDataAsset*> GetMapSelectPool(); // Function ShooterGame.PregameViewModel.GetMapSelectPool // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1630
	struct UMapDataAsset* GetMap(); // Function ShooterGame.PregameViewModel.GetMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1600
	enum class EPregameLockInState GetLockInState(); // Function ShooterGame.PregameViewModel.GetLockInState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe15b0
	struct UPregamePlayerModel* GetLocalPlayer(); // Function ShooterGame.PregameViewModel.GetLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1590
	struct UCharacterDataAsset* GetLocalCharacter(); // Function ShooterGame.PregameViewModel.GetLocalCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1570
	struct UGameModeDataAsset* GetGameMode(); // Function ShooterGame.PregameViewModel.GetGameMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e493b0
	int32_t GetEnemyTeamSize(); // Function ShooterGame.PregameViewModel.GetEnemyTeamSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1500
	struct UPregameTeamModel* GetEnemyTeam(); // Function ShooterGame.PregameViewModel.GetEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe14d0
	int32_t GetEnemyLockinCount(); // Function ShooterGame.PregameViewModel.GetEnemyLockinCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe14b0
	struct UPregamePlayerModel* GetCoach(enum class EPregameTeamID ID); // Function ShooterGame.PregameViewModel.GetCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe13f0
	enum class EPregameCharacterState GetCharacterState(struct UCharacterDataAsset* CharacterDataAsset); // Function ShooterGame.PregameViewModel.GetCharacterState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1350
	struct TArray<struct FPregameCastVote> GetCastedVotes(); // Function ShooterGame.PregameViewModel.GetCastedVotes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1260
	struct TArray<struct UMapDataAsset*> GetBannedMaps(); // Function ShooterGame.PregameViewModel.GetBannedMaps // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe11d0
	struct UPregameTeamModel* GetAlliedTeam(); // Function ShooterGame.PregameViewModel.GetAlliedTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe11a0
	bool AllowDuplicateAgents(); // Function ShooterGame.PregameViewModel.AllowDuplicateAgents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fe1010
};

// Class ShooterGame.PreloadManager
// Size: 0x638 (Inherited: 0x80)
struct UPreloadManager : UInitSystem {
	char pad_80[0x30]; // 0x80(0x30)
	bool bAssetPreloadEnabled; // 0xb0(0x01)
	char pad_B1[0x4b7]; // 0xb1(0x4b7)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x568(0x08)
	struct UPregameManager* PregameManager; // 0x570(0x08)
	struct UContentIndex* ContentIndex; // 0x578(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x580(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x588(0x08)
	struct UConfigManager* ConfigManager; // 0x590(0x08)
	char pad_598[0xa0]; // 0x598(0xa0)

	void PreloadSplashScreens(); // Function ShooterGame.PreloadManager.PreloadSplashScreens // (Final|Native|Private) // @ game+0x2fec330
	void OnTransitionToInGameExited(); // Function ShooterGame.PreloadManager.OnTransitionToInGameExited // (Final|Native|Private) // @ game+0x2fec310
	void OnRoundEnd(int32_t RoundNumberEnded); // Function ShooterGame.PreloadManager.OnRoundEnd // (Final|Native|Private) // @ game+0x2fec280
	void OnPregameMatchUpdated(); // Function ShooterGame.PreloadManager.OnPregameMatchUpdated // (Final|Native|Private) // @ game+0x2fec260
	void OnPregameMatchLoadoutsUpdated(); // Function ShooterGame.PreloadManager.OnPregameMatchLoadoutsUpdated // (Final|Native|Private) // @ game+0x2fec240
	void OnPregameEntered(); // Function ShooterGame.PreloadManager.OnPregameEntered // (Final|Native|Private) // @ game+0x2fec220
	void OnMatchCancelled(); // Function ShooterGame.PreloadManager.OnMatchCancelled // (Final|Native|Private) // @ game+0x2fec200
	void OnMainMenuMatchmakingMatchFoundChanged(bool bNewValue); // Function ShooterGame.PreloadManager.OnMainMenuMatchmakingMatchFoundChanged // (Final|Native|Private) // @ game+0x2d67650
	void OnMainMenuEntered(); // Function ShooterGame.PreloadManager.OnMainMenuEntered // (Final|Native|Private) // @ game+0x2fec1e0
	void OnLocalPlayerViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.PreloadManager.OnLocalPlayerViewTargetModeChanged // (Final|Native|Private|HasOutParms) // @ game+0x2e5ecd0
	void OnInitializationExited(); // Function ShooterGame.PreloadManager.OnInitializationExited // (Final|Native|Private) // @ game+0x2fec1c0
	void OnInGameStateEntered(); // Function ShooterGame.PreloadManager.OnInGameStateEntered // (Final|Native|Private) // @ game+0x2fec1a0
	void OnCoreGameMatchLoadoutsUpdated(); // Function ShooterGame.PreloadManager.OnCoreGameMatchLoadoutsUpdated // (Final|Native|Private) // @ game+0x2fec180
	void ClearSplashScreenPreloads(); // Function ShooterGame.PreloadManager.ClearSplashScreenPreloads // (Final|Native|Private) // @ game+0x2feb510
	void ClearMatchPreloads(); // Function ShooterGame.PreloadManager.ClearMatchPreloads // (Final|Native|Private) // @ game+0x2feb4f0
};

// Class ShooterGame.PremierRosterModel
// Size: 0x60 (Inherited: 0x30)
struct UPremierRosterModel : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	int32_t LeaguePoints; // 0x48(0x04)
	int32_t MaxLeaguePoints; // 0x4c(0x04)
	int32_t Division; // 0x50(0x04)
	int32_t BonusMatchesRemaining; // 0x54(0x04)
	int32_t BonusMatchesTotal; // 0x58(0x04)
	bool IsLoaded; // 0x5c(0x01)
	bool DidError; // 0x5d(0x01)
	char pad_5E[0x2]; // 0x5e(0x02)
};

// Class ShooterGame.PremierManager
// Size: 0x1e0 (Inherited: 0x80)
struct UPremierManager : UInitSystem {
	struct FMulticastInlineDelegate OnPremierSeasonsPopulated; // 0x80(0x10)
	bool bInitialized; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct UConfigManager* ConfigManager; // 0x98(0x08)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	struct URMSManager* RMSManager; // 0xa8(0x08)
	struct UContentManager* ContentManager; // 0xb0(0x08)
	struct UContentIndex* ContentIndex; // 0xb8(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0xc0(0x08)
	struct UPremierService* PremierService; // 0xc8(0x08)
	struct UPremierSeasonsModel* PremierSeasonsModel; // 0xd0(0x08)
	struct TMap<struct FString, struct UPremierRosterModel*> CurrentPremierRosterModels; // 0xd8(0x50)
	struct TMap<struct FString, struct UPremierRosterMatchHistoryModel*> CurrentPremierRosterMatchHistoryModels; // 0x128(0x50)
	struct TMap<struct FString, int64_t> CurrentPremierRosterModelVersions; // 0x178(0x50)
	char pad_1C8[0x18]; // 0x1c8(0x18)

	void HandleUpdatedPremierSeasons(struct FPremierSeasonsDTO& PremierSeasons); // Function ShooterGame.PremierManager.HandleUpdatedPremierSeasons // (Final|Native|Private|HasOutParms) // @ game+0x2fec0d0
	struct UPremierSeasonsModel* GetPremierSeasonsModel(); // Function ShooterGame.PremierManager.GetPremierSeasonsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2febd60
	struct UPremierManager* GetPremierManager(struct UObject* WorldContextObject); // Function ShooterGame.PremierManager.GetPremierManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2feba00
	void FetchPremierSeasons(); // Function ShooterGame.PremierManager.FetchPremierSeasons // (Final|Native|Public|BlueprintCallable) // @ game+0x2feb530
};

// Class ShooterGame.PremierRosterMatchHistoryMatchEntryModel
// Size: 0x58 (Inherited: 0x30)
struct UPremierRosterMatchHistoryMatchEntryModel : UObject {
	struct FString MatchID; // 0x30(0x10)
	int64_t LeaguePointsBefore; // 0x40(0x08)
	int64_t LeaguePointsAfter; // 0x48(0x08)
	int64_t LeaguePointsEarned; // 0x50(0x08)
};

// Class ShooterGame.PremierRosterMatchHistoryTournamentEntryModel
// Size: 0xb8 (Inherited: 0x30)
struct UPremierRosterMatchHistoryTournamentEntryModel : UObject {
	struct FString TournamentID; // 0x30(0x10)
	uint32_t FinalPlacement; // 0x40(0x04)
	char pad_44[0x4]; // 0x44(0x04)
	int64_t FinalPlacementLeaguePointsBonus; // 0x48(0x08)
	int64_t LeaguePointsBefore; // 0x50(0x08)
	int64_t LeaguePointsAfter; // 0x58(0x08)
	int64_t LeaguePointsEarned; // 0x60(0x08)
	struct TMap<struct FString, int64_t> MatchEntries; // 0x68(0x50)
};

// Class ShooterGame.PremierRosterMatchHistoryModel
// Size: 0x70 (Inherited: 0x30)
struct UPremierRosterMatchHistoryModel : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	struct TArray<struct UPremierRosterMatchHistoryMatchEntryModel*> LeagueMatchHistory; // 0x48(0x10)
	struct TArray<struct UPremierRosterMatchHistoryTournamentEntryModel*> TournamentHistory; // 0x58(0x10)
	bool IsLoaded; // 0x68(0x01)
	bool DidError; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)
};

// Class ShooterGame.PremierRosterViewController
// Size: 0xf0 (Inherited: 0x80)
struct UPremierRosterViewController : UInitSystem {
	struct FMulticastInlineDelegate OnPremierRosterViewModelUpdated; // 0x80(0x10)
	struct UPremierManager* PremierManager; // 0x90(0x08)
	struct URosterManager* RosterManager; // 0x98(0x08)
	struct TMap<struct FString, struct UPremierRosterViewModel*> PremierRosterViewModels; // 0xa0(0x50)

	void RefreshCurrentPremierRosters(); // Function ShooterGame.PremierRosterViewController.RefreshCurrentPremierRosters // (Final|Native|Public|BlueprintCallable) // @ game+0x2fec350
	void HandleRosterRemoved(struct FString PremierRosterId); // Function ShooterGame.PremierRosterViewController.HandleRosterRemoved // (Final|Native|Private) // @ game+0x2fec020
	void HandleRosterPlayerUpdated(); // Function ShooterGame.PremierRosterViewController.HandleRosterPlayerUpdated // (Final|Native|Private) // @ game+0x2fec000
	void HandleRosterAdded(struct FString PremierRosterId); // Function ShooterGame.PremierRosterViewController.HandleRosterAdded // (Final|Native|Private) // @ game+0x2febf50
	struct UPremierRosterViewModel* GetPremierRosterModel(struct FString RosterID); // Function ShooterGame.PremierRosterViewController.GetPremierRosterModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2febbd0
	void GetPremierPlayerEligibility(struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.PremierRosterViewController.GetPremierPlayerEligibility // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2feba90
};

// Class ShooterGame.PremierRosterViewModel
// Size: 0xe0 (Inherited: 0x30)
struct UPremierRosterViewModel : UObject {
	struct FMulticastInlineDelegate OnPointsChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMaxPointsChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnDivisionChanged; // 0x50(0x10)
	struct FString ID; // 0x60(0x10)
	int32_t LeaguePoints; // 0x70(0x04)
	int32_t MaxLeaguePoints; // 0x74(0x04)
	int32_t BonusMatchesRemaining; // 0x78(0x04)
	int32_t BonusMatchesTotal; // 0x7c(0x04)
	int32_t Division; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)
	struct FPremierDivisionData DivisionData; // 0x88(0x58)

	int32_t GetMaxLeaguePoints(); // Function ShooterGame.PremierRosterViewModel.GetMaxLeaguePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb9e0
	int32_t GetLeaguePoints(); // Function ShooterGame.PremierRosterViewModel.GetLeaguePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb9c0
	struct FString GetID(); // Function ShooterGame.PremierRosterViewModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb88d0
	struct FPremierDivisionData GetDivisionData(); // Function ShooterGame.PremierRosterViewModel.GetDivisionData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb6f0
	int32_t GetDivision(); // Function ShooterGame.PremierRosterViewModel.GetDivision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef7cf0
	int32_t GetBonusMatchesTotal(); // Function ShooterGame.PremierRosterViewModel.GetBonusMatchesTotal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb680
	int32_t GetBonusMatchesRemaining(); // Function ShooterGame.PremierRosterViewModel.GetBonusMatchesRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb660
};

// Class ShooterGame.PremierEventScheduleDataAsset
// Size: 0x48 (Inherited: 0x38)
struct UPremierEventScheduleDataAsset : UDataAsset {
	struct TArray<struct FPremierEventDivisionSchedule> SchedulePerDivision; // 0x38(0x10)
};

// Class ShooterGame.PremierEventMapPoolDataAsset
// Size: 0x48 (Inherited: 0x38)
struct UPremierEventMapPoolDataAsset : UDataAsset {
	struct TArray<struct TSoftClassPtr<UObject>> Maps; // 0x38(0x10)
};

// Class ShooterGame.PremierSeasonDataAsset
// Size: 0xc8 (Inherited: 0x50)
struct UPremierSeasonDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> CompetitiveSeason; // 0x80(0x30)
	struct UDataTable* DivisionDataTable; // 0xb0(0x08)
	struct FDateTime StartTimeOverride; // 0xb8(0x08)
	struct UDataTable* Events; // 0xc0(0x08)

	void GetAllEvents(struct TArray<struct FPremierEventDisplay>& OutEvents); // Function ShooterGame.PremierSeasonDataAsset.GetAllEvents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2feb550
};

// Class ShooterGame.PremierSeasonUIData
// Size: 0x90 (Inherited: 0x90)
struct UPremierSeasonUIData : UBaseContentUIData {
};

// Class ShooterGame.PremierSeasonModel
// Size: 0x88 (Inherited: 0x30)
struct UPremierSeasonModel : UObject {
	struct UPremierSeasonDataAsset* DataAsset; // 0x30(0x08)
	struct FMulticastInlineDelegate OnEventAdded; // 0x38(0x10)
	struct FMulticastInlineDelegate OnEventRemoved; // 0x48(0x10)
	struct FGuid PremierSeasonID; // 0x58(0x10)
	struct FGuid CompetitiveSeasonID; // 0x68(0x10)
	struct TArray<struct UPremierEventModel*> Events; // 0x78(0x10)

	void RemoveEvent(struct FGuid& EventID); // Function ShooterGame.PremierSeasonModel.RemoveEvent // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2fec370
	void GetSortedEvents(struct TArray<struct UPremierEventModel*>& OutEvents); // Function ShooterGame.PremierSeasonModel.GetSortedEvents // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2febea0
	struct FGuid GetPremierSeasonID(); // Function ShooterGame.PremierSeasonModel.GetPremierSeasonID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2febc90
	struct UPremierEventModel* GetFinalEvent(); // Function ShooterGame.PremierSeasonModel.GetFinalEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2feb990
	struct TArray<struct UPremierEventModel*> GetEvents(); // Function ShooterGame.PremierSeasonModel.GetEvents // (Final|Native|Public|Const) // @ game+0x2feb8c0
	struct UPremierEventModel* GetEventModelByID(struct FGuid& EventID); // Function ShooterGame.PremierSeasonModel.GetEventModelByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb810
	struct UPremierEventModel* GetCurrentOrNextEvent(); // Function ShooterGame.PremierSeasonModel.GetCurrentOrNextEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x2feb6c0
	struct FGuid GetCompetitiveSeasonID(); // Function ShooterGame.PremierSeasonModel.GetCompetitiveSeasonID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb6a0
	void AddEvent(struct UPremierEventModel* NewEvent); // Function ShooterGame.PremierSeasonModel.AddEvent // (Final|Native|Public) // @ game+0x2feb3d0
};

// Class ShooterGame.PremierEventScheduleModel
// Size: 0xb8 (Inherited: 0x30)
struct UPremierEventScheduleModel : UObject {
	int32_t Division; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FPremierDivisionData DivisionData; // 0x38(0x58)
	struct FDateTime StartDateTime; // 0x90(0x08)
	struct FDateTime EndDateTime; // 0x98(0x08)
	struct FString QueueID; // 0xa0(0x10)
	int32_t RequiredMaxLeaguePoints; // 0xb0(0x04)
	char pad_B4[0x4]; // 0xb4(0x04)
};

// Class ShooterGame.PremierEventModel
// Size: 0x100 (Inherited: 0x30)
struct UPremierEventModel : UObject {
	enum class EPremierEventType EventType; // 0x30(0x01)
	char pad_31[0x7]; // 0x31(0x07)
	struct FText Name; // 0x38(0x18)
	struct FText Description; // 0x50(0x18)
	struct TMap<int32_t, struct UPremierEventScheduleModel*> SchedulePerDivisionModel; // 0x68(0x50)
	struct FDateTime EarliestStartTime; // 0xb8(0x08)
	struct FDateTime LatestEndTime; // 0xc0(0x08)
	enum class EPremierEventMapSelectionStrategy MapSelectionStrategy; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct TArray<struct UMapDataAsset*> MapPool; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnEventModelChanged; // 0xe0(0x10)
	struct FGuid EventID; // 0xf0(0x10)

	struct FGuid GetEventID(); // Function ShooterGame.PremierEventModel.GetEventID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb7e0
};

// Class ShooterGame.PremierSeasonsModel
// Size: 0xb8 (Inherited: 0x30)
struct UPremierSeasonsModel : UObject {
	char pad_30[0x30]; // 0x30(0x30)
	struct TMap<struct FGuid, struct UPremierSeasonModel*> Seasons; // 0x60(0x50)
	struct UPremierSeasonModel* ActiveSeason; // 0xb0(0x08)

	void SetActiveSeason(struct UPremierSeasonModel* Season); // Function ShooterGame.PremierSeasonsModel.SetActiveSeason // (Final|Native|Public) // @ game+0x2fec4b0
	void RemoveSeason(struct FGuid& SeasonID); // Function ShooterGame.PremierSeasonsModel.RemoveSeason // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2fec410
	struct TMap<struct FGuid, struct UPremierSeasonModel*> GetSeasons(); // Function ShooterGame.PremierSeasonsModel.GetSeasons // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2febd80
	struct UPremierSeasonModel* GetPremierSeasonModelByID(struct FGuid& PremierSeasonID); // Function ShooterGame.PremierSeasonsModel.GetPremierSeasonModelByID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2febcb0
	struct UPremierSeasonModel* GetActiveSeason(); // Function ShooterGame.PremierSeasonsModel.GetActiveSeason // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee7e50
	void AddSeason(struct UPremierSeasonModel* Season); // Function ShooterGame.PremierSeasonsModel.AddSeason // (Final|Native|Public) // @ game+0x2feb460
};

// Class ShooterGame.PremierService
// Size: 0x38 (Inherited: 0x30)
struct UPremierService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.PresenceManager
// Size: 0x128 (Inherited: 0x80)
struct UPresenceManager : UInitSystem {
	struct FMulticastInlineDelegate OnPresencesUpdated; // 0x80(0x10)
	bool bInitialized; // 0x90(0x01)
	char pad_91[0x7]; // 0x91(0x07)
	struct TMap<struct FString, struct FPresenceResourceMap> Presences; // 0x98(0x50)
	struct UPresenceService* PresenceService; // 0xe8(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0xf0(0x08)
	char pad_F8[0x30]; // 0xf8(0x30)

	void HandleChatSessionDisconnected(); // Function ShooterGame.PresenceManager.HandleChatSessionDisconnected // (Final|Native|Private) // @ game+0x2ff3820
	void HandleChatSessionConnected(); // Function ShooterGame.PresenceManager.HandleChatSessionConnected // (Final|Native|Private) // @ game+0x2ff37e0
	struct UPresenceManager* GetPresenceManager(struct UObject* WorldContextObject); // Function ShooterGame.PresenceManager.GetPresenceManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2ff36e0
	struct FAresPresenceInfo GetPresenceInfoBySubject(struct FString Subject); // Function ShooterGame.PresenceManager.GetPresenceInfoBySubject // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff3600
	struct FAresPresenceInfo GetPresenceInfoByPid(struct FString Pid); // Function ShooterGame.PresenceManager.GetPresenceInfoByPid // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff3520
};

// Class ShooterGame.PresenceService
// Size: 0x38 (Inherited: 0x30)
struct UPresenceService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.PresenceUpdater
// Size: 0x2b8 (Inherited: 0x80)
struct UPresenceUpdater : UInitSystem {
	char pad_80[0x8]; // 0x80(0x08)
	bool bInitialized; // 0x88(0x01)
	bool bIsShutdown; // 0x89(0x01)
	char pad_8A[0x6]; // 0x8a(0x06)
	struct FAresPresenceData TargetPresenceData; // 0x90(0x170)
	struct UPresenceService* PresenceService; // 0x200(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x208(0x08)
	struct UPartyManager* PartyManager; // 0x210(0x08)
	struct UCustomGameManager* CustomGameManager; // 0x218(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x220(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x228(0x08)
	struct UPresenceManager* PresenceManager; // 0x230(0x08)
	struct URSOManager* RSOManager; // 0x238(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0x240(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x248(0x08)
	struct UPregameManager* PregameManager; // 0x250(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x258(0x08)
	struct UMatchmakingManager* MatchmakingManager; // 0x260(0x08)
	struct UInventoryManager* InventoryManager; // 0x268(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x270(0x08)
	struct UConfigManager* ConfigManager; // 0x278(0x08)
	struct UAccountXPManager* AccountXPManager; // 0x280(0x08)
	struct UMMRManager* MMRManager; // 0x288(0x08)
	char pad_290[0x28]; // 0x290(0x28)

	void SetGameState(struct AShooterGameState* NewGameState); // Function ShooterGame.PresenceUpdater.SetGameState // (Final|Native|Private) // @ game+0x2ff3c30
	void RefreshPresenceInfo(); // Function ShooterGame.PresenceUpdater.RefreshPresenceInfo // (Final|Native|Private) // @ game+0x2ff3b50
	void PerformPresenceUpdate(); // Function ShooterGame.PresenceUpdater.PerformPresenceUpdate // (Final|Native|Private) // @ game+0x2ff3b30
	void HandlePointsUpdated(); // Function ShooterGame.PresenceUpdater.HandlePointsUpdated // (Final|Native|Private) // @ game+0x2ff3930
	void HandlePlatformFault(enum class EPlatformFaultReason& Reason); // Function ShooterGame.PresenceUpdater.HandlePlatformFault // (Final|Native|Private|HasOutParms) // @ game+0x2ff38a0
	void HandleInGameStateExited(); // Function ShooterGame.PresenceUpdater.HandleInGameStateExited // (Final|Native|Private) // @ game+0x2ff3880
	void HandleInGameStateEntered(); // Function ShooterGame.PresenceUpdater.HandleInGameStateEntered // (Final|Native|Private) // @ game+0x2ff3860
	void HandleChatSessionDisconnected(); // Function ShooterGame.PresenceUpdater.HandleChatSessionDisconnected // (Final|Native|Private) // @ game+0x2ff3840
	void HandleChatSessionConnected(); // Function ShooterGame.PresenceUpdater.HandleChatSessionConnected // (Final|Native|Private) // @ game+0x2ff3800
};

// Class ShooterGame.ProgressModelSet
// Size: 0xc8 (Inherited: 0x88)
struct UProgressModelSet : UManualNumericProgressModelBase {
	struct TArray<struct FProgressModelSet_ChildData> ChildObjects; // 0x88(0x10)
	char pad_98[0x30]; // 0x98(0x30)

	void SetReady(bool NewValue); // Function ShooterGame.ProgressModelSet.SetReady // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff3d40
	void SetProgressCalculationMode(enum class ENumericProgressCalculationMode NewValue); // Function ShooterGame.ProgressModelSet.SetProgressCalculationMode // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff3cc0
	void RemoveProgressObject(struct TScriptInterface<IProgressModel> ProgressObject); // Function ShooterGame.ProgressModelSet.RemoveProgressObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff3b90
	void RemoveAllProgressObjects(); // Function ShooterGame.ProgressModelSet.RemoveAllProgressObjects // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff3b70
	bool IsReady(); // Function ShooterGame.ProgressModelSet.IsReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ff3b00
	void HandleProgressValueChanged(struct UObject* Source); // Function ShooterGame.ProgressModelSet.HandleProgressValueChanged // (Final|Native|Private) // @ game+0x2ff3a70
	void HandleProgressStateChanged(struct UObject* Source); // Function ShooterGame.ProgressModelSet.HandleProgressStateChanged // (Final|Native|Private) // @ game+0x2ff39e0
	void HandleProgressCompleted(struct UObject* Source); // Function ShooterGame.ProgressModelSet.HandleProgressCompleted // (Final|Native|Private) // @ game+0x2ff3950
	enum class ENumericProgressCalculationMode GetProgressCalculationMode(); // Function ShooterGame.ProgressModelSet.GetProgressCalculationMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ff3770
	struct UProgressModelSet* Create(enum class ENumericProgressCalculationMode ProgressCalculationMode, struct TArray<struct TScriptInterface<IProgressModel>>& ProgressObjects, bool bStartReady, struct UObject* Outer); // Function ShooterGame.ProgressModelSet.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2ff3380
	void AddProgressObjects(struct TArray<struct TScriptInterface<IProgressModel>>& ProgressObjects); // Function ShooterGame.ProgressModelSet.AddProgressObjects // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2ff3290
	void AddProgressObject(struct TScriptInterface<IProgressModel> ProgressObject); // Function ShooterGame.ProgressModelSet.AddProgressObject // (Final|Native|Public|BlueprintCallable) // @ game+0x2ff31f0
};

// Class ShooterGame.ProjectileBounceComponent
// Size: 0x1a8 (Inherited: 0xf8)
struct UProjectileBounceComponent : UProjectileCollisionResponseComponent {
	struct FMulticastInlineDelegate OnProjectileBounce; // 0xf8(0x10)
	char bBounceAngleAffectsFriction : 1; // 0x108(0x01)
	char pad_108_1 : 7; // 0x108(0x01)
	char pad_109[0x3]; // 0x109(0x03)
	float Bounciness; // 0x10c(0x04)
	float Friction; // 0x110(0x04)
	float BounceVelocityProjectileStopThreshold; // 0x114(0x04)
	struct FClassInclusionExclusionFilter StopTypeFilter; // 0x118(0x50)
	struct FName CannotStopTag; // 0x168(0x0c)
	float ShortBounceDistance; // 0x174(0x04)
	int32_t MaxShortBounces; // 0x178(0x04)
	float BounceStopSurfaceAngle; // 0x17c(0x04)
	float MinBounceWhenCannotStop; // 0x180(0x04)
	float MinLateralWhenCannotStop; // 0x184(0x04)
	char pad_188[0x10]; // 0x188(0x10)
	char DefaultBounceAngleAffectsFriction : 1; // 0x198(0x01)
	char pad_198_1 : 7; // 0x198(0x01)
	char pad_199[0x3]; // 0x199(0x03)
	float DefaultBounciness; // 0x19c(0x04)
	float DefaultFriction; // 0x1a0(0x04)
	float DefaultBounceVelocityProjectileStopThreshold; // 0x1a4(0x04)
};

// Class ShooterGame.ProjectileThrowStateComponent
// Size: 0x330 (Inherited: 0x2c8)
struct UProjectileThrowStateComponent : UScriptStateComponent {
	struct FMulticastInlineDelegate OnThrow; // 0x2c8(0x10)
	struct FProjectileThrowTuning ProjectileTuning; // 0x2d8(0x40)
	bool bAddToContext; // 0x318(0x01)
	char pad_319[0x7]; // 0x319(0x07)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0x320(0x08)
	char pad_328[0x8]; // 0x328(0x08)

	void OnOwningEquippableSetOwner(struct AAresEquippable* Equippable, struct AActor* NewOwner); // Function ShooterGame.ProjectileThrowStateComponent.OnOwningEquippableSetOwner // (Final|Native|Private) // @ game+0x3001350
	bool IsOnCooldown(); // Function ShooterGame.ProjectileThrowStateComponent.IsOnCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3001070
	void GetThrowingLocationAndDirection(struct FVector& Location, struct FVector& Direction); // Function ShooterGame.ProjectileThrowStateComponent.GetThrowingLocationAndDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3000f00
	bool CanThrow(); // Function ShooterGame.ProjectileThrowStateComponent.CanThrow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3000a30
};

// Class ShooterGame.ProjectileDownStateComponent
// Size: 0x330 (Inherited: 0x330)
struct UProjectileDownStateComponent : UProjectileThrowStateComponent {

	void GetThrowingLocation(struct FVector& Location, struct FVector& Direction); // Function ShooterGame.ProjectileDownStateComponent.GetThrowingLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ffa6d0
};

// Class ShooterGame.ProjectileEstimationComponent
// Size: 0x5e0 (Inherited: 0x570)
struct UProjectileEstimationComponent : USphereComponent {
	struct FProjectileThrowTuning ThrowInfo; // 0x568(0x40)
	bool bManualProjectileInfo; // 0x5a8(0x01)
	struct FProjectileEstimationInfo ProjectileInfo; // 0x5ac(0x34)

	struct TArray<struct FVector> EstimateProjectileTrajectory(struct AShooterCharacter* Thrower, struct FVector& FiringLocation, struct FVector& FiringDirection, struct TArray<struct AActor*>& IgnoredActors, enum class EChildActorIgnoreSetting ChildActorIgnoreSetting, float TimeStep, float MaxEstimatedDistance, int32_t MaxEstimatedBounces, float MaxEstimatedTime); // Function ShooterGame.ProjectileEstimationComponent.EstimateProjectileTrajectory // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x2ff94d0
};

// Class ShooterGame.ProjectileFollowComponent
// Size: 0x128 (Inherited: 0x108)
struct UProjectileFollowComponent : USpectateActionComponent {
	bool bShouldFollowProjectile; // 0x108(0x01)
	char pad_109[0x7]; // 0x109(0x07)
	struct UFreeCamComponent* CachedFreeCamComponent; // 0x110(0x08)
	char pad_118[0x10]; // 0x118(0x10)

	void ServerSetFollowProjectiles(bool bFollowProjectiles); // Function ShooterGame.ProjectileFollowComponent.ServerSetFollowProjectiles // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x2ffad30
	void RequestSetProjectileFollowEnabled(bool bShouldBeEnabled); // Function ShooterGame.ProjectileFollowComponent.RequestSetProjectileFollowEnabled // (Final|Native|Private) // @ game+0x2ffaca0
	void OnViewTargetChanged(struct AActor* OldViewTarget, struct AActor* NewViewTarget, struct FViewTargetTransitionParams& TransitionParams); // Function ShooterGame.ProjectileFollowComponent.OnViewTargetChanged // (Final|Native|Private|HasOutParms) // @ game+0x2ffab40
	void OnOwnerSubobjectReplicated(struct UObject* Subobject); // Function ShooterGame.ProjectileFollowComponent.OnOwnerSubobjectReplicated // (Final|Native|Private) // @ game+0x2ffaab0
	void OnAuthBeforePendingViewTargetIsApplied(); // Function ShooterGame.ProjectileFollowComponent.OnAuthBeforePendingViewTargetIsApplied // (Final|Native|Private) // @ game+0x2ffaa90
	void HandleViewTargetDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.ProjectileFollowComponent.HandleViewTargetDestroyed // (Final|Native|Private) // @ game+0x2ffa890
	void AuthHandleFocusProjectileInvalidated(struct AShooterCharacter* OwningCharacter, struct AActor* Projectile); // Function ShooterGame.ProjectileFollowComponent.AuthHandleFocusProjectileInvalidated // (Final|Native|Private) // @ game+0x2ff93e0
	void AuthHandleFocusProjectileChanged(struct AShooterCharacter* OwningCharacter, struct AActor* Projectile); // Function ShooterGame.ProjectileFollowComponent.AuthHandleFocusProjectileChanged // (Final|Native|Private) // @ game+0x2ff9310
};

// Class ShooterGame.ProjectileLeftStateComponent
// Size: 0x330 (Inherited: 0x330)
struct UProjectileLeftStateComponent : UProjectileThrowStateComponent {

	void GetThrowingLocation(struct FVector& Location, struct FVector& Direction); // Function ShooterGame.ProjectileLeftStateComponent.GetThrowingLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ffa7b0
};

// Class ShooterGame.ProjectileRightStateComponent
// Size: 0x330 (Inherited: 0x330)
struct UProjectileRightStateComponent : UProjectileThrowStateComponent {

	void GetThrowingLocation(struct FVector& Location, struct FVector& Direction); // Function ShooterGame.ProjectileRightStateComponent.GetThrowingLocation // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3000e20
};

// Class ShooterGame.ProjectileStickComponent
// Size: 0x168 (Inherited: 0xf8)
struct UProjectileStickComponent : UProjectileCollisionResponseComponent {
	struct FMulticastInlineDelegate OnProjectileStick; // 0xf8(0x10)
	struct FClassInclusionExclusionFilter StuckToFilter; // 0x108(0x50)
	bool bShouldAlignToStickPoint; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	struct FRotator AlignmentOffset; // 0x15c(0x0c)
};

// Class ShooterGame.ProjectileStopOnFloorComponent
// Size: 0x160 (Inherited: 0xf8)
struct UProjectileStopOnFloorComponent : UProjectileCollisionResponseComponent {
	float StopSurfaceAngle; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct FClassInclusionExclusionFilter FloorTypeFilter; // 0x100(0x50)
	struct FName InvalidFloorTag; // 0x150(0x0c)
	char pad_15C[0x4]; // 0x15c(0x04)
};

// Class ShooterGame.PropMovementComponent
// Size: 0x138 (Inherited: 0x128)
struct UPropMovementComponent : UMovementComponent {
	float Bounciness; // 0x128(0x04)
	float Friction; // 0x12c(0x04)
	float BounceVelocityProjectileStopThreshold; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
};

// Class ShooterGame.ProvisioningErrorNotificationManager
// Size: 0x90 (Inherited: 0x80)
struct UProvisioningErrorNotificationManager : UInitSystem {
	struct URMSManager* RMSManager; // 0x80(0x08)
	struct UNotificationManager* NotificationManager; // 0x88(0x08)

	void HandleVersionProvisioningError(); // Function ShooterGame.ProvisioningErrorNotificationManager.HandleVersionProvisioningError // (Final|Native|Private) // @ game+0x1e6e7b0
	void HandleGenericDismiss(struct UGenericNotification* Notification); // Function ShooterGame.ProvisioningErrorNotificationManager.HandleGenericDismiss // (Final|Native|Private) // @ game+0x2cb4be0
	void HandleGeneralProvisioningError(); // Function ShooterGame.ProvisioningErrorNotificationManager.HandleGeneralProvisioningError // (Final|Native|Private) // @ game+0x1e6e7b0
};

// Class ShooterGame.PurchasableFilterComponent
// Size: 0x108 (Inherited: 0xe8)
struct UPurchasableFilterComponent : UActorComponent {
	struct TArray<struct UAresPurchasable*> Allowlist; // 0xe8(0x10)
	struct TArray<struct UAresPurchasable*> Denylist; // 0xf8(0x10)

	bool PassesFilter(struct UAresPurchasable* Purchasable); // Function ShooterGame.PurchasableFilterComponent.PassesFilter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3001870
	bool ClassPassesFilter(struct UAresPurchasable*& Purchasable); // Function ShooterGame.PurchasableFilterComponent.ClassPassesFilter // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3000a60
	void AuthSetDenylist(struct TArray<struct UAresPurchasable*>& NewDenylist); // Function ShooterGame.PurchasableFilterComponent.AuthSetDenylist // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e5ed60
	void AuthSetAllowlist(struct TArray<struct UAresPurchasable*>& NewAllowlist); // Function ShooterGame.PurchasableFilterComponent.AuthSetAllowlist // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e5ed60
	void AuthClearDenylist(); // Function ShooterGame.PurchasableFilterComponent.AuthClearDenylist // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthClearAllowlist(); // Function ShooterGame.PurchasableFilterComponent.AuthClearAllowlist // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
};

// Class ShooterGame.PurchasedItemComponent
// Size: 0x100 (Inherited: 0xe8)
struct UPurchasedItemComponent : UActorComponent {
	struct UAresPurchasableEquippable* Purchaseable; // 0xe8(0x08)
	bool bIsCurrentSessionPurchase; // 0xf0(0x01)
	char pad_F1[0x7]; // 0xf1(0x07)
	struct AShooterPlayerState* PurchasingPlayerState; // 0xf8(0x08)

	bool IsCurrentSessionPurchase(); // Function ShooterGame.PurchasedItemComponent.IsCurrentSessionPurchase // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08d30
	void HandleDropped(struct AAresEquippable* Equippable); // Function ShooterGame.PurchasedItemComponent.HandleDropped // (Final|Native|Private) // @ game+0x3000fe0
};

// Class ShooterGame.PurchaseManager
// Size: 0xd0 (Inherited: 0x30)
struct UPurchaseManager : UObject {
	struct FMulticastInlineDelegate OnOrderSubmitted; // 0x30(0x10)
	struct FMulticastInlineDelegate OnOrderProcessed; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOrderFailed; // 0x50(0x10)
	struct FDelegate OnStoreManagerSubmitOrderSuccess; // 0x60(0x14)
	struct FDelegate OnStoreManagerSubmitOrderError; // 0x74(0x14)
	struct UConfigManager* ConfigManager; // 0x88(0x08)
	struct UStoreManager* StoreManager; // 0x90(0x08)
	struct UStoreUITelemetryManager* UITelemetryManager; // 0x98(0x08)
	struct UPlayerFeedbackToolViewController* PlayerFeedbackToolViewController; // 0xa0(0x08)
	struct FGuid OrderXID; // 0xa8(0x10)
	struct FGuid OrderID; // 0xb8(0x10)
	enum class EPurchaseSource PurchaseSource; // 0xc8(0x01)
	enum class EPurchaseType PurchaseType; // 0xc9(0x01)
	enum class EJuiceOrderRequestType JuiceCraftType; // 0xca(0x01)
	enum class EPurchaseState PurchaseState; // 0xcb(0x01)
	char pad_CC[0x4]; // 0xcc(0x04)

	void UpdatePurchaseState(enum class EPurchaseState NewState); // Function ShooterGame.PurchaseManager.UpdatePurchaseState // (Final|Native|Private) // @ game+0x30026f0
	bool TrySubmitOrderSetup(struct FGuid XID, enum class EPurchaseType NewPurchaseType, enum class EPurchaseSource NewPurchaseSource); // Function ShooterGame.PurchaseManager.TrySubmitOrderSetup // (Final|Native|Private|HasDefaults) // @ game+0x3002590
	void SubmitJuiceCraftOrder(enum class EPurchaseSource JuicePurchaseSource, struct FGuid XID, enum class EJuiceOrderRequestType JuiceOrderType, struct TMap<struct FGuid, int32_t> ExpectedCosts, struct TArray<struct FEntitlementReward> ExpectedEntitlementRewards, struct TArray<struct FWalletReward> ExpectedWalletRewards, struct FItemProgressionDTO ExpectedProgression); // Function ShooterGame.PurchaseManager.SubmitJuiceCraftOrder // (Final|Native|Public|HasDefaults) // @ game+0x3002150
	void OnSubmitOrderSuccess(struct FOrderResponse& OrderResponse); // Function ShooterGame.PurchaseManager.OnSubmitOrderSuccess // (Final|Native|Private|HasOutParms) // @ game+0x30015a0
	void OnSubmitOrderError(); // Function ShooterGame.PurchaseManager.OnSubmitOrderError // (Final|Native|Private) // @ game+0x3001580
	void OnProcessOrderSuccess(struct FGuid& CompletedOrderID); // Function ShooterGame.PurchaseManager.OnProcessOrderSuccess // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x30014c0
	void OnProcessOrderError(struct FGuid& FailedOrderID); // Function ShooterGame.PurchaseManager.OnProcessOrderError // (Final|Native|Private|HasOutParms|HasDefaults) // @ game+0x3001420
	struct FName GetConfigBlockingOrderOrNone(); // Function ShooterGame.PurchaseManager.GetConfigBlockingOrderOrNone // (Final|Native|Public|BlueprintCallable) // @ game+0x3000be0
	void CleanupOrder(); // Function ShooterGame.PurchaseManager.CleanupOrder // (Final|Native|Private) // @ game+0x3000b00
};

// Class ShooterGame.PurchaseModal
// Size: 0x2d8 (Inherited: 0x2c8)
struct UPurchaseModal : UUserWidget {
	struct UPurchaseModalViewModel* ViewModel; // 0x2c8(0x08)
	struct UPurchaseModalViewController* ViewController; // 0x2d0(0x08)

	void UpgradeContract(struct FGuid ContractDefinitionID, struct UCurrencyDataAsset* PurchaseCurrency, int32_t PurchasePrice); // Function ShooterGame.PurchaseModal.UpgradeContract // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3002770
	void SetUpgradeCurrencyOffer(struct UUpgradeCurrencyOffer* Offer); // Function ShooterGame.PurchaseModal.SetUpgradeCurrencyOffer // (Final|Native|Public|BlueprintCallable) // @ game+0x30020c0
	void SetSidegradeUnlock(struct FGuid ItemProgressionDefinitionID, struct USidegradeModel* SidegradeModel); // Function ShooterGame.PurchaseModal.SetSidegradeUnlock // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3001fe0
	void SetOfferInBundle(struct UStoreOffer* Offer, struct UBundleViewModel* Bundle); // Function ShooterGame.PurchaseModal.SetOfferInBundle // (Final|Native|Public|BlueprintCallable) // @ game+0x3001f10
	void SetOffer(struct UStoreOffer* Offer); // Function ShooterGame.PurchaseModal.SetOffer // (Final|Native|Public|BlueprintCallable) // @ game+0x3001e80
	void SetItemUnlockV2(struct FGuid ItemProgressionDefinitionID, struct UCurrencyDataAsset* PurchaseCurrency, int32_t PurchasePrice, int32_t CurrentLevel, int32_t FromLevel, int32_t ToLevel); // Function ShooterGame.PurchaseModal.SetItemUnlockV2 // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3001ca0
	void SetContractUnlock(struct FGuid ContractDefinitionID, struct UCurrencyDataAsset* PurchaseCurrency, int32_t PurchasePrice, int32_t FromLevel, int32_t ToLevel); // Function ShooterGame.PurchaseModal.SetContractUnlock // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3001b00
	void SetBundle(struct UBundleViewModel* Bundle); // Function ShooterGame.PurchaseModal.SetBundle // (Final|Native|Public|BlueprintCallable) // @ game+0x3001a70
	void SetBonusOffer(struct UBonusStoreOfferViewModel* BonusOffer); // Function ShooterGame.PurchaseModal.SetBonusOffer // (Final|Native|Public|BlueprintCallable) // @ game+0x30019e0
	struct UPurchaseModalViewModel* GetViewModel(); // Function ShooterGame.PurchaseModal.GetViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e493d0
	struct UPurchaseModalViewController* GetViewController(); // Function ShooterGame.PurchaseModal.GetViewController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e493b0
};

// Class ShooterGame.PurchaseModalViewController
// Size: 0xc8 (Inherited: 0x30)
struct UPurchaseModalViewController : UObject {
	struct FMulticastInlineDelegate OnOrderSubmitted; // 0x30(0x10)
	struct FMulticastInlineDelegate OnOrderComplete; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOrderError; // 0x50(0x10)
	enum class EPurchaseSource ModalPurchaseSource; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct UStoreManager* StoreManager; // 0x68(0x08)
	struct UConfigManager* ConfigManager; // 0x70(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0x78(0x08)
	struct UContractsManager* ContractsManager; // 0x80(0x08)
	struct UPurchaseModalViewModel* ViewModel; // 0x88(0x08)
	struct UStoreUITelemetryManager* UITelemetryManager; // 0x90(0x08)
	struct UPlayerFeedbackToolViewController* PlayerFeedbackToolViewController; // 0x98(0x08)
	struct UInventoryManager* InventoryManager; // 0xa0(0x08)
	struct FGuid TransactionXID; // 0xa8(0x10)
	struct FGuid OrderID; // 0xb8(0x10)

	void UpdateLocalInventory(); // Function ShooterGame.PurchaseModalViewController.UpdateLocalInventory // (Final|Native|Protected) // @ game+0x30026d0
	void UnlockItemProgress(); // Function ShooterGame.PurchaseModalViewController.UnlockItemProgress // (Final|Native|Protected) // @ game+0x30026b0
	void TryGetSurveyOnStorePurchaseEvent(); // Function ShooterGame.PurchaseModalViewController.TryGetSurveyOnStorePurchaseEvent // (Final|Native|Protected) // @ game+0x3002570
	void SubmitOrderInternal(); // Function ShooterGame.PurchaseModalViewController.SubmitOrderInternal // (Final|Native|Protected) // @ game+0x3002550
	void SubmitOrder(); // Function ShooterGame.PurchaseModalViewController.SubmitOrder // (Final|Native|Public|BlueprintCallable) // @ game+0x3002530
	void SendTelemetryForPurchaseEvent(bool PurchaseCancelled); // Function ShooterGame.PurchaseModalViewController.SendTelemetryForPurchaseEvent // (Final|Native|Protected) // @ game+0x3001950
	void SendPurchaseCompleteEvent(); // Function ShooterGame.PurchaseModalViewController.SendPurchaseCompleteEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3001930
	void SendPurchaseCancelEvent(); // Function ShooterGame.PurchaseModalViewController.SendPurchaseCancelEvent // (Final|Native|Public|BlueprintCallable) // @ game+0x3001910
	void OnWalletUpdated(); // Function ShooterGame.PurchaseModalViewController.OnWalletUpdated // (Final|Native|Protected) // @ game+0x3001850
	void OnUnlockSubmittedInternal(struct FPurchaseResponse& OrderResponse); // Function ShooterGame.PurchaseModalViewController.OnUnlockSubmittedInternal // (Final|Native|Protected|HasOutParms) // @ game+0x30017b0
	void OnUnlockSubmitErrorInternal(struct FAmbassadorError& ErrorResponse); // Function ShooterGame.PurchaseModalViewController.OnUnlockSubmitErrorInternal // (Final|Native|Protected|HasOutParms) // @ game+0x30016c0
	void OnPurchaseStateChanged(); // Function ShooterGame.PurchaseModalViewController.OnPurchaseStateChanged // (Final|Native|Protected) // @ game+0x3001560
	void OnOrderSubmittedInternal(struct FOrderResponse& OrderResponse); // Function ShooterGame.PurchaseModalViewController.OnOrderSubmittedInternal // (Final|Native|Protected|HasOutParms) // @ game+0x3001230
	void OnOrderSubmitErrorInternal(); // Function ShooterGame.PurchaseModalViewController.OnOrderSubmitErrorInternal // (Final|Native|Protected) // @ game+0x3001210
	void OnOrderErrorInternal(struct FGuid& FailedOrderID); // Function ShooterGame.PurchaseModalViewController.OnOrderErrorInternal // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3001170
	void OnOrderCompleteInternal(struct FGuid& CompletedOrderID); // Function ShooterGame.PurchaseModalViewController.OnOrderCompleteInternal // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x30010d0
	bool IsOrderBlockedByConfig(); // Function ShooterGame.PurchaseModalViewController.IsOrderBlockedByConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x30010a0
	enum class EOfferType GetOfferType(); // Function ShooterGame.PurchaseModalViewController.GetOfferType // (Final|Native|Protected) // @ game+0x3000df0
	struct TArray<struct FString> GetExpectedRewardIDsForStorePurchase(); // Function ShooterGame.PurchaseModalViewController.GetExpectedRewardIDsForStorePurchase // (Final|Native|Protected) // @ game+0x3000d00
	struct TSet<enum class EAresContentType> GetExpectedContentTypes(); // Function ShooterGame.PurchaseModalViewController.GetExpectedContentTypes // (Final|Native|Protected) // @ game+0x3000c20
	void EquipRewards(struct FDelegate& OnComplete); // Function ShooterGame.PurchaseModalViewController.EquipRewards // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3000b20
};

// Class ShooterGame.PurchaseModalViewModel
// Size: 0x198 (Inherited: 0x30)
struct UPurchaseModalViewModel : UObject {
	int32_t PurchasePrice; // 0x30(0x04)
	struct FGuid PurchaseCurrency; // 0x34(0x10)
	bool IsDiscountApplied; // 0x44(0x01)
	char pad_45[0x3]; // 0x45(0x03)
	int32_t DiscountAmount; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct FMulticastInlineDelegate OnWalletBalanceUpdated; // 0x50(0x10)
	struct FGuid OfferId; // 0x60(0x10)
	enum class EPurchaseType PurchaseType; // 0x70(0x01)
	char pad_71[0x3]; // 0x71(0x03)
	int32_t CurrentLevel; // 0x74(0x04)
	int32_t FromLevel; // 0x78(0x04)
	int32_t ToLevel; // 0x7c(0x04)
	struct FGuid ContractDefinitionID; // 0x80(0x10)
	struct FGuid ItemProgressionDefinitionID; // 0x90(0x10)
	struct FGuid SidegradeID; // 0xa0(0x10)
	struct FGuid SidegradeOptionID; // 0xb0(0x10)
	struct TArray<struct FWalletCost> SidegradeCosts; // 0xc0(0x10)
	struct TArray<struct FEntitlementReward> BundlePurchaseExpectedEntitlementRewards; // 0xd0(0x10)
	struct TArray<struct FWalletReward> BundlePurchaseExpectedWalletRewards; // 0xe0(0x10)
	struct TMap<struct FGuid, int32_t> BundlePurchaseExpectedCosts; // 0xf0(0x50)
	char pad_140[0x18]; // 0x140(0x18)
	enum class EPurchaseState State; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	int32_t WalletBalance; // 0x15c(0x04)
	struct UStoreOffer* Offer; // 0x160(0x08)
	struct TArray<struct FStoreOfferReward> Rewards; // 0x168(0x10)
	struct TArray<struct UEntitlementRewardModel*> SidegradeRewards; // 0x178(0x10)
	struct UBundleViewModel* Bundle; // 0x188(0x08)
	struct UUpgradeCurrencyOffer* UpgradeCurrencyOffer; // 0x190(0x08)

	int32_t GetWalletBalance(); // Function ShooterGame.PurchaseModalViewModel.GetWalletBalance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e90250
	struct UUpgradeCurrencyOffer* GetUpgradeCurrencyOffer(); // Function ShooterGame.PurchaseModalViewModel.GetUpgradeCurrencyOffer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008da0
	struct UEntitlementRewardModel* GetSidegradeVariantReward(); // Function ShooterGame.PurchaseModalViewModel.GetSidegradeVariantReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008ce0
	struct TArray<struct UEntitlementRewardModel*> GetSidegradeRewards(); // Function ShooterGame.PurchaseModalViewModel.GetSidegradeRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008c10
	struct TArray<struct FStoreOfferReward> GetRewards(); // Function ShooterGame.PurchaseModalViewModel.GetRewards // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008b70
	int32_t GetPriceToPay(); // Function ShooterGame.PurchaseModalViewModel.GetPriceToPay // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008a70
	struct UBundleViewModel* GetBundle(); // Function ShooterGame.PurchaseModalViewModel.GetBundle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008920
};

// Class ShooterGame.PushNotificationsListener
// Size: 0x48 (Inherited: 0x30)
struct UPushNotificationsListener : UObject {
	struct UPushNotificationsManager* PushNotificationsManager; // 0x30(0x08)
	struct UPartyViewController* PartyViewController; // 0x38(0x08)
	struct UPartyNotificationManager* PartyNotificationManager; // 0x40(0x08)
};

// Class ShooterGame.PushNotificationsManager
// Size: 0xa0 (Inherited: 0x80)
struct UPushNotificationsManager : UInitSystem {
	struct UPushNotificationsService* PushNotificationsService; // 0x80(0x08)
	struct UPushNotificationsListener* PushNotificationsListener; // 0x88(0x08)
	struct URSOManager* RSOManager; // 0x90(0x08)
	char pad_98[0x8]; // 0x98(0x08)

	struct UPushNotificationsManager* GetPushNotificationsManager(struct UObject* WorldContextObject); // Function ShooterGame.PushNotificationsManager.GetPushNotificationsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3008aa0
};

// Class ShooterGame.PushNotificationsService
// Size: 0x38 (Inherited: 0x30)
struct UPushNotificationsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.QueuedNotification
// Size: 0x70 (Inherited: 0x30)
struct UQueuedNotification : UObject {
	struct FMulticastInlineDelegate OnDisplay; // 0x30(0x10)
	struct FMulticastInlineDelegate OnDispose; // 0x40(0x10)
	struct FMulticastInlineDelegate OnResponse; // 0x50(0x10)
	struct UGenericNotification* NotificationData; // 0x60(0x08)
	char pad_68[0x8]; // 0x68(0x08)

	void HandleGenericNotificationResponse(struct UGenericNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.QueuedNotification.HandleGenericNotificationResponse // (Final|Native|Public) // @ game+0x3008dc0
	struct UGenericNotification* GetNotificationData(); // Function ShooterGame.QueuedNotification.GetNotificationData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fc90e0
	bool GetIsDisposed(); // Function ShooterGame.QueuedNotification.GetIsDisposed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f672f0
	void Dispose(); // Function ShooterGame.QueuedNotification.Dispose // (Final|Native|Public|BlueprintCallable) // @ game+0x3008900
};

// Class ShooterGame.QueuedNotificationConsumerComponent
// Size: 0x100 (Inherited: 0xe8)
struct UQueuedNotificationConsumerComponent : UActorComponent {
	struct UQueuedNotification* CurrentNotification; // 0xe8(0x08)
	char pad_F0[0x8]; // 0xf0(0x08)
	struct UQueuedNotification* PendingNotification; // 0xf8(0x08)

	void Resume(); // Function ShooterGame.QueuedNotificationConsumerComponent.Resume // (Final|Native|Public|BlueprintCallable) // @ game+0x30090c0
	void Pause(); // Function ShooterGame.QueuedNotificationConsumerComponent.Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x30090a0
	void OnCanRemoveNotification(struct UQueuedNotification* Notification); // Function ShooterGame.QueuedNotificationConsumerComponent.OnCanRemoveNotification // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnCanDisplayNotification(struct UQueuedNotification* Notification); // Function ShooterGame.QueuedNotificationConsumerComponent.OnCanDisplayNotification // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool HasPendingNotification(); // Function ShooterGame.QueuedNotificationConsumerComponent.HasPendingNotification // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f08ef0
	void ConsumeNotification(struct UQueuedNotification* Notification); // Function ShooterGame.QueuedNotificationConsumerComponent.ConsumeNotification // (Final|Native|Public|BlueprintCallable) // @ game+0x3008870
};

// Class ShooterGame.RadialBuffProjectileEffectComponent
// Size: 0x140 (Inherited: 0xf8)
struct URadialBuffProjectileEffectComponent : UBaseProjectileEffectComponent {
	float ExplosionBuffLevel; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct UAresGameplayBuff* ExplosionBuffClass; // 0x100(0x08)
	float ExplosionMinimumBuffLevel; // 0x108(0x04)
	float ExplosionBuffLevelFalloff; // 0x10c(0x04)
	float ExplosionRadius; // 0x110(0x04)
	float ExplosionInnerRadius; // 0x114(0x04)
	float AxialSearchRadius; // 0x118(0x04)
	enum class ECollisionChannel ExplosionSearchTraceChannel; // 0x11c(0x01)
	char pad_11D[0x3]; // 0x11d(0x03)
	struct UDamageType* DamageType; // 0x120(0x08)
	bool bIgnoreVictimsThatShareInstigator; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
	struct FMulticastInlineDelegate OnAppliedRadialBuff; // 0x130(0x10)
};

// Class ShooterGame.RadialDamageProjectileEffectComponent
// Size: 0x138 (Inherited: 0xf8)
struct URadialDamageProjectileEffectComponent : UBaseProjectileEffectComponent {
	float ExplosionDamage; // 0xf8(0x04)
	float ExplosionMinimumDamage; // 0xfc(0x04)
	float ExplosionDamageFalloff; // 0x100(0x04)
	float ExplosionRadius; // 0x104(0x04)
	float ExplosionInnerRadius; // 0x108(0x04)
	float AxialSearchRadius; // 0x10c(0x04)
	enum class ECollisionChannel ExplosionSearchTraceChannel; // 0x110(0x01)
	bool AxialSearchBackwards; // 0x111(0x01)
	char pad_112[0x6]; // 0x112(0x06)
	struct UDamageType* DamageType; // 0x118(0x08)
	bool bIgnoreVictimsThatShareInstigator; // 0x120(0x01)
	char pad_121[0x7]; // 0x121(0x07)
	struct FMulticastInlineDelegate OnDealtRadialDamage; // 0x128(0x10)
};

// Class ShooterGame.RadialForceModuleProjectileEffectComponent
// Size: 0x118 (Inherited: 0xf8)
struct URadialForceModuleProjectileEffectComponent : UBaseProjectileEffectComponent {
	enum class EAresTeamTargeting TeamFilter; // 0xf8(0x01)
	char pad_F9[0x3]; // 0xf9(0x03)
	float Radius; // 0xfc(0x04)
	float AxialSearchRadius; // 0x100(0x04)
	enum class ECollisionChannel RadiusSearchTraceChannel; // 0x104(0x01)
	char pad_105[0x3]; // 0x105(0x03)
	struct UForceModule* ForceModule; // 0x108(0x08)
	float Duration; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)
};

// Class ShooterGame.RadialTargetingStateComponent
// Size: 0x390 (Inherited: 0x2c8)
struct URadialTargetingStateComponent : UScriptStateComponent {
	enum class ERadialTargetSourcePoint SourcePoint; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
	struct FClassInclusionExclusionFilter TargetFilter; // 0x2d0(0x50)
	float Radius; // 0x320(0x04)
	enum class ECollisionChannel SearchCollision; // 0x324(0x01)
	char pad_325[0x3]; // 0x325(0x03)
	float ConeAngle; // 0x328(0x04)
	float ConePullBack; // 0x32c(0x04)
	bool bTwoDimensionalCone; // 0x330(0x01)
	bool bCheckLineOfSight; // 0x331(0x01)
	enum class ECollisionChannel LineOfSightCollision; // 0x332(0x01)
	enum class EAresTeamTargeting TeamFilter; // 0x333(0x01)
	char pad_334[0x50]; // 0x334(0x50)
	bool bDrawDebugTargeting; // 0x384(0x01)
	char pad_385[0xb]; // 0x385(0x0b)
};

// Class ShooterGame.RankedAbilityChargeComponent
// Size: 0x190 (Inherited: 0x168)
struct URankedAbilityChargeComponent : UEquipmentChargeComponent {
	struct TArray<struct FRankChargeInfo> RankInfo; // 0x168(0x10)
	struct FMulticastInlineDelegate OnRankChanged; // 0x178(0x10)
	int32_t CurrentRank; // 0x188(0x04)
	int32_t RankBoughtThisRound; // 0x18c(0x04)

	void OnRep_CurrentRank(); // Function ShooterGame.RankedAbilityChargeComponent.OnRep_CurrentRank // (Final|Native|Protected) // @ game+0x3008f30
	int32_t GetRankBoughtThisRound(); // Function ShooterGame.RankedAbilityChargeComponent.GetRankBoughtThisRound // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008b30
	int32_t GetMaxRank(); // Function ShooterGame.RankedAbilityChargeComponent.GetMaxRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008a40
	int32_t GetCurrentRank(); // Function ShooterGame.RankedAbilityChargeComponent.GetCurrentRank // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008940
};

// Class ShooterGame.RateLimiterComponent
// Size: 0x118 (Inherited: 0xe8)
struct URateLimiterComponent : UActorComponent {
	struct FRateLimiter RateLimiter; // 0xe8(0x30)

	bool IsOnExtendedCooldown(struct UObject* WorldContextObject); // Function ShooterGame.RateLimiterComponent.IsOnExtendedCooldown // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008e90
	float GetExtendedCooldownTimeRemaining(struct UObject* WorldContextObject); // Function ShooterGame.RateLimiterComponent.GetExtendedCooldownTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008970
	bool AttemptAction(struct UObject* WorldContextObject); // Function ShooterGame.RateLimiterComponent.AttemptAction // (Final|Native|Public|BlueprintCallable) // @ game+0x30087d0
};

// Class ShooterGame.ReadyingStateComponent
// Size: 0x458 (Inherited: 0x3a0)
struct UReadyingStateComponent : UTimedStateComponent {
	struct FScriptStateEffectInfo ReadyingEffects[0x3]; // 0x3a0(0xa8)
	float ReadyingTimes[0x3]; // 0x448(0x0c)
	enum class EEquipSpeed AuthEquipSpeed; // 0x454(0x01)
	enum class EEquipSpeed LocallyPredictedEquipSpeed; // 0x455(0x01)
	bool bAlwaysFastEquipNormalSpeed; // 0x456(0x01)
	enum class EEquipSpeed EquipSpeedOverride; // 0x457(0x01)

	void SetAlwaysFastEquipOnNormalEquip(bool bShouldAlwaysFastEquipNormalSpeed); // Function ShooterGame.ReadyingStateComponent.SetAlwaysFastEquipOnNormalEquip // (Final|Native|Public|BlueprintCallable) // @ game+0x30090e0
	void OverrideReadyingTimeForEquipSpeed(enum class EEquipSpeed EquipSpeedToOverride, float NewReadyingTime); // Function ShooterGame.ReadyingStateComponent.OverrideReadyingTimeForEquipSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3008fd0
	void OverrideNextEquipSpeed(enum class EEquipSpeed EquipSpeed); // Function ShooterGame.ReadyingStateComponent.OverrideNextEquipSpeed // (Final|Native|Public|BlueprintCallable) // @ game+0x3008f50
	float GetUnmodifiedReadyingTime(enum class EEquipSpeed EquipSpeed); // Function ShooterGame.ReadyingStateComponent.GetUnmodifiedReadyingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3008d10
	enum class EEquipSpeed GetLocallyPredictedEquipSpeed(); // Function ShooterGame.ReadyingStateComponent.GetLocallyPredictedEquipSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3008a10
};

// Class ShooterGame.ReflectedPlayerSettingsManager
// Size: 0x80 (Inherited: 0x30)
struct UReflectedPlayerSettingsManager : UObject {
	char pad_30[0x50]; // 0x30(0x50)

	void RemoveIntSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresIntSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.RemoveIntSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x300ea40
	void RemoveFloatSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresFloatSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.RemoveFloatSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x300ea40
	void RemoveBoolSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.RemoveBoolSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x300ea40
	int32_t GetIntSetting(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresIntSettingName SettingEnum); // Function ShooterGame.ReflectedPlayerSettingsManager.GetIntSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300edd0
	float GetFloatSetting(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresFloatSettingName SettingEnum); // Function ShooterGame.ReflectedPlayerSettingsManager.GetFloatSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300ed00
	bool GetBoolSetting(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingEnum); // Function ShooterGame.ReflectedPlayerSettingsManager.GetBoolSetting // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d2b970
	void AddIntSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresIntSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.AddIntSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x300ea40
	void AddFloatSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresFloatSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.AddFloatSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x300ea40
	void AddBoolSettingChangedEvent(struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingEnum, struct FDelegate& Event); // Function ShooterGame.ReflectedPlayerSettingsManager.AddBoolSettingChangedEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x300ea40
};

// Class ShooterGame.RelevantFogOfWarComponent
// Size: 0x320 (Inherited: 0x320)
struct URelevantFogOfWarComponent : UFogOfWarComponent {
};

// Class ShooterGame.ReloadStateComponent
// Size: 0x3f8 (Inherited: 0x368)
struct UReloadStateComponent : URespondToEventStateComponent {
	struct FMulticastInlineDelegate OnAmmoLoaded; // 0x368(0x10)
	struct FMulticastInlineDelegate OnReloadAnimationComplete; // 0x378(0x10)
	struct FMulticastInlineDelegate OnReloadSubstateEntered; // 0x388(0x10)
	enum class EMagazineEjectableBehavior MagazineEjectableBehavior; // 0x398(0x01)
	char pad_399[0x3]; // 0x399(0x03)
	float AnimationTime; // 0x39c(0x04)
	bool bReloadFullClip; // 0x3a0(0x01)
	char pad_3A1[0x7]; // 0x3a1(0x07)
	struct TArray<struct FTriggerInput> ReloadTriggerInputs; // 0x3a8(0x10)
	float IntroTime; // 0x3b8(0x04)
	float LoadTime; // 0x3bc(0x04)
	int32_t ReloadAmountPerCycle; // 0x3c0(0x04)
	char pad_3C4[0x4]; // 0x3c4(0x04)
	struct UAmmoComponent* RegisteredAmmoComponent; // 0x3c8(0x08)
	struct UStateComponent* ReturnState; // 0x3d0(0x08)
	struct FReloadStateVariables ReloadStateVariables; // 0x3d8(0x18)
	struct AShooterCharacter* ReloadingCharacter; // 0x3f0(0x08)

	void UpdateLoadTime(float NewLoadTime); // Function ShooterGame.ReloadStateComponent.UpdateLoadTime // (Final|Native|Public|BlueprintCallable) // @ game+0x30103e0
	void UpdateIntroTime(float NewIntroTime); // Function ShooterGame.ReloadStateComponent.UpdateIntroTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3010360
	void UpdateAnimationTime(float NewAnimationTime); // Function ShooterGame.ReloadStateComponent.UpdateAnimationTime // (Final|Native|Public|BlueprintCallable) // @ game+0x30102e0
	void SetReturnState(struct UStateComponent* State); // Function ShooterGame.ReloadStateComponent.SetReturnState // (Final|Native|Public|BlueprintCallable) // @ game+0x2faa280
	void SetResourceComponent(struct UAmmoComponent* AmmoComponent); // Function ShooterGame.ReloadStateComponent.SetResourceComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3010140
	void PreventReloadChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ReloadStateComponent.PreventReloadChanged // (Final|Native|Private|HasOutParms) // @ game+0x300f670
	bool IsTriggerInput(enum class EAresEquippableInput Input, enum class EAresEquippableInputAction InputAction); // Function ShooterGame.ReloadStateComponent.IsTriggerInput // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300f510
	bool IsSetToCycleReload(); // Function ShooterGame.ReloadStateComponent.IsSetToCycleReload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300f4e0
	bool IsAnyTriggerInputHeld(); // Function ShooterGame.ReloadStateComponent.IsAnyTriggerInputHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300f270
	void InterruptReloadWithNewState(struct UStateComponent* NewState, struct UStateTransitionContext* TransitionContext); // Function ShooterGame.ReloadStateComponent.InterruptReloadWithNewState // (Final|Native|Public|BlueprintCallable) // @ game+0x300f1a0
	float GetReloadTimeModifier(); // Function ShooterGame.ReloadStateComponent.GetReloadTimeModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300eed0
	int32_t GetNumReloadCycles(); // Function ShooterGame.ReloadStateComponent.GetNumReloadCycles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300eea0
	struct UAmmoComponent* GetAmmoComponent(); // Function ShooterGame.ReloadStateComponent.GetAmmoComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300ecd0
	bool CanReload(enum class ECanReloadAmmoCheckOption AmmoCheckOption); // Function ShooterGame.ReloadStateComponent.CanReload // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300ebb0
	bool AmmoCheck(); // Function ShooterGame.ReloadStateComponent.AmmoCheck // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x300eb80
};

// Class ShooterGame.RemoteClientMovementComponent
// Size: 0x1c8 (Inherited: 0xe8)
struct URemoteClientMovementComponent : UActorComponent {
	struct UMovementTimeShiftMonitor* SharedRemoteTimeShiftMonitor; // 0xe8(0x08)
	int32_t NumRebases; // 0xf0(0x04)
	int32_t NumRebasesFromOverqueue; // 0xf4(0x04)
	bool DebugForceRebase; // 0xf8(0x01)
	char pad_F9[0x37]; // 0xf9(0x37)
	struct TSet<struct UShooterCharacterMovement*> RemoteCharacterMovementComponents; // 0x130(0x50)
	struct TArray<struct AShooterCharacter*> ShooterCharacterTickOrdering; // 0x180(0x10)
	struct UShooterCharacterMovement* MovementComponentWithMostUnprocessedQueuedMoves; // 0x190(0x08)
	char pad_198[0x30]; // 0x198(0x30)

	void OnRoundEnded(int32_t RoundNumberEnded); // Function ShooterGame.RemoteClientMovementComponent.OnRoundEnded // (Final|Native|Private) // @ game+0x300f5e0
	bool HasAnyRemoteClientTickedThisFrame(); // Function ShooterGame.RemoteClientMovementComponent.HasAnyRemoteClientTickedThisFrame // (Final|Native|Private|Const) // @ game+0x300f170
};

// Class ShooterGame.RemoteNetworkedGameStateComponent
// Size: 0x108 (Inherited: 0xe8)
struct URemoteNetworkedGameStateComponent : UActorComponent {
	struct TArray<struct AShooterCharacter*> RegisteredShooterCharacters; // 0xe8(0x10)
	char pad_F8[0x4]; // 0xf8(0x04)
	float AllySendRatePerSecond; // 0xfc(0x04)
	char pad_100[0x8]; // 0x100(0x08)

	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.RemoteNetworkedGameStateComponent.OnRoundBegin // (Final|Native|Private) // @ game+0x2ca3d20
	void AuthSuppressEnemyDataTransmission(bool bSuppress); // Function ShooterGame.RemoteNetworkedGameStateComponent.AuthSuppressEnemyDataTransmission // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
};

// Class ShooterGame.ReplayBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UReplayBlueprintLibrary : UBlueprintFunctionLibrary {

	void ToggleReplayPause(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.ToggleReplayPause // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3010260
	bool ShouldRecordMatch(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.ShouldRecordMatch // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30101d0
	void SetReplaySpeed(struct UObject* WorldContextObject, float Speed); // Function ShooterGame.ReplayBlueprintLibrary.SetReplaySpeed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3010080
	void SetReplayPaused(struct UObject* WorldContextObject, bool bShouldPause); // Function ShooterGame.ReplayBlueprintLibrary.SetReplayPaused // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x300ffc0
	bool IsReplaySystemEnabled(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplaySystemEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x300f450
	bool IsReplayRecording(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplayRecording // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x300f3c0
	bool IsReplayPlaying(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplayPlaying // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x300f330
	bool IsReplayPaused(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.IsReplayPaused // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x300f2a0
	void GotoTimeInReplay(struct UObject* WorldContextObject, float TimeInSeconds); // Function ShooterGame.ReplayBlueprintLibrary.GotoTimeInReplay // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x300f0b0
	float GetReplayTotalTime(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.GetReplayTotalTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x300f020
	float GetReplaySpeed(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.GetReplaySpeed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x300ef90
	float GetReplayCurrentTime(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.GetReplayCurrentTime // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x300ef00
	bool CanShowRecordMatchOption(struct UObject* WorldContextObject); // Function ShooterGame.ReplayBlueprintLibrary.CanShowRecordMatchOption // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x300ec40
};

// Class ShooterGame.ReplayEffectComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UReplayEffectComponent : UActorComponent {

	void ReplayStopContinuousEffectAtLocation(struct FEffectID EffectID, float StopMovementTime); // Function ShooterGame.ReplayEffectComponent.ReplayStopContinuousEffectAtLocation // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x300fec0
	void ReplayPlayOneShotEffectAtLocation(struct AEffectContainer* EffectContainer, struct UObject* EffectContext, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, enum class EAresAlliance AllianceFilter, float StartMovementTime); // Function ShooterGame.ReplayEffectComponent.ReplayPlayOneShotEffectAtLocation // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x300fbb0
	void ReplayPlayContinuousEffectAtLocation(struct AEffectContainer* EffectContainer, struct FEffectID CurrentEffectID, struct UObject* EffectContext, struct FEffectData EffectData, struct FVector Location, struct FRotator Rotation, enum class EAresAlliance AllianceFilter, float StartMovementTime); // Function ShooterGame.ReplayEffectComponent.ReplayPlayContinuousEffectAtLocation // (Net|NetReliableNative|Event|NetMulticast|Public|HasDefaults) // @ game+0x300f840
};

// Class ShooterGame.ReplayMovementComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UReplayMovementComponent : UActorComponent {
};

// Class ShooterGame.ReplayPlayerController
// Size: 0x840 (Inherited: 0x738)
struct AReplayPlayerController : APlayerController {
	char pad_738[0x8]; // 0x738(0x08)
	struct FRateLimiter RateLimiterSettings; // 0x740(0x30)
	char pad_770[0x10]; // 0x770(0x10)
	struct FMulticastInlineDelegate OnScrubComplete; // 0x780(0x10)
	struct UPMMovementToolingComponent* MovementToolingComponent; // 0x790(0x08)
	struct UReplayMovementComponent* ReplayMovementComponent; // 0x798(0x08)
	struct UGamepadInputComponent* GamepadInputComponent; // 0x7a0(0x08)
	struct UViewTargetComponent* ViewTargetComponent; // 0x7a8(0x08)
	struct UScreenTransitionComponent* ScreenTransitionComponent; // 0x7b0(0x08)
	struct USpectateInOrderActionComponent* SpectateInOrderActionComponent; // 0x7b8(0x08)
	struct USpectateSpecificActionComponent* SpectateSpecificActionComponent; // 0x7c0(0x08)
	struct UFreeCamComponent* FreeCamComponent; // 0x7c8(0x08)
	struct UProjectileFollowComponent* ProjectileFollowComponent; // 0x7d0(0x08)
	char pad_7D8[0x68]; // 0x7d8(0x68)

	void ShowUI(int32_t Show); // Function ShooterGame.ReplayPlayerController.ShowUI // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetSlowSpeed(float Value); // Function ShooterGame.ReplayPlayerController.SetSlowSpeed // (Final|Exec|Native|Public) // @ game+0x2cee3b0
	void SetFastSpeed(float Value); // Function ShooterGame.ReplayPlayerController.SetFastSpeed // (Final|Exec|Native|Public) // @ game+0x2cee3b0
	void OnTargetStateReplicated(struct AShooterCharacter* PossessedCharacter); // Function ShooterGame.ReplayPlayerController.OnTargetStateReplicated // (Final|Native|Private) // @ game+0x3018e10
	void OnReplayJumpComplete(struct UWorld* World); // Function ShooterGame.ReplayPlayerController.OnReplayJumpComplete // (Final|Native|Private) // @ game+0x3018d60
	void OnFreeCamToggled(bool bFreeCamEnabled); // Function ShooterGame.ReplayPlayerController.OnFreeCamToggled // (Final|Native|Private) // @ game+0x3018c70
	void ClearStateOnSpectateSpecific(); // Function ShooterGame.ReplayPlayerController.ClearStateOnSpectateSpecific // (Final|Native|Private) // @ game+0x30184a0
	void AuthFindValidSpectateTarget(); // Function ShooterGame.ReplayPlayerController.AuthFindValidSpectateTarget // (Final|Native|Private) // @ game+0x30181d0
	void ApplySettingsCustomizations(); // Function ShooterGame.ReplayPlayerController.ApplySettingsCustomizations // (Final|Native|Public|BlueprintCallable) // @ game+0x30181b0
};

// Class ShooterGame.ReplicationSleepComponent
// Size: 0x118 (Inherited: 0xe8)
struct UReplicationSleepComponent : UActorComponent {
	enum class EReplicationSleepWhen SleepWhen; // 0xe8(0x01)
	bool bIgnoreSleepingChanges; // 0xe9(0x01)
	char pad_EA[0x2]; // 0xea(0x02)
	float SleepingUpdateRate; // 0xec(0x04)
	float TimeToSleep; // 0xf0(0x04)
	char pad_F4[0xc]; // 0xf4(0x0c)
	struct FTimerHandle BeginSleepTimerHandle; // 0x100(0x08)
	struct FTimerHandle ChangesTimerHandle; // 0x108(0x08)
	enum class EReplicationSleepState SleepState; // 0x110(0x01)
	char pad_111[0x3]; // 0x111(0x03)
	float LastValidChangeTime; // 0x114(0x04)

	void RequestSleep(); // Function ShooterGame.ReplicationSleepComponent.RequestSleep // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30190c0
	void RequestAwake(); // Function ShooterGame.ReplicationSleepComponent.RequestAwake // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30190a0
	void NetUpdateForced(struct AActor* Actor); // Function ShooterGame.ReplicationSleepComponent.NetUpdateForced // (Final|Native|Private) // @ game+0x3018be0
	enum class EReplicationSleepState GetSleepState(); // Function ShooterGame.ReplicationSleepComponent.GetSleepState // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f29ad0
};

// Class ShooterGame.ReporterFeedbackManager
// Size: 0x1b8 (Inherited: 0x80)
struct UReporterFeedbackManager : UInitSystem {
	char pad_80[0x120]; // 0x80(0x120)
	struct UReporterFeedbackService* ReporterFeedbackService; // 0x1a0(0x08)
	struct UModalManager* ModalManager; // 0x1a8(0x08)
	struct UConfigManager* ConfigManager; // 0x1b0(0x08)

	void HandleReporterFeedbackDialogAction(struct UQueuedNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.ReporterFeedbackManager.HandleReporterFeedbackDialogAction // (Final|Native|Public) // @ game+0x3018a20
	struct UReporterFeedbackManager* GetReporterFeedbackManager(struct UObject* WorldContextObject); // Function ShooterGame.ReporterFeedbackManager.GetReporterFeedbackManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3018700
};

// Class ShooterGame.ReporterFeedbackService
// Size: 0x38 (Inherited: 0x30)
struct UReporterFeedbackService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.ResetForRespawnInterface
// Size: 0x30 (Inherited: 0x30)
struct UResetForRespawnInterface : UInterface {

	void OneTimeInitialization(); // Function ShooterGame.ResetForRespawnInterface.OneTimeInitialization // (Native|Event|Public|BlueprintEvent) // @ game+0x2f54970
	void InitializeForRespawn(); // Function ShooterGame.ResetForRespawnInterface.InitializeForRespawn // (Native|Event|Public|BlueprintEvent) // @ game+0x2f54940
	void CleanupForRespawn(); // Function ShooterGame.ResetForRespawnInterface.CleanupForRespawn // (Native|Event|Public|BlueprintEvent) // @ game+0x2fda240
};

// Class ShooterGame.ResourceVisualizationComponent
// Size: 0x108 (Inherited: 0xe8)
struct UResourceVisualizationComponent : UActorComponent {
	struct FMulticastInlineDelegate OnVisualizationChanged; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnIconChanged; // 0xf8(0x10)

	struct UTexture2D* GetIcon(); // Function ShooterGame.ResourceVisualizationComponent.GetIcon // (Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3018650
	struct FAmmoHudInfo GetAmmoHudInfo(bool& bOutIsValid); // Function ShooterGame.ResourceVisualizationComponent.GetAmmoHudInfo // (Native|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3018590
};

// Class ShooterGame.AmmoResourceVisualizationComponent
// Size: 0x110 (Inherited: 0x108)
struct UAmmoResourceVisualizationComponent : UResourceVisualizationComponent {
	struct UAmmoComponent* AmmoComponent; // 0x108(0x08)

	void SetAmmoComponent(struct UAmmoComponent* ResourceComponent); // Function ShooterGame.AmmoResourceVisualizationComponent.SetAmmoComponent // (Final|Native|Private|BlueprintCallable) // @ game+0x3019290
	void HandleAmmoChanged(struct UResourceComponent* ResourceComponent); // Function ShooterGame.AmmoResourceVisualizationComponent.HandleAmmoChanged // (Final|Native|Private) // @ game+0x30187f0
	struct UAmmoComponent* GetAmmoComponent(); // Function ShooterGame.AmmoResourceVisualizationComponent.GetAmmoComponent // (Final|Native|Private|BlueprintCallable|BlueprintPure) // @ game+0x3018560
};

// Class ShooterGame.BlueprintResourceVisualizationComponent
// Size: 0x138 (Inherited: 0x108)
struct UBlueprintResourceVisualizationComponent : UResourceVisualizationComponent {
	struct FAmmoHudInfo PredictedAmmoHudInfo; // 0x108(0x10)
	struct FAmmoHudInfo AuthAmmoHudInfo; // 0x118(0x10)
	struct UTexture2D* Icon; // 0x128(0x08)
	struct UValueDisagreementTimer* ClientPredictedValueDisagreementTimer; // 0x130(0x08)

	void SyncToAuthValues(); // Function ShooterGame.BlueprintResourceVisualizationComponent.SyncToAuthValues // (Final|Native|Protected) // @ game+0x3018df0
	void SetIcon(struct UTexture2D* NewIcon); // Function ShooterGame.BlueprintResourceVisualizationComponent.SetIcon // (Final|Native|Public|BlueprintCallable) // @ game+0x30193b0
	void SetAmmoHudInfo(struct FAmmoHudInfo NewAmmoHudInfo); // Function ShooterGame.BlueprintResourceVisualizationComponent.SetAmmoHudInfo // (Final|Native|Public|BlueprintCallable) // @ game+0x3019320
	void OnStableValueDisagreement(); // Function ShooterGame.BlueprintResourceVisualizationComponent.OnStableValueDisagreement // (Final|Native|Protected) // @ game+0x3018df0
	void OnRep_Icon(); // Function ShooterGame.BlueprintResourceVisualizationComponent.OnRep_Icon // (Final|Native|Protected) // @ game+0x3018d40
	void OnRep_AuthAmmoHudInfo(); // Function ShooterGame.BlueprintResourceVisualizationComponent.OnRep_AuthAmmoHudInfo // (Final|Native|Protected) // @ game+0x3018d00
	bool IsAboveValueDisagreementThreshold(); // Function ShooterGame.BlueprintResourceVisualizationComponent.IsAboveValueDisagreementThreshold // (Final|Native|Protected|Const) // @ game+0x3018af0
};

// Class ShooterGame.RestrictionsManager
// Size: 0x2f8 (Inherited: 0x80)
struct URestrictionsManager : UInitSystem {
	struct FMulticastInlineDelegate OnQueueRestrictionChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnPenalizedPlayersChanged; // 0x90(0x10)
	char pad_A0[0x228]; // 0xa0(0x228)
	struct URestrictionsService* RestrictionsService; // 0x2c8(0x08)
	struct URSOManager* RSOManager; // 0x2d0(0x08)
	struct URMSManager* RMSManager; // 0x2d8(0x08)
	struct UConfigManager* ConfigManager; // 0x2e0(0x08)
	struct UModalManager* ModalManager; // 0x2e8(0x08)
	char pad_2F0[0x8]; // 0x2f0(0x08)

	void RemoveAvoidListEntry(struct FString EntrySubject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.RestrictionsManager.RemoveAvoidListEntry // (Final|Native|Public|BlueprintCallable) // @ game+0x3021fc0
	bool IsOnAvoidList(struct FString Subject); // Function ShooterGame.RestrictionsManager.IsOnAvoidList // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021f00
	bool HasQueueRestriction(struct FString QueueID); // Function ShooterGame.RestrictionsManager.HasQueueRestriction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021df0
	void HandleRestrictionsWarningDialogAction(struct UQueuedNotification* Notification, enum class EAresNotificationResponseType ResponseType); // Function ShooterGame.RestrictionsManager.HandleRestrictionsWarningDialogAction // (Final|Native|Public) // @ game+0x3021d20
	struct URestrictionsManager* GetRestrictionsManager(struct UObject* WorldContextObject); // Function ShooterGame.RestrictionsManager.GetRestrictionsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3021aa0
	struct FDateTime GetQueueRestrictionExpiry(struct FString QueueID); // Function ShooterGame.RestrictionsManager.GetQueueRestrictionExpiry // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021990
	struct FString GetPenalizedMatchID(); // Function ShooterGame.RestrictionsManager.GetPenalizedMatchID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30217e0
	struct TArray<enum class EInfractionType> GetInfractionsForSubject(struct FString Puuid); // Function ShooterGame.RestrictionsManager.GetInfractionsForSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021690
	void AddAvoidListEntry(struct FString EntrySubject, struct FString MatchID, struct FString QueueID, bool OverrideEnabled, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.RestrictionsManager.AddAvoidListEntry // (Final|Native|Public|BlueprintCallable) // @ game+0x3020d70
};

// Class ShooterGame.RestrictionsService
// Size: 0x40 (Inherited: 0x30)
struct URestrictionsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
	struct URSOManager* RSOManager; // 0x38(0x08)
};

// Class ShooterGame.ResurrectPlayerSpawner
// Size: 0x50 (Inherited: 0x48)
struct UResurrectPlayerSpawner : UDynamicLocationPlayerSpawner {
	char pad_48[0x8]; // 0x48(0x08)

	void SetResurrector(struct AOwnerExclusivePlayerInfo* ResurrectorPlayerInfo); // Function ShooterGame.ResurrectPlayerSpawner.SetResurrector // (Final|Native|Public|BlueprintCallable) // @ game+0x3022140
	struct AOwnerExclusivePlayerInfo* GetResurrector(); // Function ShooterGame.ResurrectPlayerSpawner.GetResurrector // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5ccc0
	struct UResurrectPlayerSpawner* CreateResurrectSpawner(); // Function ShooterGame.ResurrectPlayerSpawner.CreateResurrectSpawner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3020ff0
};

// Class ShooterGame.ReusableHitScanProjectileComponent
// Size: 0x130 (Inherited: 0xe8)
struct UReusableHitScanProjectileComponent : UActorComponent {
	struct FProjectileTuning ProjectileTuning; // 0xe8(0x20)
	float ErrorPower; // 0x108(0x04)
	int32_t ErrorRetries; // 0x10c(0x04)
	int32_t RoundsBetweenTracers; // 0x110(0x04)
	int32_t RoundsBetweenImpacts; // 0x114(0x04)
	int32_t RoundsUntilNextTracer; // 0x118(0x04)
	int32_t RoundsUntilNextImpact; // 0x11c(0x04)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0x120(0x08)
	struct AProjectile* ReusableHitScanProjectile; // 0x128(0x08)

	void FireProjectiles(struct UStabilityComponent* StabilityComponent, struct FVector& FiringLocation, struct FVector FiringDirection); // Function ShooterGame.ReusableHitScanProjectileComponent.FireProjectiles // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3021020
};

// Class ShooterGame.RewardGrantModelFactory
// Size: 0x38 (Inherited: 0x30)
struct URewardGrantModelFactory : UObject {
	struct UContentIndex* ContentIndex; // 0x30(0x08)
};

// Class ShooterGame.RewardModel
// Size: 0x30 (Inherited: 0x30)
struct URewardModel : UObject {
};

// Class ShooterGame.EntitlementRewardModel
// Size: 0x40 (Inherited: 0x30)
struct UEntitlementRewardModel : URewardModel {
	int32_t Amount; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct UAresBasePrimaryDataAsset* DataAssetAsBaseType; // 0x38(0x08)

	enum class EAresContentType GetContentType(); // Function ShooterGame.EntitlementRewardModel.GetContentType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30211e0
	struct UAresBasePrimaryDataAsset* GetBaseDataAsset(); // Function ShooterGame.EntitlementRewardModel.GetBaseDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e6dbf0
	int32_t GetAmount(); // Function ShooterGame.EntitlementRewardModel.GetAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e347c0
};

// Class ShooterGame.EquippableSkinRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableSkinRewardModel : UEntitlementRewardModel {

	struct UEquippableSkinDataAsset* GetDataAsset(); // Function ShooterGame.EquippableSkinRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021300
};

// Class ShooterGame.CharacterRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UCharacterRewardModel : UEntitlementRewardModel {

	struct UCharacterDataAsset* GetDataAsset(); // Function ShooterGame.CharacterRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021210
};

// Class ShooterGame.EquippableCharmLevelRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableCharmLevelRewardModel : UEntitlementRewardModel {

	struct UEquippableCharmLevelDataAsset* GetDataAsset(); // Function ShooterGame.EquippableCharmLevelRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021270
};

// Class ShooterGame.EquippableSkinLevelRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableSkinLevelRewardModel : UEntitlementRewardModel {

	struct UEquippableSkinLevelDataAsset* GetDataAsset(); // Function ShooterGame.EquippableSkinLevelRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30212d0
};

// Class ShooterGame.EquippableSkinChromaRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableSkinChromaRewardModel : UEntitlementRewardModel {

	struct UEquippableSkinChromaDataAsset* GetDataAsset(); // Function ShooterGame.EquippableSkinChromaRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30212a0
};

// Class ShooterGame.EquippableAttachmentRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UEquippableAttachmentRewardModel : UEntitlementRewardModel {

	struct UEquippableAttachmentDataAsset* GetDataAsset(); // Function ShooterGame.EquippableAttachmentRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021240
};

// Class ShooterGame.SprayRewardModel
// Size: 0x40 (Inherited: 0x40)
struct USprayRewardModel : UEntitlementRewardModel {

	struct USprayDataAsset* GetDataAsset(); // Function ShooterGame.SprayRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021390
};

// Class ShooterGame.PlayerCardRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UPlayerCardRewardModel : UEntitlementRewardModel {

	struct UPlayerCardDataAsset* GetDataAsset(); // Function ShooterGame.PlayerCardRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021330
};

// Class ShooterGame.PlayerTitleRewardModel
// Size: 0x40 (Inherited: 0x40)
struct UPlayerTitleRewardModel : UEntitlementRewardModel {

	struct UPlayerTitleDataAsset* GetDataAsset(); // Function ShooterGame.PlayerTitleRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021360
};

// Class ShooterGame.WalletRewardModel
// Size: 0x40 (Inherited: 0x30)
struct UWalletRewardModel : URewardModel {
	struct UCurrencyDataAsset* CurrencyDataAsset; // 0x30(0x08)
	int32_t Amount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	struct UCurrencyDataAsset* GetCurrency(); // Function ShooterGame.WalletRewardModel.GetCurrency // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47ec0
	int32_t GetAmount(); // Function ShooterGame.WalletRewardModel.GetAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3e960
};

// Class ShooterGame.JuiceBoxRewardModel
// Size: 0x40 (Inherited: 0x30)
struct UJuiceBoxRewardModel : URewardModel {
	struct UJuiceBoxDataAsset* JuiceBoxDataAsset; // 0x30(0x08)
	int32_t Amount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	struct UJuiceBoxDataAsset* GetJuiceBox(); // Function ShooterGame.JuiceBoxRewardModel.GetJuiceBox // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47ec0
	int32_t GetAmount(); // Function ShooterGame.JuiceBoxRewardModel.GetAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3e960
};

// Class ShooterGame.JuiceContentRewardModel
// Size: 0x40 (Inherited: 0x30)
struct UJuiceContentRewardModel : URewardModel {
	struct UEquippableSkinDataAsset* EquippableSkinDataAsset; // 0x30(0x08)
	int32_t Amount; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)

	struct UEquippableSkinDataAsset* GetDataAsset(); // Function ShooterGame.JuiceContentRewardModel.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e47ec0
	int32_t GetAmount(); // Function ShooterGame.JuiceContentRewardModel.GetAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f3e960
};

// Class ShooterGame.RewardGrantModel
// Size: 0x50 (Inherited: 0x30)
struct URewardGrantModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct TArray<struct URewardModel*> RewardModels; // 0x40(0x10)

	struct TArray<struct UWalletRewardModel*> GetWalletRewardModels(); // Function ShooterGame.RewardGrantModel.GetWalletRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021c90
	struct TArray<struct USprayRewardModel*> GetSprayRewardModels(); // Function ShooterGame.RewardGrantModel.GetSprayRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021c00
	struct TArray<struct URewardModel*> GetRewardModels(); // Function ShooterGame.RewardGrantModel.GetRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021b30
	struct TArray<struct UPlayerTitleRewardModel*> GetPlayerTitleRewardModels(); // Function ShooterGame.RewardGrantModel.GetPlayerTitleRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021900
	struct TArray<struct UPlayerCardRewardModel*> GetPlayerCardRewardModels(); // Function ShooterGame.RewardGrantModel.GetPlayerCardRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021870
	struct TArray<struct UEquippableSkinRewardModel*> GetEquippableSkinRewardModels(); // Function ShooterGame.RewardGrantModel.GetEquippableSkinRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021600
	struct TArray<struct UEquippableSkinLevelRewardModel*> GetEquippableSkinLevelRewardModels(); // Function ShooterGame.RewardGrantModel.GetEquippableSkinLevelRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021570
	struct TArray<struct UEquippableSkinChromaRewardModel*> GetEquippableSkinChromaRewardModels(); // Function ShooterGame.RewardGrantModel.GetEquippableSkinChromaRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30214e0
	struct TArray<struct UEquippableAttachmentRewardModel*> GetEquippableAttachmentRewardModels(); // Function ShooterGame.RewardGrantModel.GetEquippableAttachmentRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021450
	struct TArray<struct UEntitlementRewardModel*> GetEntitlementRewardModels(); // Function ShooterGame.RewardGrantModel.GetEntitlementRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30213c0
	struct TArray<struct UCharacterRewardModel*> GetCharacterRewardModels(); // Function ShooterGame.RewardGrantModel.GetCharacterRewardModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3021150
};

// Class ShooterGame.WalletCostModel
// Size: 0x40 (Inherited: 0x30)
struct UWalletCostModel : UObject {
	int32_t AmountToDeduct; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct UCurrencyDataAsset* CurrencyDataAsset; // 0x38(0x08)

	struct UCurrencyDataAsset* GetCurrency(); // Function ShooterGame.WalletCostModel.GetCurrency // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3ae20
};

// Class ShooterGame.CostModel
// Size: 0x40 (Inherited: 0x30)
struct UCostModel : UObject {
	struct TArray<struct UWalletCostModel*> WalletCosts; // 0x30(0x10)
};

// Class ShooterGame.InventoryChangeModel
// Size: 0x40 (Inherited: 0x30)
struct UInventoryChangeModel : UObject {
	struct URewardGrantModel* Rewards; // 0x30(0x08)
	struct UCostModel* Costs; // 0x38(0x08)
};

// Class ShooterGame.RewindableGameObject
// Size: 0x408 (Inherited: 0x400)
struct ARewindableGameObject : AGameObject {
	struct UServerRewindComponent* ServerRewindComponent; // 0x400(0x08)
};

// Class ShooterGame.RewindableInterface
// Size: 0x30 (Inherited: 0x30)
struct URewindableInterface : UInterface {
};

// Class ShooterGame.RewindComponent
// Size: 0x110 (Inherited: 0xe8)
struct URewindComponent : UActorComponent {
	float MaxAllowableRewindTime; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FIdempotentRewindable> SimpleRewindables; // 0xf0(0x10)
	struct TArray<struct FIdempotentRewindable> ComplexRewindables; // 0x100(0x10)
};

// Class ShooterGame.RightGripUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URightGripUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RiotClientConfigManager
// Size: 0x128 (Inherited: 0x80)
struct URiotClientConfigManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct URiotClientConfigService* RiotClientConfigService; // 0x88(0x08)
	char pad_90[0x98]; // 0x90(0x98)

	struct URiotClientConfigManager* GetRiotClientConfigManager(struct UObject* WorldContextObject); // Function ShooterGame.RiotClientConfigManager.GetRiotClientConfigManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x302a640
};

// Class ShooterGame.RiotClientConfigService
// Size: 0x38 (Inherited: 0x30)
struct URiotClientConfigService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RiotClientHeartbeatManager
// Size: 0xc0 (Inherited: 0x80)
struct URiotClientHeartbeatManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0x88(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x90(0x08)
	struct URiotClientSessionService* RiotClientSessionService; // 0x98(0x08)
	char pad_A0[0x10]; // 0xa0(0x10)
	struct FString AuthToken; // 0xb0(0x10)

	void HeartbeatInGame(); // Function ShooterGame.RiotClientHeartbeatManager.HeartbeatInGame // (Final|Native|Private) // @ game+0x302a920
	void HeartbeatIdle(); // Function ShooterGame.RiotClientHeartbeatManager.HeartbeatIdle // (Final|Native|Private) // @ game+0x302a900
	void HandleGameState(enum class EGameFlowStateType StateType); // Function ShooterGame.RiotClientHeartbeatManager.HandleGameState // (Final|Native|Private) // @ game+0x302a7f0
};

// Class ShooterGame.MonitoredRiotClient
// Size: 0x170 (Inherited: 0x30)
struct UMonitoredRiotClient : UObject {
	struct URNetClient* Client; // 0x30(0x08)
	char pad_38[0x138]; // 0x38(0x138)
};

// Class ShooterGame.RiotClientStartupMonitor
// Size: 0x68 (Inherited: 0x30)
struct URiotClientStartupMonitor : UObject {
	struct TArray<struct UMonitoredRiotClient*> WatchedClients; // 0x30(0x10)
	char pad_40[0x28]; // 0x40(0x28)
};

// Class ShooterGame.RiotClientManager
// Size: 0x50 (Inherited: 0x30)
struct URiotClientManager : UObject {
	struct UTestAccountsManager* TestAccountsManager; // 0x30(0x08)
	struct TArray<struct URNetClient*> ConnectedClients; // 0x38(0x10)
	struct URiotClientStartupMonitor* StartupMonitor; // 0x48(0x08)
};

// Class ShooterGame.RiotClientManagerProvider
// Size: 0x30 (Inherited: 0x30)
struct URiotClientManagerProvider : UInterface {
};

// Class ShooterGame.RiotClientSessionService
// Size: 0x38 (Inherited: 0x30)
struct URiotClientSessionService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RiotGamesApiClient
// Size: 0x130 (Inherited: 0x80)
struct URiotGamesApiClient : UInitSystem {
	char pad_80[0x40]; // 0x80(0x40)
	struct URiotGamesApiLogin* RiotLoginHelper; // 0xc0(0x08)
	struct URNetStub* RNetStub; // 0xc8(0x08)
	struct URiotProductManager* RiotProductManager; // 0xd0(0x08)
	struct UPlatformInitSettingsManager* PlatformInitSettingsManager; // 0xd8(0x08)
	char pad_E0[0x38]; // 0xe0(0x38)
	struct URNetQueryClient* QueryClient; // 0x118(0x08)
	struct URNetEventingClient* EventingClient; // 0x120(0x08)
	char pad_128[0x8]; // 0x128(0x08)
};

// Class ShooterGame.RNetEventingClient
// Size: 0x48 (Inherited: 0x30)
struct URNetEventingClient : UObject {
	char pad_30[0x18]; // 0x30(0x18)
};

// Class ShooterGame.RiotGamesApiEventingClient
// Size: 0xa0 (Inherited: 0x48)
struct URiotGamesApiEventingClient : URNetEventingClient {
	char pad_48[0x50]; // 0x48(0x50)
	struct URiotGamesApiClient* Client; // 0x98(0x08)
};

// Class ShooterGame.RiotGamesApiLogin
// Size: 0xa0 (Inherited: 0x30)
struct URiotGamesApiLogin : UObject {
	char pad_30[0x58]; // 0x30(0x58)
	struct URiotGamesApiClient* Client; // 0x88(0x08)
	char pad_90[0x10]; // 0x90(0x10)
};

// Class ShooterGame.RiotGamesApiQueryHelper
// Size: 0x40 (Inherited: 0x30)
struct URiotGamesApiQueryHelper : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct URiotGamesApiClient* Client; // 0x38(0x08)
};

// Class ShooterGame.RiotProductManager
// Size: 0xb8 (Inherited: 0x80)
struct URiotProductManager : UInitSystem {
	struct FString ProductId; // 0x80(0x10)
	struct FString PatchlineId; // 0x90(0x10)
	struct FString RiotGamesApiSettingsToken; // 0xa0(0x10)
	bool UseDevRiotClient; // 0xb0(0x01)
	bool IsSJC; // 0xb1(0x01)
	bool IsTencent; // 0xb2(0x01)
	char pad_B3[0x5]; // 0xb3(0x05)
};

// Class ShooterGame.RiotStatusService
// Size: 0x38 (Inherited: 0x30)
struct URiotStatusService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RiotWarningManager
// Size: 0x1b8 (Inherited: 0x80)
struct URiotWarningManager : UInitSystem {
	char pad_80[0xc8]; // 0x80(0xc8)
	struct URiotWarningService* RiotWarningService; // 0x148(0x08)
	struct UModalManager* ModalManager; // 0x150(0x08)
	struct UConfigManager* ConfigManager; // 0x158(0x08)
	char pad_160[0x58]; // 0x160(0x58)

	void HandleSeeMoreButtonAction(struct UGenericNotification* Notification); // Function ShooterGame.RiotWarningManager.HandleSeeMoreButtonAction // (Final|Native|Public) // @ game+0x302a870
	void HandleAcknowledgeButtonAction(struct UGenericNotification* Notification); // Function ShooterGame.RiotWarningManager.HandleAcknowledgeButtonAction // (Final|Native|Public) // @ game+0x302a760
	struct URiotWarningManager* GetRiotWarningManager(struct UObject* WorldContextObject); // Function ShooterGame.RiotWarningManager.GetRiotWarningManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x302a6d0
};

// Class ShooterGame.RiotWarningService
// Size: 0x38 (Inherited: 0x30)
struct URiotWarningService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RMSManager
// Size: 0x148 (Inherited: 0x80)
struct URMSManager : UInitSystem {
	char pad_80[0xc0]; // 0x80(0xc0)
	struct URMSService* RMSService; // 0x140(0x08)
};

// Class ShooterGame.RMSService
// Size: 0x38 (Inherited: 0x30)
struct URMSService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RNetClient
// Size: 0x60 (Inherited: 0x30)
struct URNetClient : UObject {
	char pad_30[0x18]; // 0x30(0x18)
	enum class ERNetConnectionStatus ConnectionStatus; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	struct URNetQueryClient* QueryClient; // 0x50(0x08)
	struct URNetEventingClient* EventingClient; // 0x58(0x08)
};

// Class ShooterGame.RNetRequestSender
// Size: 0x30 (Inherited: 0x30)
struct URNetRequestSender : UInterface {
};

// Class ShooterGame.RNetQueryClient
// Size: 0x88 (Inherited: 0x30)
struct URNetQueryClient : UObject {
	char pad_30[0x48]; // 0x30(0x48)
	struct TScriptInterface<IRNetRequestSender> RequestSender; // 0x78(0x10)
};

// Class ShooterGame.RNetStub
// Size: 0x58 (Inherited: 0x30)
struct URNetStub : UObject {
	char pad_30[0x28]; // 0x30(0x28)
};

// Class ShooterGame.RNetVoiceManager
// Size: 0x408 (Inherited: 0x80)
struct URNetVoiceManager : UInitSystem {
	char pad_80[0x18]; // 0x80(0x18)
	struct FMulticastInlineDelegate OnVoiceSessionParticipantUpdated; // 0x98(0x10)
	struct FMulticastInlineDelegate OnVoiceSessionParticipantRemoved; // 0xa8(0x10)
	char pad_B8[0x18]; // 0xb8(0x18)
	struct FMulticastInlineDelegate OnCaptureDevicesUpdated; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnRenderDevicesUpdated; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnAudioPropertiesUpdated; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnLoopbackEnabledChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnSettingsSaved; // 0x110(0x10)
	struct FMulticastInlineDelegate OnChannelMuteChanged; // 0x120(0x10)
	char pad_130[0x170]; // 0x130(0x170)
	struct URNetVoiceService* VoiceService; // 0x2a0(0x08)
	struct FVoiceDevices CaptureDevices; // 0x2a8(0x10)
	struct FVoiceDevices RenderDevices; // 0x2b8(0x10)
	char pad_2C8[0x48]; // 0x2c8(0x48)
	struct FAudioProperties AudioProperties; // 0x310(0x04)
	char pad_314[0x4]; // 0x314(0x04)
	struct UConfigManager* ConfigManager; // 0x318(0x08)
	struct URSOManager* RSOManager; // 0x320(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x328(0x08)
	char pad_330[0x8]; // 0x330(0x08)
	struct UAresSettingsManager* SettingsManager; // 0x338(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x340(0x08)
	char pad_348[0xc0]; // 0x348(0xc0)

	void SetSessionChannelMute(enum class EVoiceSessionType SessionType, bool bMuted); // Function ShooterGame.RNetVoiceManager.SetSessionChannelMute // (Final|Native|Public|BlueprintCallable) // @ game+0x30338e0
	void SetClutchMuteKeybindsEnabled(bool bEnabled); // Function ShooterGame.RNetVoiceManager.SetClutchMuteKeybindsEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x3033850
	void ResetPTTBindings(); // Function ShooterGame.RNetVoiceManager.ResetPTTBindings // (Final|Native|Private|BlueprintCallable) // @ game+0x3033830
	void RefreshSessions(); // Function ShooterGame.RNetVoiceManager.RefreshSessions // (Final|Native|Private) // @ game+0x3033810
	void OnVoiceIntSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.RNetVoiceManager.OnVoiceIntSettingChanged // (Final|Native|Private) // @ game+0x3033700
	void OnVoiceEnabledChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.RNetVoiceManager.OnVoiceEnabledChanged // (Final|Native|Private) // @ game+0x30335e0
	void OnPTTKeyChanged(enum class EAresStringSettingName SettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.RNetVoiceManager.OnPTTKeyChanged // (Final|Native|Private) // @ game+0x3033480
	void OnPTTEnabledChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.RNetVoiceManager.OnPTTEnabledChanged // (Final|Native|Private) // @ game+0x3033360
	void OnLoopbackSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.RNetVoiceManager.OnLoopbackSettingChanged // (Final|Native|Private) // @ game+0x3033240
	void OnIntAkAudioSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.RNetVoiceManager.OnIntAkAudioSettingChanged // (Final|Native|Private) // @ game+0x3033130
	void OnGamePhaseChanged(enum class EAresGamePhase GamePhase, int32_t RoundNum); // Function ShooterGame.RNetVoiceManager.OnGamePhaseChanged // (Final|Native|Private) // @ game+0x3033060
	void OnGameFlowStateChanged(enum class EGameFlowStateType GameFlowState); // Function ShooterGame.RNetVoiceManager.OnGameFlowStateChanged // (Final|Native|Private) // @ game+0x3032fe0
	void OnFloatAkAudioSettingChanged(enum class EAresFloatSettingName SettingName, float OldValue, float NewValue); // Function ShooterGame.RNetVoiceManager.OnFloatAkAudioSettingChanged // (Final|Native|Private) // @ game+0x3032ed0
	void OnDeviceHandleSettingChanged(enum class EAresStringSettingName SettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.RNetVoiceManager.OnDeviceHandleSettingChanged // (Final|Native|Private) // @ game+0x3032d70
	void OnDeviceHandleChanged(); // Function ShooterGame.RNetVoiceManager.OnDeviceHandleChanged // (Final|Native|Private) // @ game+0x3032d50
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.RNetVoiceManager.OnBugCommand // (Final|Native|Private) // @ game+0x3032bf0
	void OnBoolAkAudioSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.RNetVoiceManager.OnBoolAkAudioSettingChanged // (Final|Native|Private) // @ game+0x3032ad0
	bool IsSessionChannelMuted(enum class EVoiceSessionType SessionType); // Function ShooterGame.RNetVoiceManager.IsSessionChannelMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3032a40
	bool IsRoomConnectionAvailable(enum class EVoiceSessionType SessionType); // Function ShooterGame.RNetVoiceManager.IsRoomConnectionAvailable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30329b0
	void HandleClutchMuteInput(enum class EVoiceSessionType SessionType); // Function ShooterGame.RNetVoiceManager.HandleClutchMuteInput // (Final|Native|Private) // @ game+0x3032930
	struct URNetVoiceManager* GetVoiceManager(struct UObject* WorldContextObject); // Function ShooterGame.RNetVoiceManager.GetVoiceManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30328a0
	bool GetVoiceEnabled(); // Function ShooterGame.RNetVoiceManager.GetVoiceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3032870
	struct TArray<struct FVoiceDevice> GetRenderDevices(); // Function ShooterGame.RNetVoiceManager.GetRenderDevices // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30327d0
	bool GetRecordAudioPermissionEnabled(); // Function ShooterGame.RNetVoiceManager.GetRecordAudioPermissionEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30327a0
	bool GetDualVoiceEnabled(); // Function ShooterGame.RNetVoiceManager.GetDualVoiceEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3032770
	bool GetCurrentVoiceSettings(struct FRNetVoiceSettings& Out); // Function ShooterGame.RNetVoiceManager.GetCurrentVoiceSettings // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3032690
	bool GetClutchMuteConfigEnabled(); // Function ShooterGame.RNetVoiceManager.GetClutchMuteConfigEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3032660
	struct TArray<struct FVoiceDevice> GetCaptureDevices(); // Function ShooterGame.RNetVoiceManager.GetCaptureDevices // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30325c0
	struct FAudioProperties GetAudioProperties(); // Function ShooterGame.RNetVoiceManager.GetAudioProperties // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3032580
	bool FindParticipantRoomBySubject(struct FString Subject, struct FVoiceSessionParticipant& Out, bool& OutIsPartySession); // Function ShooterGame.RNetVoiceManager.FindParticipantRoomBySubject // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x30323e0
	bool FindParticipantBySubject(struct FString Subject, struct FVoiceSessionParticipant& Out); // Function ShooterGame.RNetVoiceManager.FindParticipantBySubject // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x30322a0
	void ChannelToggleProcessRoomSettings(); // Function ShooterGame.RNetVoiceManager.ChannelToggleProcessRoomSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x3032280
};

// Class ShooterGame.RNetVoiceService
// Size: 0x38 (Inherited: 0x30)
struct URNetVoiceService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RoamingSettingsManager
// Size: 0xc8 (Inherited: 0x80)
struct URoamingSettingsManager : UInitSystem {
	struct FMulticastInlineDelegate SettingChanged; // 0x80(0x10)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct UAresSettingsManager* AresSettingsManager; // 0x98(0x08)
	struct URoamingSettingsService* RoamingSettingsService; // 0xa0(0x08)
	struct UNotificationManager* NotificationManager; // 0xa8(0x08)
	struct UPlayerSettingsTelemetry* PlayerSettingsTelemetry; // 0xb0(0x08)
	struct UActionBindingsManager* ActionBindingsManager; // 0xb8(0x08)
	char pad_C0[0x8]; // 0xc0(0x08)

	bool TryGetDefaultAxisMapping(struct FName ActionName, bool bPositive, struct FInputChord& OutFoundValue, float& OutFoundScale, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.TryGetDefaultAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x303cfb0
	bool TryGetDefaultActionMapping(struct FName ActionName, struct FInputChord& OutFoundValue, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.TryGetDefaultActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x303cdf0
	bool TryGetAxisMapping(struct FName ActionName, bool bPositive, struct FInputChord& OutFoundValue, float& OutFoundScale, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.TryGetAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x303cb90
	bool TryGetActionMapping(struct FName ActionName, struct FInputChord& OutFoundValue, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.TryGetActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x303c9d0
	void SetAxisMapping(struct FName ActionName, struct FInputChord& Value, float Scale, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.SetAxisMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x303c7d0
	void SetActionMapping(struct FName ActionName, struct FInputChord& KeyBinding, int32_t BindIndex); // Function ShooterGame.RoamingSettingsManager.SetActionMapping // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x303c620
	void ResetMappings(); // Function ShooterGame.RoamingSettingsManager.ResetMappings // (Final|Native|Public|BlueprintCallable) // @ game+0x303c600
	void RebroadcastBindChangedAsSettingChanged(struct UActionBindSet* ActionBindSet, int32_t BindIndex, enum class EActionBindChangeSource ChangeSource, struct FName Character); // Function ShooterGame.RoamingSettingsManager.RebroadcastBindChangedAsSettingChanged // (Final|Native|Private) // @ game+0x303c460
	bool IsInitialized(); // Function ShooterGame.RoamingSettingsManager.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c400
	bool HaveSuccessfullyRetrievedSettings(); // Function ShooterGame.RoamingSettingsManager.HaveSuccessfullyRetrievedSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c3d0
	struct URoamingSettingsManager* GetRoamingSettingsManager(struct UObject* WorldContextObject); // Function ShooterGame.RoamingSettingsManager.GetRoamingSettingsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x303c170
};

// Class ShooterGame.RoamingSettingsService
// Size: 0x38 (Inherited: 0x30)
struct URoamingSettingsService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RopeIdleAdditiveLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeIdleAdditiveLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeIdleAdditiveUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeIdleAdditiveUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeIdleLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeIdleLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeIdleUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeIdleUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeLookLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeLookLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeLookUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeLookUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeNavLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeNavHorizontalAdditiveLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavHorizontalAdditiveLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavHorizontalLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavHorizontalLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavHorizontalUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavHorizontalUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeNavVerticalAdditiveLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavVerticalAdditiveLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavVerticalLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavVerticalLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeNavVerticalUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeNavVerticalUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeStopDownLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeStopDownLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeStopDownUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeStopDownUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeStopUpLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeStopUpLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeStopUpUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeStopUpUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeTurnLeftLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeTurnLeftLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeTurnLeftUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeTurnLeftUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RopeTurnRightLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeTurnRightLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RopeTurnRightUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URopeTurnRightUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.RosterManager
// Size: 0x188 (Inherited: 0x80)
struct URosterManager : UInitSystem {
	struct FMulticastInlineDelegate OnRosterPlayerUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnRosterAdded; // 0x90(0x10)
	struct FMulticastInlineDelegate OnRosterRemoved; // 0xa0(0x10)
	struct UConfigManager* ConfigManager; // 0xb0(0x08)
	struct URSOManager* RSOManager; // 0xb8(0x08)
	struct UContentIndex* ContentIndex; // 0xc0(0x08)
	struct URMSManager* RMSManager; // 0xc8(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0xd0(0x08)
	struct UPlayerAffinityManager* PlayerAffinityManager; // 0xd8(0x08)
	struct URosterService* RosterService; // 0xe0(0x08)
	char pad_E8[0xa0]; // 0xe8(0xa0)

	void RefreshRosters(); // Function ShooterGame.RosterManager.RefreshRosters // (Final|Native|Private) // @ game+0x303c5e0
	struct URosterManager* Get(struct UWorld* FromWorld); // Function ShooterGame.RosterManager.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x303bc50
	void DisconnectFromChat(struct FString RosterID); // Function ShooterGame.RosterManager.DisconnectFromChat // (Final|Native|Private) // @ game+0x303bae0
	void ConnectToChat(struct FString RosterID); // Function ShooterGame.RosterManager.ConnectToChat // (Final|Native|Private) // @ game+0x303ba30
};

// Class ShooterGame.RosterMatchModel
// Size: 0x108 (Inherited: 0x30)
struct URosterMatchModel : UObject {
	struct UMapDataAsset* MapData; // 0x30(0x08)
	int32_t RoundsWon; // 0x38(0x04)
	int32_t RoundsLost; // 0x3c(0x04)
	bool bDidWin; // 0x40(0x01)
	bool bIsTournamentMatch; // 0x41(0x01)
	enum class ETournamentRound RoundType; // 0x42(0x01)
	char pad_43[0x5]; // 0x43(0x05)
	int64_t LeaguePointsAfter; // 0x48(0x08)
	int64_t LeaguePointsEarned; // 0x50(0x08)
	struct FTournamentRosterInfo EnemyInfo; // 0x58(0x80)
	struct FString TournamentID; // 0xd8(0x10)
	struct FString RosterID; // 0xe8(0x10)
	struct FString MatchID; // 0xf8(0x10)
};

// Class ShooterGame.RosterTournamentModel
// Size: 0x80 (Inherited: 0x30)
struct URosterTournamentModel : UObject {
	int32_t TotalTeams; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FString TournamentID; // 0x38(0x10)
	int32_t MatchesWon; // 0x48(0x04)
	int32_t MatchesLost; // 0x4c(0x04)
	int32_t FinalPlacement; // 0x50(0x04)
	char pad_54[0x4]; // 0x54(0x04)
	int64_t FinalPlacementLeaguePointsBonus; // 0x58(0x08)
	int64_t LeaguePointsAfter; // 0x60(0x08)
	int64_t LeaguePointsEarned; // 0x68(0x08)
	struct TArray<struct URosterMatchModel*> Matches; // 0x70(0x10)
};

// Class ShooterGame.RosterMatchHistoryModel
// Size: 0x88 (Inherited: 0x30)
struct URosterMatchHistoryModel : UObject {
	struct FMulticastInlineDelegate OnDidErrorChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnIsLoadingChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnEntriesAdded; // 0x50(0x10)
	struct TArray<struct UObject*> Entries; // 0x60(0x10)
	char pad_70[0x18]; // 0x70(0x18)

	struct FString GetRosterId(); // Function ShooterGame.RosterMatchHistoryModel.GetRosterId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c2c0
	bool GetIsLoading(); // Function ShooterGame.RosterMatchHistoryModel.GetIsLoading // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bde0
	struct TArray<struct UObject*> GetEntries(); // Function ShooterGame.RosterMatchHistoryModel.GetEntries // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bd20
	bool GetDidError(); // Function ShooterGame.RosterMatchHistoryModel.GetDidError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bd00
};

// Class ShooterGame.RosterMatchHistoryViewController
// Size: 0x98 (Inherited: 0x30)
struct URosterMatchHistoryViewController : UObject {
	struct UMatchHistoryManager* MatchHistoryManager; // 0x30(0x08)
	struct UPremierManager* PremierManager; // 0x38(0x08)
	struct UContentIndex* ContentIndex; // 0x40(0x08)
	struct TMap<struct FString, struct URosterMatchHistoryModel*> Models; // 0x48(0x50)

	struct URosterMatchHistoryModel* FetchMatchHistory(struct FString RosterID); // Function ShooterGame.RosterMatchHistoryViewController.FetchMatchHistory // (Final|Native|Public|BlueprintCallable) // @ game+0x303bb90
};

// Class ShooterGame.RosterMatchHistoryScreen
// Size: 0x2d0 (Inherited: 0x2c8)
struct URosterMatchHistoryScreen : UUserWidget {
	struct URosterMatchHistoryViewController* ViewController; // 0x2c8(0x08)
};

// Class ShooterGame.RosterMemberModel
// Size: 0x78 (Inherited: 0x30)
struct URosterMemberModel : UObject {
	struct FString Puuid; // 0x30(0x10)
	struct FString RosterID; // 0x40(0x10)
	struct FDateTime DateJoined; // 0x50(0x08)
	struct FMulticastInlineDelegate OnRosterMemberRoleUpdated; // 0x58(0x10)
	struct UPlatformPlayer* PlatformPlayer; // 0x68(0x08)
	enum class ERosterMemberRole RoleEnum; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)

	enum class ERosterMemberRole GetRole(); // Function ShooterGame.RosterMemberModel.GetRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bd00
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.RosterMemberModel.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c150
	struct FDateTime GetDateJoined(); // Function ShooterGame.RosterMemberModel.GetDateJoined // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bce0
};

// Class ShooterGame.RosterModel
// Size: 0x1e8 (Inherited: 0x30)
struct URosterModel : UObject {
	struct FMulticastInlineDelegate OnRosterModelMembersUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnRosterModelInvitesUpdated; // 0x40(0x10)
	struct FMulticastInlineDelegate OnRosterModelMetadataUpdated; // 0x50(0x10)
	struct FString ID; // 0x60(0x10)
	int64_t Version; // 0x70(0x08)
	struct FString Realm; // 0x78(0x10)
	struct FRosterAffinity AffinityInfo; // 0x88(0x20)
	struct FString Name; // 0xa8(0x10)
	struct FString Tag; // 0xb8(0x10)
	struct TMap<struct FString, struct FRosterLock> Locks; // 0xc8(0x50)
	struct TMap<struct FString, struct URosterMemberModel*> Members; // 0x118(0x50)
	struct TArray<struct FRosterInvite> Invites; // 0x168(0x10)
	struct FRosterMetadata MetaData; // 0x178(0x70)

	bool IsLocked(); // Function ShooterGame.RosterModel.IsLocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c430
	struct FString GetTag(); // Function ShooterGame.RosterModel.GetTag // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c2f0
	enum class ERosterMemberRole GetRoleForMember(struct FString Subject); // Function ShooterGame.RosterModel.GetRoleForMember // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c200
	struct FString GetName(); // Function ShooterGame.RosterModel.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c070
	struct FRosterMetadata GetMetadata(); // Function ShooterGame.RosterModel.GetMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bf20
	struct TMap<struct FString, struct URosterMemberModel*> GetMembers(); // Function ShooterGame.RosterModel.GetMembers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303be00
	struct TArray<struct FRosterInvite> GetInvites(); // Function ShooterGame.RosterModel.GetInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bdb0
	struct FString GetID(); // Function ShooterGame.RosterModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb88d0
};

// Class ShooterGame.RosterPlayerModel
// Size: 0xc8 (Inherited: 0x30)
struct URosterPlayerModel : UObject {
	struct FMulticastInlineDelegate OnInvitesReceived; // 0x30(0x10)
	struct FMulticastInlineDelegate OnInvitesRemoved; // 0x40(0x10)
	struct FString Puuid; // 0x50(0x10)
	int64_t Version; // 0x60(0x08)
	struct TMap<struct FString, struct FRosterInfo> Rosters; // 0x68(0x50)
	struct TArray<struct FRosterInvite> Invites; // 0xb8(0x10)

	struct TMap<struct FString, struct FRosterInfo> GetRosters(); // Function ShooterGame.RosterPlayerModel.GetRosters // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3044bc0
	struct FString GetPuuid(); // Function ShooterGame.RosterPlayerModel.GetPuuid // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7ff0
	struct TArray<struct FRosterInvite> GetInvites(); // Function ShooterGame.RosterPlayerModel.GetInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3044a40
};

// Class ShooterGame.RosterService
// Size: 0x38 (Inherited: 0x30)
struct URosterService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.RosterViewController
// Size: 0x120 (Inherited: 0x80)
struct URosterViewController : UInitSystem {
	struct FMulticastInlineDelegate OnRosterPlayerModelUpdated; // 0x80(0x10)
	struct FMulticastInlineDelegate OnRosterModelsUpdated; // 0x90(0x10)
	struct TMap<struct FString, struct URosterModel*> RosterModels; // 0xa0(0x50)
	struct URosterPlayerModel* RosterPlayerModel; // 0xf0(0x08)
	struct URosterManager* RosterManager; // 0xf8(0x08)
	struct UConfigManager* ConfigManager; // 0x100(0x08)
	struct URSOManager* RSOManager; // 0x108(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x110(0x08)
	struct UPartyManager* PartyManager; // 0x118(0x08)

	void UpdateRosterMembers(struct URosterModel* RosterModel, struct TArray<struct FRosterMember>& NewMembers); // Function ShooterGame.RosterViewController.UpdateRosterMembers // (Final|Native|Private|HasOutParms) // @ game+0x3045630
	void UpdatePersonalization(struct FString RosterID, struct FGuid& Guid, struct FString PrimaryColor, struct FString SecondaryColor, struct FString TertiaryColor, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.RosterViewController.UpdatePersonalization // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3045310
	void TransferOwnership(struct FString RosterID, struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.RosterViewController.TransferOwnership // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3045110
	void RemovePlayerFromRoster(struct FString RosterID, struct FString Subject, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.RosterViewController.RemovePlayerFromRoster // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3044f10
	void HandleRostersUpdated(struct FString RosterID); // Function ShooterGame.RosterViewController.HandleRostersUpdated // (Final|Native|Private) // @ game+0x3044dd0
	void HandleRosterPlayerUpdated(); // Function ShooterGame.RosterViewController.HandleRosterPlayerUpdated // (Final|Native|Private) // @ game+0x3044db0
	enum class ERosterMemberRole GetPlayerMemberRoleForRoster(struct FString RosterID, struct FString Subject); // Function ShooterGame.RosterViewController.GetPlayerMemberRoleForRoster // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3044aa0
	struct URosterModel* GetMyRoster(); // Function ShooterGame.RosterViewController.GetMyRoster // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3044a70
	void DeleteRoster(struct FString RosterID); // Function ShooterGame.RosterViewController.DeleteRoster // (Final|Native|Public|BlueprintCallable) // @ game+0x3044990
	void DeclineInvite(struct FString RosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.RosterViewController.DeclineInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x30447f0
	void CreateRoster(struct FString Name, struct FString Tag, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.RosterViewController.CreateRoster // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x30445f0
	void CreateInvite(struct FString RosterID, struct FString Puuid, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.RosterViewController.CreateInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x30443f0
	void CancelInvite(struct FString RosterID, struct FString Puuid, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.RosterViewController.CancelInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x30441f0
	void AcceptInvite(struct FString RosterID, struct FDelegate& OnSuccess, struct FDelegate& OnError); // Function ShooterGame.RosterViewController.AcceptInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3044050
};

// Class ShooterGame.RoundPersistenceComponent
// Size: 0x110 (Inherited: 0xe8)
struct URoundPersistenceComponent : UActorComponent {
	enum class ERoundPersistenceBehavior PersistBehavior; // 0xe8(0x01)
	enum class EGameplayPersistenceBehavior GameplayPersistenceBehavior; // 0xe9(0x01)
	bool bPersistedThisRound; // 0xea(0x01)
	char pad_EB[0x5]; // 0xeb(0x05)
	struct FMulticastInlineDelegate AuthOnPreDestroy; // 0xf0(0x10)
	struct FMulticastInlineDelegate AuthOnCosmeticAwareDestroy; // 0x100(0x10)
};

// Class ShooterGame.RoundRestoreManagerComponent
// Size: 0x180 (Inherited: 0xe8)
struct URoundRestoreManagerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnRoundRestoreComplete; // 0xe8(0x10)
	char pad_F8[0x70]; // 0xf8(0x70)
	struct TArray<int32_t> SavedSnapshotIDs; // 0x168(0x10)
	char pad_178[0x8]; // 0x178(0x08)

	void OnRoundStarted(int32_t RoundNumber); // Function ShooterGame.RoundRestoreManagerComponent.OnRoundStarted // (Final|Native|Protected) // @ game+0x2ca3d20
	void MulticastOnRoundRestoreComplete(int32_t NewRound); // Function ShooterGame.RoundRestoreManagerComponent.MulticastOnRoundRestoreComplete // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x3044e80
	struct TArray<int32_t> GetSavedRoundIDs(); // Function ShooterGame.RoundRestoreManagerComponent.GetSavedRoundIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3044ce0
	void EnableForAutomation(); // Function ShooterGame.RoundRestoreManagerComponent.EnableForAutomation // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void DebugPrintRestoreDataFunc(struct UWorld* World); // Function ShooterGame.RoundRestoreManagerComponent.DebugPrintRestoreDataFunc // (Final|Native|Static|Private) // @ game+0x2d54b90
	void DebugActivateRestoreFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.RoundRestoreManagerComponent.DebugActivateRestoreFunc // (Final|Native|Static|Private|HasOutParms) // @ game+0x2d54a70
	bool AuthBeginRoundRestore(int32_t RoundNumberToRestore); // Function ShooterGame.RoundRestoreManagerComponent.AuthBeginRoundRestore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cad5e0
};

// Class ShooterGame.RoundStartRewardSpawnPoint
// Size: 0x3e0 (Inherited: 0x3d0)
struct ARoundStartRewardSpawnPoint : AActor {
	struct UBombTeamComponent* TeamComponent; // 0x3d0(0x08)
	struct UTeamRoleComponent* RoleComponent; // 0x3d8(0x08)
};

// Class ShooterGame.RoundStateLogComponent
// Size: 0xf0 (Inherited: 0xe8)
struct URoundStateLogComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)

	void AuthLogCurrentRound(); // Function ShooterGame.RoundStateLogComponent.AuthLogCurrentRound // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e6e7b0
	struct FString AuthGetTeamLogName(struct FName RawTeamName); // Function ShooterGame.RoundStateLogComponent.AuthGetTeamLogName // (BlueprintAuthorityOnly|Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
	void AuthAreSidesSwapped(bool& bOutSidesAreSwapped); // Function ShooterGame.RoundStateLogComponent.AuthAreSidesSwapped // (BlueprintAuthorityOnly|Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x304ec30
};

// Class ShooterGame.RPCManager
// Size: 0x140 (Inherited: 0xe8)
struct URPCManager : UActorComponent {
	char pad_E8[0x58]; // 0xe8(0x58)
};

// Class ShooterGame.RSOManager
// Size: 0x378 (Inherited: 0x80)
struct URSOManager : UInitSystem {
	char pad_80[0xa8]; // 0x80(0xa8)
	struct URSOService* RSOService; // 0x128(0x08)
	struct FRSOToken RSOToken; // 0x130(0x18)
	struct FRSOUserInfo RSOUserInfo; // 0x148(0x48)
	struct FRSOToken RSOClientToken; // 0x190(0x18)
	struct FString RSOUserInfoToken; // 0x1a8(0x10)
	struct FUserInfoToken ParsedUserInfoToken; // 0x1b8(0x70)
	struct FRSOParsedIdToken ParsedIdToken; // 0x228(0x40)
	struct FEntitlementsToken RSOEntitlementsToken; // 0x268(0x20)
	char pad_288[0xf0]; // 0x288(0xf0)

	void SaveHomeBaseCountry(); // Function ShooterGame.RSOManager.SaveHomeBaseCountry // (Final|Native|Public|BlueprintCallable|Const) // @ game+0x304f690
	void Logout(); // Function ShooterGame.RSOManager.Logout // (Final|Native|Public|BlueprintCallable) // @ game+0x304f650
	bool IsVoiceChatMuted(); // Function ShooterGame.RSOManager.IsVoiceChatMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f620
	bool IsTextChatMuted(); // Function ShooterGame.RSOManager.IsTextChatMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f5f0
	bool IsReady(); // Function ShooterGame.RSOManager.IsReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f5c0
	bool IsAnticheatBanned(); // Function ShooterGame.RSOManager.IsAnticheatBanned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f560
	bool HasVoiceChatExpiration(); // Function ShooterGame.RSOManager.HasVoiceChatExpiration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f510
	bool HasTextChatExpiration(); // Function ShooterGame.RSOManager.HasTextChatExpiration // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f4e0
	struct FDateTime GetVoiceChatExpiration(); // Function ShooterGame.RSOManager.GetVoiceChatExpiration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f230
	struct FString GetUserHomeBaseCountry(); // Function ShooterGame.RSOManager.GetUserHomeBaseCountry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f1a0
	struct FDateTime GetTextChatExpiration(); // Function ShooterGame.RSOManager.GetTextChatExpiration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f160
	struct FString GetSavedHomeBaseCountry(); // Function ShooterGame.RSOManager.GetSavedHomeBaseCountry // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f0d0
	struct FRSOUserInfo GetRSOUserInfo(); // Function ShooterGame.RSOManager.GetRSOUserInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304ef50
	struct URSOManager* GetRSOManager(struct UObject* WorldContextObject); // Function ShooterGame.RSOManager.GetRSOManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x304eec0
	void GetIsSignoutAllowed(struct FDelegate OnSignoutAllowed, struct FDelegate OnSignoutNotAllowed); // Function ShooterGame.RSOManager.GetIsSignoutAllowed // (Final|Native|Public|BlueprintCallable) // @ game+0x304eda0
};

// Class ShooterGame.RSOService
// Size: 0x38 (Inherited: 0x30)
struct URSOService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.RunAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct URunAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.RunAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct URunAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.RunLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct URunLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.RunUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct URunUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.ScalingScreenWidgetComponent
// Size: 0x6d0 (Inherited: 0x6b0)
struct UScalingScreenWidgetComponent : UWidgetComponent {
	float MinDistance; // 0x6b0(0x04)
	float MaxDistance; // 0x6b4(0x04)
	float ScaleAtMinDistance; // 0x6b8(0x04)
	float ScaleAtMaxDistance; // 0x6bc(0x04)
	char pad_6C0[0x10]; // 0x6c0(0x10)
};

// Class ShooterGame.ScopedAnimationCueSource
// Size: 0x30 (Inherited: 0x30)
struct UScopedAnimationCueSource : UInterface {

	void UnbindOnScopedCueEvent(struct FDelegate& Delegate); // Function ShooterGame.ScopedAnimationCueSource.UnbindOnScopedCueEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2cb9a00
	void BindOnScopedCueEvent(struct FDelegate& Delegate); // Function ShooterGame.ScopedAnimationCueSource.BindOnScopedCueEvent // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x2cb9060
};

// Class ShooterGame.ScoreAndHistoryOverlay
// Size: 0x2c8 (Inherited: 0x2c8)
struct UScoreAndHistoryOverlay : UUserWidget {

	void UpdateRoundResults(int32_t AllyScore, int32_t EnemyScore); // Function ShooterGame.ScoreAndHistoryOverlay.UpdateRoundResults // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void MakeScore(int32_t AllyScore, int32_t EnemyScore); // Function ShooterGame.ScoreAndHistoryOverlay.MakeScore // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ScoreboardContentWidget
// Size: 0x2e8 (Inherited: 0x2c8)
struct UScoreboardContentWidget : UUserWidget {
	struct UTextBlock* ToggleCursorBindingText; // 0x2c8(0x08)
	struct UGridPanel* AllyGrid; // 0x2d0(0x08)
	struct UGridPanel* EnemyGrid; // 0x2d8(0x08)
	struct UScoreAndHistoryOverlay* ScoreAndHistoryOverlay; // 0x2e0(0x08)
};

// Class ShooterGame.ScoreboardPlayerCardWidget
// Size: 0x370 (Inherited: 0x2c8)
struct UScoreboardPlayerCardWidget : UUserWidget {
	struct UBorder* AllyCardContainer; // 0x2c8(0x08)
	struct UImage* ArmorImage; // 0x2d0(0x08)
	struct UTextBlock* AssistsText; // 0x2d8(0x08)
	struct UImage* BestGunImage; // 0x2e0(0x08)
	struct UMenuAnchor* CharacterInfoAnchor; // 0x2e8(0x08)
	struct UButton* CharacterInfoButton; // 0x2f0(0x08)
	struct UTextBlock* CharacterName; // 0x2f8(0x08)
	struct UImage* CharacterPortrait; // 0x300(0x08)
	struct UUserWidget* CompetitiveTierIconSmall; // 0x308(0x08)
	struct UImage* CoreBGImage; // 0x310(0x08)
	struct UTextBlock* CurrentMoneyText; // 0x318(0x08)
	struct UTextBlock* DeathsText; // 0x320(0x08)
	struct UWidget* HasBomb; // 0x328(0x08)
	struct UProgressBar* HealthBar; // 0x330(0x08)
	struct UTextBlock* KillsText; // 0x338(0x08)
	struct UImage* MIAWidget; // 0x340(0x08)
	struct UWidget* MicContainer; // 0x348(0x08)
	struct UTextBlock* PingText; // 0x350(0x08)
	struct UWidget* PlayerNameWidget; // 0x358(0x08)
	struct UImage* SetDeadOverlay; // 0x360(0x08)
	struct UTextBlock* UltPointCount; // 0x368(0x08)
};

// Class ShooterGame.ScreenMessageElement
// Size: 0xe0 (Inherited: 0x58)
struct UScreenMessageElement : UAresHudElement {
	struct FVector2D MessageDrawOffset; // 0x58(0x08)
	enum class EAresDrawOrigin MessageDrawOrigin; // 0x60(0x01)
	char pad_61[0x7]; // 0x61(0x07)
	struct FAresHudFontParams MessageFontParams; // 0x68(0x70)
	enum class EAresHudTextExtentsMode MessageTextExtentsMode; // 0xd8(0x01)
	char pad_D9[0x7]; // 0xd9(0x07)

	bool ShouldDraw(); // Function ShooterGame.ScreenMessageElement.ShouldDraw // (Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
	struct FText GetMessageText(); // Function ShooterGame.ScreenMessageElement.GetMessageText // (Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
};

// Class ShooterGame.ScreenTransitionComponent
// Size: 0x128 (Inherited: 0xe8)
struct UScreenTransitionComponent : UActorComponent {
	struct FMulticastInlineDelegate OnScreenTransitionUpdated; // 0xe8(0x10)
	char pad_F8[0x18]; // 0xf8(0x18)
	struct TArray<struct FName> ActiveTransitions; // 0x110(0x10)
	char pad_120[0x4]; // 0x120(0x04)
	int32_t AuthSpectateRequestAck; // 0x124(0x04)

	void StartScreenTransition(struct FName TransitionReason, float MaxDuration); // Function ShooterGame.ScreenTransitionComponent.StartScreenTransition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x304f900
	void OnRep_AuthSpectateRequestAck(); // Function ShooterGame.ScreenTransitionComponent.OnRep_AuthSpectateRequestAck // (Final|Native|Private) // @ game+0x304f670
	bool IsAnyTransitionActive(); // Function ShooterGame.ScreenTransitionComponent.IsAnyTransitionActive // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x304f590
	void CompleteScreenTransition(struct FName TransitionReason); // Function ShooterGame.ScreenTransitionComponent.CompleteScreenTransition // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x304ecd0
};

// Class ShooterGame.SeasonUIData
// Size: 0x90 (Inherited: 0x90)
struct USeasonUIData : UBaseContentUIData {
};

// Class ShooterGame.SeasonDataAsset
// Size: 0xc8 (Inherited: 0x50)
struct USeasonDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> ParentSeason; // 0x50(0x30)
	enum class EAresSeasonType Type; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct FDateTime StartTime; // 0x88(0x08)
	struct FDateTime EndTime; // 0x90(0x08)
	struct TSoftClassPtr<UObject> UIData; // 0x98(0x30)
};

// Class ShooterGame.SerialSequenceAnimationConductorNode
// Size: 0xf8 (Inherited: 0xa0)
struct USerialSequenceAnimationConductorNode : UIndexedSequenceAnimationConductorNodeBase {
	struct TArray<struct TScriptInterface<IAnimationConductorNode>> ChildList; // 0xa0(0x10)
	struct FAnimationConductorNodeSignalCondition ItemTerminationCondition; // 0xb0(0x14)
	struct FAnimationConductorNodeSignalCondition LastItemTerminationCondition; // 0xc4(0x14)
	struct TScriptInterface<IAnimationConductorNode> CurrentChild; // 0xd8(0x10)
	char pad_E8[0x10]; // 0xe8(0x10)

	void HandleChildProgressStateChanged(struct UObject* Source); // Function ShooterGame.SerialSequenceAnimationConductorNode.HandleChildProgressStateChanged // (Final|Native|Private) // @ game+0x30569a0
	void HandleChildCueEvent(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.SerialSequenceAnimationConductorNode.HandleChildCueEvent // (Final|Native|Private) // @ game+0x30568c0
	struct USerialSequenceAnimationConductorNode* Create(struct TArray<struct TScriptInterface<IAnimationConductorNode>>& ChildList, struct FAnimationConductorNodeSignalCondition& ItemTerminationCondition, struct FAnimationConductorNodeSignalCondition& LastItemTerminationCondition, struct UObject* Outer); // Function ShooterGame.SerialSequenceAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3056600
};

// Class ShooterGame.ServerMovementTimingComponent
// Size: 0x120 (Inherited: 0xe8)
struct UServerMovementTimingComponent : UActorComponent {
	struct FMulticastInlineDelegate OnFixedMoveTimeStepChange; // 0xe8(0x10)
	char pad_F8[0x20]; // 0xf8(0x20)
	struct UFixedMoveTimeStepManagerComponent* FixedMoveTimeStepManager; // 0x118(0x08)

	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.ServerMovementTimingComponent.OnRoundBegin // (Final|Native|Public) // @ game+0x3056c90
	float GetStartOfFrameMovementTimestamp(); // Function ShooterGame.ServerMovementTimingComponent.GetStartOfFrameMovementTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30567f0
	float GetEndOfFrameMovementTimestamp(); // Function ShooterGame.ServerMovementTimingComponent.GetEndOfFrameMovementTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30567f0
	float GetCurrentMovementTimestamp(); // Function ShooterGame.ServerMovementTimingComponent.GetCurrentMovementTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30567c0
};

// Class ShooterGame.ServerPerformanceMonitoringComponent
// Size: 0x118 (Inherited: 0x118)
struct UServerPerformanceMonitoringComponent : UBasePerformanceMonitoringComponent {
};

// Class ShooterGame.ServerPerRoundTelemetryComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UServerPerRoundTelemetryComponent : UActorComponent {
	char pad_E8[0xc0]; // 0xe8(0xc0)

	void SendSinglePlayerExperienceMissionData(struct UMissionGameStateComponent* MissionStateComponent, struct AMission* Mission); // Function ShooterGame.ServerPerRoundTelemetryComponent.SendSinglePlayerExperienceMissionData // (Final|Native|Public) // @ game+0x3056e40
	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x3056db0
	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnRoundBegin // (Final|Native|Public) // @ game+0x3056d20
	void OnPhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnPhaseChanged // (Final|Native|Public) // @ game+0x3056c10
	void OnMatchEnd(); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnMatchEnd // (Final|Native|Public) // @ game+0x3056bf0
	void OnMatchBegin(); // Function ShooterGame.ServerPerRoundTelemetryComponent.OnMatchBegin // (Final|Native|Public) // @ game+0x3056bd0
	void HandleNewMissionStateAdded(struct UStateComponent* AddedState); // Function ShooterGame.ServerPerRoundTelemetryComponent.HandleNewMissionStateAdded // (Final|Native|Public) // @ game+0x3056a30
};

// Class ShooterGame.ServerPlayerStateTelemetryComponent
// Size: 0x3c0 (Inherited: 0x100)
struct UServerPlayerStateTelemetryComponent : UBasePlayerStateTelemetryComponent {
	int64_t GameId; // 0x100(0x08)
	char pad_108[0x38]; // 0x108(0x38)
	struct FGameEventInventory TelemetryInventoryCache; // 0x140(0x148)
	bool bIsInventoryCacheInitialized; // 0x288(0x01)
	char pad_289[0xf]; // 0x289(0x0f)
	struct TArray<struct FInventoryChangeEvent> PendingInventoryChangeEvents; // 0x298(0x10)
	char pad_2A8[0x118]; // 0x2a8(0x118)

	void UpdateInventoryCache(struct UAresInventory* Inventory, struct AAresItem* item, enum class EInventoryTransaction Transaction); // Function ShooterGame.ServerPlayerStateTelemetryComponent.UpdateInventoryCache // (Final|Native|Private) // @ game+0x3056f40
	bool ShouldSampleByMatch(); // Function ShooterGame.ServerPlayerStateTelemetryComponent.ShouldSampleByMatch // (Final|Native|Public|Const) // @ game+0x3056f10
	void RecordInventoryTransactionEvent(enum class EInventoryTransaction Transaction, struct UAresInventory* Inventory, struct AAresItem* item); // Function ShooterGame.ServerPlayerStateTelemetryComponent.RecordInventoryTransactionEvent // (Final|Native|Public) // @ game+0x2d2df90
	void OnGamePhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.ServerPlayerStateTelemetryComponent.OnGamePhaseChanged // (Final|Native|Private) // @ game+0x2cedcd0
	void OnConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.ServerPlayerStateTelemetryComponent.OnConnectionStatusChanged // (Final|Native|Private) // @ game+0x3056ac0
	struct FGameEventInventory GetOrCreateInventoryCache(struct UAresInventory* Inventory); // Function ShooterGame.ServerPlayerStateTelemetryComponent.GetOrCreateInventoryCache // (Final|Native|Public) // @ game+0x3056820
	void AuthRegisterCharacterCallBacks(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRegisterCharacterCallBacks // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthRecordRoundSnapshot(struct AShooterCharacter* ShooterCharacter, enum class EAresGamePhase OverwriteGamePhase); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordRoundSnapshot // (Final|Native|Public) // @ game+0x2d22c60
	struct FAbilityUsageEvent AuthRecordAbilityUsage(struct AAresEquippable* Equippable, enum class EAbilityUsageEventType Type); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthRecordAbilityUsage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30564f0
	void AuthPostPendingInventoryTransactionEvents(enum class EAresGamePhase NewPhase); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthPostPendingInventoryTransactionEvents // (Final|Native|Public) // @ game+0x2cedcd0
	void AuthOnAutonomousForwardPredictEvent(float TimeSpentInPrediction); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthOnAutonomousForwardPredictEvent // (Final|Native|Public) // @ game+0x2cee3b0
	void AuthInitializeInventoryCache(struct UAresInventory* Inventory); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthInitializeInventoryCache // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthHandleUltimateReadyStatusChanged(struct AShooterPlayerState* ShooterPlayerState, bool bIsUltReady); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthHandleUltimateReadyStatusChanged // (Final|Native|Public) // @ game+0x2d67580
	void AuthHandleEquippableChargeReplenish(struct AAresItem* ReplenishedItem, int32_t TotalCharges); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthHandleEquippableChargeReplenish // (Final|Native|Public) // @ game+0x2f66720
	void AuthCommitAbilityUsage(struct FAbilityUsageEvent& AbilityUsageEvent, struct FVector& EffectLocation, struct TArray<struct FAbilityEffectInfo> AbilityEffects, int32_t DestroyedCount, int32_t CastID); // Function ShooterGame.ServerPlayerStateTelemetryComponent.AuthCommitAbilityUsage // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30562b0
};

// Class ShooterGame.ServerRewindComponent
// Size: 0x130 (Inherited: 0x110)
struct UServerRewindComponent : URewindComponent {
	char pad_110[0xc]; // 0x110(0x0c)
	float CurrentRewindTime; // 0x11c(0x04)
	float CurrentJitterTime; // 0x120(0x04)
	float DebugCurrentRewindTargetTimestamp; // 0x124(0x04)
	bool PauseRewinding; // 0x128(0x01)
	char pad_129[0x7]; // 0x129(0x07)
};

// Class ShooterGame.ServerTeamVisibilityComponent
// Size: 0x138 (Inherited: 0xe8)
struct UServerTeamVisibilityComponent : UActorComponent {
	char pad_E8[0x50]; // 0xe8(0x50)
};

// Class ShooterGame.ServerVoteTelemetryComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UServerVoteTelemetryComponent : UActorComponent {
};

// Class ShooterGame.ServiceTickerManager
// Size: 0x148 (Inherited: 0x80)
struct UServiceTickerManager : UInitSystem {
	struct FMulticastInlineDelegate OnTickerChanged; // 0x80(0x10)
	char pad_90[0x18]; // 0x90(0x18)
	struct UConfigManager* ConfigManager; // 0xa8(0x08)
	struct URiotProductManager* RiotProductManager; // 0xb0(0x08)
	struct URiotStatusService* RiotStatusService; // 0xb8(0x08)
	struct UPlatformSessionManager* SessionManager; // 0xc0(0x08)
	struct UContentManager* ContentManager; // 0xc8(0x08)
	struct UContentIndex* ContentIndex; // 0xd0(0x08)
	char pad_D8[0x8]; // 0xd8(0x08)
	struct FRiotStatus RiotStatus; // 0xe0(0x50)
	struct TArray<struct FTickerStatus> TickerStatuses; // 0x130(0x10)
	char pad_140[0x8]; // 0x140(0x08)

	void UpdateTickerStatus(); // Function ShooterGame.ServiceTickerManager.UpdateTickerStatus // (Final|Native|Private) // @ game+0x3084d10
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.ServiceTickerManager.HandleGameFlowStateChanged // (Final|Native|Public) // @ game+0x307edd0
	struct TArray<struct FTickerStatus> GetTickerStatuses(); // Function ShooterGame.ServiceTickerManager.GetTickerStatuses // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x307e810
	bool GetTicker(struct FTickerObject& Out); // Function ShooterGame.ServiceTickerManager.GetTicker // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x307e750
	struct UServiceTickerManager* GetServiceTickerManager(struct UObject* WorldContextObject); // Function ShooterGame.ServiceTickerManager.GetServiceTickerManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307e220
};

// Class ShooterGame.SessionService
// Size: 0x38 (Inherited: 0x30)
struct USessionService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.SettingsScreen
// Size: 0x2c8 (Inherited: 0x2c8)
struct USettingsScreen : UUserWidget {

	void OnMenuStackEntryCreated(struct UMenuStackEntry* MenuStackEntry); // Function ShooterGame.SettingsScreen.OnMenuStackEntryCreated // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.TeamSocialSettingsContentBase
// Size: 0x318 (Inherited: 0x2c8)
struct UTeamSocialSettingsContentBase : UUserWidget {
	struct UVerticalBox* AllyContainer; // 0x2c8(0x08)
	struct UVerticalBox* EnemyContainer; // 0x2d0(0x08)
	struct UWidget* TeamVoiceHeader; // 0x2d8(0x08)
	struct UButton* MuteEnemyChatButton; // 0x2e0(0x08)
	struct UWidget* MuteEnemyChatCheckbox; // 0x2e8(0x08)
	struct UButton* MuteObserverChatButton; // 0x2f0(0x08)
	struct UWidget* MuteObserverChatCheckbox; // 0x2f8(0x08)
	struct UWidget* RemakeButton; // 0x300(0x08)
	struct UWidget* SurrenderButton; // 0x308(0x08)
	struct UWidget* TimeoutButton; // 0x310(0x08)
};

// Class ShooterGame.IndividualSocialSettingsContentBase
// Size: 0x330 (Inherited: 0x2c8)
struct UIndividualSocialSettingsContentBase : UUserWidget {
	struct UWidget* AcceptInviteButton; // 0x2c8(0x08)
	struct UWidget* AddFriendButton; // 0x2d0(0x08)
	struct UWidget* AddToPartyButton; // 0x2d8(0x08)
	struct UBorder* WidgetBorder; // 0x2e0(0x08)
	struct UImage* CharacterIcon; // 0x2e8(0x08)
	struct UTextBlock* CharacterName; // 0x2f0(0x08)
	struct UCheckBox* PingsMuteCheck; // 0x2f8(0x08)
	struct UWidget* PlayerNameWidget; // 0x300(0x08)
	struct UWidget* ReportButton; // 0x308(0x08)
	struct UCheckBox* TextMuteCheck; // 0x310(0x08)
	struct UCheckBox* VoiceMuteCheck; // 0x318(0x08)
	struct USlider* VolumeSetSlider; // 0x320(0x08)
	struct UTextBlock* VolumeText; // 0x328(0x08)
};

// Class ShooterGame.ShooterBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UShooterBlueprintLibrary : UBlueprintFunctionLibrary {

	float YardsToGameUnits(float Yards); // Function ShooterGame.ShooterBlueprintLibrary.YardsToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3084fd0
	void VisitWallSegments(struct UObject* WorldContextObject, struct FVector& StartLocation, struct FVector& EndLocation, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel Channel, struct FDelegate EntranceEvent, struct FDelegate ExitEvent); // Function ShooterGame.ShooterBlueprintLibrary.VisitWallSegments // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3084d30
	bool UsingTouchInput(); // Function ShooterGame.ShooterBlueprintLibrary.UsingTouchInput // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21ac3c0
	void UpdatePostProcessModifier(struct APostProcessVolume* Volume, struct UPostProcessTintBlendable* Modifier, float Weight); // Function ShooterGame.ShooterBlueprintLibrary.UpdatePostProcessModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3084c00
	float UnwindDegrees(float A); // Function ShooterGame.ShooterBlueprintLibrary.UnwindDegrees // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3084b70
	void UnregisterAudioOcclusionZone(struct UObject* WorldContextObject, struct USphereComponent* AudioOcclusionZone); // Function ShooterGame.ShooterBlueprintLibrary.UnregisterAudioOcclusionZone // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3084ab0
	struct AShooterPlayerState* TryGetShooterPlayerFromSubject(struct UObject* WorldContextObject, struct FString Subject); // Function ShooterGame.ShooterBlueprintLibrary.TryGetShooterPlayerFromSubject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30849b0
	struct UAresPurchasable* TryGetPurchasableClassByWeaponName(struct UObject* WorldContextObject, struct FString Name); // Function ShooterGame.ShooterBlueprintLibrary.TryGetPurchasableClassByWeaponName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30848b0
	struct AAresPlayerStateBase* TryGetAresPlayerFromSubject(struct UObject* WorldContextObject, struct FString Subject); // Function ShooterGame.ShooterBlueprintLibrary.TryGetAresPlayerFromSubject // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30847b0
	void ThrottleByFramerate(struct UObject* WorldContextObject, struct FName Key, int32_t EveryNFrames, enum class EThrottleOutputPins& OutResult); // Function ShooterGame.ShooterBlueprintLibrary.ThrottleByFramerate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3084640
	bool SweepSingleCapsuleByChannel(struct UObject* WorldContextObject, struct FVector& CapsuleStartLocation, struct FVector& CapsuleEndLocation, float CapsuleRadius, float CapsuleHalfHeight, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel TraceChannel, bool bBlockingHitsOnly, struct FVector& OutCapsuleStoppedLocation, struct FVector& OutImpactLocation, bool bTraceComplex); // Function ShooterGame.ShooterBlueprintLibrary.SweepSingleCapsuleByChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30842a0
	struct FColor StringToColor(struct FString ColorString); // Function ShooterGame.ShooterBlueprintLibrary.StringToColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x30841a0
	struct AGameObject* SpawnGameObject(struct UObject* WorldContextObject, struct AGameObject* GameObjectClass, struct FTransform& SpawnTransform, struct APawn* InstigatedBy, struct AActor* Owner); // Function ShooterGame.ShooterBlueprintLibrary.SpawnGameObject // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3083fa0
	struct AAresEquippable* SpawnEquippable(struct UObject* WorldContextObject, struct AAresEquippable* EquippableClass, struct FTransform& SpawnTransform, struct AActor* Owner, struct UEquippableSkinDataAsset* SkinAsset, struct UEquippableSkinLevelDataAsset* SkinLevelAsset, struct UEquippableSkinChromaDataAsset* ChromaAsset, struct UEquippableCharmDataAsset* CharmAsset, struct UEquippableCharmLevelDataAsset* CharmLevelAsset); // Function ShooterGame.ShooterBlueprintLibrary.SpawnEquippable // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3083ca0
	struct AActor* SpawnAbilityChildActor(struct UObject* WorldContextObject, struct AActor* ActorClass, struct FTransform& SpawnTransform, enum class ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, struct APawn* InstigatedBy, struct AActor* Owner); // Function ShooterGame.ShooterBlueprintLibrary.SpawnAbilityChildActor // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3083a70
	void SortArrayByPredicateWithDelegate(struct UObject* WorldContextObject, struct TArray<struct UObject*>& ArrayToSort, struct FDelegate Predicate); // Function ShooterGame.ShooterBlueprintLibrary.SortArrayByPredicateWithDelegate // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3083900
	struct FTimerHandle SetTimerByEventAllowMultiple(struct FDelegate Event, float Time, bool bLooping, float InitialStartDelay); // Function ShooterGame.ShooterBlueprintLibrary.SetTimerByEventAllowMultiple // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3083790
	void SetNavMeshDrawing(bool bShowNavMesh); // Function ShooterGame.ShooterBlueprintLibrary.SetNavMeshDrawing // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3083710
	void SetLightingChannel(struct AActor* TargetActor, int32_t Channel); // Function ShooterGame.ShooterBlueprintLibrary.SetLightingChannel // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3083650
	bool SetCVarValueFloat(struct FName CVarName, float CVarValue); // Function ShooterGame.ShooterBlueprintLibrary.SetCVarValueFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3083480
	void SetCollisionProfile(struct UPrimitiveComponent* Component, struct FName ProfileName); // Function ShooterGame.ShooterBlueprintLibrary.SetCollisionProfile // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3083570
	void SetActionMappingPressed(struct UObject* WorldContextObject, struct FName ActionMapping, bool bIsPressed); // Function ShooterGame.ShooterBlueprintLibrary.SetActionMappingPressed // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30832d0
	void SendSlackScreenshot(struct UObject* WorldContextObject, struct FString Title, struct FString PublicChannels, struct FString PrivateChannel); // Function ShooterGame.ShooterBlueprintLibrary.SendSlackScreenshot // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3083050
	void SendSlackMessage(struct FString Channel, struct FString FromName, struct FString Text, struct FString Icon); // Function ShooterGame.ShooterBlueprintLibrary.SendSlackMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3082d70
	void SendSlackColorMessage(struct FString Channel, struct FString FromName, struct FString Text, struct FString Icon, struct FString Color); // Function ShooterGame.ShooterBlueprintLibrary.SendSlackColorMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30829e0
	void SendSlackBitmap(struct FString Filename, struct FString Title, struct FString Channel, struct TArray<struct FColor>& Bitmap, int32_t Width, int32_t Height); // Function ShooterGame.ShooterBlueprintLibrary.SendSlackBitmap // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3082790
	void SendCoachPermissionsMessage(struct UObject* WorldContextObject, enum class ECoachMessageType MessageType); // Function ShooterGame.ShooterBlueprintLibrary.SendCoachPermissionsMessage // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30826d0
	void ScaleAresGameRewardMultiplier(struct FAresGameRewardMultiplier& OriginalMultiplier, float Scalar, struct FAresGameRewardMultiplier& ScaledMultiplier); // Function ShooterGame.ShooterBlueprintLibrary.ScaleAresGameRewardMultiplier // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3082550
	float SampleNormalDistribution(float Mean, float StdDev); // Function ShooterGame.ShooterBlueprintLibrary.SampleNormalDistribution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3082480
	void RunEventInProfileScope(struct FDelegate Event, struct FString Scope); // Function ShooterGame.ShooterBlueprintLibrary.RunEventInProfileScope // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3082320
	struct FVector RotateVectorTowardsVector(struct FVector& FromVector, struct FVector& ToVector, float RotationDegrees); // Function ShooterGame.ShooterBlueprintLibrary.RotateVectorTowardsVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x30821e0
	struct FVector RotateVectorTowardsUp(struct FVector& FromVector, float RotationDegrees); // Function ShooterGame.ShooterBlueprintLibrary.RotateVectorTowardsUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x30820e0
	struct FVector RotateVectorTowardsDown(struct FVector& FromVector, float RotationDegrees); // Function ShooterGame.ShooterBlueprintLibrary.RotateVectorTowardsDown // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3081fe0
	struct UObject* ResolveAresSoftReference(struct UObject* WorldContextObject, struct TSoftObjectPtr<UObject> AssetRef); // Function ShooterGame.ShooterBlueprintLibrary.ResolveAresSoftReference // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3081e90
	void ReportPIEErrorAndContinueTest(struct UObject* WorldContextObject, struct AActor* Actor, struct FString Error); // Function ShooterGame.ShooterBlueprintLibrary.ReportPIEErrorAndContinueTest // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3081d30
	void ReportPIEError(struct UObject* WorldContextObject, struct AActor* Actor, struct FString Error); // Function ShooterGame.ShooterBlueprintLibrary.ReportPIEError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3081bd0
	void RemovePostProcessModifier(struct APostProcessVolume* Volume, struct UPostProcessTintBlendable* Modifier); // Function ShooterGame.ShooterBlueprintLibrary.RemovePostProcessModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3081b10
	void RegisterAudioOcclusionZone(struct UObject* WorldContextObject, struct USphereComponent* AudioOcclusionZone); // Function ShooterGame.ShooterBlueprintLibrary.RegisterAudioOcclusionZone // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3081a50
	void PrintLogWarning(struct UObject* WorldContextObject, struct AActor* Actor, struct FString WarningText); // Function ShooterGame.ShooterBlueprintLibrary.PrintLogWarning // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30818f0
	void PIEValidationError(struct UObject* Source, struct FString Error); // Function ShooterGame.ShooterBlueprintLibrary.PIEValidationError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30817b0
	void PIEValidationCheck(struct UObject* Source, bool CheckedCondition, struct FString Error); // Function ShooterGame.ShooterBlueprintLibrary.PIEValidationCheck // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3081630
	bool MontageHasAnyLoops(struct UAnimMontage* Montage); // Function ShooterGame.ShooterBlueprintLibrary.MontageHasAnyLoops // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30815a0
	int32_t MinimapLayerToBitmask(enum class EAresMinimapLayer Layer); // Function ShooterGame.ShooterBlueprintLibrary.MinimapLayerToBitmask // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3070b20
	float MilesToGameUnits(float Miles); // Function ShooterGame.ShooterBlueprintLibrary.MilesToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3081510
	float MetersToGameUnits(float Meters); // Function ShooterGame.ShooterBlueprintLibrary.MetersToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3081480
	bool MeshUsesVertexColoring_EditorOnly(struct UStaticMeshComponent* StaticMeshComp); // Function ShooterGame.ShooterBlueprintLibrary.MeshUsesVertexColoring_EditorOnly // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x30813f0
	struct FText LocalizedStringToText(struct FString Str); // Function ShooterGame.ShooterBlueprintLibrary.LocalizedStringToText // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3081310
	void LoadStringTable(struct FName TableId); // Function ShooterGame.ShooterBlueprintLibrary.LoadStringTable // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3081280
	bool LineTraceSingleIgnoringTaggedObjects(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, enum class ETraceTypeQuery TraceChannel, bool bTraceComplex, struct FName ActorTagToIgnore, struct TArray<struct AActor*>& ActorsToIgnore, enum class EDrawDebugTrace DrawDebugType, struct FHitResult& OutHit, bool bIgnoreSelf, struct FLinearColor TraceColor, struct FLinearColor TraceHitColor, float DrawTime); // Function ShooterGame.ShooterBlueprintLibrary.LineTraceSingleIgnoringTaggedObjects // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3080dc0
	struct TArray<struct FVector> LineIntersectSphere(struct FVector& LineStart, struct FVector& LineEnd, struct FVector& SphereCenter, float SphereRadius); // Function ShooterGame.ShooterBlueprintLibrary.LineIntersectSphere // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3080bd0
	float LerpAngle(float FromDegrees, float ToDegrees, float Alpha); // Function ShooterGame.ShooterBlueprintLibrary.LerpAngle // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3080ab0
	float KilometersToGameUnits(float Kilometers); // Function ShooterGame.ShooterBlueprintLibrary.KilometersToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3080a20
	bool IsValidPlacePoint(struct UObject* WorldContextObject, struct FVector& Point, struct AActor* PlaceActor, struct FRotator PlaceRotator); // Function ShooterGame.ShooterBlueprintLibrary.IsValidPlacePoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x30808b0
	bool IsValidForInclusionExclusionFilter(struct UObject* Object, struct FClassInclusionExclusionFilter& Filter); // Function ShooterGame.ShooterBlueprintLibrary.IsValidForInclusionExclusionFilter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3080780
	bool IsPreview(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsPreview // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30806f0
	bool IsPointWithinViewAngles(struct AActor* Viewer, struct FVector& Point, float HorizontalDegressInView, float VerticalDegreesInView); // Function ShooterGame.ShooterBlueprintLibrary.IsPointWithinViewAngles // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3080590
	bool IsPlayInEditor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsPlayInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3080220
	bool IsPlayerVisibleFromLocation(struct UObject* WorldContextObject, struct FVector& ViewLocation, struct FVector& ViewVector, struct AActor* Viewee, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel ChannelType, int32_t VisibilityTargets); // Function ShooterGame.ShooterBlueprintLibrary.IsPlayerVisibleFromLocation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3080340
	bool IsPlayerModerator(struct AAresPlayerController* Player); // Function ShooterGame.ShooterBlueprintLibrary.IsPlayerModerator // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30802b0
	bool IsOutOfGame(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsOutOfGame // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3080190
	bool IsNoneAssetID(struct TSoftClassPtr<UObject> AssetClass); // Function ShooterGame.ShooterBlueprintLibrary.IsNoneAssetID // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2b6a890
	bool IsLocationTargetBlocked(struct TArray<struct FName> TagsToCheck, struct UObject* WorldContextObject, struct FVector& Location); // Function ShooterGame.ShooterBlueprintLibrary.IsLocationTargetBlocked // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307fff0
	bool IsLocalPlayerACoach(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsLocalPlayerACoach // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307fed0
	bool IsLocallyControlledOrSpectated(struct APawn* Pawn); // Function ShooterGame.ShooterBlueprintLibrary.IsLocallyControlledOrSpectated // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307ff60
	bool IsListenServer(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.IsListenServer // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307fe40
	bool IsGameFeatureToggleEnabled(struct UObject* WorldContextObject, enum class EGameFeatureToggleName GameFeatureToggleName); // Function ShooterGame.ShooterBlueprintLibrary.IsGameFeatureToggleEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307fd70
	bool IsForceModuleValid(struct FForceModuleHandle& Handle); // Function ShooterGame.ShooterBlueprintLibrary.IsForceModuleValid // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307fcd0
	bool IsEqual(struct FForceModuleHandle& A, struct FForceModuleHandle& B); // Function ShooterGame.ShooterBlueprintLibrary.IsEqual // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307fbe0
	bool IsEnemyToLocalViewTarget(struct UObject* WorldContextObject, struct UObject* Object); // Function ShooterGame.ShooterBlueprintLibrary.IsEnemyToLocalViewTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307fb10
	bool IsChildOfClass(struct UObject* Object, struct TSoftClassPtr<UObject> Class); // Function ShooterGame.ShooterBlueprintLibrary.IsChildOfClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307f9d0
	bool IsCharacterLocallyOwned(struct AShooterCharacter* Pawn); // Function ShooterGame.ShooterBlueprintLibrary.IsCharacterLocallyOwned // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307f940
	bool IsCameraOutOfSpawnRange(struct UObject* WorldContextObject, struct FVector& SpawnLocation, float MaxSpawnDistance); // Function ShooterGame.ShooterBlueprintLibrary.IsCameraOutOfSpawnRange // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x307f820
	bool IsAllyToLocalViewTarget(struct UObject* WorldContextObject, struct UObject* Object); // Function ShooterGame.ShooterBlueprintLibrary.IsAllyToLocalViewTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307f750
	bool IsAllowCheatsBuild(); // Function ShooterGame.ShooterBlueprintLibrary.IsAllowCheatsBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x21ac3c0
	bool IsActionMappingPressed(struct UObject* WorldContextObject, struct FName ActionMapping); // Function ShooterGame.ShooterBlueprintLibrary.IsActionMappingPressed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307f670
	struct FVector InvalidAIVector(); // Function ShooterGame.ShooterBlueprintLibrary.InvalidAIVector // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307f630
	float InterpolateRangeByInterpolant(float InputValue, struct FAresInputInterpolant& Interpolant); // Function ShooterGame.ShooterBlueprintLibrary.InterpolateRangeByInterpolant // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307f530
	float InterpolateRange(float InputValue, float InputRangeStart, float InputRangeEnd, float OutputRangeStart, float OutputRangeEnd, enum class EAresInterpolationFunction InterpolationType); // Function ShooterGame.ShooterBlueprintLibrary.InterpolateRange // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307f350
	float Interpolate(float A, float B, float Alpha, enum class EAresInterpolationFunction InterpolationType); // Function ShooterGame.ShooterBlueprintLibrary.Interpolate // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307f1f0
	bool HasSamePlayerInstigator(struct AActor* Actor, struct AActor* OtherActor); // Function ShooterGame.ShooterBlueprintLibrary.HasSamePlayerInstigator // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307f020
	int32_t HashString(struct FString StringValue); // Function ShooterGame.ShooterBlueprintLibrary.HashString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307f0f0
	bool HasDefaultComponent(struct AActor* ActorClass, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.HasDefaultComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307ef50
	bool HasAllianceToLocalViewTarget(struct UObject* WorldContextObject, struct UObject* Object, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.HasAllianceToLocalViewTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307ee50
	struct FVector GetWorldPosForYawAndPitch(struct AAresPlayerController* ShooterPlayerController, struct FVector2D YawAndPitch); // Function ShooterGame.ShooterBlueprintLibrary.GetWorldPosForYawAndPitch // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307ecf0
	struct FString GetWorldDescription(struct UWorld* World); // Function ShooterGame.ShooterBlueprintLibrary.GetWorldDescription // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307ec10
	void GetWallPenetrationSpans(struct UObject* WorldContextObject, struct FVector& StartLocation, struct FVector& EndLocation, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel Channel, float MinimumPlayableSpan, struct FWallSpanList& Spans); // Function ShooterGame.ShooterBlueprintLibrary.GetWallPenetrationSpans // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x307e920
	struct UTelemetryManager* GetTelemetryManager(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetTelemetryManager // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307e6c0
	struct UActorComponent* GetSiblingComponent(struct UActorComponent* ThisComponent, struct UActorComponent* Class); // Function ShooterGame.ShooterBlueprintLibrary.GetSiblingComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307e5f0
	struct TArray<struct AShooterPlayerState*> GetShooterPlayerStatesSortedByScore(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool OmitBots, bool bOmitCoaches); // Function ShooterGame.ShooterBlueprintLibrary.GetShooterPlayerStatesSortedByScore // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307e3d0
	struct AShooterHUD* GetShooterHUD(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetShooterHUD // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307e340
	struct AShooterGameState* GetShooterGameState(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetShooterGameState // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307e2b0
	int32_t GetRewardValue(struct FAresGameReward& Reward, enum class EAresGameReward RewardType); // Function ShooterGame.ShooterBlueprintLibrary.GetRewardValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307e110
	int32_t GetRespawnNumberFromTimestamp(struct FNetworkedMovementTimestamp& NetworkedMovementTimestamp); // Function ShooterGame.ShooterBlueprintLibrary.GetRespawnNumberFromTimestamp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307e070
	enum class EAresOrientation GetRelativeOrientation(struct AActor* Actor, struct FVector Point); // Function ShooterGame.ShooterBlueprintLibrary.GetRelativeOrientation // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307df90
	struct FLinearColor GetRedToGreenColor(float tVal); // Function ShooterGame.ShooterBlueprintLibrary.GetRedToGreenColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307df00
	float GetRadialFalloffDamage(float OuterRadius, float BaseDamage, float DistanceFromCenter, float InnerRadius, float MinDamage); // Function ShooterGame.ShooterBlueprintLibrary.GetRadialFalloffDamage // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307dd50
	struct UAresPurchasableEquippable* GetPurchasableForWeaponItemClass(struct UObject* WorldContextObject, struct AAresItem* ItemClass); // Function ShooterGame.ShooterBlueprintLibrary.GetPurchasableForWeaponItemClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307dc80
	struct TArray<struct UActorComponent*> GetPreloadableComponents(struct AActor* Actor); // Function ShooterGame.ShooterBlueprintLibrary.GetPreloadableComponents // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307dba0
	float GetPlayerHFoV(struct AShooterCharacter* Viewer); // Function ShooterGame.ShooterBlueprintLibrary.GetPlayerHFoV // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307db10
	struct FString GetPlayerFacingBuildVersionString(); // Function ShooterGame.ShooterBlueprintLibrary.GetPlayerFacingBuildVersionString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307da80
	struct TArray<struct AShooterCharacter*> GetPlayerCharactersSortedByScore(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.GetPlayerCharactersSortedByScore // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307d930
	struct FString GetObjectWorldDescription(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetObjectWorldDescription // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307d850
	struct FVector GetNonParallelUnitVector(struct FVector& SourceVector); // Function ShooterGame.ShooterBlueprintLibrary.GetNonParallelUnitVector // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307d7b0
	float GetMovementTimestamp(struct FNetworkedMovementTimestamp& NetworkedMovementTimestamp); // Function ShooterGame.ShooterBlueprintLibrary.GetMovementTimestamp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307d710
	struct FString GetMajorMinorFullBuildVersionString(); // Function ShooterGame.ShooterBlueprintLibrary.GetMajorMinorFullBuildVersionString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307d680
	struct AShooterCharacter* GetLocalViewTargetCharacter(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalViewTargetCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c940
	struct AActor* GetLocalViewTarget(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalViewTarget // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307d5f0
	float GetLocalPlayerLastRenderTime(struct UPrimitiveComponent* PrimComponent); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalPlayerLastRenderTime // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x307d560
	struct AOwnerExclusivePlayerInfo* GetLocalPlayerInfo(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalPlayerInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307d4d0
	struct UGameFeatureTogglesComponent* GetLocalGameFeatureTogglesComponent(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalGameFeatureTogglesComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307d440
	struct AAresPlayerController* GetLocalController(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307d3b0
	struct AShooterCharacter* GetLocalCharacter(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetLocalCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307d320
	struct FTransform GetLHMMirroredTransform(enum class ELHMMirroringIgnoreType MirroringType, struct FVector& OriginalLocation, struct FRotator& OriginalRotation, struct FVector& OriginalScale); // Function ShooterGame.ShooterBlueprintLibrary.GetLHMMirroredTransform // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x307d160
	bool GetIsShippingBuild(); // Function ShooterGame.ShooterBlueprintLibrary.GetIsShippingBuild // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d56120
	bool GetIsLocalPlayerCurrentlyRendering(struct UPrimitiveComponent* PrimComponent); // Function ShooterGame.ShooterBlueprintLibrary.GetIsLocalPlayerCurrentlyRendering // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x307d0d0
	int32_t GetIntSetting(struct AActor* WorldContextObject, struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresIntSettingName SettingName); // Function ShooterGame.ShooterBlueprintLibrary.GetIntSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307cfd0
	struct FName GetInputActionNameForMoveInput(enum class EAresMoveInput MoveInput); // Function ShooterGame.ShooterBlueprintLibrary.GetInputActionNameForMoveInput // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307cf40
	struct FName GetInputActionNameForEquippableInput(enum class EAresEquippableInput Input); // Function ShooterGame.ShooterBlueprintLibrary.GetInputActionNameForEquippableInput // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307ceb0
	bool GetGameRuleBool(struct UObject* WorldContextObject, enum class EGameRuleBoolName GameRuleBoolName); // Function ShooterGame.ShooterBlueprintLibrary.GetGameRuleBool // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307cde0
	void GetGameFeatureFloatConfig(struct UObject* WorldContextObject, enum class EGameFeatureFloatConfigName GameFeatureFloatConfigName, bool& IsValid, float& ConfigValue); // Function ShooterGame.ShooterBlueprintLibrary.GetGameFeatureFloatConfig // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307cc70
	struct FString GetFullBuildVersionString(); // Function ShooterGame.ShooterBlueprintLibrary.GetFullBuildVersionString // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307cbe0
	struct FString GetFullBuildVersion(); // Function ShooterGame.ShooterBlueprintLibrary.GetFullBuildVersion // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307cb50
	float GetFloatValue(struct FExplicitFloatCurve& Curve, float Time); // Function ShooterGame.ShooterBlueprintLibrary.GetFloatValue // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307c9d0
	struct AShooterCharacter* GetFirstPersonCharacter(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetFirstPersonCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c940
	struct APlayerController* GetFirstLocalPlayerController(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetFirstLocalPlayerController // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c8b0
	struct UActorComponent* GetFirstDefaultComponent(struct AActor* ActorClass, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.GetFirstDefaultComponent // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c7e0
	enum class EAresDisplayMode GetDisplayModeFromWindowMode(enum class EWindowMode WindowMode); // Function ShooterGame.ShooterBlueprintLibrary.GetDisplayModeFromWindowMode // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c760
	float GetDegreesAwayFromUp(struct FVector& Vector); // Function ShooterGame.ShooterBlueprintLibrary.GetDegreesAwayFromUp // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307c6d0
	float GetDegreesAwayFromDown(struct FVector& Vector); // Function ShooterGame.ShooterBlueprintLibrary.GetDegreesAwayFromDown // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307c640
	float GetDegreesApart(struct FVector& VectorA, struct FVector& VectorB); // Function ShooterGame.ShooterBlueprintLibrary.GetDegreesApart // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307c550
	struct AAresEquippable* GetDefaultEquippable(struct AAresEquippable* EquippableClass); // Function ShooterGame.ShooterBlueprintLibrary.GetDefaultEquippable // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c4c0
	struct TArray<struct UActorComponent*> GetDefaultComponents(struct AActor* ActorClass, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.GetDefaultComponents // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c3a0
	struct ADamageSource* GetDamageSourceFromDamageTypeClass(struct UDamageType* DamageTypeClass); // Function ShooterGame.ShooterBlueprintLibrary.GetDamageSourceFromDamageTypeClass // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c310
	struct ADamageSource* GetDamageSourceFromDamageResponse(struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterBlueprintLibrary.GetDamageSourceFromDamageResponse // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c280
	struct FString GetCVarValueString(struct FName CVarName); // Function ShooterGame.ShooterBlueprintLibrary.GetCVarValueString // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307bc30
	int32_t GetCVarValueInt(struct FName CVarName); // Function ShooterGame.ShooterBlueprintLibrary.GetCVarValueInt // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307bb90
	float GetCVarValueFloat(struct FName CVarName); // Function ShooterGame.ShooterBlueprintLibrary.GetCVarValueFloat // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307baf0
	int32_t GetCurrentEngineFrame(); // Function ShooterGame.ShooterBlueprintLibrary.GetCurrentEngineFrame // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307c250
	struct FText GetCurrentCalloutRegionNameForActor(struct AActor* Actor); // Function ShooterGame.ShooterBlueprintLibrary.GetCurrentCalloutRegionNameForActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c190
	struct AAresCalloutRegion* GetCurrentCalloutRegionForActor(struct AActor* Actor); // Function ShooterGame.ShooterBlueprintLibrary.GetCurrentCalloutRegionForActor // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c100
	struct UCoordinatedHUDModel* GetCoordinatedHUDModel(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetCoordinatedHUDModel // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307c070
	void GetComponentArrayBounds(struct TArray<struct UActorComponent*>& Components, bool bOnlyCollidingComponents, struct FVector& Center, struct FVector& BoxExtent); // Function ShooterGame.ShooterBlueprintLibrary.GetComponentArrayBounds // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307bed0
	enum class ECollisionTraceFlag GetCollisionTraceFlag(struct UStaticMesh* StaticMesh); // Function ShooterGame.ShooterBlueprintLibrary.GetCollisionTraceFlag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307be40
	struct UObject* GetClassDefaultObject(struct UObject* Class); // Function ShooterGame.ShooterBlueprintLibrary.GetClassDefaultObject // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307bdb0
	struct AAresCalloutRegion* GetCalloutRegionFromPlayer(struct AShooterPlayerState* Player); // Function ShooterGame.ShooterBlueprintLibrary.GetCalloutRegionFromPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307bd20
	bool GetBoolSetting(struct AActor* WorldContextObject, struct AOwnerExclusivePlayerInfo* SubjectPlayer, enum class EAresBoolSettingName SettingName); // Function ShooterGame.ShooterBlueprintLibrary.GetBoolSetting // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307b9f0
	struct TArray<struct AActor*> GetBestAimTargetList(struct AShooterCharacter* AimingPawn, float MaxTargetRange, float MaxTargetRangeYaw, float MaxTargetAnglePitch, struct FClassInclusionExclusionFilter& ClassFilter, struct AActor* CurrentAimTarget, float CurrentTargetScoreBonus); // Function ShooterGame.ShooterBlueprintLibrary.GetBestAimTargetList // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x307b720
	struct AAresWorldSettings* GetAresWorldSettings(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAresWorldSettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307b690
	struct UAresSlateGlobals* GetAresSlateGlobals(); // Function ShooterGame.ShooterBlueprintLibrary.GetAresSlateGlobals // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307b660
	struct UShooterGameGlobals* GetAresGlobals(); // Function ShooterGame.ShooterBlueprintLibrary.GetAresGlobals // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307b630
	struct UAresEquippableGlobals* GetAresEquippableGlobals(); // Function ShooterGame.ShooterBlueprintLibrary.GetAresEquippableGlobals // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307b600
	float GetAngleFromNorthXY(struct FVector InVector, struct FVector North); // Function ShooterGame.ShooterBlueprintLibrary.GetAngleFromNorthXY // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307b520
	float GetAngleFromNorth(struct FVector& InVector, struct FVector& North); // Function ShooterGame.ShooterBlueprintLibrary.GetAngleFromNorth // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307b430
	float GetAngleBetween2DVectors(struct FVector2D& From, struct FVector2D& To); // Function ShooterGame.ShooterBlueprintLibrary.GetAngleBetween2DVectors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x307b350
	void GetAmmoHudInfoForEquippable(struct UObject* WorldContextObject, struct AAresEquippable* Equippable, bool& bIsValid, struct FAmmoHudInfo& OutHudInfo); // Function ShooterGame.ShooterBlueprintLibrary.GetAmmoHudInfoForEquippable // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307b1e0
	float GetAimScore(struct AActor* AimTargetActor, struct FVector& CamLocation, struct FRotator& CamRotation, float MaxAimDistance, float AimDistanceBias, float CollisionScale, float IndirectTargetAngleYaw, float IndirectTargetAnglePitch, struct UCurveFloat* AimScoreCurve, struct FVector& OutAimPointOnObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAimScore // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x307aed0
	void GetActorAndChildren(struct AActor* Actor, struct TArray<struct AActor*>& Actors); // Function ShooterGame.ShooterBlueprintLibrary.GetActorAndChildren // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x307ade0
	struct FColor GetAccessibilityEnemyColor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAccessibilityEnemyColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x307ad50
	struct FColor GetAccessibilityAllyColor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.GetAccessibilityAllyColor // (Final|Native|Static|Public|HasDefaults|BlueprintCallable) // @ game+0x307acc0
	float GameUnitsToYards(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToYards // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307ac30
	float GameUnitsToMiles(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToMiles // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307aba0
	float GameUnitsToMeters(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToMeters // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307ab10
	float GameUnitsToKilometers(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToKilometers // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307aa80
	float GameUnitsToFeet(float GameUnits); // Function ShooterGame.ShooterBlueprintLibrary.GameUnitsToFeet // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x307a9f0
	struct TArray<struct AShooterCharacter*> FindSpawnedCharactersWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool AliveOnly); // Function ShooterGame.ShooterBlueprintLibrary.FindSpawnedCharactersWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307a840
	struct TArray<struct AShooterCharacter*> FindShooterCharactersInCone(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct FVector ConeForwardVector, float ConeFullAngle, enum class EAresConeAngleCheckType ConeAngleCheckType, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindShooterCharactersInCone // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x307a430
	struct AShooterCharacter* FindRandomSpawnedCharacterWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool AliveOnly); // Function ShooterGame.ShooterBlueprintLibrary.FindRandomSpawnedCharacterWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x307a2e0
	struct TArray<struct AShooterCharacter*> FindRadialShooterCharacters(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindRadialShooterCharacters // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3079fb0
	struct TArray<struct AAresOnGroundEquippable*> FindRadialOnGroundEquippables(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindRadialOnGroundEquippables // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3079c80
	void FindRadialAresActors(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct TArray<struct AActor*>& ResultAresActors, bool bFindShooterCharacters, bool bFindGameObjects, bool bFindProjectiles, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindRadialAresActors // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3079850
	struct AShooterCharacter* FindPreviousPlayer(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, struct AShooterCharacter* CurrentAlly, struct AShooterCharacter* IgnoreCharacter); // Function ShooterGame.ShooterBlueprintLibrary.FindPreviousPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30796c0
	struct TArray<struct AStaticMeshActor*> FindOverlappingStaticMeshes(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindOverlappingStaticMeshes // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30795e0
	bool FindOtherSideOfWall(struct UObject* WorldContextObject, struct FVector& Location, struct FRotator& Rotation, float MaximumDistance, float IgnoreGapTolerance, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel Channel, struct FVector& Entrance, struct FVector& Exit); // Function ShooterGame.ShooterBlueprintLibrary.FindOtherSideOfWall // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x30792e0
	struct AShooterCharacter* FindNextPlayer(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, struct AShooterCharacter* CurrentAlly, struct AShooterCharacter* IgnoreCharacter); // Function ShooterGame.ShooterBlueprintLibrary.FindNextPlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3079150
	bool FindNearbyLocationForComponentToPoint(struct FVector& Location, struct FRotator& Rotation, struct UPrimitiveComponent* TargetComponent, float MinimumDistance, float MaximumDistance, float MaximumHeightDelta, bool AdjustToGround, bool UseNavMesh, enum class ECollisionChannel Channel, struct TArray<struct AActor*>& IgnoredActors, struct FVector& Output); // Function ShooterGame.ShooterBlueprintLibrary.FindNearbyLocationForComponentToPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3078dc0
	bool FindNearbyLocationForComponentToActor(struct AActor* SourceActor, struct UPrimitiveComponent* TargetComponent, float MinimumDistance, float MaximumDistance, float MaximumHeightDelta, bool AdjustToGround, bool UseNavMesh, enum class ECollisionChannel Channel, struct TArray<struct AActor*>& IgnoredActors, struct FVector& Output); // Function ShooterGame.ShooterBlueprintLibrary.FindNearbyLocationForComponentToActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3078aa0
	bool FindNearbyLocationForActorToPoint(struct FVector& Location, struct FRotator& Rotation, struct AActor* TargetActor, float MinimumDistance, float MaximumDistance, float MaximumHeightDelta, bool AdjustToGround, bool UseNavMesh, enum class ECollisionChannel Channel, struct TArray<struct AActor*>& IgnoredActors, struct FVector& Output); // Function ShooterGame.ShooterBlueprintLibrary.FindNearbyLocationForActorToPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3078710
	bool FindNearbyLocationForActorToActor(struct AActor* SourceActor, struct AActor* TargetActor, float MinimumDistance, float MaximumDistance, float MaximumHeightDelta, bool AdjustToGround, bool UseNavMesh, enum class ECollisionChannel Channel, struct TArray<struct AActor*>& IgnoredActors, struct FVector& Output); // Function ShooterGame.ShooterBlueprintLibrary.FindNearbyLocationForActorToActor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x30783f0
	struct AGameObject* FindFirstGameObjectWithTagAndAlliance(struct UObject* WorldContextObject, struct FName Tag, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstGameObjectWithTagAndAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3078290
	struct AGameObject* FindFirstGameObjectWithTag(struct UObject* WorldContextObject, struct FName Tag); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstGameObjectWithTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30781a0
	struct UActorComponent* FindFirstComponentInOwnershipChain(struct AActor* Actor, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstComponentInOwnershipChain // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30780d0
	struct AAresMarker* FindFirstAresMarkerWithTagAndAlliance(struct UObject* WorldContextObject, struct FName Tag, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstAresMarkerWithTagAndAlliance // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3077f70
	struct AAresMarker* FindFirstAresMarkerWithTag(struct UObject* WorldContextObject, struct FName Tag); // Function ShooterGame.ShooterBlueprintLibrary.FindFirstAresMarkerWithTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3077e80
	float FindDeltaAngleDegrees(float A1, float A2); // Function ShooterGame.ShooterBlueprintLibrary.FindDeltaAngleDegrees // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3077db0
	struct UActorComponent* FindDefaultComponentByName(struct AActor* InActorClass, struct FString Name); // Function ShooterGame.ShooterBlueprintLibrary.FindDefaultComponentByName // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3077c70
	void FindDamageableActorHitsInAxialArea(struct TMap<struct AActor*, struct FHitResult>& OutHitActors, struct UObject* WorldContextObject, struct FVector& SearchOrigin, struct TArray<struct AActor*>& IgnoreActors, float SearchRadius, float AxialOffset, enum class ECollisionChannel TraceChannel); // Function ShooterGame.ShooterBlueprintLibrary.FindDamageableActorHitsInAxialArea // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3077990
	struct AShooterCharacter* FindClosestShooterCharacterInCone(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct FVector ConeForwardVector, float ConeFullAngle, enum class EAresConeAngleCheckType ConeAngleCheckType, struct TArray<struct AActor*>& IgnoreActors, bool LivingOnly, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindClosestShooterCharacterInCone // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3077590
	struct AShooterCharacter* FindClosestRadialShooterCharacter(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct TArray<struct AActor*>& IgnoreActors, bool LivingOnly, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindClosestRadialShooterCharacter // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3077260
	void FindAresActorsInCone(struct UObject* WorldContextObject, struct FVector& Origin, float Radius, struct FVector ConeForwardVector, float ConeFullAngle, enum class EAresConeAngleCheckType ConeAngleCheckType, struct TArray<struct AActor*>& ResultAresActors, bool bFindShooterCharacters, bool bFindGameObjects, bool bFindProjectiles, struct TArray<struct AActor*>& IgnoreActors, enum class EAresRadialCheckType RadialCheckType, enum class EAresLineOfSightCheckType LineOfSightCheck, enum class EAresSearchVisibilityType SearchVisibilityType, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindAresActorsInCone // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3076d60
	void FindAresActorsInAxialArea(struct TArray<struct AActor*>& OutHitActors, struct UObject* WorldContextObject, struct FVector& SearchOrigin, struct TArray<struct AActor*>& IgnoreActors, bool bFindShooterCharacters, bool bFindGameObjects, bool bFindProjectiles, struct UObject* Viewer, enum class EAresAlliance Alliance, float SearchRadius, float AxialOffset, enum class EAresSearchVisibilityType SearchVisibilityType); // Function ShooterGame.ShooterBlueprintLibrary.FindAresActorsInAxialArea // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3076970
	struct TArray<struct AShooterPlayerState*> FindAllShooterPlayerStatesWithAllianceSortedByTeam(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool OmitCoaches, bool OnlyAlivePlayers); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterPlayerStatesWithAllianceSortedByTeam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3076750
	struct TArray<struct AShooterPlayerController*> FindAllShooterControllersWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterControllersWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3076600
	struct TArray<struct AShooterPlayerController*> FindAllShooterControllers(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterControllers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3076520
	struct TArray<struct AShooterCharacter*> FindAllShooterCharactersWithAllianceSortedByTeam(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool OnlyPlayerControlled, bool OnlyAlivePlayers); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterCharactersWithAllianceSortedByTeam // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3076300
	struct TArray<struct AShooterCharacter*> FindAllShooterCharactersWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool OnlyPlayerControlled, bool OnlyAlivePlayers); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterCharactersWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30760e0
	struct TArray<struct AShooterCharacter*> FindAllShooterCharacters(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindAllShooterCharacters // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3076000
	struct TArray<struct AOwnerExclusivePlayerInfo*> FindAllPlayerInfosWithAlliance(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, bool bOmitCoaches); // Function ShooterGame.ShooterBlueprintLibrary.FindAllPlayerInfosWithAlliance // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3075e50
	struct TArray<struct AOwnerExclusivePlayerInfo*> FindAllPlayerInfos(struct UObject* WorldContextObject, bool bOmitCoaches); // Function ShooterGame.ShooterBlueprintLibrary.FindAllPlayerInfos // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3075d30
	struct TArray<struct AGameObject*> FindAllGameObjectsWithTag(struct UObject* WorldContextObject, struct FName Tag); // Function ShooterGame.ShooterBlueprintLibrary.FindAllGameObjectsWithTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3075c00
	struct TArray<struct AGameObject*> FindAllGameObjects(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindAllGameObjects // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3075b20
	struct TArray<struct AAresMarker*> FindAllAresMarkersWithTag(struct UObject* WorldContextObject, struct FName Tag); // Function ShooterGame.ShooterBlueprintLibrary.FindAllAresMarkersWithTag // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30759f0
	struct TArray<struct AAresPlayerController*> FindAllAresControllers(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.FindAllAresControllers // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3075910
	struct TArray<struct AActor*> FindActorsOverlappingComponentByChannel(struct UPrimitiveComponent* Primitive, enum class ECollisionChannel TraceChannel, struct TArray<struct AActor*>& IgnoreActors); // Function ShooterGame.ShooterBlueprintLibrary.FindActorsOverlappingComponentByChannel // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3075790
	void FindActorsInAxialArea(struct TArray<struct AActor*>& OutHitActors, struct UObject* WorldContextObject, struct FVector& SearchOrigin, struct TArray<struct AActor*>& IgnoreActors, float SearchRadius, float AxialOffset, enum class ECollisionChannel TraceChannel); // Function ShooterGame.ShooterBlueprintLibrary.FindActorsInAxialArea // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3075510
	float FeetToGameUnits(float Feet); // Function ShooterGame.ShooterBlueprintLibrary.FeetToGameUnits // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3075480
	void EndPlayInEditor(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.EndPlayInEditor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d54b90
	void DrawDebugTextOnAllClients(struct UObject* WorldContextObject, struct FString Text, float LifeTime); // Function ShooterGame.ShooterBlueprintLibrary.DrawDebugTextOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x3075350
	void DrawDebugSphereOnAllClients(struct UObject* WorldContextObject, struct FVector& Center, float Radius, int32_t Segments, struct FColor& SphereColor, bool bPersistentLines, float LifeTime, char DepthPriority); // Function ShooterGame.ShooterBlueprintLibrary.DrawDebugSphereOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3072a50
	void DrawDebugLineOnAllClients(struct UObject* WorldContextObject, struct FVector& LineStart, struct FVector& LineEnd, struct FColor& LineColor, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterBlueprintLibrary.DrawDebugLineOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30727c0
	void DrawDebugBoxOnAllClients(struct UObject* WorldContextObject, struct FBox& Box, struct FColor& Color, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterBlueprintLibrary.DrawDebugBoxOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3075110
	void DoNothing(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.DoNothing // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x2d54b90
	struct UUserWidget* CreateClientOnlyUserWidget(struct TSoftClassPtr<UObject> WidgetAsset, struct APlayerController* OwningPlayer); // Function ShooterGame.ShooterBlueprintLibrary.CreateClientOnlyUserWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3074fc0
	bool CouldEventBeAudibleByLocalPlayer(struct UObject* WorldContextObject, struct UAkAudioEvent* Event, struct FVector& SoundSpawnLocation, bool bIsSoundAttached, float VolumeMultiplier); // Function ShooterGame.ShooterBlueprintLibrary.CouldEventBeAudibleByLocalPlayer // (Final|BlueprintCosmetic|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3074df0
	enum class EAresSurfaceType ConvertToAresSurfaceType(enum class EPhysicalSurface SurfaceType); // Function ShooterGame.ShooterBlueprintLibrary.ConvertToAresSurfaceType // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3074d70
	struct AShooterCharacter* ControllerToShooterCharacter(struct AController* Controller); // Function ShooterGame.ShooterBlueprintLibrary.ControllerToShooterCharacter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3074ce0
	void ComputeViewpointValues(struct UObject* WorldContextObject, struct FVector& WorldPosition, bool& bIsOnScreen, float& InWorldDistanceToViewpoint, struct FVector2D& ScreenDistanceToViewpointNormalized01, float& AspectRatio); // Function ShooterGame.ShooterBlueprintLibrary.ComputeViewpointValues // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3074ab0
	bool ComponentIsVisibleFrom(struct UPrimitiveComponent* ComponentToCheck, struct FVector& Origin, struct TArray<struct AActor*>& IgnoreActors, struct FHitResult& OutHitResult, enum class ECollisionChannel TraceChannel, bool bReverseLineCheck); // Function ShooterGame.ShooterBlueprintLibrary.ComponentIsVisibleFrom // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3074850
	bool CompareText(struct FText& LHS, struct FText& Rhs); // Function ShooterGame.ShooterBlueprintLibrary.CompareText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3074730
	bool CompareNetworkedMovementTimestamps(struct FNetworkedMovementTimestamp& NetworkedMovementTimestampOne, struct FNetworkedMovementTimestamp& NetworkedMovementTimestampTwo); // Function ShooterGame.ShooterBlueprintLibrary.CompareNetworkedMovementTimestamps // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3074630
	struct FString ColorToString(struct FColor Color); // Function ShooterGame.ShooterBlueprintLibrary.ColorToString // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3074560
	struct FVector ClosestPointOnLineToPoint(struct FVector& LineStart, struct FVector& LineEnd, struct FVector& Point); // Function ShooterGame.ShooterBlueprintLibrary.ClosestPointOnLineToPoint // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3074410
	void ClientClearAllMapDecals(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.ClientClearAllMapDecals // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3074390
	void ClickActionMapping(struct UObject* WorldContextObject, struct FName ActionMapping); // Function ShooterGame.ShooterBlueprintLibrary.ClickActionMapping // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30742b0
	void ClearUserFocus(int32_t UserIndex); // Function ShooterGame.ShooterBlueprintLibrary.ClearUserFocus // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3074230
	bool ClassIsValid(struct UObject* ClassType); // Function ShooterGame.ShooterBlueprintLibrary.ClassIsValid // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3074180
	bool CircleOverlapsRectangle2D(struct FVector2D& CircleCenter, float CircleRadius, struct FVector2D& RectangleCenter, struct FVector2D& RectangleHalfSize); // Function ShooterGame.ShooterBlueprintLibrary.CircleOverlapsRectangle2D // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3074010
	void CheckOrReportPIEError(bool Condition, struct UObject* WorldContextObject, struct AActor* Actor, struct FString ErrorMsg); // Function ShooterGame.ShooterBlueprintLibrary.CheckOrReportPIEError // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3073e50
	struct AShooterPlayerController* CastToShooterPlayerController(struct AController* Controller); // Function ShooterGame.ShooterBlueprintLibrary.CastToShooterPlayerController // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3073dc0
	bool CapsuleBlockedByChannel(struct UObject* WorldContextObject, struct FVector& CapsuleLocation, float CapsuleHalfHeight, float CapsuleRadius, struct TArray<struct AActor*>& IgnoreActors, enum class ECollisionChannel TraceChannel, bool bTraceComplex); // Function ShooterGame.ShooterBlueprintLibrary.CapsuleBlockedByChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3073b60
	bool CanPlayerSeePlayer(struct AShooterCharacter* Viewer, struct AShooterCharacter* Viewee, enum class ECollisionChannel ChannelType, bool bObeySightDebuffs, int32_t VisibilityTargets); // Function ShooterGame.ShooterBlueprintLibrary.CanPlayerSeePlayer // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30739c0
	bool CanPlayerSeeActor(struct AShooterCharacter* Viewer, struct AActor* Viewee, enum class ECollisionChannel ChannelType, bool bObeySightDebuffs, int32_t VisibilityTargets); // Function ShooterGame.ShooterBlueprintLibrary.CanPlayerSeeActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3073820
	bool CanActorSeeComponent(struct AActor* Viewer, struct UPrimitiveComponent* Viewee, float HorizontalDegressInView, float VerticalDegreesInView, enum class ECollisionChannel ChannelType, bool bHighRes); // Function ShooterGame.ShooterBlueprintLibrary.CanActorSeeComponent // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3073650
	bool CanActorSeeActor(struct AActor* Viewer, struct AActor* Viewee, float HorizontalDegressInView, float VerticalDegreesInView, bool bNonColliding, enum class ECollisionChannel ChannelType, bool bHighRes); // Function ShooterGame.ShooterBlueprintLibrary.CanActorSeeActor // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3073440
	void CalculateGrenadeArc(float UpwardArc, float UpwardShift, struct FVector& InOrigin, struct FVector& InDirection, struct FVector& OutOrigin, struct FVector& OutDirection); // Function ShooterGame.ShooterBlueprintLibrary.CalculateGrenadeArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3073210
	void AuthWorldRemoveAllEquippablesByClass(struct UObject* WorldContextObject, struct AAresEquippable* EquippableClass); // Function ShooterGame.ShooterBlueprintLibrary.AuthWorldRemoveAllEquippablesByClass // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x3073150
	bool AuthProjectPointToNavMesh(struct UObject* WorldContextObject, struct FVector Point, struct FVector& OutProjectedPoint, float MaxAllowedProjectionVerticalDistance); // Function ShooterGame.ShooterBlueprintLibrary.AuthProjectPointToNavMesh // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3072fd0
	struct AShooterGameMode* AuthGetShooterGameMode(struct UObject* WorldContextObject); // Function ShooterGame.ShooterBlueprintLibrary.AuthGetShooterGameMode // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3072f40
	bool AuthFindValidPlacePoint(struct UObject* WorldContextObject, struct AActor* PlaceActor, struct FVector Point, struct FRotator PlaceRotator, float SearchRadius, float DesiredGroundHeightOffsetForPlacePoint, struct FVector& OutPlacePoint, float MaxAllowedProjectionVerticalDistance); // Function ShooterGame.ShooterBlueprintLibrary.AuthFindValidPlacePoint // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3072cc0
	void AuthDrawDebugSphereOnAllClients(struct UObject* WorldContextObject, struct FVector& Center, float Radius, int32_t Segments, struct FColor& SphereColor, bool bPersistentLines, float LifeTime, char DepthPriority); // Function ShooterGame.ShooterBlueprintLibrary.AuthDrawDebugSphereOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3072a50
	void AuthDrawDebugLineOnAllClients(struct UObject* WorldContextObject, struct FVector& LineStart, struct FVector& LineEnd, struct FColor& LineColor, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterBlueprintLibrary.AuthDrawDebugLineOnAllClients // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30727c0
	void AuthCreateDelegatesForAbilitySubobject(struct UObject* WorldContextObject, struct AActor* SourceActor, struct AActor* TargetActor); // Function ShooterGame.ShooterBlueprintLibrary.AuthCreateDelegatesForAbilitySubobject // (Final|BlueprintAuthorityOnly|Native|Static|Public|BlueprintCallable) // @ game+0x30726c0
	void AuthBroadcastSystemMessage(struct UWorld* World, struct APlayerState* SourcePlayer, struct APlayerState* TargetPlayer, struct FText& MsgText); // Function ShooterGame.ShooterBlueprintLibrary.AuthBroadcastSystemMessage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3072550
	void AresStopEvent(struct UAkAudioEvent* Event, struct AActor* Owner); // Function ShooterGame.ShooterBlueprintLibrary.AresStopEvent // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable) // @ game+0x3072490
	void AresStabilityTypeToString(struct FString& MovementTypeString, enum class EAresStabilityType StabilityType); // Function ShooterGame.ShooterBlueprintLibrary.AresStabilityTypeToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3072210
	bool AresProjectPointToNavigation(struct UObject* WorldContextObject, struct FVector& Point, struct FVector QueryExtent, struct FVector& OutProjectedPoint); // Function ShooterGame.ShooterBlueprintLibrary.AresProjectPointToNavigation // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3072310
	void AresMovementTypeToString(struct FString& MovementTypeString, enum class EAresMovementType MovementType); // Function ShooterGame.ShooterBlueprintLibrary.AresMovementTypeToString // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3072210
	bool AresLineTraceSingleByChannel(struct UObject* WorldContextObject, struct FVector Start, struct FVector End, struct TArray<struct AActor*>& ActorsToIgnore, struct FHitResult& OutHit, enum class ECollisionChannel TraceChannel, bool bTraceComplex, bool bIncludeMovingObjects); // Function ShooterGame.ShooterBlueprintLibrary.AresLineTraceSingleByChannel // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3071ef0
	bool AresApplyRadialDamageWithFalloff(struct UObject* WorldContextObject, float BaseDamage, float MinimumDamage, struct FVector& Origin, float DamageInnerRadius, float DamageOuterRadius, float DamageFalloff, struct UDamageType* DamageTypeClass, struct TArray<struct AActor*>& IgnoreActors, struct AActor* DamageCauser, struct AController* InstigatedByController, enum class ECollisionChannel DamagePreventionChannel); // Function ShooterGame.ShooterBlueprintLibrary.AresApplyRadialDamageWithFalloff // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3071b30
	bool ApproximateNewProjectileArc(struct UObject* WorldContextObject, struct FVector& Origin, struct FVector& ShootDir, struct AProjectile* ProjectileClass, struct AActor* IgnoreActor, struct TArray<struct FVector>& OutStepList, struct FVector& OutCollisionPoint, struct FVector& OutCollisionNormal); // Function ShooterGame.ShooterBlueprintLibrary.ApproximateNewProjectileArc // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3071870
	void ApplyRadialBuff_V2(struct UObject* WorldContextObject, struct UAresGameplayBuff* BuffClass, struct FVector& Origin, float Radius, struct AActor* DamageCauser, struct APawn* InstigatorPawn); // Function ShooterGame.ShooterBlueprintLibrary.ApplyRadialBuff_V2 // (Final|BlueprintAuthorityOnly|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3071670
	struct TArray<struct UObject*> ApplyInclusionExclusionFilter(struct TArray<struct UObject*>& Array, struct FClassInclusionExclusionFilter& Filter); // Function ShooterGame.ShooterBlueprintLibrary.ApplyInclusionExclusionFilter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x30712f0
	struct FActiveGameplayEffectHandle ApplyAresBuff(struct AActor* BuffTarget, struct UAresGameplayBuff* BuffClass, struct AActor* DamageCauser, struct APawn* InstigatorPawn, float BuffLevel, bool bCanApplyToDeadObjects); // Function ShooterGame.ShooterBlueprintLibrary.ApplyAresBuff // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3071490
	struct TArray<struct AActor*> ApplyActorInclusionExclusionFilter(struct TArray<struct AActor*>& Array, struct FClassInclusionExclusionFilter& Filter); // Function ShooterGame.ShooterBlueprintLibrary.ApplyActorInclusionExclusionFilter // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x30712f0
	void AdjustScoreForTeamPlayers(struct UObject* WorldContextObject, struct UObject* Viewer, enum class EAresAlliance Alliance, int32_t Delta, struct FName& Reason); // Function ShooterGame.ShooterBlueprintLibrary.AdjustScoreForTeamPlayers // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3071150
	float AdjustDeveloperMovementHelper(float Adjustment); // Function ShooterGame.ShooterBlueprintLibrary.AdjustDeveloperMovementHelper // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30710c0
	struct FNetworkedMovementTimestamp AddTimeToNetworkedMovementTimestamp(struct FNetworkedMovementTimestamp& NetworkedMovementTimestamp, float AdditionalTime); // Function ShooterGame.ShooterBlueprintLibrary.AddTimeToNetworkedMovementTimestamp // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3070fc0
	void AddSentryTag(struct FString Name, struct FString Value); // Function ShooterGame.ShooterBlueprintLibrary.AddSentryTag // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3070ec0
	struct FAresGameReward AddRewards(struct FAresGameReward& Reward1, struct FAresGameReward& Reward2); // Function ShooterGame.ShooterBlueprintLibrary.AddRewards // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3070d80
	struct UPostProcessTintBlendable* AddNewPostProcessModifier(struct APostProcessVolume* Volume, struct UPostProcessTintBlendable* ModifierClass, float Weight); // Function ShooterGame.ShooterBlueprintLibrary.AddNewPostProcessModifier // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3070c70
	struct UActorComponent* AddComponentByClass(struct AActor* Actor, struct UActorComponent* ComponentClass); // Function ShooterGame.ShooterBlueprintLibrary.AddComponentByClass // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3070ba0
	int32_t ActorVisibilityTargetToBitmask(enum class EAresActorVisibilityTarget Target); // Function ShooterGame.ShooterBlueprintLibrary.ActorVisibilityTargetToBitmask // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3070b20
	void ActorGetShieldInfo(struct AActor* Actor, float& Shield, float& MaxShield); // Function ShooterGame.ShooterBlueprintLibrary.ActorGetShieldInfo // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3070a00
};

// Class ShooterGame.ShooterCamera
// Size: 0x2f00 (Inherited: 0x2e50)
struct AShooterCamera : APlayerCameraManager {
	struct FMulticastInlineDelegate OnViewTargetChanged; // 0x2e50(0x10)
	struct FMulticastInlineDelegate OnAresCameraStyleChanged; // 0x2e60(0x10)
	struct FMulticastInlineDelegate OnAresCameraPerspectiveChanged; // 0x2e70(0x10)
	enum class EAresCameraPerspective AresCameraPerspective; // 0x2e80(0x01)
	char pad_2E81[0x3]; // 0x2e81(0x03)
	struct FRotator LastControlRotation; // 0x2e84(0x0c)
	struct FRotator DebugInputRotator; // 0x2e90(0x0c)
	float Camera3PTargetZoom; // 0x2e9c(0x04)
	bool bCamera3PRotateEnabled; // 0x2ea0(0x01)
	char pad_2EA1[0x7]; // 0x2ea1(0x07)
	struct USpringArmComponent* Camera3PSpringArm; // 0x2ea8(0x08)
	struct UCameraComponent* Camera3P; // 0x2eb0(0x08)
	struct FAresThidPersonDebugCameraSettings ThirdPersonDebugCameraSettings; // 0x2eb8(0x20)
	struct FSpectatorFocusObjectCameraSettings SpectatorFocusObjectCameraSettings; // 0x2ed8(0x10)
	bool bTargetViewModeActive; // 0x2ee8(0x01)
	char pad_2EE9[0x17]; // 0x2ee9(0x17)

	void SetTargetViewModeActive(bool bValue); // Function ShooterGame.ShooterCamera.SetTargetViewModeActive // (Final|Native|Public|BlueprintCallable) // @ game+0x309f4c0
	bool GetTargetViewModeActive(); // Function ShooterGame.ShooterCamera.GetTargetViewModeActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cec0
};

// Class ShooterGame.ShooterCharacter
// Size: 0x1080 (Inherited: 0x670)
struct AShooterCharacter : ACharacter {
	char pad_670[0x28]; // 0x670(0x28)
	enum class ECachedTeamColor CachedTeamColor; // 0x698(0x01)
	char pad_699[0x3]; // 0x699(0x03)
	struct FName CachedTeamTheme; // 0x69c(0x0c)
	struct FColor CachedFresnelColor; // 0x6a8(0x04)
	float CachedFresnelOffset; // 0x6ac(0x04)
	float CachedFresnelIntensity; // 0x6b0(0x04)
	float CachedLocalFresnelOffset; // 0x6b4(0x04)
	float FresnelIntensity; // 0x6b8(0x04)
	float FresnelOffset; // 0x6bc(0x04)
	float OriginalFresnelIntensity; // 0x6c0(0x04)
	float OriginalFresnelOffset; // 0x6c4(0x04)
	struct FMulticastInlineDelegate OnCharacterPreDeath; // 0x6c8(0x10)
	struct FMulticastInlineDelegate OnCharacterDeath; // 0x6d8(0x10)
	struct FMulticastInlineDelegate OnAuthGotKill; // 0x6e8(0x10)
	struct FMulticastInlineDelegate OnAuthGenerateKillEffects; // 0x6f8(0x10)
	struct FMulticastInlineDelegate OnAuthTookDamage; // 0x708(0x10)
	char pad_718[0x18]; // 0x718(0x18)
	struct FMulticastInlineDelegate OnAuthMoved; // 0x730(0x10)
	struct FMulticastInlineDelegate AuthOnDealtDamageToCharacter; // 0x740(0x10)
	struct FMulticastInlineDelegate OnAuthUsedEquippable; // 0x750(0x10)
	struct FMulticastInlineDelegate OnMoveBlocked; // 0x760(0x10)
	char pad_770[0x28]; // 0x770(0x28)
	struct FMulticastInlineDelegate OnCharacterSpawnComplete; // 0x798(0x10)
	bool bIsPlayerCharacter; // 0x7a8(0x01)
	bool bWaitingToNotifyGameState; // 0x7a9(0x01)
	char pad_7AA[0x6]; // 0x7aa(0x06)
	struct FMulticastInlineDelegate OnInstigatorChanged; // 0x7b0(0x10)
	struct FMulticastInlineDelegate OnPossession; // 0x7c0(0x10)
	struct FMulticastInlineDelegate OnClientControllerChanged; // 0x7d0(0x10)
	struct FMulticastInlineDelegate OnCameraUpdated; // 0x7e0(0x10)
	bool bAIControlled; // 0x7f0(0x01)
	bool bCreatedWithReuseActorRespawnDisabled; // 0x7f1(0x01)
	char pad_7F2[0x2]; // 0x7f2(0x02)
	float TargetEyeHeightProportion; // 0x7f4(0x04)
	struct URoundPersistenceComponent* Persistence; // 0x7f8(0x08)
	struct UGamepadTuningDataAsset* GamepadTuningData; // 0x800(0x08)
	struct UAresAbilitySystemComponent* AbilitiesAndBuffs; // 0x808(0x08)
	enum class ENetRole AuthPrevRemoteRole; // 0x810(0x01)
	char pad_811[0x7]; // 0x811(0x07)
	struct TArray<struct TSoftClassPtr<UObject>> AdditionalTickingComponentAllowlist; // 0x818(0x10)
	char pad_828[0x18]; // 0x828(0x18)
	struct UShooterCharacterFogOfWarComponent* FogOfWarComponent; // 0x840(0x08)
	struct UShooterCharacterVisionComponent* VisionComponent; // 0x848(0x08)
	struct UFootstepsComponent* FootstepsComponent; // 0x850(0x08)
	struct UCalloutRegionTrackingComponent* CalloutRegionTrackingComponent; // 0x858(0x08)
	struct UDynamicBlockingComponent* DynamicBlocking; // 0x860(0x08)
	char pad_868[0x48]; // 0x868(0x48)
	struct FShooterGameTimeMarker AuthLastPlayerInputTimestamp; // 0x8b0(0x0c)
	char pad_8BC[0x4]; // 0x8bc(0x04)
	struct FMulticastInlineDelegate OnStartTouchWidgets; // 0x8c0(0x10)
	struct FMulticastInlineDelegate OnStopTouchWidgets; // 0x8d0(0x10)
	struct UCharacterAbilityWidget* AbilityHUDWidget; // 0x8e0(0x08)
	struct UCharacterAbilityWidget* AbilityHUDWidgetTemplate; // 0x8e8(0x08)
	struct UAresInputStateComponent* InputStateComponent; // 0x8f0(0x08)
	struct UNetworkStreamComponent* NetworkStreamComponent; // 0x8f8(0x08)
	struct TArray<struct FStartingEquippable> StartingEquippables; // 0x900(0x10)
	bool bCanReceiveModeSpecificInventory; // 0x910(0x01)
	char pad_911[0x7]; // 0x911(0x07)
	struct TArray<struct AAresEquippable*> StartingEquippableClasses; // 0x918(0x10)
	struct TArray<struct UAresPurchasable*> StartingPurchasableAssets; // 0x928(0x10)
	struct FMulticastInlineDelegate AuthOnCharacterResurrected; // 0x938(0x10)
	struct UAresInventory* Inventory; // 0x948(0x08)
	bool bShouldTickInventory; // 0x950(0x01)
	char pad_951[0x1f]; // 0x951(0x1f)
	struct FMulticastInlineDelegate AuthOnResistedDeath; // 0x970(0x10)
	char pad_980[0x28]; // 0x980(0x28)
	struct UDamageableComponent* DamageHandler; // 0x9a8(0x08)
	struct FMulticastInlineDelegate OnFocusProjectileChanged; // 0x9b0(0x10)
	struct FMulticastInlineDelegate OnFocusProjectileInvalidated; // 0x9c0(0x10)
	struct TArray<struct TWeakObjectPtr<struct AActor>> FocusProjectiles; // 0x9d0(0x10)
	struct UShooterCharacterDeathReactionComponent* DeathReactionComponent; // 0x9e0(0x08)
	struct FMulticastInlineDelegate OnCollisionChangedFromDeath; // 0x9e8(0x10)
	struct AEffectContainer* DeathEffectContainer; // 0x9f8(0x08)
	struct TArray<enum class ECollisionChannel> ChannelsToIgnoreWhenIntangible; // 0xa00(0x10)
	enum class ECollisionChannel IntangibleObjectType; // 0xa10(0x01)
	struct FCollisionResponseContainer TangibleCapsuleResponse; // 0xa11(0x20)
	struct FCollisionResponseContainer TangibleMeshResponse; // 0xa31(0x20)
	struct FCollisionResponseContainer IntangibleCapsuleResponse; // 0xa51(0x20)
	struct FCollisionResponseContainer IntangibleMeshResponse; // 0xa71(0x20)
	char pad_A91[0x7]; // 0xa91(0x07)
	struct TMap<struct TWeakObjectPtr<struct UAnimationAsset>, struct TWeakObjectPtr<struct AAresEquippable>> AnimationAssociatedEquippables; // 0xa98(0x50)
	char pad_AE8[0x8]; // 0xae8(0x08)
	struct UAkAudioEvent* HitConfirmEvent; // 0xaf0(0x08)
	struct UAkAudioEvent* HitConfirmHeadshotEvent; // 0xaf8(0x08)
	float TeamVisionBlindThreshold; // 0xb00(0x04)
	bool bCharacterMakesBloodSplatters; // 0xb04(0x01)
	bool bCharacterHasNavPointAttached; // 0xb05(0x01)
	char pad_B06[0x2]; // 0xb06(0x02)
	struct UNavPointComponent* NavpointComponentType; // 0xb08(0x08)
	struct FMulticastInlineDelegate OnTeamChanged; // 0xb10(0x10)
	struct FMulticastInlineDelegate OnDeathCameraComplete; // 0xb20(0x10)
	float CameraShakeDamageScalar; // 0xb30(0x04)
	char pad_B34[0x4]; // 0xb34(0x04)
	struct FMulticastInlineDelegate OnUpdateCharacterMeshes; // 0xb38(0x10)
	struct FMulticastInlineDelegate OnPerspectiveChanged; // 0xb48(0x10)
	struct FMulticastInlineDelegate OnCharacterLanded; // 0xb58(0x10)
	char pad_B68[0x10]; // 0xb68(0x10)
	struct FMulticastInlineDelegate OnJumpKeyPressed; // 0xb78(0x10)
	struct FMulticastInlineDelegate OnJumpKeyReleased; // 0xb88(0x10)
	struct TArray<struct FCharacterClassSlotModifer> CharacterClassSlotModifiers; // 0xb98(0x10)
	struct TArray<struct FCharacterClassCostModifer> CharacterClassCostModifiers; // 0xba8(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> CharacterClassExcludedPurchasableAssets; // 0xbb8(0x10)
	int32_t TotalPurchasablesModifier; // 0xbc8(0x04)
	char pad_BCC[0x4]; // 0xbcc(0x04)
	struct TArray<struct FCharacterClassDamageTypeModifer> CharacterClassDamageTypeModifiers; // 0xbd0(0x10)
	struct USkeletalMeshComponent* Mesh1P; // 0xbe0(0x08)
	struct USkeletalMeshComponent* MeshOverlay1P; // 0xbe8(0x08)
	struct USkeletalMeshComponent* MeshCosmetic3P; // 0xbf0(0x08)
	bool WasEquippableWantsToHideFirstPersonMesh; // 0xbf8(0x01)
	bool WasControllerWantsToHideFirstPersonMesh; // 0xbf9(0x01)
	bool WasInvisible; // 0xbfa(0x01)
	bool WasIntangible; // 0xbfb(0x01)
	bool WasFirstPerson; // 0xbfc(0x01)
	bool WasInvisibleEquippables; // 0xbfd(0x01)
	bool WasInvisible1P; // 0xbfe(0x01)
	bool WasAlly; // 0xbff(0x01)
	bool bMeshesDirtyInitiallyComputed; // 0xc00(0x01)
	bool bIsLeftHanded; // 0xc01(0x01)
	bool InitialPossessionOccured; // 0xc02(0x01)
	char pad_C03[0x1]; // 0xc03(0x01)
	float JumpFallDistanceRequiredForLandingSound; // 0xc04(0x04)
	struct UCurveFloat* JumpFallDamageCurve; // 0xc08(0x08)
	struct UDamageType* JumpFallDamageTypeAsset; // 0xc10(0x08)
	char bAlternateMovementHeld : 1; // 0xc18(0x01)
	char bCrouchHeld : 1; // 0xc18(0x01)
	char pad_C18_2 : 6; // 0xc18(0x01)
	bool bMoveSyncCrouchHeld; // 0xc19(0x01)
	char bIsJumpKeyHeld : 1; // 0xc1a(0x01)
	char pad_C1A_1 : 7; // 0xc1a(0x01)
	char pad_C1B[0x1]; // 0xc1b(0x01)
	float LastJumpKeyDownTimestamp; // 0xc1c(0x04)
	float MitigatedFallDistance; // 0xc20(0x04)
	char pad_C24[0x4]; // 0xc24(0x04)
	struct TArray<struct UMaterialInstanceDynamic*> Mesh3PMIDs; // 0xc28(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> Mesh1PMIDs; // 0xc38(0x10)
	struct TArray<struct UMaterialInstanceDynamic*> Mesh1POverlayMIDs; // 0xc48(0x10)
	struct AGameObject* DropOnDeathObjectTemplateAsset; // 0xc58(0x08)
	bool bDropObjectWithKillersTeam; // 0xc60(0x01)
	char pad_C61[0x7]; // 0xc61(0x07)
	struct UAkAudioEvent* DeathEvent; // 0xc68(0x08)
	struct UParticleSystem* RespawnFX; // 0xc70(0x08)
	struct UAkAudioEvent* RespawnEvent; // 0xc78(0x08)
	struct UAkAudioEvent* TargetingEvent; // 0xc80(0x08)
	float CorpseLifetime; // 0xc88(0x04)
	char pad_C8C[0x24]; // 0xc8c(0x24)
	float MinimumTimeBetweenCameraHitRolls; // 0xcb0(0x04)
	float TimeOfLastCameraHitRoll; // 0xcb4(0x04)
	float AddedEyeHeight; // 0xcb8(0x04)
	float StandingEyeOffset; // 0xcbc(0x04)
	float CrouchingEyeOffset; // 0xcc0(0x04)
	char pad_CC4[0x4]; // 0xcc4(0x04)
	struct FMulticastInlineDelegate OnCausedDamageResponse; // 0xcc8(0x10)
	struct FMulticastInlineDelegate OnAboutToFireProjectiles; // 0xcd8(0x10)
	struct FMulticastInlineDelegate OnFiredProjectiles; // 0xce8(0x10)
	struct FMulticastInlineDelegate OnFiredProjectilesEx; // 0xcf8(0x10)
	struct FMulticastInlineDelegate OnAuthFallingOutOfWorld; // 0xd08(0x10)
	struct FMulticastInlineDelegate OnTeleported; // 0xd18(0x10)
	struct UForceModuleManagerComponent* ForceModuleManager; // 0xd28(0x08)
	struct UStealthComponent* StealthComponent; // 0xd30(0x08)
	struct FMulticastInlineDelegate OnInventoryRestored; // 0xd38(0x10)
	float MaxShield; // 0xd48(0x04)
	float MaxOvershield; // 0xd4c(0x04)
	float ShieldDegenerationPerSecond; // 0xd50(0x04)
	float CrouchTimeSeconds; // 0xd54(0x04)
	float OverrideCrouchTimeSeconds; // 0xd58(0x04)
	float CrouchCompressionAmount; // 0xd5c(0x04)
	bool bIsStuckUncrouching; // 0xd60(0x01)
	char pad_D61[0x3]; // 0xd61(0x03)
	float CharacterScale; // 0xd64(0x04)
	struct FCharacterScaleData CharacterScaleData; // 0xd68(0x18)
	struct TWeakObjectPtr<struct AShooterCharacter> ScavengableCharacter; // 0xd80(0x08)
	struct FRotator FacingControlRotation; // 0xd88(0x0c)
	char pad_D94[0x4]; // 0xd94(0x04)
	struct FPurchasableList CharacterPurchasables; // 0xd98(0x10)
	struct TArray<struct UAresPurchasable*> PurchasableClassAssets; // 0xda8(0x10)
	int32_t NumPointsNeededForUltimate; // 0xdb8(0x04)
	int32_t DesignPlaytestNumPointsNeededForUltimate; // 0xdbc(0x04)
	struct TArray<struct FName> HeadDamageBoneNames; // 0xdc0(0x10)
	struct TArray<struct FName> LegDamageBoneNames; // 0xdd0(0x10)
	enum class CharacterRange OptimalRange; // 0xde0(0x01)
	char pad_DE1[0x3]; // 0xde1(0x03)
	float AimPunchMovementErrorThreshold; // 0xde4(0x04)
	struct UMaterialInterface* Baked3PMaterial; // 0xde8(0x08)
	struct UMaterialInterface* Baked1PMaterial; // 0xdf0(0x08)
	bool bIsTornOff; // 0xdf8(0x01)
	char pad_DF9[0x7]; // 0xdf9(0x07)
	struct UAresHitReactions* DeathReactionTemplateAsset; // 0xe00(0x08)
	struct UAresHitReactions* DeathReactionObject; // 0xe08(0x08)
	struct UAresHitReactions* AltDeathReactionTemplateAsset; // 0xe10(0x08)
	struct UAresHitReactions* AltDeathReactionObject; // 0xe18(0x08)
	float DeathAwakeTime; // 0xe20(0x04)
	char pad_E24[0x4]; // 0xe24(0x04)
	float DeathClothSettleTime; // 0xe28(0x04)
	char pad_E2C[0xc]; // 0xe2c(0x0c)
	struct FMulticastInlineDelegate OnBecomeViewTarget; // 0xe38(0x10)
	struct FMulticastInlineDelegate OnEndViewTarget; // 0xe48(0x10)
	struct UParticleSystemComponent* AllyIconParticleSystem; // 0xe58(0x08)
	struct FVector OldCachedLocation; // 0xe60(0x0c)
	char pad_E6C[0x4]; // 0xe6c(0x04)
	struct UCombatReportTrackingConfigComponent* CombatReportTrackingConfig; // 0xe70(0x08)
	struct UReplicationSleepComponent* ReplicationSleepComponent; // 0xe78(0x08)
	char pad_E80[0x4]; // 0xe80(0x04)
	struct FAres3PCameraSettings Camera3PSettings; // 0xe84(0x1c)
	struct UTexture* NonPlayerCharacterIcon; // 0xea0(0x08)
	enum class EShooterCharacterCameraState CameraState; // 0xea8(0x01)
	char pad_EA9[0x7]; // 0xea9(0x07)
	struct UCameraComponent* FollowRecoilCameraComponent; // 0xeb0(0x08)
	struct UCameraComponent* CustomActiveCameraComponent; // 0xeb8(0x08)
	bool bUseDeathCameraSpringArm; // 0xec0(0x01)
	char pad_EC1[0x7]; // 0xec1(0x07)
	struct USpringArmComponent* DeathCameraSpringArm; // 0xec8(0x08)
	struct UCameraComponent* DeathCameraComponent; // 0xed0(0x08)
	enum class EShooterCharacterDebugCameraMode DebugCameraMode; // 0xed8(0x01)
	char pad_ED9[0x7]; // 0xed9(0x07)
	struct FAresDeathCameraSettings DeathCameraSettings; // 0xee0(0x40)
	char pad_F20[0x5c]; // 0xf20(0x5c)
	struct TWeakObjectPtr<struct UCharacterDataAsset> DataAsset; // 0xf7c(0x08)
	char pad_F84[0x24]; // 0xf84(0x24)
	struct UServerRewindComponent* ServerRewindComponent; // 0xfa8(0x08)
	struct UTransformRewinderComponent* TransformRewinderComponent; // 0xfb0(0x08)
	struct USkeletalPoseRewinderComponent* SkeletalPoseRewinderComponent; // 0xfb8(0x08)
	char pad_FC0[0x1]; // 0xfc0(0x01)
	bool bIsForced1PTextureStreamingEnabled; // 0xfc1(0x01)
	char pad_FC2[0x6]; // 0xfc2(0x06)
	struct UAresGameplayBuff* DisconnectedBuff; // 0xfc8(0x08)
	struct FMulticastInlineDelegate OnDisconnectedCharacterDestroyed; // 0xfd0(0x10)
	bool bNeedsEnemyHitRegInfo; // 0xfe0(0x01)
	char pad_FE1[0x3]; // 0xfe1(0x03)
	float GamepadBaseTurnRate; // 0xfe4(0x04)
	float GamepadBaseLookUpRate; // 0xfe8(0x04)
	char pad_FEC[0x10]; // 0xfec(0x10)
	int32_t NumResetsForRespawn; // 0xffc(0x04)
	char pad_1000[0x4]; // 0x1000(0x04)
	struct FDeadAndSettledRespawnData DeadAndSettledRespawnData; // 0x1004(0x04)
	struct FDefaultSkeletalMeshInfo Mesh1PDefaultSkeletalMeshInfo; // 0x1008(0x18)
	struct FDefaultSkeletalMeshInfo MeshOverlay1PDefaultSkeletalMeshInfo; // 0x1020(0x18)
	struct FDefaultSkeletalMeshInfo MeshCosmetic3PDefaultSkeletalMeshInfo; // 0x1038(0x18)
	struct FDefaultSkeletalMeshInfo CurMeshDefaultSkeletalMeshInfo; // 0x1050(0x18)
	struct TArray<struct UPrimitiveComponent*> DefaultPrimitiveComponents; // 0x1068(0x10)
	char pad_1078[0x8]; // 0x1078(0x08)

	void UpdateTeamColorsAndThemes(); // Function ShooterGame.ShooterCharacter.UpdateTeamColorsAndThemes // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x30a0170
	void UpdateTeam(); // Function ShooterGame.ShooterCharacter.UpdateTeam // (Final|Native|Public) // @ game+0x30a0150
	void UpdatePawnMeshes(); // Function ShooterGame.ShooterCharacter.UpdatePawnMeshes // (Final|Native|Public|BlueprintCallable) // @ game+0x309e360
	void UpdateHandednessTeamBased(); // Function ShooterGame.ShooterCharacter.UpdateHandednessTeamBased // (Final|Native|Public) // @ game+0x30a0130
	void UpdateHandedness(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.ShooterCharacter.UpdateHandedness // (Final|Native|Public) // @ game+0x30a0010
	void TriggerAIDamageSenseEvent(struct AShooterCharacter* VictimCharacter, struct AController* DamageInstigator, struct AActor* DamagCauser, float Damage); // Function ShooterGame.ShooterCharacter.TriggerAIDamageSenseEvent // (Final|Native|Public) // @ game+0x309feb0
	void TouchMoveUpReleased(); // Function ShooterGame.ShooterCharacter.TouchMoveUpReleased // (Final|Native|Public) // @ game+0x309fe70
	void TouchMoveUpPressed(); // Function ShooterGame.ShooterCharacter.TouchMoveUpPressed // (Final|Native|Public) // @ game+0x309fe90
	void TouchMoveDownReleased(); // Function ShooterGame.ShooterCharacter.TouchMoveDownReleased // (Final|Native|Public) // @ game+0x309fe70
	void TouchMoveDownPressed(); // Function ShooterGame.ShooterCharacter.TouchMoveDownPressed // (Final|Native|Public) // @ game+0x309fe50
	void StopForceStrafe(); // Function ShooterGame.ShooterCharacter.StopForceStrafe // (Final|Native|Public|BlueprintCallable) // @ game+0x309fe30
	void StopForceMoveInputDirection(); // Function ShooterGame.ShooterCharacter.StopForceMoveInputDirection // (Final|Native|Public|BlueprintCallable) // @ game+0x309fe10
	void StopForceMoveInput(enum class EAresMoveInput MoveInput); // Function ShooterGame.ShooterCharacter.StopForceMoveInput // (Final|Native|Public|BlueprintCallable) // @ game+0x309fd90
	void StopActiveCameraComponent(struct UCameraComponent* CameraComponent); // Function ShooterGame.ShooterCharacter.StopActiveCameraComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x309fd00
	void StopAbilityHUDWidget(bool bForceStop); // Function ShooterGame.ShooterCharacter.StopAbilityHUDWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x309fc70
	struct UCharacterAbilityWidget* StartAbilityHUDWidget(); // Function ShooterGame.ShooterCharacter.StartAbilityHUDWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x309fc40
	struct UParticleSystemComponent* SpawnEmitterAttached(struct UParticleSystem* EmitterTemplate, struct FName AttachPointName, struct FVector Location, struct FRotator Rotation, enum class EAttachLocation LocationType, bool bAutoDestroy); // Function ShooterGame.ShooterCharacter.SpawnEmitterAttached // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x309fa30
	void SimulateYawInput(float YawAmount); // Function ShooterGame.ShooterCharacter.SimulateYawInput // (Final|Native|Public|BlueprintCallable) // @ game+0x309f9b0
	void SimulatePitchInput(float PitchAmount); // Function ShooterGame.ShooterCharacter.SimulatePitchInput // (Final|Native|Public|BlueprintCallable) // @ game+0x309f930
	struct AActor* SimpleTraceFromCamera(float Distance, enum class ECollisionChannel Channel, struct FVector& HitPoint, bool& bBlockingHit); // Function ShooterGame.ShooterCharacter.SimpleTraceFromCamera // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x309f7a0
	bool ShouldSwapTriggersForCurrentEquippable(); // Function ShooterGame.ShooterCharacter.ShouldSwapTriggersForCurrentEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x309f770
	struct UMatineeCameraShake* ShouldAimPunch(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.ShouldAimPunch // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x309f6d0
	void SetWalkHeld(bool bSet); // Function ShooterGame.ShooterCharacter.SetWalkHeld // (Final|Native|Public|BlueprintCallable) // @ game+0x309f640
	void SetVectorOnMIDs(struct FName Name, struct FLinearColor Value); // Function ShooterGame.ShooterCharacter.SetVectorOnMIDs // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x309f550
	void SetServerRewindPaused(bool bNewRewind); // Function ShooterGame.ShooterCharacter.SetServerRewindPaused // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void SetScalarOnMIDs(struct FName Name, float Value); // Function ShooterGame.ShooterCharacter.SetScalarOnMIDs // (Final|Native|Protected|BlueprintCallable) // @ game+0x309f3d0
	void SetNumPointsNeededForUltimate(int32_t NumPoints); // Function ShooterGame.ShooterCharacter.SetNumPointsNeededForUltimate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3d20
	void SetJumpHeld(bool bSet); // Function ShooterGame.ShooterCharacter.SetJumpHeld // (Final|Native|Public|BlueprintCallable) // @ game+0x309f340
	void SetHideFirstPersonOverride(bool bHide); // Function ShooterGame.ShooterCharacter.SetHideFirstPersonOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x309f2b0
	void SetDroppedAmmoCount(struct AGameObject* DroppedAmmo, int32_t AmmoCount); // Function ShooterGame.ShooterCharacter.SetDroppedAmmoCount // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void SetCurrentEquippableAnimationHidden(bool bNewHidden, struct UAnimationAsset* HidingAsset); // Function ShooterGame.ShooterCharacter.SetCurrentEquippableAnimationHidden // (Final|Native|Public|BlueprintCallable) // @ game+0x309f1e0
	void SetCrouchTimeOverride(float Override); // Function ShooterGame.ShooterCharacter.SetCrouchTimeOverride // (Final|Native|Protected|BlueprintCallable) // @ game+0x309f160
	void SetAlternateMovementHeld(bool bSet); // Function ShooterGame.ShooterCharacter.SetAlternateMovementHeld // (Final|Native|Public|BlueprintCallable) // @ game+0x309f0d0
	void Set3PMeshVisible(bool bSet3PVisible); // Function ShooterGame.ShooterCharacter.Set3PMeshVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x309f040
	void ServerReceiveNetworkStream(struct FComponentDataStream ComponentDataStream); // Function ShooterGame.ShooterCharacter.ServerReceiveNetworkStream // (Net|Native|Event|Public|NetServer) // @ game+0x309ef90
	void ServerPickupOnGroundEquippable(struct AAresOnGroundEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.ServerPickupOnGroundEquippable // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x309ef00
	bool ScriptCanAutoPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.ScriptCanAutoPickupEquippable // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x309ee50
	void RunEventWhileRewound(struct TArray<struct AActor*>& RewoundActors, struct FDelegate Event, bool bComplexRewind); // Function ShooterGame.ShooterCharacter.RunEventWhileRewound // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x309ecd0
	void ResetCharacterMaterials(struct USkeletalMeshComponent* MeshToReset); // Function ShooterGame.ShooterCharacter.ResetCharacterMaterials // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x309ec40
	void RequestActiveCameraComponent(struct UCameraComponent* CameraComponent); // Function ShooterGame.ShooterCharacter.RequestActiveCameraComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x309ebb0
	void ReplayRecordMovementUpdate(struct FRemoteCharacterUpdate Update); // Function ShooterGame.ShooterCharacter.ReplayRecordMovementUpdate // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x309eaa0
	void RemoveDisconnectedDelegates(); // Function ShooterGame.ShooterCharacter.RemoveDisconnectedDelegates // (Final|Native|Private) // @ game+0x1e6e7b0
	void RemoveBuff(struct FActiveGameplayEffectHandle& Handle); // Function ShooterGame.ShooterCharacter.RemoveBuff // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x309ea00
	void RefreshTeamColorsAndThemes(); // Function ShooterGame.ShooterCharacter.RefreshTeamColorsAndThemes // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x309e9e0
	float ReduceShield(float Amount); // Function ShooterGame.ShooterCharacter.ReduceShield // (Final|Native|Public|BlueprintCallable) // @ game+0x309e940
	void Queue3PMeshVisible(bool b3PVisible); // Function ShooterGame.ShooterCharacter.Queue3PMeshVisible // (Final|Native|Public|BlueprintCallable) // @ game+0x309e8b0
	void PlayHitConfirmEvent(struct UAkAudioEvent* HitEvent, enum class EAresHitConfirmLocality HitLocality, enum class EAresRegionalDamage RegionalDamage, float FalloffMultiplier); // Function ShooterGame.ShooterCharacter.PlayHitConfirmEvent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x309e750
	void OnRep_IsPlayerCharacter(); // Function ShooterGame.ShooterCharacter.OnRep_IsPlayerCharacter // (Final|Native|Public) // @ game+0x309e730
	void OnRep_FocusProjectile(struct TArray<struct TWeakObjectPtr<struct AActor>> OldFocusList); // Function ShooterGame.ShooterCharacter.OnRep_FocusProjectile // (Final|Native|Protected) // @ game+0x309e630
	void OnRep_CharacterScale(); // Function ShooterGame.ShooterCharacter.OnRep_CharacterScale // (Final|Native|Protected) // @ game+0x309e610
	void OnJumpUp(); // Function ShooterGame.ShooterCharacter.OnJumpUp // (Final|Native|Public) // @ game+0x309e5f0
	void OnJumpInputChanged(enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.OnJumpInputChanged // (Final|Native|Public) // @ game+0x309e570
	void OnJumpDown(); // Function ShooterGame.ShooterCharacter.OnJumpDown // (Final|Native|Public) // @ game+0x309e550
	void OnInvisibilityAttributeChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ShooterCharacter.OnInvisibilityAttributeChanged // (Final|Native|Private|HasOutParms) // @ game+0x309e380
	void OnInventoryItemsChanged(); // Function ShooterGame.ShooterCharacter.OnInventoryItemsChanged // (Final|Native|Private) // @ game+0x309e360
	void OnGamePhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.ShooterCharacter.OnGamePhaseChanged // (Final|Native|Public) // @ game+0x309e2e0
	void OnDesignPlaytestToggleChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterCharacter.OnDesignPlaytestToggleChanged // (Final|Native|Private) // @ game+0x309e210
	bool OnCrushed(struct AActor* CrushingObject, float CrushDamage); // Function ShooterGame.ShooterCharacter.OnCrushed // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnCrouchUp(); // Function ShooterGame.ShooterCharacter.OnCrouchUp // (Final|Native|Public) // @ game+0x309e1f0
	void OnCrouchDown(); // Function ShooterGame.ShooterCharacter.OnCrouchDown // (Final|Native|Public) // @ game+0x309e1d0
	void OnCosmeticDeath(enum class EAresRegionalDamage KillRegion, struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterCharacter.OnCosmeticDeath // (BlueprintCosmetic|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnBombDefused(); // Function ShooterGame.ShooterCharacter.OnBombDefused // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnAlternateMovementUp(); // Function ShooterGame.ShooterCharacter.OnAlternateMovementUp // (Final|Native|Public) // @ game+0x309e1b0
	void OnAlternateMovementDown(); // Function ShooterGame.ShooterCharacter.OnAlternateMovementDown // (Final|Native|Public) // @ game+0x309e190
	void OnAliveStateChanged(bool bNewAlive); // Function ShooterGame.ShooterCharacter.OnAliveStateChanged // (Final|Native|Private) // @ game+0x309e100
	void NotifyOnPlayerState(); // Function ShooterGame.ShooterCharacter.NotifyOnPlayerState // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void NotifyHandednessUpdated(); // Function ShooterGame.ShooterCharacter.NotifyHandednessUpdated // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool NeedsToBeRespawned(); // Function ShooterGame.ShooterCharacter.NeedsToBeRespawned // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309e0e0
	void MulticastNotifyKilledEnemy(struct AShooterCharacter* KillerCharacter, struct AShooterCharacter* KilledCharacter, int32_t MultikillLevel); // Function ShooterGame.ShooterCharacter.MulticastNotifyKilledEnemy // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x309dfd0
	void MulticastItemPickedUp(struct AAresEquippable* item, bool bCurrentWasDropped); // Function ShooterGame.ShooterCharacter.MulticastItemPickedUp // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x309def0
	void MoveUp(float Val); // Function ShooterGame.ShooterCharacter.MoveUp // (Final|Native|Public) // @ game+0x309de70
	void MoveRight(float Val); // Function ShooterGame.ShooterCharacter.MoveRight // (Final|Native|Public|BlueprintCallable) // @ game+0x309ddf0
	void MoveForward(float Val); // Function ShooterGame.ShooterCharacter.MoveForward // (Final|Native|Public|BlueprintCallable) // @ game+0x309dd70
	bool IsZoomed(); // Function ShooterGame.ShooterCharacter.IsZoomed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dd40
	bool IsVisibleToLocalPlayer(); // Function ShooterGame.ShooterCharacter.IsVisibleToLocalPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dd10
	bool IsUsingObject(); // Function ShooterGame.ShooterCharacter.IsUsingObject // (Final|Native|Protected|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dce0
	bool IsTeamVisionBlind(); // Function ShooterGame.ShooterCharacter.IsTeamVisionBlind // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dcb0
	bool IsStuckUncrouching(); // Function ShooterGame.ShooterCharacter.IsStuckUncrouching // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dc80
	bool IsStillFiring(); // Function ShooterGame.ShooterCharacter.IsStillFiring // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dc50
	bool IsReuseActorRespawnEnabled(); // Function ShooterGame.ShooterCharacter.IsReuseActorRespawnEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dc20
	bool IsPlayerCharacter(); // Function ShooterGame.ShooterCharacter.IsPlayerCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dbf0
	bool IsLeftHanded(); // Function ShooterGame.ShooterCharacter.IsLeftHanded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dbc0
	bool IsInvisibleToActor(struct AActor* Actor); // Function ShooterGame.ShooterCharacter.IsInvisibleToActor // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309db20
	bool IsFirstPerson(); // Function ShooterGame.ShooterCharacter.IsFirstPerson // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309dae0
	bool IsEquippablePermitted(struct AAresEquippable* Equippable, enum class EAresEquippableRestrictionType& RestrictionType); // Function ShooterGame.ShooterCharacter.IsEquippablePermitted // (Final|Native|Public|HasOutParms|Const) // @ game+0x309da00
	bool IsDeadAndSettled(); // Function ShooterGame.ShooterCharacter.IsDeadAndSettled // (Final|Native|Public|Const) // @ game+0x309d9d0
	bool IsAlive(); // Function ShooterGame.ShooterCharacter.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d9a0
	bool Is3PCameraEnabled(); // Function ShooterGame.ShooterCharacter.Is3PCameraEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d970
	void IntangibleChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ShooterCharacter.IntangibleChanged // (Final|Native|Private|HasOutParms) // @ game+0x309d7a0
	float HowMuchIsPointVisible(struct FVector& TestPoint); // Function ShooterGame.ShooterCharacter.HowMuchIsPointVisible // (Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d6f0
	void HasAltDeathReaction(bool& Result); // Function ShooterGame.ShooterCharacter.HasAltDeathReaction // (Event|Public|HasOutParms|BlueprintEvent) // @ game+0x3520f50
	void HandleOnPreDeath(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.HandleOnPreDeath // (Final|Native|Protected) // @ game+0x309d660
	void HandleOnHealed(float HealTaken, struct AActor* HealedActor, struct TArray<struct UDamageSectionComponent*>& HealedComponents, struct AController* EventInstigator, struct APawn* EventInstigatorPawn, struct AActor* HealCauser); // Function ShooterGame.ShooterCharacter.HandleOnHealed // (Final|Native|Protected|HasOutParms) // @ game+0x309d450
	void HandleOnDeath(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.HandleOnDeath // (Final|Native|Protected) // @ game+0x309d3c0
	void HandleOnDamaged(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.HandleOnDamaged // (Final|Native|Protected) // @ game+0x309d330
	void HandleHandednessTeamBasedSettingChange(enum class EAresBoolSettingName SettingName, bool bOldValue, bool bNewValue); // Function ShooterGame.ShooterCharacter.HandleHandednessTeamBasedSettingChange // (Final|Native|Public) // @ game+0x309d210
	float GetZoomMultiplier(); // Function ShooterGame.ShooterCharacter.GetZoomMultiplier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d1e0
	float GetZoomFoV1PFraction(); // Function ShooterGame.ShooterCharacter.GetZoomFoV1PFraction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d1b0
	float GetZoomFoV1P(); // Function ShooterGame.ShooterCharacter.GetZoomFoV1P // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d180
	struct FString GetWwisePerspective(); // Function ShooterGame.ShooterCharacter.GetWwisePerspective // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d0f0
	bool GetWalkHeld(); // Function ShooterGame.ShooterCharacter.GetWalkHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d0c0
	struct FVector GetViewVectorNoRecoil(); // Function ShooterGame.ShooterCharacter.GetViewVectorNoRecoil // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d080
	struct FVector GetViewVectorFullRecoil(); // Function ShooterGame.ShooterCharacter.GetViewVectorFullRecoil // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d040
	struct FVector GetViewVectorCamera(); // Function ShooterGame.ShooterCharacter.GetViewVectorCamera // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309d000
	struct FRotator GetViewRotationNoRecoil(); // Function ShooterGame.ShooterCharacter.GetViewRotationNoRecoil // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cfc0
	struct FRotator GetViewRotationFullRecoil(); // Function ShooterGame.ShooterCharacter.GetViewRotationFullRecoil // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cf80
	struct FRotator GetViewRotationCamera(); // Function ShooterGame.ShooterCharacter.GetViewRotationCamera // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cf40
	struct FRotator GetViewRotation(); // Function ShooterGame.ShooterCharacter.GetViewRotation // (Native|Public|HasDefaults|Const) // @ game+0x309cef0
	struct TArray<struct AAresEquippable*> GetStartingEquippableClasses(); // Function ShooterGame.ShooterCharacter.GetStartingEquippableClasses // (Final|Native|Public|BlueprintCallable) // @ game+0x309ce30
	struct AShooterPlayerState* GetShooterPlayerState(); // Function ShooterGame.ShooterCharacter.GetShooterPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309ce00
	struct AShooterPlayerController* GetShooterPlayerController(); // Function ShooterGame.ShooterCharacter.GetShooterPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cdd0
	struct UShooterCharacterVisionComponent* GetShooterCharacterVision(); // Function ShooterGame.ShooterCharacter.GetShooterCharacterVision // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2d55fd0
	struct UShooterCharacterMovement* GetShooterCharacterMovement(); // Function ShooterGame.ShooterCharacter.GetShooterCharacterMovement // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cda0
	struct UShooterCharacterFogOfWarComponent* GetShooterCharacterFogOfWar(); // Function ShooterGame.ShooterCharacter.GetShooterCharacterFogOfWar // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cd70
	float GetShield(); // Function ShooterGame.ShooterCharacter.GetShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cd40
	int32_t GetRespawnNumber(); // Function ShooterGame.ShooterCharacter.GetRespawnNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cd10
	enum class EAresRegionalDamage GetRegionalDamage(struct FHitResult& HitResult, bool bIgnoreDisableRegionalDamageMultipliers); // Function ShooterGame.ShooterCharacter.GetRegionalDamage // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x309cbd0
	struct FCharacterReveal GetRecentReveal(struct FName& OtherTeam); // Function ShooterGame.ShooterCharacter.GetRecentReveal // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cb20
	struct AShooterPlayerState* GetPlayerState(); // Function ShooterGame.ShooterCharacter.GetPlayerState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309caf0
	struct AShooterPlayerController* GetPlayerControllerEvenIfDead(); // Function ShooterGame.ShooterCharacter.GetPlayerControllerEvenIfDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309cac0
	struct FVector GetPawnViewLocation(); // Function ShooterGame.ShooterCharacter.GetPawnViewLocation // (Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309ca70
	struct USkeletalMeshComponent* GetPawnMesh(); // Function ShooterGame.ShooterCharacter.GetPawnMesh // (Final|Native|Public|Const) // @ game+0x309ca40
	struct AOwnerExclusivePlayerInfo* GetOwnerExclusivePlayerInfo(); // Function ShooterGame.ShooterCharacter.GetOwnerExclusivePlayerInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309ca10
	struct USkeletalMeshComponent* GetOverlayMesh1P(); // Function ShooterGame.ShooterCharacter.GetOverlayMesh1P // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c9e0
	struct TArray<struct UMaterialInstanceDynamic*> GetOriginalMaterialsForMesh(struct USkeletalMeshComponent* CharacterMesh); // Function ShooterGame.ShooterCharacter.GetOriginalMaterialsForMesh // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c900
	int32_t GetNumPointsNeededForUltimate(); // Function ShooterGame.ShooterCharacter.GetNumPointsNeededForUltimate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c8d0
	enum class EAresMovementType GetMovementType(enum class EAresMovementTypeQuery QueryType); // Function ShooterGame.ShooterCharacter.GetMovementType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c840
	struct USkeletalMeshComponent* GetMesh1P(); // Function ShooterGame.ShooterCharacter.GetMesh1P // (Final|Native|Public|Const) // @ game+0x309c810
	float GetMaxShield(); // Function ShooterGame.ShooterCharacter.GetMaxShield // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c7e0
	int32_t GetMaxHealth(); // Function ShooterGame.ShooterCharacter.GetMaxHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c7b0
	bool GetJumpHeld(); // Function ShooterGame.ShooterCharacter.GetJumpHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c780
	float GetJumpHeight(); // Function ShooterGame.ShooterCharacter.GetJumpHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c750
	float GetJumpFallDistanceWithMitigation(); // Function ShooterGame.ShooterCharacter.GetJumpFallDistanceWithMitigation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c720
	float GetJumpFallDistance(); // Function ShooterGame.ShooterCharacter.GetJumpFallDistance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c6f0
	struct UAresInventory* GetInventory(); // Function ShooterGame.ShooterCharacter.GetInventory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c6c0
	float GetHealth(); // Function ShooterGame.ShooterCharacter.GetHealth // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c690
	struct AActor* GetFocusProjectile(); // Function ShooterGame.ShooterCharacter.GetFocusProjectile // (Final|Native|Public|Const) // @ game+0x309c660
	float GetFiringRateModifier(); // Function ShooterGame.ShooterCharacter.GetFiringRateModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c630
	bool GetFiringLocationAndDirection(struct FVector& Location, struct FRotator& Rotation); // Function ShooterGame.ShooterCharacter.GetFiringLocationAndDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c530
	struct UShooterCharacterDeathReactionComponent* GetDeathReactionComponent(); // Function ShooterGame.ShooterCharacter.GetDeathReactionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c500
	struct UCharacterDataAsset* GetDataAsset(); // Function ShooterGame.ShooterCharacter.GetDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c4d0
	enum class EAresInputState GetCurrentInputState(enum class EAresEquippableInput Input); // Function ShooterGame.ShooterCharacter.GetCurrentInputState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c440
	struct FNetworkedMovementTimestamp GetCurrentCharacterTimestamp(); // Function ShooterGame.ShooterCharacter.GetCurrentCharacterTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c400
	enum class EAresInputState GetCurrentActivationInputState(enum class EAresItemSlot ItemSlot); // Function ShooterGame.ShooterCharacter.GetCurrentActivationInputState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c370
	bool GetCrouchHeld(); // Function ShooterGame.ShooterCharacter.GetCrouchHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c340
	struct USkeletalMeshComponent* GetCosmeticMesh3P(); // Function ShooterGame.ShooterCharacter.GetCosmeticMesh3P // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c310
	struct USkeletalMeshComponent* GetCoreMesh3P(); // Function ShooterGame.ShooterCharacter.GetCoreMesh3P // (Final|Native|Public|Const) // @ game+0x2cec980
	struct FPurchasableList GetCharacterPurchasables(); // Function ShooterGame.ShooterCharacter.GetCharacterPurchasables // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c280
	enum class EAresCharacterPosture GetCharacterPosture(); // Function ShooterGame.ShooterCharacter.GetCharacterPosture // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c250
	struct UTexture* GetCharacterIcon(); // Function ShooterGame.ShooterCharacter.GetCharacterIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c220
	struct TArray<struct TSoftClassPtr<UObject>> GetCharacterClassExcludedPurchasableAssets(); // Function ShooterGame.ShooterCharacter.GetCharacterClassExcludedPurchasableAssets // (Final|Native|Public) // @ game+0x309c0c0
	enum class EShooterCharacterCameraState GetCameraState(); // Function ShooterGame.ShooterCharacter.GetCameraState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c090
	struct AAresPlayerController* GetAresPlayerController(); // Function ShooterGame.ShooterCharacter.GetAresPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c060
	bool GetAlternateMovementHeld(); // Function ShooterGame.ShooterCharacter.GetAlternateMovementHeld // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309c030
	struct TArray<struct TWeakObjectPtr<struct AActor>> GetAllFocusProjectiles(); // Function ShooterGame.ShooterCharacter.GetAllFocusProjectiles // (Final|Native|Public|Const) // @ game+0x309bff0
	struct FRotator GetAimOffsets(); // Function ShooterGame.ShooterCharacter.GetAimOffsets // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x309bfb0
	struct TArray<struct AAresEquippable*> GetAbilitiesToCleanup(); // Function ShooterGame.ShooterCharacter.GetAbilitiesToCleanup // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x309bf20
	struct UAresAbilitySystemComponent* GetAbilitiesAndBuffsHandler(); // Function ShooterGame.ShooterCharacter.GetAbilitiesAndBuffsHandler // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309bf00
	void GamepadMoveUpReleased(); // Function ShooterGame.ShooterCharacter.GamepadMoveUpReleased // (Final|Native|Public) // @ game+0x309bec0
	void GamepadMoveUpPressed(); // Function ShooterGame.ShooterCharacter.GamepadMoveUpPressed // (Final|Native|Public) // @ game+0x309bee0
	void GamepadMoveDownReleased(); // Function ShooterGame.ShooterCharacter.GamepadMoveDownReleased // (Final|Native|Public) // @ game+0x309bec0
	void GamepadMoveDownPressed(); // Function ShooterGame.ShooterCharacter.GamepadMoveDownPressed // (Final|Native|Public) // @ game+0x309bea0
	void ForceUseInteractableObjectInputState(enum class EUseKeyType KeyType, enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.ForceUseInteractableObjectInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x309bdd0
	void ForceStrafe(struct FVector& PlayerRelativeInputDirection, float ChangeDirectionTime); // Function ShooterGame.ShooterCharacter.ForceStrafe // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x309bcf0
	void ForceMoveInWorldDirection(struct FVector& WorldDirection); // Function ShooterGame.ShooterCharacter.ForceMoveInWorldDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x309bb00
	void ForceMoveInputState(enum class EAresMoveInput MoveInput, enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.ForceMoveInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x309bc20
	void ForceMoveInputDirection(struct FVector& PlayerRelativeInputDirection); // Function ShooterGame.ShooterCharacter.ForceMoveInputDirection // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x309bb90
	void ForceJumpInputState(enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.ForceJumpInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x309ba80
	void ForceInputState(enum class EAresEquippableInput Input, enum class EAresInputState InputState); // Function ShooterGame.ShooterCharacter.ForceInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x309b9b0
	void ForceActivationInputState(enum class EAresItemSlot ItemSlot, enum class EAresInputState InputState, enum class EAresActivationInputType ActivationType, char IndexInSlot); // Function ShooterGame.ShooterCharacter.ForceActivationInputState // (Final|Native|Public|BlueprintCallable) // @ game+0x309b860
	enum class EAresDeathCamFocusPoint DefaultDeathCamFocusPoint(); // Function ShooterGame.ShooterCharacter.DefaultDeathCamFocusPoint // (Native|Event|Protected|BlueprintEvent) // @ game+0x309b820
	void Cycle3PCamera(); // Function ShooterGame.ShooterCharacter.Cycle3PCamera // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	struct FActiveGameplayEffectHandle CreateAndApplyBuff_V2(struct UAresGameplayBuff* BuffClass, struct AActor* DamageCauser, struct AController* InstigatedByController, float BuffLevel, bool bCanApplyToDeadCharacters); // Function ShooterGame.ShooterCharacter.CreateAndApplyBuff_V2 // (Final|Native|Public|BlueprintCallable) // @ game+0x309b640
	struct FActiveGameplayEffectHandle CreateAndApplyBuff(struct UAresGameplayBuff* BuffClass, struct AActor* DamageCauser, struct APawn* InstigatorPawn, float BuffLevel, bool bCanApplyToDeadCharacters); // Function ShooterGame.ShooterCharacter.CreateAndApplyBuff // (Final|Native|Public|BlueprintCallable) // @ game+0x309b460
	void ClientResetRemoteMovementPrediction(bool isPossess); // Function ShooterGame.ShooterCharacter.ClientResetRemoteMovementPrediction // (Net|NetReliableNative|Event|NetMulticast|Public|NetClient) // @ game+0x309b3c0
	void ClientPlayAimpunchSimple(struct UMatineeCameraShake* CameraMod, float ShakeStrength, bool bSharesWeaponShakeCooldown); // Function ShooterGame.ShooterCharacter.ClientPlayAimpunchSimple // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x309b2a0
	void ClientModifyFallDamage(bool bResetFallHeight, float FallGraceDistance); // Function ShooterGame.ShooterCharacter.ClientModifyFallDamage // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x309b1c0
	void ClientFly(); // Function ShooterGame.ShooterCharacter.ClientFly // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x309b190
	void ClientDebugDrawTextOnScreen(struct FString DrawText, struct FLinearColor DrawColor, float DurationOverride); // Function ShooterGame.ShooterCharacter.ClientDebugDrawTextOnScreen // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient|Const) // @ game+0x309b040
	void ClientAckInputAndMovement(int32_t LatestReceivedEventID, struct FTimeStampIndex MovementTimeStampIndex); // Function ShooterGame.ShooterCharacter.ClientAckInputAndMovement // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x309af60
	void CheckBuffForErrors(struct UAbilitySystemComponent* AbilitySystem, struct FGameplayEffectSpec& EffectSpec, struct FActiveGameplayEffectHandle EffectHandle); // Function ShooterGame.ShooterCharacter.CheckBuffForErrors // (Final|Native|Private|HasOutParms) // @ game+0x309adf0
	bool CanPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.CanPickupEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x309ad50
	bool CanAutoPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.CanAutoPickupEquippable // (Final|Native|Public|BlueprintCallable) // @ game+0x309acb0
	bool CanActivateEquippable(struct AAresEquippable* Equippable); // Function ShooterGame.ShooterCharacter.CanActivateEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x309ac10
	void BombDefused(); // Function ShooterGame.ShooterCharacter.BombDefused // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x309abf0
	bool AuthTeleportToSpawn(); // Function ShooterGame.ShooterCharacter.AuthTeleportToSpawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ced9a0
	void AuthSpawnDefaultInventory(); // Function ShooterGame.ShooterCharacter.AuthSpawnDefaultInventory // (Final|Native|Protected) // @ game+0x1e6e7b0
	void AuthSetCorpseLifetime(float NewCorpseLifetime); // Function ShooterGame.ShooterCharacter.AuthSetCorpseLifetime // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AuthSetCharacterScale(float Scale); // Function ShooterGame.ShooterCharacter.AuthSetCharacterScale // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AuthScoreKillOnThisPawn(struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacter.AuthScoreKillOnThisPawn // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x309ab60
	void AuthRevealToTeam(struct FName& OtherTeam, enum class ERevealType RevealType); // Function ShooterGame.ShooterCharacter.AuthRevealToTeam // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x309aab0
	void AuthRevealToAllEnemies(enum class ERevealType RevealType); // Function ShooterGame.ShooterCharacter.AuthRevealToAllEnemies // (Final|Native|Public|BlueprintCallable) // @ game+0x309aa40
	float AuthRestoreShield(float Amount, struct AController* EventInstigator, struct AActor* ShieldRestorer, struct UDamageType* DamageType); // Function ShooterGame.ShooterCharacter.AuthRestoreShield // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x309a500
	void AuthRemoveFocusProjectile(struct AActor* Projectile); // Function ShooterGame.ShooterCharacter.AuthRemoveFocusProjectile // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthRefreshInventory(); // Function ShooterGame.ShooterCharacter.AuthRefreshInventory // (Final|Native|Public) // @ game+0x1e6e7b0
	struct AAresEquippable* AuthPickupEquippable(struct AAresEquippable* TargetEquippable); // Function ShooterGame.ShooterCharacter.AuthPickupEquippable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x309a9a0
	void AuthPersistInventory(enum class EPersistInventoryMode Mode, bool bForcePersistAmmo); // Function ShooterGame.ShooterCharacter.AuthPersistInventory // (Final|Native|Public) // @ game+0x2cdbee0
	void AuthOnPurchase(struct UAresPurchasable* Purchasable); // Function ShooterGame.ShooterCharacter.AuthOnPurchase // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void AuthOnGameplayInvisibleUpdated(bool bNewInvisibility); // Function ShooterGame.ShooterCharacter.AuthOnGameplayInvisibleUpdated // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void AuthOnDeath(struct AShooterPlayerController* Killer); // Function ShooterGame.ShooterCharacter.AuthOnDeath // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
	void AuthOnConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.ShooterCharacter.AuthOnConnectionStatusChanged // (Final|Native|Private) // @ game+0x2cb4c70
	void AuthNotifyPlayerTemporaryDeath(struct UDamageResponse* Response, bool bRecoversInstantly); // Function ShooterGame.ShooterCharacter.AuthNotifyPlayerTemporaryDeath // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67580
	void AuthNotifyPlayerRecovery(struct AShooterPlayerState* RecoveredByPlayerState); // Function ShooterGame.ShooterCharacter.AuthNotifyPlayerRecovery // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthModifyFallDamage(bool bResetFallHeight, float FallGraceDistance); // Function ShooterGame.ShooterCharacter.AuthModifyFallDamage // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x309a8d0
	void AuthKill(struct AActor* DamageCauser, struct AController* InstigatedByController, struct UDamageType* DamageTypeClass); // Function ShooterGame.ShooterCharacter.AuthKill // (Final|Native|Public|BlueprintCallable) // @ game+0x309a7c0
	bool AuthIsNetworkInitialized(); // Function ShooterGame.ShooterCharacter.AuthIsNetworkInitialized // (Final|Native|Public|Const) // @ game+0x2ced9a0
	void AuthInstigatedDamage(float Damage, struct UDamageType* DamageType, struct AActor* DamagedActor, struct AActor* DamageCauser); // Function ShooterGame.ShooterCharacter.AuthInstigatedDamage // (Final|Native|Public) // @ game+0x309a660
	float AuthHealUnmitigated(float Amount, struct AController* EventInstigator, struct AActor* Healer, struct UDamageType* DamageType); // Function ShooterGame.ShooterCharacter.AuthHealUnmitigated // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x309a500
	float AuthHeal(float Amount, struct AController* EventInstigator, struct AActor* Healer, struct UDamageType* DamageType); // Function ShooterGame.ShooterCharacter.AuthHeal // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x309a500
	void AuthGrantStartingPurchasableForSlot(enum class EAresItemSlot Slot); // Function ShooterGame.ShooterCharacter.AuthGrantStartingPurchasableForSlot // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void AuthDropInventory(struct FRotator& DropRotation); // Function ShooterGame.ShooterCharacter.AuthDropInventory // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x2e5ecd0
	void AuthClearFocusProjectiles(); // Function ShooterGame.ShooterCharacter.AuthClearFocusProjectiles // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthCheckForReveal(float RevealRadiusSquared, enum class ERevealType RevealType); // Function ShooterGame.ShooterCharacter.AuthCheckForReveal // (Final|Native|Public|BlueprintCallable) // @ game+0x309a450
	void AuthCheatModifyHealth(float DeltaHealth); // Function ShooterGame.ShooterCharacter.AuthCheatModifyHealth // (Final|Native|Public) // @ game+0x2cee3b0
	void AuthAddFocusProjectile(struct AActor* NewProjectile); // Function ShooterGame.ShooterCharacter.AuthAddFocusProjectile // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AssociateEquippableWithAnimation(struct AAresEquippable* Equippable, struct UAnimationAsset* Animation); // Function ShooterGame.ShooterCharacter.AssociateEquippableWithAnimation // (Final|Native|Public|BlueprintCallable) // @ game+0x309a380
};

// Class ShooterGame.ShooterCharacterAnimInstance
// Size: 0xe40 (Inherited: 0x300)
struct UShooterCharacterAnimInstance : UAnimInstance {
	struct UAnimationStateComponent* AnimationStateComponent; // 0x300(0x08)
	struct USplitBodyRotationComponent* SplitBodyRotationComponent; // 0x308(0x08)
	struct USplitBodyRotationGroundComponent* SplitBodyRotationGroundComponent; // 0x310(0x08)
	struct USplitBodyRotationRopeComponent* SplitBodyRotationRopeComponent; // 0x318(0x08)
	struct FAnimationStateParams AnimationStateParams; // 0x320(0x1d0)
	struct FAnimSequenceSlotArray Idle1PSlotArray; // 0x4f0(0x20)
	struct FAnimSequenceSlotArray IdleAdd1PSlotArray; // 0x510(0x20)
	struct FAnimSequenceSlotArray Disabled1PSlotArray; // 0x530(0x20)
	struct FAnimSequenceSlotArray Run1PSlotArray; // 0x550(0x20)
	struct FAnimSequenceSlotArray Walk1PSlotArray; // 0x570(0x20)
	struct FAnimSequenceSlotArray Jump1PSlotArray; // 0x590(0x20)
	struct FAnimSequenceSlotArray JumpLand1PSlotArray; // 0x5b0(0x20)
	struct FAnimSequenceSlotArray Crouch1PSlotArray; // 0x5d0(0x20)
	struct FAnimSequenceSlotArray CrouchIdle1PSlotArray; // 0x5f0(0x20)
	struct FAnimSequenceSlotArray CrouchWalk1PSlotArray; // 0x610(0x20)
	struct FAnimSequenceSlotArray UnCrouch1PSlotArray; // 0x630(0x20)
	struct FAimOffsetBlendspaceSlotArray Primary1PAimOffsets; // 0x650(0x20)
	struct FAimOffsetBlendspaceSlotArray Secondary1PAimOffsets; // 0x670(0x20)
	struct FAnimSequenceSlotArray IdleBaseUpperBody3PSlotArray; // 0x690(0x20)
	struct FAnimSequenceSlotArray IdleUpperBody3PSlotArray; // 0x6b0(0x20)
	struct FBlendspaceSlotArray RunUpperBody3PSlotArray; // 0x6d0(0x20)
	struct FAnimSequenceSlotArray JumpUpperBody3PSlotArray; // 0x6f0(0x20)
	struct FAnimSequenceSlotArray JumpLandUpperBody3PSlotArray; // 0x710(0x20)
	struct FAnimSequenceSlotArray JumpLandAddUpperBody3PSlotArray; // 0x730(0x20)
	struct FAnimSequenceSlotArray CrouchUpperBody3PSlotArray; // 0x750(0x20)
	struct FBlendspaceSlotArray CrouchWalkUpperBody3PSlotArray; // 0x770(0x20)
	struct FAnimSequenceSlotArray CrouchFallUpperBody3PSlotArray; // 0x790(0x20)
	struct FAnimSequenceSlotArray FallUpperBody3PSlotArray; // 0x7b0(0x20)
	struct FAnimSequenceSlotArray RightGripUpperBody3PSlotArray; // 0x7d0(0x20)
	struct FAnimSequenceSlotArray LeftGripUpperBody3PSlotArray; // 0x7f0(0x20)
	struct FAnimSequenceSlotArray StopUpperBody3PSlotArray; // 0x810(0x20)
	struct FAnimSequenceSlotArray RopeIdleUpperBody3PSlotArray; // 0x830(0x20)
	struct FAnimSequenceSlotArray RopeIdleAddUpperBody3PSlotArray; // 0x850(0x20)
	struct FBlendspaceSlotArray RopeLookUpperBody3PSlotArray; // 0x870(0x20)
	struct FBlendspace1DSlotArray RopeTurnLeftUpperBody3PSlotArray; // 0x890(0x20)
	struct FBlendspace1DSlotArray RopeTurnRightUpperBody3PSlotArray; // 0x8b0(0x20)
	struct FBlendspace1DSlotArray RopeNavUpperBody3PSlotArray; // 0x8d0(0x20)
	struct FBlendspace1DSlotArray RopeNavHorizontalUpperBody3PSlotArray; // 0x8f0(0x20)
	struct FBlendspace1DSlotArray RopeNavVerticalUpperBody3PSlotArray; // 0x910(0x20)
	struct FAnimSequenceSlotArray RopeStopUpUpperBody3PSlotArray; // 0x930(0x20)
	struct FAnimSequenceSlotArray RopeStopDownUpperBody3PSlotArray; // 0x950(0x20)
	struct FAnimSequenceSlotArray IdleLowerBody3PSlotArray; // 0x970(0x20)
	struct FBlendspace1DSlotArray TurnLeftLowerBody3PSlotArray; // 0x990(0x20)
	struct FBlendspace1DSlotArray TurnRightLowerBody3PSlotArray; // 0x9b0(0x20)
	struct FBlendspaceSlotArray RunLowerBody3PSlotArray; // 0x9d0(0x20)
	struct FBlendspaceSlotArray JumpLowerBody3PSlotArray; // 0x9f0(0x20)
	struct FAnimSequenceSlotArray FallLowerBody3PSlotArray; // 0xa10(0x20)
	struct FAnimSequenceSlotArray GlideLowerBody3PSlotArray; // 0xa30(0x20)
	struct FAnimSequenceSlotArray JumpLandLowerBody3PSlotArray; // 0xa50(0x20)
	struct FAnimSequenceSlotArray JumpLandAddLowerBody3PSlotArray; // 0xa70(0x20)
	struct FAnimSequenceSlotArray CrouchLowerBody3PSlotArray; // 0xa90(0x20)
	struct FBlendspace1DSlotArray CrouchTurnLeftLowerBody3PSlotArray; // 0xab0(0x20)
	struct FBlendspace1DSlotArray CrouchTurnRightLowerBody3PSlotArray; // 0xad0(0x20)
	struct FBlendspaceSlotArray CrouchWalkLowerBody3PSlotArray; // 0xaf0(0x20)
	struct FAnimSequenceSlotArray StopLowerBody3PSlotArray; // 0xb10(0x20)
	struct FAnimSequenceSlotArray RopeIdleLowerBody3PSlotArray; // 0xb30(0x20)
	struct FAnimSequenceSlotArray RopeIdleAddLowerBody3PSlotArray; // 0xb50(0x20)
	struct FBlendspaceSlotArray RopeLookLowerBody3PSlotArray; // 0xb70(0x20)
	struct FBlendspace1DSlotArray RopeTurnLeftLowerBody3PSlotArray; // 0xb90(0x20)
	struct FBlendspace1DSlotArray RopeTurnRightLowerBody3PSlotArray; // 0xbb0(0x20)
	struct FBlendspace1DSlotArray RopeNavLowerBody3PSlotArray; // 0xbd0(0x20)
	struct FBlendspace1DSlotArray RopeNavHorizontalLowerBody3PSlotArray; // 0xbf0(0x20)
	struct FAnimSequenceSlotArray RopeNavHorizontalAddLowerBody3PSlotArray; // 0xc10(0x20)
	struct FBlendspace1DSlotArray RopeNavVerticalLowerBody3PSlotArray; // 0xc30(0x20)
	struct FAnimSequenceSlotArray RopeNavVerticalAddLowerBody3PSlotArray; // 0xc50(0x20)
	struct FAnimSequenceSlotArray RopeStopUpLowerBody3PSlotArray; // 0xc70(0x20)
	struct FAnimSequenceSlotArray RopeStopDownLowerBody3PSlotArray; // 0xc90(0x20)
	struct FAimOffsetBlendspaceSlotArray UpperBodyAimOffsets; // 0xcb0(0x20)
	struct FAimOffsetBlendspaceSlotArray LowerBodyAimOffsets; // 0xcd0(0x20)
	struct FBlendspaceSlotArray HitReactions3PSlotArray; // 0xcf0(0x20)
	struct UAnimSequence* FaceAiming3PSlot; // 0xd10(0x08)
	struct UAnimSequence* FaceAimFiring3PSlot; // 0xd18(0x08)
	struct UAnimSequence* FaceDead3PSlot; // 0xd20(0x08)
	struct UAnimSequence* FaceFiring3PSlot; // 0xd28(0x08)
	struct UAnimSequence* FaceHit3PSlot; // 0xd30(0x08)
	struct UAnimSequence* FaceIdle3PSlot; // 0xd38(0x08)
	struct UAnimSequence* FaceMeleeAttacking3PSlot; // 0xd40(0x08)
	struct UAnimSequence* FaceFidget3PSlot; // 0xd48(0x08)
	bool bResetFaceFidgetTimers; // 0xd50(0x01)
	char pad_D51[0x3]; // 0xd51(0x03)
	struct FBoneTransformAim3P BoneTransformAim3P; // 0xd54(0x74)
	bool HasAnimationStateComponent; // 0xdc8(0x01)
	char pad_DC9[0x3]; // 0xdc9(0x03)
	struct FVector AccumulatedRootMotion; // 0xdcc(0x0c)
	float StartAccumulationTimestamp; // 0xdd8(0x04)
	bool bHasAccumulatedRootMotion; // 0xddc(0x01)
	char pad_DDD[0x63]; // 0xddd(0x63)

	void SetRootMotionAccumulation(bool bAccumulate); // Function ShooterGame.ShooterCharacterAnimInstance.SetRootMotionAccumulation // (Final|Native|Public|BlueprintCallable) // @ game+0x30a3940
	void OnServerLeaveFoW(struct AActor* OwningActor, struct AAresPlayerController* Viewer, enum class EFoWRelevancyResult Relevance, enum class EFoWRelevancyResult OldRelevance); // Function ShooterGame.ShooterCharacterAnimInstance.OnServerLeaveFoW // (Final|Native|Private) // @ game+0x30a3760
	bool IsAccumulatingRootMotion(); // Function ShooterGame.ShooterCharacterAnimInstance.IsAccumulatingRootMotion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30a3550
	float GetStateMachineCurrentStateElapsedTime(struct FName MachineName); // Function ShooterGame.ShooterCharacterAnimInstance.GetStateMachineCurrentStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a34a0
	struct UBlendSpace* GetBlendspaceUpperBody3P(struct UAnimSlotUpperBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetBlendspaceUpperBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a3320
	struct UBlendSpace* GetBlendspaceLowerBody3P(struct UAnimSlotLowerBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetBlendspaceLowerBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a3250
	struct UBlendSpace1D* GetBlendspace1DUpperBody3P(struct UAnimSlotUpperBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetBlendspace1DUpperBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a3180
	struct UBlendSpace1D* GetBlendspace1DLowerBody3P(struct UAnimSlotLowerBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetBlendspace1DLowerBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a30b0
	int32_t GetAnimationUpperBody3PActiveIndex(struct UAnimSlotUpperBody3P* Slot); // Function ShooterGame.ShooterCharacterAnimInstance.GetAnimationUpperBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30a3010
	struct UAnimSequence* GetAnimationSequenceUpperBody3P(struct UAnimSlotUpperBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetAnimationSequenceUpperBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a2f40
	struct UAnimSequence* GetAnimationSequenceLowerBody3P(struct UAnimSlotLowerBody3P* Slot, int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetAnimationSequenceLowerBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a2e70
	int32_t GetAnimationLowerBody3PActiveIndex(struct UAnimSlotLowerBody3P* Slot); // Function ShooterGame.ShooterCharacterAnimInstance.GetAnimationLowerBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30a2dd0
	struct FVector GetAndConsumeRootMotion(float& AccumulationTime); // Function ShooterGame.ShooterCharacterAnimInstance.GetAndConsumeRootMotion // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30a2d10
	int32_t GetAimOffsetUpperBody3PActiveIndex(); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetUpperBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30a2ce0
	struct UAimOffsetBlendSpace* GetAimOffsetUpperBody3P(int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetUpperBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a2c40
	int32_t GetAimOffsetLowerBody3PLastValidActiveIndex(); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetLowerBody3PLastValidActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30a2c10
	int32_t GetAimOffsetLowerBody3PActiveIndex(); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetLowerBody3PActiveIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30a2be0
	struct UAimOffsetBlendSpace* GetAimOffsetLowerBody3P(int32_t Index); // Function ShooterGame.ShooterCharacterAnimInstance.GetAimOffsetLowerBody3P // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30a2b40
};

// Class ShooterGame.ShooterCharacterAnimInstanceReplicationComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UShooterCharacterAnimInstanceReplicationComponent : UActorComponent {
	struct TArray<struct FPendingAnimUpdate> PendingAnimUpdates; // 0xe8(0x10)

	void PostMovementUpdate(float Timestamp); // Function ShooterGame.ShooterCharacterAnimInstanceReplicationComponent.PostMovementUpdate // (Final|Native|Public) // @ game+0x30a38c0
	void OnRoundEnded(int32_t RoundNumberEnded); // Function ShooterGame.ShooterCharacterAnimInstanceReplicationComponent.OnRoundEnded // (Final|Native|Private) // @ game+0x30a36d0
	void ClientUpdateAnimState(struct UAnimInstanceReplicationComponent* AnimInstanceReplicationComponent, struct UAnimationStateComponent* Component, float CurrentTime, struct FAnimUpdate AnimUpdate); // Function ShooterGame.ShooterCharacterAnimInstanceReplicationComponent.ClientUpdateAnimState // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30a2990
};

// Class ShooterGame.ShooterCharacterDeathReactionComponent
// Size: 0x168 (Inherited: 0xe8)
struct UShooterCharacterDeathReactionComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnSelectDeathReaction; // 0xf0(0x10)
	struct TArray<struct FBodySectionEntry> BodySectionInfo; // 0x100(0x10)
	struct AEffectContainer* DeathMontageEffect; // 0x110(0x08)
	struct UForceModule* DeathForceModule; // 0x118(0x08)
	struct AEffectContainer* DeathMontageEffectOverride; // 0x120(0x08)
	struct UObject* DeathMontageEffectOverrideContext; // 0x128(0x08)
	bool bAllowDeathMontageEffectOverride; // 0x130(0x01)
	char pad_131[0x3]; // 0x131(0x03)
	float CorpsePerchRadius; // 0x134(0x04)
	float CorrectionAngleTotalLerpTime; // 0x138(0x04)
	char pad_13C[0x4]; // 0x13c(0x04)
	struct UAnimMontage* DeathAnimMontage; // 0x140(0x08)
	float InitialActorYaw; // 0x148(0x04)
	float TargetActorYaw; // 0x14c(0x04)
	float CorrectionAngleLerpTime; // 0x150(0x04)
	char pad_154[0x14]; // 0x154(0x14)

	void UpdateCurrentMontage(struct UAnimMontage* MontageToPlay); // Function ShooterGame.ShooterCharacterDeathReactionComponent.UpdateCurrentMontage // (Final|Native|Public|BlueprintCallable) // @ game+0x30a39d0
	void OnOwnerDamageableComponentDeathResponseReady(struct FDeathResponse& DeathResponse); // Function ShooterGame.ShooterCharacterDeathReactionComponent.OnOwnerDamageableComponentDeathResponseReady // (Final|Native|Private|HasOutParms) // @ game+0x30a3620
	void OnHasSettled(); // Function ShooterGame.ShooterCharacterDeathReactionComponent.OnHasSettled // (Final|Native|Public|BlueprintCallable) // @ game+0x30a3600
	void IsPersistingAfterDeadAndSettled(bool Persists); // Function ShooterGame.ShooterCharacterDeathReactionComponent.IsPersistingAfterDeadAndSettled // (Final|Native|Public|BlueprintCallable) // @ game+0x30a3570
	enum class EAresBodySection GetBodySectionForBone(struct FName BoneName); // Function ShooterGame.ShooterCharacterDeathReactionComponent.GetBodySectionForBone // (Final|Native|Public|Const) // @ game+0x30a33f0
	void AuthTriggerDeathReaction(struct AShooterCharacter* ShooterCharacter, struct UAresHitReactions* DeathReactions, struct UDamageResponse* Response); // Function ShooterGame.ShooterCharacterDeathReactionComponent.AuthTriggerDeathReaction // (Final|Native|Public) // @ game+0x2ca3b50
	bool AuthSetDeathMontageEffectOverride(struct AEffectContainer* InDeathMontageEffectOverride, struct UObject* EffectContext); // Function ShooterGame.ShooterCharacterDeathReactionComponent.AuthSetDeathMontageEffectOverride // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2df2c10
	void AuthCancelDeathMovement(); // Function ShooterGame.ShooterCharacterDeathReactionComponent.AuthCancelDeathMovement // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
};

// Class ShooterGame.ShooterCharacterDebugComponent
// Size: 0x2e0 (Inherited: 0xe8)
struct UShooterCharacterDebugComponent : UActorComponent {
	struct TSet<struct AShooterPlayerController*> DebugCharacterNetworkingWatchingControllers; // 0xe8(0x50)
	char pad_138[0x50]; // 0x138(0x50)
	struct TArray<struct AAresEquippable*> DebugWatchEquippables; // 0x188(0x10)
	struct FDebugServerHitRegTuning DebugServerHitRegTuning; // 0x198(0x1c)
	struct FDebugProjectileFiringTuning DebugProjectileFiringTuning; // 0x1b4(0x10)
	float AutoFireTimeInterval; // 0x1c4(0x04)
	float AutoFireCooldown; // 0x1c8(0x04)
	bool bAutoFireHold; // 0x1cc(0x01)
	bool bAutoFireHoldPrevious; // 0x1cd(0x01)
	bool bAutoWalkHold; // 0x1ce(0x01)
	bool bAutoWalkHoldPrevious; // 0x1cf(0x01)
	bool bAutoJumpRepeatedly; // 0x1d0(0x01)
	bool bJumpIsHeld; // 0x1d1(0x01)
	char pad_1D2[0x2]; // 0x1d2(0x02)
	float JumpRepeatedlyLastJumpTime; // 0x1d4(0x04)
	char pad_1D8[0x8]; // 0x1d8(0x08)
	bool bAutoCrouchHold; // 0x1e0(0x01)
	bool bAutoCrouchHoldPrevious; // 0x1e1(0x01)
	enum class EAresItemSlot AutoSwapEquippable; // 0x1e2(0x01)
	char pad_1E3[0x2d]; // 0x1e3(0x2d)
	int32_t HitRegHistoryIndex; // 0x210(0x04)
	float LastTimestampOfConfirmedHit; // 0x214(0x04)
	char pad_218[0x80]; // 0x218(0x80)
	struct TArray<struct FDebugPruneComplexRewindEntry> DebugPruneComplexRewindEntries; // 0x298(0x10)
	struct TArray<struct FDebugProjectileTargetCheckingEntry> DebugProjectileTargetCheckingEntries; // 0x2a8(0x10)
	struct TArray<struct FDebugProjectileFireSnapshot> ClientDebugProjectileFireSnapshots; // 0x2b8(0x10)
	struct TArray<struct FDebugProjectileFireSnapshot> AuthDebugProjectileFireSnapshots; // 0x2c8(0x10)
	char pad_2D8[0x8]; // 0x2d8(0x08)

	void TeleportToLocation(struct FVector Location); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportToLocation // (Final|Native|Protected|HasDefaults) // @ game+0x2d52e10
	void TeleportNearCommonFunc(struct TArray<struct FString>& Args, struct UWorld* World, enum class DebugTeleportMode Mode); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportNearCommonFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x30a9920
	void TeleportNearCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportNearCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void TeleportNear(struct UWorld* World, enum class EAresAlliance AllianceRestriction); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportNear // (Final|Native|Protected) // @ game+0x30a9850
	void TeleportFriendCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportFriendCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void TeleportEnemyCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportEnemyCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void TeleportCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.TeleportCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void SyncAutoFireFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.SyncAutoFireFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void SpawnMannequinPlayerFunc(struct TArray<struct FString> Params); // Function ShooterGame.ShooterCharacterDebugComponent.SpawnMannequinPlayerFunc // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30a9770
	void SpawnMannequinPlayerCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.SpawnMannequinPlayerCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void SpawnMannequinFunc(struct FString SpawnClass); // Function ShooterGame.ShooterCharacterDebugComponent.SpawnMannequinFunc // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30a96b0
	void SpawnMannequinCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.SpawnMannequinCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void ServerVerifyShot(float TimestampOfShot, struct AShooterCharacter* VictimActor); // Function ShooterGame.ShooterCharacterDebugComponent.ServerVerifyShot // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a95d0
	void ServerShowPossessedCharacterForDebugCharacterNetworking(bool bSet); // Function ShooterGame.ShooterCharacterDebugComponent.ServerShowPossessedCharacterForDebugCharacterNetworking // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a9530
	void ServerSetPlayerDebugFlag(enum class EPlayerDebugFlags Flag, bool bEnabled); // Function ShooterGame.ShooterCharacterDebugComponent.ServerSetPlayerDebugFlag // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30a9450
	void ServerFramePercentageAddition(float Percentage); // Function ShooterGame.ShooterCharacterDebugComponent.ServerFramePercentageAddition // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a93c0
	void ServerDebugServerHitBox(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugServerHitBox // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a9330
	void ServerDebugPruneComplexRewinds(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugPruneComplexRewinds // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a92a0
	void ServerDebugProjectileTargetChecking(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugProjectileTargetChecking // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2f019e0
	void ServerDebugProjectileFiring(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugProjectileFiring // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a9210
	void ServerDebugHitRegEveryShot(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugHitRegEveryShot // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a9180
	void ServerDebugHitReg(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugHitReg // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a90f0
	void ServerDebugForceRewindTime(float ForceRewindTime); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugForceRewindTime // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2cee5e0
	void ServerDebugApplyBuff(struct FName BuffName, bool bApplyBuff); // Function ShooterGame.ShooterCharacterDebugComponent.ServerDebugApplyBuff // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a9000
	void OnProjectileFired(); // Function ShooterGame.ShooterCharacterDebugComponent.OnProjectileFired // (Final|Native|Public) // @ game+0x1e6e7b0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.ShooterCharacterDebugComponent.OnBugCommand // (Final|Native|Public) // @ game+0x2eb1960
	void MulticastServerHitBox(struct TArray<struct FRepSocketTransform> HitBoxSocketWorldTransformArray); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastServerHitBox // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30a8f50
	void MulticastPruneComplexRewind(struct FVector SphereCastStart, struct FVector SphereCastEnd, float SphereRadius, struct TArray<struct FVector> ImpactPoints); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastPruneComplexRewind // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x30a8dc0
	void MulticastProjectileTargetChecking(struct FVector SphereCastStart, struct FVector SphereCastEnd, float SphereRadius, struct TArray<struct FVector> ImpactPoints); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastProjectileTargetChecking // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x30a8c30
	void MulticastHitRegResult(struct FVector ActorLocation, struct TArray<struct FRepSocketTransform> HitBoxSocketWorldTransformArray, struct TArray<struct FHitResult> HitResults, float RewindTime, float JitterTime, float RewindTargetTimestamp, bool bHasVictimActorTicked); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastHitRegResult // (Net|NetReliableNative|Event|NetMulticast|Protected|HasDefaults) // @ game+0x30a89c0
	void MulticastDebugServerHitBox(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugServerHitBox // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30a8930
	void MulticastDebugPruneComplexRewinds(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugPruneComplexRewinds // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2d2e6c0
	void MulticastDebugProjectileTargetChecking(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugProjectileTargetChecking // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30a88a0
	void MulticastDebugProjectileFiring(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugProjectileFiring // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x2f76560
	void MulticastDebugHitRegEveryShot(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugHitRegEveryShot // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30a8810
	void MulticastDebugHitReg(int32_t Value); // Function ShooterGame.ShooterCharacterDebugComponent.MulticastDebugHitReg // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30a8780
	void ListSpawnedEffectsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.ListSpawnedEffectsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void ListPooledEffectsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.ListPooledEffectsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugTrackDroppedShotsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugTrackDroppedShotsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugSetAttributeOnLocalCharacterFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugSetAttributeOnLocalCharacterFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugServerHitRegFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerHitRegFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugServerHitRegEveryShotFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerHitRegEveryShotFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugServerHitBoxFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerHitBoxFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugServerFramePercentageAdditionFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerFramePercentageAdditionFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugServerForceRewindTimeFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugServerForceRewindTimeFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugPruneComplexRewindsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugPruneComplexRewindsFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugProjectileTargetCheckingFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugProjectileTargetCheckingFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugProjectileFiringFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugProjectileFiringFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugPreventAwayPenaltyFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugPreventAwayPenaltyFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugInputFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugInputFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugEquippableWatchItemInSlotFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugEquippableWatchItemInSlotFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugEquippableToggleSlotFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugEquippableToggleSlotFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugEquippableClearWatchesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugEquippableClearWatchesFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugCharacterNetworkingWatchCurrentFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugCharacterNetworkingWatchCurrentFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugCharacterNetworkingShowPossessedFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugCharacterNetworkingShowPossessedFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugCharacterNetworkingClearWatchesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugCharacterNetworkingClearWatchesFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void DebugApplyBuffFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.DebugApplyBuffFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void ClientDebugFallDamageInformation(float HighestCharacterHeight, float LandingHeight, float FallDistance, float MitigatedHeight, float Damage); // Function ShooterGame.ShooterCharacterDebugComponent.ClientDebugFallDamageInformation // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30a85c0
	void ClientConfirmDroppedShot(float TimeInSeconds, struct AShooterCharacter* VictimCharacter, struct FVector ActorLocation, struct TArray<struct FRepSocketTransform> HitBoxSocketWorldTransformArray, struct TArray<struct FHitResult> HitResults, float RewindTime, float JitterTime, float RewindTargetTimestamp, bool bHasTargetActorTicked); // Function ShooterGame.ShooterCharacterDebugComponent.ClientConfirmDroppedShot // (Net|NetReliableNative|Event|Protected|HasDefaults|NetClient) // @ game+0x30a82c0
	void ClearMouseHistoryCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.ClearMouseHistoryCommandFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void CheatTeleport(enum class DebugTeleportMode Mode, struct FVector Location); // Function ShooterGame.ShooterCharacterDebugComponent.CheatTeleport // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x30a81e0
	void AutoWalkHoldFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoWalkHoldFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoSwapEquippableFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoSwapEquippableFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoStrafeStopFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoStrafeStopFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoStrafeInVectorDirectionFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoStrafeInVectorDirectionFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoStrafeFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoStrafeFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoStrafeForwardBackwardFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoStrafeForwardBackwardFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoMoveStopFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveStopFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoMoveRightFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveRightFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoMoveLeftFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveLeftFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoMoveInWorldVectorDirectionFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveInWorldVectorDirectionFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoMoveInVectorDirectionFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveInVectorDirectionFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoMoveForwardFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveForwardFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoMoveBackwardFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoMoveBackwardFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoJumpRepeatedlyFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoJumpRepeatedlyFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoFireHoldFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoFireHoldFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoFireFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoFireFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AutoCrouchHoldFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterDebugComponent.AutoCrouchHoldFunc // (Final|Native|Static|Protected|HasOutParms) // @ game+0x2d54a70
	void AuthVerifyShots(); // Function ShooterGame.ShooterCharacterDebugComponent.AuthVerifyShots // (Final|Native|Protected) // @ game+0x1e6e7b0
	void AuthOnOwningCharacterTookDamage(struct AShooterCharacter* VictimCharacter, struct AController* DamageInstigator, struct AActor* DamageCauser, float Damage, struct FDamageEvent& DamageEvent); // Function ShooterGame.ShooterCharacterDebugComponent.AuthOnOwningCharacterTookDamage // (Final|Native|Protected|HasOutParms) // @ game+0x30a8000
};

// Class ShooterGame.ShooterCharacterFogOfWarComponent
// Size: 0x348 (Inherited: 0x320)
struct UShooterCharacterFogOfWarComponent : UFogOfWarComponent {
	float JumpVelocityContribution; // 0x320(0x04)
	float MaxSpeedContribution; // 0x324(0x04)
	float MaxSpeed; // 0x328(0x04)
	float InitialJumpVelocity; // 0x32c(0x04)
	bool bCachedMaxSpeed; // 0x330(0x01)
	bool bCachedJumpVelocity; // 0x331(0x01)
	char pad_332[0x6]; // 0x332(0x06)
	struct AShooterCharacter* OwnerCharacter; // 0x338(0x08)
	struct UBaseTeamComponent* CachedTeamComponent; // 0x340(0x08)

	void OnTeleported(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterFogOfWarComponent.OnTeleported // (Final|Native|Public) // @ game+0x2cb4be0
	void OnInventoryTransaction(enum class EInventoryTransaction Transaction, struct UAresInventory* Inventory, struct AAresItem* item); // Function ShooterGame.ShooterCharacterFogOfWarComponent.OnInventoryTransaction // (Final|Native|Public) // @ game+0x2d2df90
};

// Class ShooterGame.ShooterCharacterHitRegDebugComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct UShooterCharacterHitRegDebugComponent : UActorComponent {
	char pad_E8[0x78]; // 0xe8(0x78)
	struct TArray<struct FNetworkedClientShotResult> PendingShotResultsToSerialize; // 0x160(0x10)
	char pad_170[0x38]; // 0x170(0x38)

	void ServerReportClientShotResults(struct TArray<struct FNetworkedShotId> MissedShotIds, struct TArray<struct FNetworkedClientShotResult> ClientHitShotResults); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ServerReportClientShotResults // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x30b1a50
	void ServerGenerateHitRegSample(struct AShooterCharacter* SampleTarget, struct FNetworkedMovementTimestamp SampleTimeStamp, int32_t RecordID); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ServerGenerateHitRegSample // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30b1920
	void HandleControllerChanged(struct AController* NewController); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.HandleControllerChanged // (Final|Native|Private) // @ game+0x30b0de0
	void ClientReportServerHitRegSample(int32_t RecordID, struct FReplicatedDebugHitRegSample Entry); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ClientReportServerHitRegSample // (Net|NetReliableNative|Event|Public|NetClient) // @ game+0x30b02e0
	void ClientGenerateHitRegRecord(struct AShooterCharacter* SampleTarget); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ClientGenerateHitRegRecord // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable) // @ game+0x30b0130
	void ClientDrawDebugShotResult(struct FNetworkedShotId ShotId, struct FShotResult ShotResult, int32_t RenderIdx); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ClientDrawDebugShotResult // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x30aff10
	void ClearHitRegRecords(); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.ClearHitRegRecords // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	bool CheckMeasuredErrorsBelowThreshold(float MaxSocketTranslationError, float MaxSocketRotationError, struct TSet<struct FName>& SocketsToCheck); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.CheckMeasuredErrorsBelowThreshold // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x30afd80
	void AuthHandleControllerChanged(struct AController* NewController); // Function ShooterGame.ShooterCharacterHitRegDebugComponent.AuthHandleControllerChanged // (Final|Native|Private) // @ game+0x2cb4be0
};

// Class ShooterGame.ShooterCharacterMinimapComponent
// Size: 0x540 (Inherited: 0x500)
struct UShooterCharacterMinimapComponent : UAresMinimapComponent {
	float TeleportInvisibleDelay; // 0x4f8(0x04)
	bool bNeedsShooterCharacterParameterUpdate; // 0x4fc(0x01)
	bool bIsSelf; // 0x4fd(0x01)
	bool bIsEnemy; // 0x4fe(0x01)
	bool bIsAlive; // 0x4ff(0x01)
	bool bHasBomb; // 0x500(0x01)
	bool bIsVisible; // 0x501(0x01)
	float LastSeen; // 0x504(0x04)
	bool bIsSpeaking; // 0x508(0x01)
	bool bPlayCommPulse; // 0x509(0x01)
	bool bPlayCommCriticalPulse; // 0x50a(0x01)
	bool bDebugFogOfWar; // 0x50b(0x01)
	char pad_512[0x6]; // 0x512(0x06)
	struct UVisibilityComponent* VisibilityComponent; // 0x518(0x08)
	struct UBaseTeamComponent* LastTeamComponent; // 0x520(0x08)
	struct AShooterCharacter* LastViewTarget; // 0x528(0x08)
	bool bLocalObserver; // 0x530(0x01)
	bool bRecentlyTeleported; // 0x531(0x01)
	bool bHasTeamSight; // 0x532(0x01)
	bool bBeingDestroyed; // 0x533(0x01)
	char pad_534[0xc]; // 0x534(0x0c)

	void SetSpeaking(bool bInSpeaking); // Function ShooterGame.ShooterCharacterMinimapComponent.SetSpeaking // (Final|Native|Public|BlueprintCallable) // @ game+0x30b1c50
	void SetNeedsShooterCharacterParameterUpdate(); // Function ShooterGame.ShooterCharacterMinimapComponent.SetNeedsShooterCharacterParameterUpdate // (Final|Native|Public|BlueprintCallable) // @ game+0x30b1c30
	void SetHoldingBomb(bool bInHoldingBomb); // Function ShooterGame.ShooterCharacterMinimapComponent.SetHoldingBomb // (Final|Native|Public|BlueprintCallable) // @ game+0x30b1ba0
	void PlayCommPulse(); // Function ShooterGame.ShooterCharacterMinimapComponent.PlayCommPulse // (Final|Native|Public|BlueprintCallable) // @ game+0x30b18e0
	void PlayCommCriticalPulse(); // Function ShooterGame.ShooterCharacterMinimapComponent.PlayCommCriticalPulse // (Final|Native|Public|BlueprintCallable) // @ game+0x30b18c0
	void OnViewTargetChanged(struct FViewTargetInfo& Info); // Function ShooterGame.ShooterCharacterMinimapComponent.OnViewTargetChanged // (Final|Native|Public|HasOutParms) // @ game+0x30b1830
	void OnMapVisibleToAllChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ShooterCharacterMinimapComponent.OnMapVisibleToAllChanged // (Final|Native|Protected|HasOutParms) // @ game+0x30b1540
	void HandleViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleViewTargetModeChanged // (Final|Native|Protected|HasOutParms) // @ game+0x30b1140
	void HandleTeleportedFinishDelay(); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleTeleportedFinishDelay // (Final|Native|Protected) // @ game+0x30b1120
	void HandleTeleported(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleTeleported // (Final|Native|Protected) // @ game+0x30b1090
	void HandlePlayerStateChanged(struct AAresPlayerStateBase* PlayerState); // Function ShooterGame.ShooterCharacterMinimapComponent.HandlePlayerStateChanged // (Final|Native|Protected) // @ game+0x30b0e70
	void HandleOwnerExitedTeamSight(struct AActor* Actor); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleOwnerExitedTeamSight // (Final|Native|Protected) // @ game+0x30b0e70
	void HandleOwnerEnteredTeamSight(struct AActor* Actor, struct TArray<struct AShooterCharacter*>& CharactersWithVisibility); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleOwnerEnteredTeamSight // (Final|Native|Protected|HasOutParms) // @ game+0x30b0f90
	void HandleOwnerDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleOwnerDestroyed // (Final|Native|Protected) // @ game+0x30b0f00
	void HandleHiddenChanged(struct AActor* Actor); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleHiddenChanged // (Final|Native|Protected) // @ game+0x30b0e70
	void HandleFoWDebugCheatsChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleFoWDebugCheatsChanged // (Final|Native|Protected) // @ game+0x2cdbee0
	void HandleCharacterDeath(struct AShooterCharacter* ShooterCharacter, struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterCharacterMinimapComponent.HandleCharacterDeath // (Final|Native|Protected) // @ game+0x30b0d10
	void BindViewTargetEvents(); // Function ShooterGame.ShooterCharacterMinimapComponent.BindViewTargetEvents // (Final|Native|Public) // @ game+0x30afd60
	void BindTeamComponentEvents(); // Function ShooterGame.ShooterCharacterMinimapComponent.BindTeamComponentEvents // (Final|Native|Public) // @ game+0x30afd40
};

// Class ShooterGame.ShooterCharacterMinimapDisplayComponentDeprecated
// Size: 0x290 (Inherited: 0x290)
struct UShooterCharacterMinimapDisplayComponentDeprecated : UMinimapDisplayComponentDeprecated {
};

// Class ShooterGame.ShooterCharacterMinimapWidget
// Size: 0x2f0 (Inherited: 0x2e0)
struct UShooterCharacterMinimapWidget : UAresMinimapWidget {
	bool bIsSelf; // 0x2e0(0x01)
	bool bIsEnemy; // 0x2e1(0x01)
	bool bIsAlive; // 0x2e2(0x01)
	bool bHasBomb; // 0x2e3(0x01)
	bool bIsVisible; // 0x2e4(0x01)
	char pad_2E5[0x3]; // 0x2e5(0x03)
	float LastSeen; // 0x2e8(0x04)
	bool bCommPulse; // 0x2ec(0x01)
	bool bCommCriticalPulse; // 0x2ed(0x01)
	bool bDebugFogOfWar; // 0x2ee(0x01)
	char pad_2EF[0x1]; // 0x2ef(0x01)

	void SetState(bool bInIsSelf, bool bInIsEnemy, bool bInIsAlive, bool bInHasBomb, bool bInIsVisible, float InLastSeen, bool bInCommPulse, bool bInCommCriticalPulse, bool bDebugFogOfWar); // Function ShooterGame.ShooterCharacterMinimapWidget.SetState // (Final|Native|Public|BlueprintCallable) // @ game+0x30b1ce0
};

// Class ShooterGame.ShooterCharacterMovement
// Size: 0xfd0 (Inherited: 0xbc0)
struct UShooterCharacterMovement : UCharacterMovementComponent {
	char pad_BC0[0x18]; // 0xbc0(0x18)
	struct FMulticastInlineDelegate OnPreMovementTick; // 0xbd8(0x10)
	struct FMulticastInlineDelegate OnPrepareMovement; // 0xbe8(0x10)
	struct FMulticastInlineDelegate OnPostMovementTick; // 0xbf8(0x10)
	struct FMulticastInlineDelegate OnGameFrameMovementComplete; // 0xc08(0x10)
	struct FMulticastInlineDelegate OnCrouchStateUpdated; // 0xc18(0x10)
	float AirControlDisableOnBounceTime; // 0xc28(0x04)
	char pad_C2C[0x14]; // 0xc2c(0x14)
	struct FMulticastInlineDelegate OnBouncedOff; // 0xc40(0x10)
	char pad_C50[0x8]; // 0xc50(0x08)
	float CachedTemporaryMovementSpeedModifier; // 0xc58(0x04)
	char pad_C5C[0x8]; // 0xc5c(0x08)
	struct FVector LastWalkingLocation; // 0xc64(0x0c)
	struct FMulticastInlineDelegate OnStartedJump; // 0xc70(0x10)
	float CrouchHopVelocityMultiplier; // 0xc80(0x04)
	float FlightHeight; // 0xc84(0x04)
	struct FJumpVariables JumpVariables; // 0xc88(0x34)
	float TimeOfLastRemoteClientTimingRecording; // 0xcbc(0x04)
	struct FAresMovementTuning MovementTuning; // 0xcc0(0xcc)
	char pad_D8C[0xc]; // 0xd8c(0x0c)
	struct FAresJumpTuning DefaultJumpTuning; // 0xd98(0x20)
	float CrouchSlideThreshold; // 0xdb8(0x04)
	bool bEnableCrouchSlide; // 0xdbc(0x01)
	char pad_DBD[0x3]; // 0xdbd(0x03)
	struct FAresJumpLandSlowTuningV2 JumpLandSlowTuningV2; // 0xdc0(0x10)
	float ClientMoveSendRateUpperLimit; // 0xdd0(0x04)
	float ClientMoveNextSendDeltaTime; // 0xdd4(0x04)
	bool bSendClientMoveThisFrame; // 0xdd8(0x01)
	bool bIsDroppingMoves; // 0xdd9(0x01)
	char pad_DDA[0x6]; // 0xdda(0x06)
	int32_t DebugLastServerCombinedMoves; // 0xde0(0x04)
	int32_t DebugTotalServerCombinedMoves; // 0xde4(0x04)
	float ReplicateServerCombinedMovesVarsTimer; // 0xde8(0x04)
	char pad_DEC[0xc]; // 0xdec(0x0c)
	float ServerLocationDiffMag; // 0xdf8(0x04)
	float ServerLocationDiffMagMin; // 0xdfc(0x04)
	float ServerLocationDiffMagMax; // 0xe00(0x04)
	char pad_E04[0x14]; // 0xe04(0x14)
	float DebugMovementCurveTimeLength; // 0xe18(0x04)
	float DebugFlySpeedMultiplierFast; // 0xe1c(0x04)
	float DebugFlySpeedMultiplierSlow; // 0xe20(0x04)
	char pad_E24[0x44]; // 0xe24(0x44)
	bool bWasLocallyRelevant; // 0xe68(0x01)
	char pad_E69[0x7]; // 0xe69(0x07)
	uint64_t DebugTotalClientAdjustPositionCalls; // 0xe70(0x08)
	float TrueVerticalVelocity; // 0xe78(0x04)
	char pad_E7C[0x2c]; // 0xe7c(0x2c)
	int32_t TotalMovesExecuted; // 0xea8(0x04)
	float DebugLastFwdPredDeltaTime; // 0xeac(0x04)
	int32_t DebugTotalForwardPredictedMoves; // 0xeb0(0x04)
	int32_t DebugTotalRealMovesExecuted; // 0xeb4(0x04)
	int32_t NumRebases; // 0xeb8(0x04)
	int32_t NumOverQueuedRebases; // 0xebc(0x04)
	uint32_t SerializedMovesReceivedSinceLastTimestep; // 0xec0(0x04)
	bool DebugForceRebase; // 0xec4(0x01)
	char pad_EC5[0x3]; // 0xec5(0x03)
	struct FVector ForceModulesTotal; // 0xec8(0x0c)
	char pad_ED4[0x4]; // 0xed4(0x04)
	struct UMovementTimeShiftMonitor* TimeShiftMonitor; // 0xed8(0x08)
	char pad_EE0[0x28]; // 0xee0(0x28)
	float PreviousMovementOverrideRemoteSimulationMoveDelayTimeSeconds; // 0xf08(0x04)
	int32_t ConsecutiveInsertionFailureNum; // 0xf0c(0x04)
	char pad_F10[0x3c]; // 0xf10(0x3c)
	float TimeInForwardPrediction; // 0xf4c(0x04)
	char pad_F50[0x8]; // 0xf50(0x08)
	struct UShooterCharacterMovementDebugComponent* DebugComponent; // 0xf58(0x08)
	struct URemoteClientMovementComponent* RemoteClientMovementComponent; // 0xf60(0x08)
	char pad_F68[0x68]; // 0xf68(0x68)

	void ReceiveTeleportFromClientUpdate(); // Function ShooterGame.ShooterCharacterMovement.ReceiveTeleportFromClientUpdate // (Final|Native|Private) // @ game+0x30b1900
	void OnRoundEnded(int32_t RoundNumberEnded); // Function ShooterGame.ShooterCharacterMovement.OnRoundEnded // (Final|Native|Private) // @ game+0x30b17a0
	void OnRoundBegin(int32_t RoundNumberBeginning); // Function ShooterGame.ShooterCharacterMovement.OnRoundBegin // (Final|Native|Private) // @ game+0x30b1710
	void OnForceModuleValuesUpdated(); // Function ShooterGame.ShooterCharacterMovement.OnForceModuleValuesUpdated // (Final|Native|Private) // @ game+0x30b1520
	void OnForceModulePreAdd(struct UForceModuleManagerComponent* ForceManager, struct FForceModuleHandle ForceModuleHandle, struct UForceModule* NewForceModule); // Function ShooterGame.ShooterCharacterMovement.OnForceModulePreAdd // (Final|Native|Private) // @ game+0x30b1400
	void MulticastDebugMoveCombineVars(int32_t LastCombinesMoves, int32_t TotalCombinedMoves); // Function ShooterGame.ShooterCharacterMovement.MulticastDebugMoveCombineVars // (Net|NetReliableNative|Event|NetMulticast|Public|NetClient) // @ game+0x30b1320
	bool MovementIsDisabled(); // Function ShooterGame.ShooterCharacterMovement.MovementIsDisabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b12f0
	bool IsStrafingRight(); // Function ShooterGame.ShooterCharacterMovement.IsStrafingRight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b12c0
	bool IsStrafingLeft(); // Function ShooterGame.ShooterCharacterMovement.IsStrafingLeft // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b1290
	bool IsStrafing(); // Function ShooterGame.ShooterCharacterMovement.IsStrafing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b1260
	bool IsMovingForward(); // Function ShooterGame.ShooterCharacterMovement.IsMovingForward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b1230
	bool IsMoving(); // Function ShooterGame.ShooterCharacterMovement.IsMoving // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b1200
	bool IsBackpedalling(); // Function ShooterGame.ShooterCharacterMovement.IsBackpedalling // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b11d0
	float GetTrueVerticalVelocity(); // Function ShooterGame.ShooterCharacterMovement.GetTrueVerticalVelocity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0cf0
	float GetTimeSinceLanding(); // Function ShooterGame.ShooterCharacterMovement.GetTimeSinceLanding // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0cc0
	float GetTemporaryMovementSpeedModifier(); // Function ShooterGame.ShooterCharacterMovement.GetTemporaryMovementSpeedModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0c90
	float GetRemoteMoveDelayTime(); // Function ShooterGame.ShooterCharacterMovement.GetRemoteMoveDelayTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0c60
	struct FVector GetPlayerSpaceCurrentVelocity(); // Function ShooterGame.ShooterCharacterMovement.GetPlayerSpaceCurrentVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0c20
	struct FVector GetPlayerSpaceCurrentAcceleration(); // Function ShooterGame.ShooterCharacterMovement.GetPlayerSpaceCurrentAcceleration // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0be0
	enum class EAresMovementType GetMovementType(enum class EAresMovementTypeQuery QueryType); // Function ShooterGame.ShooterCharacterMovement.GetMovementType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0b50
	float GetMostRecentJumpStartTime(); // Function ShooterGame.ShooterCharacterMovement.GetMostRecentJumpStartTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0b20
	float GetMostRecentJumpLandTime(); // Function ShooterGame.ShooterCharacterMovement.GetMostRecentJumpLandTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0af0
	float GetMaxSpeedForMovementType(enum class EAresMovementType AresMovementType, float SpeedModifier); // Function ShooterGame.ShooterCharacterMovement.GetMaxSpeedForMovementType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0a10
	float GetLastJumpLandSpeed(); // Function ShooterGame.ShooterCharacterMovement.GetLastJumpLandSpeed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b09e0
	float GetJumpVelocity(); // Function ShooterGame.ShooterCharacterMovement.GetJumpVelocity // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b09b0
	struct FVector GetInputVectorWorldSpace(); // Function ShooterGame.ShooterCharacterMovement.GetInputVectorWorldSpace // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0970
	struct FVector GetInputVectorViewSpace(); // Function ShooterGame.ShooterCharacterMovement.GetInputVectorViewSpace // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0930
	float GetInitialMaxStepHeight(); // Function ShooterGame.ShooterCharacterMovement.GetInitialMaxStepHeight // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0910
	float GetGroundTime(float TotalTime); // Function ShooterGame.ShooterCharacterMovement.GetGroundTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0870
	float GetFullMovementSpeedModifier(); // Function ShooterGame.ShooterCharacterMovement.GetFullMovementSpeedModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0840
	struct FAresPerMovementStateData GetDefaultMovementTuning(enum class EAresMovementType MovementType); // Function ShooterGame.ShooterCharacterMovement.GetDefaultMovementTuning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0790
	struct FAresJumpTuning GetDefaultJumpTuning(); // Function ShooterGame.ShooterCharacterMovement.GetDefaultJumpTuning // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0750
	uint64_t GetDebugTotalClientAdjustPositionCalls(); // Function ShooterGame.ShooterCharacterMovement.GetDebugTotalClientAdjustPositionCalls // (Final|Native|Public|Const) // @ game+0x30b0730
	float GetCurrentMovementTimestamp(); // Function ShooterGame.ShooterCharacterMovement.GetCurrentMovementTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b0700
	float GetCurrentMovementNetTimestamp(); // Function ShooterGame.ShooterCharacterMovement.GetCurrentMovementNetTimestamp // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b06d0
	float GetBaseMovementSpeedModifier(); // Function ShooterGame.ShooterCharacterMovement.GetBaseMovementSpeedModifier // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b06a0
	void ClientUpdateClientToServerTimestep(int32_t NewTimestep); // Function ShooterGame.ShooterCharacterMovement.ClientUpdateClientToServerTimestep // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x30b0610
	void ClientShiftTimingSeconds(float ShiftSeconds); // Function ShooterGame.ShooterCharacterMovement.ClientShiftTimingSeconds // (Net|NetReliableNative|Event|Protected|NetClient) // @ game+0x30b0580
	void ClientSendMoveError(float LocDiffMag); // Function ShooterGame.ShooterCharacterMovement.ClientSendMoveError // (Net|NetReliableNative|Event|NetMulticast|Protected|NetClient) // @ game+0x30b04f0
	void ClientRecordMovementTiming(enum class EMovementTimingType Type, float Timestamp, float CurrentServerTimeStamp); // Function ShooterGame.ShooterCharacterMovement.ClientRecordMovementTiming // (Net|Native|Event|Protected|NetClient) // @ game+0x30b01c0
	void AuthOnOwnerConnectionStatusChanged(struct AAresPlayerStateBase* Player, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.ShooterCharacterMovement.AuthOnOwnerConnectionStatusChanged // (Final|Native|Private) // @ game+0x2cb4c70
	struct FVector AuthGetLastWalkingLocation(); // Function ShooterGame.ShooterCharacterMovement.AuthGetLastWalkingLocation // (Final|BlueprintAuthorityOnly|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30afd00
	void AddVelocity(struct FVector VelocityToAdd, enum class EAresCoordinateSpace CoordinateSpace); // Function ShooterGame.ShooterCharacterMovement.AddVelocity // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x30afc30
};

// Class ShooterGame.ShooterCharacterMovementDebugComponent
// Size: 0x170 (Inherited: 0xe8)
struct UShooterCharacterMovementDebugComponent : UActorComponent {
	char pad_E8[0x88]; // 0xe8(0x88)

	void TrackMoveHistoryFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.TrackMoveHistoryFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void ShiftTimingSecondsFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ShiftTimingSecondsFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void ShiftClientPositionToCorrectionThresholdFunc(struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ShiftClientPositionToCorrectionThresholdFunc // (Final|Native|Static|Public) // @ game+0x2d54b90
	void SetShowNetCorrectionCapsulesFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.SetShowNetCorrectionCapsulesFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void SetNetCorrectionCapsuleLifetimeFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.SetNetCorrectionCapsuleLifetimeFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void ServerOverrideMoveStepTimesPerSecond(int32_t MoveStepsPerSecond); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ServerOverrideMoveStepTimesPerSecond // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30a88a0
	void ServerForceRebase(); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ServerForceRebase // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x2ca3cf0
	void ServerDumpMoveCorrectionDetails(uint32_t CorrectionId); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ServerDumpMoveCorrectionDetails // (Net|NetReliableNative|Event|Protected|NetServer) // @ game+0x30b9f50
	void ResetMovementDebugHistoryCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ResetMovementDebugHistoryCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void MoveStepsPerSecondCommandFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.MoveStepsPerSecondCommandFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void ForceRebaseRemoteClientFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ForceRebaseRemoteClientFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void ForceRebaseAutonomousFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.ForceRebaseAutonomousFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void DumpMoveCorrectionDataFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.ShooterCharacterMovementDebugComponent.DumpMoveCorrectionDataFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
};

// Class ShooterGame.ShooterCharacterVisibilityComponent
// Size: 0x180 (Inherited: 0x180)
struct UShooterCharacterVisibilityComponent : UVisibilityComponent {
};

// Class ShooterGame.ShooterCharacterVisionComponent
// Size: 0x108 (Inherited: 0xe8)
struct UShooterCharacterVisionComponent : UActorComponent {
	struct TArray<struct AShooterCharacter*> VisibleCharacterOverrides; // 0xe8(0x10)
	struct TArray<struct AShooterCharacter*> LastVisibleCharacterOverrides; // 0xf8(0x10)

	void RemoveVisibleCharacterOverride(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterVisionComponent.RemoveVisibleCharacterOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void RemoveAllVisibleCharacterOverrides(); // Function ShooterGame.ShooterCharacterVisionComponent.RemoveAllVisibleCharacterOverrides // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void OnRep_VisibleCharacterOverrides(); // Function ShooterGame.ShooterCharacterVisionComponent.OnRep_VisibleCharacterOverrides // (Final|Native|Public) // @ game+0x30b9b70
	bool HasVisibleCharacterOverride(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterVisionComponent.HasVisibleCharacterOverride // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30b9ad0
	void AddVisibleCharacterOverride(struct AShooterCharacter* Character); // Function ShooterGame.ShooterCharacterVisionComponent.AddVisibleCharacterOverride // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
};

// Class ShooterGame.ShooterCheatManager
// Size: 0x118 (Inherited: 0xf8)
struct UShooterCheatManager : UAresCheatManager {
	struct FSoftObjectPath DevOnlyGunNamesToEquippableDataAssetsDataTable; // 0xf8(0x20)

	void WinGameWithPenalties(); // Function ShooterGame.ShooterCheatManager.WinGameWithPenalties // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void WinGame(); // Function ShooterGame.ShooterCheatManager.WinGame // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void ToggleTeam(); // Function ShooterGame.ShooterCheatManager.ToggleTeam // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void ToggleMatchTimerRequest(); // Function ShooterGame.ShooterCheatManager.ToggleMatchTimerRequest // (Final|Exec|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void ToggleMatchTimeout(); // Function ShooterGame.ShooterCheatManager.ToggleMatchTimeout // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void TakeDamage(int32_t Amount); // Function ShooterGame.ShooterCheatManager.TakeDamage // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SwapTeamToObserver_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamToObserver_ClientHack // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void SwapTeams(); // Function ShooterGame.ShooterCheatManager.SwapTeams // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void SwapTeamRestoreOriginalTeams_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamRestoreOriginalTeams_ClientHack // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void SwapTeamForRandomEnemy_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamForRandomEnemy_ClientHack // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void SwapTeamForRandomAlly_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamForRandomAlly_ClientHack // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void SwapTeamForAllEnemies_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeamForAllEnemies_ClientHack // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void SwapTeam_ClientHack(); // Function ShooterGame.ShooterCheatManager.SwapTeam_ClientHack // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void Suicide(); // Function ShooterGame.ShooterCheatManager.Suicide // (Exec|Native|Public) // @ game+0x30ba730
	void SprayLoadoutSetSprayInWheelByLevel(struct FString SprayName, int32_t WheelSlotIndex, int32_t Level); // Function ShooterGame.ShooterCheatManager.SprayLoadoutSetSprayInWheelByLevel // (Final|Exec|Native|Public) // @ game+0x30ba5b0
	void SprayLoadoutSetSprayInWheel(struct FString SprayName, int32_t WheelSlotIndex); // Function ShooterGame.ShooterCheatManager.SprayLoadoutSetSprayInWheel // (Final|Exec|Native|Public) // @ game+0x30ba470
	void SprayLoadoutSetContextSprayLevel(struct FString ContextName, struct FString SprayName, int32_t Level); // Function ShooterGame.ShooterCheatManager.SprayLoadoutSetContextSprayLevel // (Final|Exec|Native|Public) // @ game+0x30ba290
	void SprayLoadoutSetContextSpray(struct FString ContextName, struct FString SprayName); // Function ShooterGame.ShooterCheatManager.SprayLoadoutSetContextSpray // (Final|Exec|Native|Public) // @ game+0x30ba0f0
	void SpawnBot(); // Function ShooterGame.ShooterCheatManager.SpawnBot // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void ShuffleClasses(); // Function ShooterGame.ShooterCheatManager.ShuffleClasses // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void ShowKillBanners(int32_t Show); // Function ShooterGame.ShooterCheatManager.ShowKillBanners // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void ShowCrosshair(int32_t Show); // Function ShooterGame.ShooterCheatManager.ShowCrosshair // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void ShowBlindOverlay(int32_t Show); // Function ShooterGame.ShooterCheatManager.ShowBlindOverlay // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void ShowAllyOutlines(int32_t Show); // Function ShooterGame.ShooterCheatManager.ShowAllyOutlines // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetTeamForAll(struct FString TeamName); // Function ShooterGame.ShooterCheatManager.SetTeamForAll // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void SetServerTickRate(int32_t TickRate); // Function ShooterGame.ShooterCheatManager.SetServerTickRate // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetRoundNumber(int32_t RoundNum); // Function ShooterGame.ShooterCheatManager.SetRoundNumber // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetPointsForMyTeam(int32_t Points); // Function ShooterGame.ShooterCheatManager.SetPointsForMyTeam // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetNumDefendingBots(int32_t Num); // Function ShooterGame.ShooterCheatManager.SetNumDefendingBots // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetNumAttackingBots(int32_t Num); // Function ShooterGame.ShooterCheatManager.SetNumAttackingBots // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetInvulnerable(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetInvulnerable // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetInfiniteSprays(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetInfiniteSprays // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetInfiniteMagazine(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetInfiniteMagazine // (Final|Native|Public) // @ game+0x2ca3d20
	void SetInfiniteHealth(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetInfiniteHealth // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetInfiniteAbilities(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetInfiniteAbilities // (Final|Native|Public) // @ game+0x2ca3d20
	void SetIgnoreShoppingRestrictions(bool Enabled); // Function ShooterGame.ShooterCheatManager.SetIgnoreShoppingRestrictions // (Final|BlueprintAuthorityOnly|Exec|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void SetIgnoreCooldowns(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.SetIgnoreCooldowns // (Final|Native|Public) // @ game+0x2ca3d20
	void SetHealth(int32_t Amount); // Function ShooterGame.ShooterCheatManager.SetHealth // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetDeveloperSettingsToDefaults(); // Function ShooterGame.ShooterCheatManager.SetDeveloperSettingsToDefaults // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void SetDesiredClass(struct FString NewClass); // Function ShooterGame.ShooterCheatManager.SetDesiredClass // (Final|Exec|Native|Public) // @ game+0x2d0cd00
	void SetDefaultWeapon(struct FString ShippingName); // Function ShooterGame.ShooterCheatManager.SetDefaultWeapon // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void SetConfigurationValue(struct FString Name, struct FString Value); // Function ShooterGame.ShooterCheatManager.SetConfigurationValue // (Final|Exec|Native|Public) // @ game+0x30b9fe0
	void SetCompetitiveTier(int32_t NewTier); // Function ShooterGame.ShooterCheatManager.SetCompetitiveTier // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SetClientMuted(int32_t Mute); // Function ShooterGame.ShooterCheatManager.SetClientMuted // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void SendMessageToChat(struct FString NewMessage); // Function ShooterGame.ShooterCheatManager.SendMessageToChat // (Final|Exec|Native|Public) // @ game+0x30b9e50
	void RestartGame(); // Function ShooterGame.ShooterCheatManager.RestartGame // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void Respawn(); // Function ShooterGame.ShooterCheatManager.Respawn // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void ResetUserSettingOverrides(struct FString OverrideAssetPath); // Function ShooterGame.ShooterCheatManager.ResetUserSettingOverrides // (Final|Exec|Native|Public) // @ game+0x2d0cd00
	void ResetCombatStats(); // Function ShooterGame.ShooterCheatManager.ResetCombatStats // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void RefreshPrespawnedEquippables(); // Function ShooterGame.ShooterCheatManager.RefreshPrespawnedEquippables // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void RefreshInventory(); // Function ShooterGame.ShooterCheatManager.RefreshInventory // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void PlayerControllerCheat(struct FString CheatString); // Function ShooterGame.ShooterCheatManager.PlayerControllerCheat // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void PlayCeremony(struct FString ClassName); // Function ShooterGame.ShooterCheatManager.PlayCeremony // (Final|Exec|Native|Public) // @ game+0x2d0cd00
	void PackmanSetThreadEnabled(int32_t Enabled); // Function ShooterGame.ShooterCheatManager.PackmanSetThreadEnabled // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void PackmanSetThreadDelay(int32_t NewMilliseconds); // Function ShooterGame.ShooterCheatManager.PackmanSetThreadDelay // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void PackmanSetReencryptMaximum(int32_t Count); // Function ShooterGame.ShooterCheatManager.PackmanSetReencryptMaximum // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void PackmanResetReencryptCount(); // Function ShooterGame.ShooterCheatManager.PackmanResetReencryptCount // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void PackmanReencryptNow(int32_t PercentageOfPages); // Function ShooterGame.ShooterCheatManager.PackmanReencryptNow // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void LogTeams(); // Function ShooterGame.ShooterCheatManager.LogTeams // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void Hide1P(int32_t Hide); // Function ShooterGame.ShooterCheatManager.Hide1P // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void Heal(int32_t Amount); // Function ShooterGame.ShooterCheatManager.Heal // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void GunSkinSetSlotSkin(struct FString SlotName, struct FString SkinName, int32_t Level, struct FString Chroma); // Function ShooterGame.ShooterCheatManager.GunSkinSetSlotSkin // (Final|Exec|Native|Public) // @ game+0x30b9840
	void GunSkinSetSkinLevel(int32_t Level); // Function ShooterGame.ShooterCheatManager.GunSkinSetSkinLevel // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void GunSkinSetSkin(struct FString SkinName); // Function ShooterGame.ShooterCheatManager.GunSkinSetSkin // (Final|Exec|Native|Public) // @ game+0x30b9740
	void GunSkinSetChroma(struct FString ChromaName); // Function ShooterGame.ShooterCheatManager.GunSkinSetChroma // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void GunSkinSetBuddyLevel(int32_t Level); // Function ShooterGame.ShooterCheatManager.GunSkinSetBuddyLevel // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void GunSkinSetBuddy(struct FString BuddyName); // Function ShooterGame.ShooterCheatManager.GunSkinSetBuddy // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void GunSkinSetAttachmentByIndex(int32_t AttachmentIndex); // Function ShooterGame.ShooterCheatManager.GunSkinSetAttachmentByIndex // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void GunSkinSetAttachment(struct FString Attachment); // Function ShooterGame.ShooterCheatManager.GunSkinSetAttachment // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void GunSkinRemoveAttachmentByIndex(int32_t AttachmentIndex); // Function ShooterGame.ShooterCheatManager.GunSkinRemoveAttachmentByIndex // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void GunSkinRemoveAttachment(struct FString Attachment); // Function ShooterGame.ShooterCheatManager.GunSkinRemoveAttachment // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void GunSkinLoadAllSkins(); // Function ShooterGame.ShooterCheatManager.GunSkinLoadAllSkins // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void GiveUltimatePoints(int32_t Amount); // Function ShooterGame.ShooterCheatManager.GiveUltimatePoints // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void GiveUltimate(); // Function ShooterGame.ShooterCheatManager.GiveUltimate // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void GiveMoney(int32_t Amount); // Function ShooterGame.ShooterCheatManager.GiveMoney // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void GameSpeed(float T); // Function ShooterGame.ShooterCheatManager.GameSpeed // (Final|Exec|Native|Public) // @ game+0x2cee3b0
	void GameModeCheat(struct FString CheatString); // Function ShooterGame.ShooterCheatManager.GameModeCheat // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void ForceUserSettingOverrides(struct FString OverrideAssetPath); // Function ShooterGame.ShooterCheatManager.ForceUserSettingOverrides // (Final|Exec|Native|Public) // @ game+0x2d0cd00
	void ForceMatchStart(); // Function ShooterGame.ShooterCheatManager.ForceMatchStart // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void EndGamePhase(); // Function ShooterGame.ShooterCheatManager.EndGamePhase // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void DumpFogOfWarLog(); // Function ShooterGame.ShooterCheatManager.DumpFogOfWarLog // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void Disassociate(); // Function ShooterGame.ShooterCheatManager.Disassociate // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void Die(); // Function ShooterGame.ShooterCheatManager.Die // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void DamageSelf(float Damage); // Function ShooterGame.ShooterCheatManager.DamageSelf // (Final|Exec|Native|Public) // @ game+0x2cee3b0
	void CycleOrbInSlot(int32_t Slot); // Function ShooterGame.ShooterCheatManager.CycleOrbInSlot // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void Cheat(struct FString Msg); // Function ShooterGame.ShooterCheatManager.Cheat // (Final|Exec|Native|Public) // @ game+0x2d0cd00
	void ChangeTeam(struct FString TeamName); // Function ShooterGame.ShooterCheatManager.ChangeTeam // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void ChangePlayerName(struct FString NewName); // Function ShooterGame.ShooterCheatManager.ChangePlayerName // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void CalculateBehaviorFactors(); // Function ShooterGame.ShooterCheatManager.CalculateBehaviorFactors // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void AssignMission(struct FString MissionName); // Function ShooterGame.ShooterCheatManager.AssignMission // (Final|Exec|Native|Public) // @ game+0x1e6e9a0
	void AdvanceToOvertime(); // Function ShooterGame.ShooterCheatManager.AdvanceToOvertime // (Final|Exec|Native|Public) // @ game+0x1e6e7b0
	void AddVacanciesForTeam(struct FString TeamName, char Count); // Function ShooterGame.ShooterCheatManager.AddVacanciesForTeam // (Final|Exec|Native|Public) // @ game+0x30b9600
};

// Class ShooterGame.ShooterConsoleComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UShooterConsoleComponent : UActorComponent {
	char pad_E8[0x10]; // 0xe8(0x10)
};

// Class ShooterGame.ShooterDamageType
// Size: 0x130 (Inherited: 0x48)
struct UShooterDamageType : UDamageType {
	struct FCanvasIcon KillIcon; // 0x48(0x18)
	struct TSoftClassPtr<UObject> Equippable; // 0x60(0x30)
	float HealthScale; // 0x90(0x04)
	float ShieldScale; // 0x94(0x04)
	bool bIgnoresShield; // 0x98(0x01)
	char pad_99[0x3]; // 0x99(0x03)
	float CharacterScale; // 0x9c(0x04)
	float ObjectScale; // 0xa0(0x04)
	bool bShowHitConfirm; // 0xa4(0x01)
	char pad_A5[0x3]; // 0xa5(0x03)
	struct AEffectContainer* CharacterHitFXC; // 0xa8(0x08)
	bool bApplySelfDamageMultiplier; // 0xb0(0x01)
	bool bApplyAllyDamageMultiplier; // 0xb1(0x01)
	bool bIgnoreFriendlyFire; // 0xb2(0x01)
	bool bIsNonLethal; // 0xb3(0x01)
	char pad_B4[0x4]; // 0xb4(0x04)
	struct FString DisplayName; // 0xb8(0x10)
	struct FText DisplayNameText; // 0xc8(0x18)
	enum class EAresDamageCategory DamageCategory; // 0xe0(0x01)
	enum class EAresDamageIndicationType DamageIndicationType; // 0xe1(0x01)
	enum class EAresHitIndicatorDisplayType HitIndicatorDisplayType; // 0xe2(0x01)
	enum class EAresHitSoundPlayType HitSoundPlayType; // 0xe3(0x01)
	enum class EAresDamageAnimationCategory DamageAnimationCategory; // 0xe4(0x01)
	char pad_E5[0x3]; // 0xe5(0x03)
	float DamagePhysicsScale; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)
	struct TArray<struct FDamagePenetration> Penetration; // 0xf0(0x10)
	struct ADamageSource* DamageSource; // 0x100(0x08)
	struct UMatineeCameraShake* OnHitHeadshotCameraMod; // 0x108(0x08)
	struct UMatineeCameraShake* OnHitMovingTargetCameraMod; // 0x110(0x08)
	bool bReportDeath; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct UAkAudioEvent* HitConfirmEventOverride; // 0x120(0x08)
	struct UAkAudioEvent* HitConfirmHeadshotEventOverride; // 0x128(0x08)

	void RespondToHealing(float HealTaken, struct AController* InstigatingController, struct AActor* HealCauser); // Function ShooterGame.ShooterDamageType.RespondToHealing // (Event|Public|BlueprintEvent|Const) // @ game+0x3520f50
	void RespondToDamage(struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterDamageType.RespondToDamage // (Event|Public|BlueprintEvent|Const) // @ game+0x3520f50
	void PlayHitConfirmSound(struct AShooterCharacter* FirstPersonShooterCharacter, struct AShooterCharacter* ShooterCharacterInstigator, struct AActor* HitActor, enum class EAresHitConfirmLocality HitLocality, enum class EAresRegionalDamage RegionalDamage, bool bLocalPlayerCanSeeVictim, float FalloffMultiplier, struct UDamageResponse* DamageResponse, bool bDied); // Function ShooterGame.ShooterDamageType.PlayHitConfirmSound // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x30b9b90
};

// Class ShooterGame.ShooterExplosionEffect
// Size: 0x410 (Inherited: 0x3d0)
struct AShooterExplosionEffect : AActor {
	struct UParticleSystem* ExplosionFX; // 0x3d0(0x08)
	struct UPointLightComponent* ExplosionLight; // 0x3d8(0x08)
	float ExplosionLightFadeOut; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
	struct UAkAudioEvent* ExplosionEvent; // 0x3e8(0x08)
	float ParticleTeamColor; // 0x3f0(0x04)
	char pad_3F4[0x4]; // 0x3f4(0x04)
	struct UParticleSystemComponent* ActiveParticleSystemComponent; // 0x3f8(0x08)
	char pad_400[0x10]; // 0x400(0x10)

	void SetTeamColor(float ColorScalar); // Function ShooterGame.ShooterExplosionEffect.SetTeamColor // (Native|Public|BlueprintCallable) // @ game+0x30bfc30
};

// Class ShooterGame.ShooterGame_Menu
// Size: 0x4f0 (Inherited: 0x4c0)
struct AShooterGame_Menu : AGameMode {
	char pad_4C0[0x30]; // 0x4c0(0x30)
};

// Class ShooterGame.ShooterGameGlobals
// Size: 0x828 (Inherited: 0x30)
struct UShooterGameGlobals : UObject {
	char pad_30[0xe8]; // 0x30(0xe8)
	struct FAresCheatData CheatData; // 0x118(0x70)
	struct FAresAccessibilityGlobals Accessibility; // 0x188(0x24)
	char pad_1AC[0x4]; // 0x1ac(0x04)
	struct FAresGameGlobals Game; // 0x1b0(0x48)
	struct FAresInputGlobals Input; // 0x1f8(0x14)
	char pad_20C[0x4]; // 0x20c(0x04)
	struct FAresAudioGlobals Audio; // 0x210(0x10)
	struct FAresHUDGlobals HUD; // 0x220(0x3c0)
	struct TArray<struct FAresTheme> Themes; // 0x5e0(0x10)
	struct FAresDecalManagerGlobals DecalManager; // 0x5f0(0x04)
	struct FAresStoreGlobals Store; // 0x5f4(0x08)
	struct FAresRespawnGlobals Respawn; // 0x5fc(0x08)
	char pad_604[0x4]; // 0x604(0x04)
	struct UAresSlateGlobals* SlateGlobals; // 0x608(0x08)
	struct TSoftClassPtr<UObject> SlateGlobalsAsset; // 0x610(0x30)
	struct UAresSlateGlobals* CachedSlateGlobals; // 0x640(0x08)
	struct UAresEquippableGlobals* EquippableGlobals; // 0x648(0x08)
	struct TSoftClassPtr<UObject> EquippableGlobalsAsset; // 0x650(0x30)
	struct UAresEquippableGlobals* CachedEquippableGlobals; // 0x680(0x08)
	struct TSoftClassPtr<UObject> WeaponsCatalog; // 0x688(0x30)
	struct AAresSkinCatalog* CachedWeaponsCatalog; // 0x6b8(0x08)
	struct TArray<struct FEquippedSkin> InitEquips; // 0x6c0(0x10)
	struct TArray<struct UHUDGlobalsDataAsset*> CachedHUDGlobals; // 0x6d0(0x10)
	struct TArray<struct UUIGlobalsDataAsset*> CachedUIGlobals; // 0x6e0(0x10)
	struct TArray<struct UCoreGlobalsDataAsset*> CachedCoreGlobals; // 0x6f0(0x10)
	struct TArray<struct UFrontendUIGlobalsDataAsset*> CachedFrontendUIGlobals; // 0x700(0x10)
	struct TArray<struct UPlatformSpecializedUIGlobalsDataAsset*> CachedPlatformSpecializedUIGlobals; // 0x710(0x10)
	struct TSoftClassPtr<UObject> WallPenetrationGlobalsAsset; // 0x720(0x30)
	struct UAresWallPenetrationGlobals* CachedWallPenetrationGlobals; // 0x750(0x08)
	struct TSoftClassPtr<UObject> NetworkingGlobalsAsset; // 0x758(0x30)
	struct UAresNetworkingGlobals* CachedNetworkingGlobals; // 0x788(0x08)
	struct TSoftObjectPtr<UMaterial> WatermarkMaterial; // 0x790(0x30)
	struct TSoftObjectPtr<UMaterial> WatermarkUIMaterial; // 0x7c0(0x30)
	char pad_7F0[0x20]; // 0x7f0(0x20)
	struct UGamepadTuningDataAsset* GamepadTuningData; // 0x810(0x08)
	char pad_818[0x10]; // 0x818(0x10)

	void OnMobileDefaultFoVChanged(enum class EGameRuleBoolName ToggleName, bool ToggleValue); // Function ShooterGame.ShooterGameGlobals.OnMobileDefaultFoVChanged // (Final|Native|Private) // @ game+0x30bfb60
	struct TSoftClassPtr<UObject> GetScreenFromUIGlobals(enum class EUIGlobalsScreenType DesiredScreenType); // Function ShooterGame.ShooterGameGlobals.GetScreenFromUIGlobals // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30bfa90
	struct TSoftClassPtr<UObject> GetScreenFromHUDGlobals(enum class EHUDGlobalsScreenType DesiredScreenType); // Function ShooterGame.ShooterGameGlobals.GetScreenFromHUDGlobals // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30bf9c0
	struct TSoftClassPtr<UObject> GetScreenFromFrontendUIGlobals(enum class EFrontendUIGlobalsScreenType DesiredScreenType); // Function ShooterGame.ShooterGameGlobals.GetScreenFromFrontendUIGlobals // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x30bf8f0
	float GetPlatformFOV(); // Function ShooterGame.ShooterGameGlobals.GetPlatformFOV // (Final|Native|Public|Const) // @ game+0x30bf8c0
	void GetGlobalUserWidgetsWithTagBlocking(struct FString Tag, struct TArray<struct UUserWidget*>& OutWidgetClasses); // Function ShooterGame.ShooterGameGlobals.GetGlobalUserWidgetsWithTagBlocking // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x30bf770
	void GetGlobalUIAssetsWithTagBlocking(struct FString Tag, struct TArray<struct UObject*>& OutAssets); // Function ShooterGame.ShooterGameGlobals.GetGlobalUIAssetsWithTagBlocking // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x30bf620
};

// Class ShooterGame.ShooterGameMode
// Size: 0x938 (Inherited: 0x4c0)
struct AShooterGameMode : AGameMode {
	struct TSet<enum class EGameModeSublevelKey> GameModeSublevelKeys; // 0x4c0(0x50)
	struct TArray<struct AAresEquippable*> StartingEquippableClasses; // 0x510(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> DefaultTotemClasses; // 0x520(0x10)
	bool bDisableCharacterMeshTickWhileInFogOfWar; // 0x530(0x01)
	char pad_531[0x7]; // 0x531(0x07)
	struct TArray<struct ULevelStreaming*> ClientOnlySublevelsToStream; // 0x538(0x10)
	struct FMulticastInlineDelegate OnRoundBegin; // 0x548(0x10)
	struct FMulticastInlineDelegate OnRoundEnd; // 0x558(0x10)
	struct FMulticastInlineDelegate OnPlayerKilled; // 0x568(0x10)
	struct FMulticastInlineDelegate OnPlayerSpawned; // 0x578(0x10)
	struct FMulticastInlineDelegate OnPhaseChange; // 0x588(0x10)
	struct FMulticastInlineDelegate OnGameplayActiveChange; // 0x598(0x10)
	struct FMulticastInlineDelegate OnDisconnectedPlayerDestroyed; // 0x5a8(0x10)
	struct FMulticastInlineDelegate OnPlayerDisassociated; // 0x5b8(0x10)
	struct FMulticastInlineDelegate OnRoundPlayersReady; // 0x5c8(0x10)
	struct FMulticastInlineDelegate OnGameRestart; // 0x5d8(0x10)
	struct FMulticastInlineDelegate OnReset; // 0x5e8(0x10)
	struct FMulticastInlineDelegate OnGameShutdown; // 0x5f8(0x10)
	struct APawn* BotPawnClass; // 0x608(0x08)
	struct TSoftClassPtr<UObject> BotPawnClassAsset; // 0x610(0x30)
	struct FString BotControllerClassPath; // 0x640(0x10)
	struct TSoftClassPtr<UObject> BotControllerClass; // 0x650(0x30)
	struct FMulticastInlineDelegate OnDefaultWeaponChanged; // 0x680(0x10)
	struct UAresGameEventLog* GameEventLog; // 0x690(0x08)
	struct UMatchResultEventCollector* MatchResultEventCollector; // 0x698(0x08)
	bool bAlwaysAllowWeaponSelling; // 0x6a0(0x01)
	bool bCarryOverPickedUpEquippablesToNextRound; // 0x6a1(0x01)
	bool bCarryOverAmmoToNextRound; // 0x6a2(0x01)
	char pad_6A3[0x5]; // 0x6a3(0x05)
	struct UAresCeremonyComponent* CeremonyComponent; // 0x6a8(0x08)
	struct UBehaviorScoreTrackerManagerComponent* BehaviorScoreTrackerManagerComponent; // 0x6b0(0x08)
	struct UVoteManagerComponent* VoteManagerComponent; // 0x6b8(0x08)
	struct UAFKDetectionComponent* AFKHandlingType; // 0x6c0(0x08)
	struct UGameModeReplayComponent* ReplayComponent; // 0x6c8(0x08)
	struct UDropInManagerComponent* DropInManagerComponent; // 0x6d0(0x08)
	struct UServerPerRoundTelemetryComponent* ServerPerRoundTelemetryComponent; // 0x6d8(0x08)
	struct UServerMovementTimingComponent* ServerMovementTimingComponent; // 0x6e0(0x08)
	char pad_6E8[0xc]; // 0x6e8(0x0c)
	int32_t KillScore; // 0x6f4(0x04)
	int32_t AssistScore; // 0x6f8(0x04)
	float DamageSelfScale; // 0x6fc(0x04)
	float DamageAllyScale; // 0x700(0x04)
	int32_t MaxBots; // 0x704(0x04)
	struct TArray<struct AShooterAIController*> BotControllers; // 0x708(0x10)
	struct UStateMachineComponent* StateMachine; // 0x718(0x08)
	struct AAresRespawnManager* RespawnManager; // 0x720(0x08)
	char pad_728[0x10]; // 0x728(0x10)
	float GameEventTickRate; // 0x738(0x04)
	float MaxRespawnDelay; // 0x73c(0x04)
	float MaxRespawnDelayTime; // 0x740(0x04)
	float MinRespawnDelayValue; // 0x744(0x04)
	struct AAresRespawnManager* RespawnManagerClass; // 0x748(0x08)
	struct TSoftClassPtr<UObject> RespawnManagerClassAsset; // 0x750(0x30)
	struct TMap<enum class EAresTeamRole, int32_t> SpawnSetForRole; // 0x780(0x50)
	struct TArray<struct FAresGameRewardTuning> KillBountyTable; // 0x7d0(0x10)
	struct TArray<struct FAresGameRewardTuning> DeathPenaltyTable; // 0x7e0(0x10)
	char pad_7F0[0x4]; // 0x7f0(0x04)
	float GamePhaseStartTime; // 0x7f4(0x04)
	float GameStateMachineStateStartTime; // 0x7f8(0x04)
	char pad_7FC[0x4]; // 0x7fc(0x04)
	struct UFogOfWarManagerComponent* FogOfWarManager; // 0x800(0x08)
	struct UServerTeamVisibilityComponent* ServerTeamVisibilityComponent; // 0x808(0x08)
	char pad_810[0x18]; // 0x810(0x18)
	struct UMegapacketComponent* MegapacketComponent; // 0x828(0x08)
	bool bIsLoadTestEnabled; // 0x830(0x01)
	char pad_831[0x1]; // 0x831(0x01)
	bool bGameplayStartsImmediately; // 0x832(0x01)
	bool bDownsampleServerCharacterAnims; // 0x833(0x01)
	int32_t ServerAnimUpdateRate; // 0x834(0x04)
	struct FGameServerInstanceInfo ServerInstanceInfo; // 0x838(0xb8)
	struct FMulticastInlineDelegate OnBuyPhaseUpdated; // 0x8f0(0x10)
	struct TArray<struct AShooterCharacter*> RegisteredCharactersNeedingEnemyHitRegInfo; // 0x900(0x10)
	bool bIsFriendlyFireEnabled; // 0x910(0x01)
	char pad_911[0x3]; // 0x911(0x03)
	float MaxSecondsToWaitForInactivePlayers; // 0x914(0x04)
	bool bIsRoundBeingReset; // 0x918(0x01)
	char pad_919[0x17]; // 0x919(0x17)
	bool bIsChangingRoles; // 0x930(0x01)
	char pad_931[0x7]; // 0x931(0x07)

	void UpdateSingleObfuscatedPlayerInformationForAllPlayers(struct AAresPlayerStateBase* SubjectPlayer, struct FObfuscatedPlayerInformation PlayerInformation); // Function ShooterGame.ShooterGameMode.UpdateSingleObfuscatedPlayerInformationForAllPlayers // (Final|Native|Protected) // @ game+0x30c6820
	void UpdateAwayPenaltiesForAllPlayers(); // Function ShooterGame.ShooterGameMode.UpdateAwayPenaltiesForAllPlayers // (Final|Native|Public|BlueprintCallable) // @ game+0x30c6800
	void UpdateAllObfuscatedPlayerInformationForPlayer(struct AAresPlayerStateBase* SubjectPlayer); // Function ShooterGame.ShooterGameMode.UpdateAllObfuscatedPlayerInformationForPlayer // (Final|Native|Public) // @ game+0x30c6770
	bool TeamIsNonEmptyAndAllDead(struct UBaseTeamComponent* WhichTeam); // Function ShooterGame.ShooterGameMode.TeamIsNonEmptyAndAllDead // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2fcfa70
	struct AAresBotController* SpawnBot(int32_t BotNumber); // Function ShooterGame.ShooterGameMode.SpawnBot // (Final|Native|Public|BlueprintCallable) // @ game+0x30c66d0
	bool ShouldUpdateObfuscatedPlayerInformationForPlayer(struct AAresPlayerStateBase* SubjectPlayer, struct AAresPlayerStateBase* PlayerToUpdate); // Function ShooterGame.ShooterGameMode.ShouldUpdateObfuscatedPlayerInformationForPlayer // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x30c65f0
	bool ShouldSwitchTeams(); // Function ShooterGame.ShooterGameMode.ShouldSwitchTeams // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x30c65b0
	void SetPhaseTimeRemaining(float Time); // Function ShooterGame.ShooterGameMode.SetPhaseTimeRemaining // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void SetIsFriendlyFireEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.SetIsFriendlyFireEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x30c6520
	int32_t SetFogOfWarEnabled(int32_t NewValue); // Function ShooterGame.ShooterGameMode.SetFogOfWarEnabled // (Final|Native|Protected) // @ game+0x30c6480
	void SetBotsToSpawn(int32_t NumBotsToSpawn); // Function ShooterGame.ShooterGameMode.SetBotsToSpawn // (Final|Exec|Native|Public) // @ game+0x2ca3d20
	void OnPlayerConnectionStatusChanged(struct AAresPlayerStateBase* SubjectPlayer, enum class EConnectionStatus OldStatus, enum class EConnectionStatus NewStatus); // Function ShooterGame.ShooterGameMode.OnPlayerConnectionStatusChanged // (Final|Native|Public) // @ game+0x30c6370
	void OnPhaseChanged(enum class EAresGamePhase NewPhase); // Function ShooterGame.ShooterGameMode.OnPhaseChanged // (Final|Native|Private) // @ game+0x30c62f0
	void OnAuthWinRound(struct UBaseTeamComponent* WinningTeam); // Function ShooterGame.ShooterGameMode.OnAuthWinRound // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnAuthSetUpGameOverrides(); // Function ShooterGame.ShooterGameMode.OnAuthSetUpGameOverrides // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnAuthRoundEnd(); // Function ShooterGame.ShooterGameMode.OnAuthRoundEnd // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnAuthRoundBegin(); // Function ShooterGame.ShooterGameMode.OnAuthRoundBegin // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	bool IsTeamSameParty(struct UBaseTeamComponent* TargetTeam); // Function ShooterGame.ShooterGameMode.IsTeamSameParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c6250
	bool IsSpawnpointValid(struct AShooterTeamStart* SpawnPoint, struct AShooterPlayerState* PlayerState); // Function ShooterGame.ShooterGameMode.IsSpawnpointValid // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent|Const) // @ game+0x30c6170
	bool IsSpawnpointAllowed(struct AShooterTeamStart* SpawnPoint, struct AShooterPlayerState* Player); // Function ShooterGame.ShooterGameMode.IsSpawnpointAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2df2c10
	bool IsMatchTimeoutActive(); // Function ShooterGame.ShooterGameMode.IsMatchTimeoutActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c6140
	bool IsChangingRoles(); // Function ShooterGame.ShooterGameMode.IsChangingRoles // (Final|Native|Public|Const) // @ game+0x30c6110
	bool HasAnyObservers(); // Function ShooterGame.ShooterGameMode.HasAnyObservers // (Final|Native|Public|BlueprintCallable) // @ game+0x30c60e0
	struct UVoteManagerComponent* GetVoteManagerComponent(); // Function ShooterGame.ShooterGameMode.GetVoteManagerComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x30c60b0
	struct UStateMachineComponent* GetStateMachineComponent(); // Function ShooterGame.ShooterGameMode.GetStateMachineComponent // (Final|Native|Public|Const) // @ game+0x2cf60e0
	struct UServerMovementTimingComponent* GetServerMovementTimingComponent(); // Function ShooterGame.ShooterGameMode.GetServerMovementTimingComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c6080
	struct AAresRespawnManager* GetRespawnManager(); // Function ShooterGame.ShooterGameMode.GetRespawnManager // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x23b2e20
	int32_t GetPlayersAliveCount(struct UBaseTeamComponent* WhichTeam); // Function ShooterGame.ShooterGameMode.GetPlayersAliveCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c5fe0
	int32_t GetNumCharactersNeedingEnemyHitRegInfo(struct UBaseTeamComponent* WhichTeam); // Function ShooterGame.ShooterGameMode.GetNumCharactersNeedingEnemyHitRegInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c5fe0
	struct FString GetMatchID(); // Function ShooterGame.ShooterGameMode.GetMatchID // (Final|Native|Public|Const) // @ game+0x30c5f50
	bool GetIsFriendlyFireEnabled(); // Function ShooterGame.ShooterGameMode.GetIsFriendlyFireEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c5f20
	enum class EProvisioningFlowID GetGameProvisioningFlowID(); // Function ShooterGame.ShooterGameMode.GetGameProvisioningFlowID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c5ef0
	int32_t GetFogOfWarEnabled(); // Function ShooterGame.ShooterGameMode.GetFogOfWarEnabled // (Final|Native|Public|Const) // @ game+0x30c5ec0
	struct UBehaviorScoreTrackerManagerComponent* GetBehaviorScoreTrackerManagerComponent(); // Function ShooterGame.ShooterGameMode.GetBehaviorScoreTrackerManagerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c5e90
	void EnablePlayerStartsByTagAndAlliance(struct FName MatchTag, struct UObject* SourceObject, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterGameMode.EnablePlayerStartsByTagAndAlliance // (Final|Native|Public|BlueprintCallable) // @ game+0x30c5d60
	void EnablePlayerStarts(); // Function ShooterGame.ShooterGameMode.EnablePlayerStarts // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void DisablePlayerStartsByTagAndAlliance(struct FName MatchTag, struct UObject* SourceObject, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterGameMode.DisablePlayerStartsByTagAndAlliance // (Final|Native|Public|BlueprintCallable) // @ game+0x30c5d60
	void DisablePlayerStarts(); // Function ShooterGame.ShooterGameMode.DisablePlayerStarts // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	float ChooseSpawnRotation(struct AShooterTeamStart* ShooterTeamStart, struct AShooterPlayerState* Player); // Function ShooterGame.ShooterGameMode.ChooseSpawnRotation // (Native|Event|Public|BlueprintEvent) // @ game+0x30c5c80
	struct AActor* ChooseSpawnPoint(struct AShooterPlayerState* Player); // Function ShooterGame.ShooterGameMode.ChooseSpawnPoint // (Native|Event|Public|BlueprintEvent) // @ game+0x30c5bd0
	void CheatWinGame(struct UBaseTeamComponent* WinningTeam); // Function ShooterGame.ShooterGameMode.CheatWinGame // (BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void CheatSetDefaultWeapon(struct UAresPurchasable*& DefaultWeapon); // Function ShooterGame.ShooterGameMode.CheatSetDefaultWeapon // (Final|Native|Public|HasOutParms) // @ game+0x2d600f0
	void CheatEndGamePhase(); // Function ShooterGame.ShooterGameMode.CheatEndGamePhase // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void CheatAdvanceToOvertime(); // Function ShooterGame.ShooterGameMode.CheatAdvanceToOvertime // (BlueprintAuthorityOnly|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	bool CanPlayOnKillEffects(struct AShooterCharacter* Victim); // Function ShooterGame.ShooterGameMode.CanPlayOnKillEffects // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x30c5b20
	void AuthWinRound(struct UBaseTeamComponent* NewWinnerTeam, enum class EAresRoundOutcome RoundResult, bool ShouldAddPoints); // Function ShooterGame.ShooterGameMode.AuthWinRound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30c5a00
	void AuthWinGame(struct UBaseTeamComponent* NewWinnerTeam); // Function ShooterGame.ShooterGameMode.AuthWinGame // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthSwitchTeamRoles(enum class EAresTeamRole FirstRole, enum class EAresTeamRole SecondRole); // Function ShooterGame.ShooterGameMode.AuthSwitchTeamRoles // (Final|Native|Public|BlueprintCallable) // @ game+0x2cf5be0
	void AuthStartRound(); // Function ShooterGame.ShooterGameMode.AuthStartRound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	bool AuthStartMatchTimeout(float Duration, struct AShooterPlayerState* CallingPlayer); // Function ShooterGame.ShooterGameMode.AuthStartMatchTimeout // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x30c5920
	void AuthStartMatch(); // Function ShooterGame.ShooterGameMode.AuthStartMatch // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30c5900
	void AuthSignalClientsToLoadClientOnlySublevels(); // Function ShooterGame.ShooterGameMode.AuthSignalClientsToLoadClientOnlySublevels // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x30c58e0
	void AuthShutdown(); // Function ShooterGame.ShooterGameMode.AuthShutdown // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthSetUpGameOverrides(); // Function ShooterGame.ShooterGameMode.AuthSetUpGameOverrides // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthSetStoreEnabled(bool bIsStoreEnabled); // Function ShooterGame.ShooterGameMode.AuthSetStoreEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetSpawnSetForRole(enum class EAresTeamRole TeamRole, int32_t SpawnSet); // Function ShooterGame.ShooterGameMode.AuthSetSpawnSetForRole // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30c5810
	void AuthSetPauseMatchTimer(bool bIsMatchTimerPaused); // Function ShooterGame.ShooterGameMode.AuthSetPauseMatchTimer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetIntentionEnabled(bool bIsIntentionEnabled); // Function ShooterGame.ShooterGameMode.AuthSetIntentionEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetInfiniteReserveEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetInfiniteReserveEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetInfiniteMoneyEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetInfiniteMoneyEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetInfiniteAmmoEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetInfiniteAmmoEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetInfiniteAbilitiesEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetInfiniteAbilitiesEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetIgnoreShoppingRestrictionsEnabled(bool bIsEnabled); // Function ShooterGame.ShooterGameMode.AuthSetIgnoreShoppingRestrictionsEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetGameplayEnabled(bool bIsGameplayEnabled); // Function ShooterGame.ShooterGameMode.AuthSetGameplayEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthRoundEnded(); // Function ShooterGame.ShooterGameMode.AuthRoundEnded // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthResetRound(bool PersistState); // Function ShooterGame.ShooterGameMode.AuthResetRound // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthResetGameWithNewRoundResults(struct TArray<struct FAresRoundResult>& NewResults); // Function ShooterGame.ShooterGameMode.AuthResetGameWithNewRoundResults // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x30c5730
	void AuthResetGame(); // Function ShooterGame.ShooterGameMode.AuthResetGame // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d5e480
	void AuthReplicateClientOnlySublevels(struct APlayerController* PC); // Function ShooterGame.ShooterGameMode.AuthReplicateClientOnlySublevels // (Final|Native|Private) // @ game+0x30c56a0
	void AuthOnPlayerAfkStatusChanged(struct AShooterPlayerState* SubjectPlayer, bool bIsAFK); // Function ShooterGame.ShooterGameMode.AuthOnPlayerAfkStatusChanged // (Final|Native|Public) // @ game+0x30c55d0
	void AuthLockInLoadoutValues(); // Function ShooterGame.ShooterGameMode.AuthLockInLoadoutValues // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthLoadGameModeSpecificSublevels(); // Function ShooterGame.ShooterGameMode.AuthLoadGameModeSpecificSublevels // (Final|BlueprintAuthorityOnly|Native|Protected|BlueprintCallable) // @ game+0x30c55b0
	bool AuthIsServerStreamingLevels(); // Function ShooterGame.ShooterGameMode.AuthIsServerStreamingLevels // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9a0
	int32_t AuthGetSpawnSetForRole(enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameMode.AuthGetSpawnSetForRole // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c5520
	struct TArray<struct AShooterTeamStart*> AuthGetSpawnPointsForTeam(struct UBaseTeamComponent* Team, enum class EBlockedSpawnPointBehavior BlockedSpawnPointBehavior, float BlockCheckHalfHeight, float BlockCheckRadius); // Function ShooterGame.ShooterGameMode.AuthGetSpawnPointsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30c5350
	bool AuthGetShouldSpawnPlayer(struct AShooterPlayerState* Player); // Function ShooterGame.ShooterGameMode.AuthGetShouldSpawnPlayer // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x30c52a0
	float AuthGetRoundTimeElapsed(); // Function ShooterGame.ShooterGameMode.AuthGetRoundTimeElapsed // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e5f380
	struct TArray<struct ARoundStartRewardSpawnPoint*> AuthGetRoundStartRewardSpawnPointsForTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameMode.AuthGetRoundStartRewardSpawnPointsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30c51b0
	float AuthGetPhaseRemainingTime(); // Function ShooterGame.ShooterGameMode.AuthGetPhaseRemainingTime // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c5180
	void AuthGameplayCleanCharacterAbilities(struct AShooterCharacter* Character); // Function ShooterGame.ShooterGameMode.AuthGameplayCleanCharacterAbilities // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthGameModeCheatDisplayMessageToController(struct FString DisplayMessage, struct AShooterPlayerController* Controller); // Function ShooterGame.ShooterGameMode.AuthGameModeCheatDisplayMessageToController // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30c5040
	void AuthGameModeCheatDisplayMessageToClients(struct FString DisplayMessage); // Function ShooterGame.ShooterGameMode.AuthGameModeCheatDisplayMessageToClients // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e9a0
	void AuthGameModeCheat(struct FString CheatString, struct AShooterPlayerController* ExecutingController); // Function ShooterGame.ShooterGameMode.AuthGameModeCheat // (Final|Native|Public) // @ game+0x30c5040
	void AuthFinishMatchMarkCompleted(enum class EMatchCompletionState CompletionState); // Function ShooterGame.ShooterGameMode.AuthFinishMatchMarkCompleted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cedcd0
	void AuthFinishMatch(); // Function ShooterGame.ShooterGameMode.AuthFinishMatch // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthFinalizeMatchDetails(enum class EMatchCompletionState CompletionState); // Function ShooterGame.ShooterGameMode.AuthFinalizeMatchDetails // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x30c4fb0
	void AuthCancelMatchTimeout(); // Function ShooterGame.ShooterGameMode.AuthCancelMatchTimeout // (BlueprintAuthorityOnly|Native|Event|Public|BlueprintEvent) // @ game+0x30c4f80
	bool AuthAttemptStartMatchTimeout(float Duration, struct AShooterPlayerState* CallingPlayer); // Function ShooterGame.ShooterGameMode.AuthAttemptStartMatchTimeout // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30c4eb0
	void AuthApplyRoundEndRewards(); // Function ShooterGame.ShooterGameMode.AuthApplyRoundEndRewards // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	struct FString AssignRandomMatchId(); // Function ShooterGame.ShooterGameMode.AssignRandomMatchId // (Final|Native|Public) // @ game+0x30c4e20
	bool AreAllPlayersResponsive(); // Function ShooterGame.ShooterGameMode.AreAllPlayersResponsive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c4df0
	bool AreAllPlayersReadyToStart(); // Function ShooterGame.ShooterGameMode.AreAllPlayersReadyToStart // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9a0
};

// Class ShooterGame.ShooterGameSession
// Size: 0x4e8 (Inherited: 0x3f0)
struct AShooterGameSession : AGameSession {
	char pad_3F0[0xf8]; // 0x3f0(0xf8)
};

// Class ShooterGame.ShooterGameState
// Size: 0xbe0 (Inherited: 0x5a8)
struct AShooterGameState : AAresGameStateBase {
	float ExtraDeathcamFadeToBlackDuration; // 0x5a8(0x04)
	char pad_5AC[0x4]; // 0x5ac(0x04)
	struct UAresAimToolingTracker* AimToolingTracker; // 0x5b0(0x08)
	struct TArray<struct AAresCalloutRegion*> CalloutRegions; // 0x5b8(0x10)
	struct TArray<struct FCustomTeamColor> CustomTeamColors; // 0x5c8(0x10)
	enum class ECharacterColorationScheme CharacterColorationMode; // 0x5d8(0x01)
	bool bShowAFKStatusChangedInChat; // 0x5d9(0x01)
	bool bAllowCharacterSpecificStartingEquippables; // 0x5da(0x01)
	bool bAllowCharacterSpecificEquippablesInShop; // 0x5db(0x01)
	char pad_5DC[0x4]; // 0x5dc(0x04)
	struct TArray<struct UObject*> EnabledUIScreenCoordinators; // 0x5e0(0x10)
	int32_t NumTeamsToCreateOverride; // 0x5f0(0x04)
	char pad_5F4[0x4]; // 0x5f4(0x04)
	struct FAresMatchResult MatchResult; // 0x5f8(0x10)
	struct UBaseTeamComponent* PendingWinningTeam; // 0x608(0x08)
	char pad_610[0x8]; // 0x610(0x08)
	struct UBaseTeamComponent* WinnerOfLastRound; // 0x618(0x08)
	struct TArray<struct FAresTeamEconomy> TeamEconomy; // 0x620(0x10)
	struct FMulticastInlineDelegate OnTeamAverageLoadoutValueUpdated; // 0x630(0x10)
	struct AActor* SpectateFocusObject; // 0x640(0x08)
	struct TArray<struct FAresTeamInfo> TeamComponents; // 0x648(0x10)
	struct TArray<struct FMapPingData> MegaMapPings; // 0x658(0x10)
	struct TArray<struct FMapPingData> FirstPersonPings; // 0x668(0x10)
	struct UAresClientGameInstance* ClientGameInstance; // 0x678(0x08)
	struct FMulticastInlineDelegate OnMatchTimeoutStateChanged; // 0x680(0x10)
	struct FMulticastInlineDelegate OnMatchTimerPausedChanged; // 0x690(0x10)
	struct FMulticastInlineDelegate OnIgnoreShoppingRestrictionsChanged; // 0x6a0(0x10)
	int32_t NumPointsToWinGame; // 0x6b0(0x04)
	int32_t NumRoundsToSwitchTeams; // 0x6b4(0x04)
	struct FAresGameInfo GameInfo; // 0x6b8(0x48)
	float FriendlyDamageScale; // 0x700(0x04)
	float SelfDamageScale; // 0x704(0x04)
	struct FMulticastInlineDelegate OnPlayerStateListUpdated; // 0x708(0x10)
	char pad_718[0x10]; // 0x718(0x10)
	struct FMulticastInlineDelegate OnNotificationSystemUpdated; // 0x728(0x10)
	struct FMulticastInlineDelegate OnResetGame; // 0x738(0x10)
	float GearGivenAsBountyPercent; // 0x748(0x04)
	float BountyGivenToKillerVSTeamPercent; // 0x74c(0x04)
	float PercentToRefundDeadPlayersOnRoundWin; // 0x750(0x04)
	int32_t MaxBankedMoney; // 0x754(0x04)
	float DurationOfDamageAssist; // 0x758(0x04)
	float RechargeCostMultiplier; // 0x75c(0x04)
	char pad_760[0x30]; // 0x760(0x30)
	struct FMulticastInlineDelegate OnPlayerSpawn; // 0x790(0x10)
	struct FMulticastInlineDelegate OnCharacterSpawn; // 0x7a0(0x10)
	struct FMulticastInlineDelegate OnWeaponAttachmentSpawn; // 0x7b0(0x10)
	struct FMulticastInlineDelegate OnNonPlayerActorKilled; // 0x7c0(0x10)
	struct FMulticastInlineDelegate OnPlayerKill; // 0x7d0(0x10)
	struct FMulticastInlineDelegate AuthOnPlayerKilledAndProcessed; // 0x7e0(0x10)
	struct FMulticastInlineDelegate OnPlayerTemporaryDeath; // 0x7f0(0x10)
	struct FMulticastInlineDelegate OnPlayerRecovery; // 0x800(0x10)
	struct FMulticastInlineDelegate OnPlayerResurrect; // 0x810(0x10)
	float TimeToBuyOnceRoundBegins; // 0x820(0x04)
	float TimeToSetPlayerIntentionOnceRoundBegins; // 0x824(0x04)
	float PlayerIntentionFadeTime; // 0x828(0x04)
	int32_t HeavyWeaponCostThreshold; // 0x82c(0x04)
	struct FMulticastInlineDelegate OnRoundNumberChanged; // 0x830(0x10)
	char pad_840[0x30]; // 0x840(0x30)
	int32_t MinSecondsBetweenPresenceUpdates; // 0x870(0x04)
	bool bForceReuseActorOnRespawnEnabled; // 0x874(0x01)
	bool bShouldShowPlayerWidgetBase; // 0x875(0x01)
	bool bScoreboardOmitsBots; // 0x876(0x01)
	char pad_877[0x1]; // 0x877(0x01)
	int32_t NetServerMaxTickRate; // 0x878(0x04)
	char pad_87C[0x4]; // 0x87c(0x04)
	struct FAresPlatformMatchInfo MatchInfo; // 0x880(0x10)
	struct UGameStateHUDConfig* GameStateHUDConfig; // 0x890(0x08)
	enum class EAresGamePhase StartingPhase; // 0x898(0x01)
	char pad_899[0x3]; // 0x899(0x03)
	int32_t RoundTime; // 0x89c(0x04)
	int32_t RoundEndingTime; // 0x8a0(0x04)
	bool bIsShoppingEnabled; // 0x8a4(0x01)
	char pad_8A5[0x3]; // 0x8a5(0x03)
	struct FMulticastInlineDelegate OnPointsUpdated; // 0x8a8(0x10)
	char pad_8B8[0x10]; // 0x8b8(0x10)
	struct FMulticastInlineDelegate OnDropInEnabledUpdated; // 0x8c8(0x10)
	struct FMulticastInlineDelegate OnGameplayActiveChanged; // 0x8d8(0x10)
	char pad_8E8[0x10]; // 0x8e8(0x10)
	struct FMulticastInlineDelegate OnCharacterSwitched; // 0x8f8(0x10)
	struct FMulticastInlineDelegate OnStrategicOutcomesUpdated; // 0x908(0x10)
	struct FMulticastInlineDelegate OnChosenCeremonyForRoundUpdated; // 0x918(0x10)
	struct TArray<struct TSoftClassPtr<UObject>> CriticalGameItemClasses; // 0x928(0x10)
	struct TArray<struct AAresEquippable*> AllowlistedEquippablesToAlwaysDrop; // 0x938(0x10)
	struct TArray<struct FAresRoundResult> RoundResults; // 0x948(0x10)
	struct TArray<struct FStrategicOutcomeOfRound> StrategicOutcomes; // 0x958(0x10)
	struct AAresCeremony* ChosenCeremonyForRound; // 0x968(0x08)
	int32_t RoundNumber; // 0x970(0x04)
	char pad_974[0x4]; // 0x974(0x04)
	struct FString DebugMessage; // 0x978(0x10)
	struct UAresStore* Store; // 0x988(0x08)
	struct TSoftClassPtr<UObject> StoreAsset; // 0x990(0x30)
	struct UAresStore* CachedStore; // 0x9c0(0x08)
	uint32_t TotalServerLogLinesRecorded; // 0x9c8(0x04)
	char pad_9CC[0x4]; // 0x9cc(0x04)
	struct TArray<struct FAresGameRewardTuning> GameRewardsTable; // 0x9d0(0x10)
	struct UDecalManager* DecalManager; // 0x9e0(0x08)
	struct UClientPerRoundTelemetryComponent* ClientPerRoundTelemetryComponent; // 0x9e8(0x08)
	struct UMobileDeviceTelemetryComponent* MobileDeviceTelemetryComponent; // 0x9f0(0x08)
	float AverageServerFrameTimeMs; // 0x9f8(0x04)
	char pad_9FC[0x4]; // 0x9fc(0x04)
	struct TArray<struct FAresDebugSphereReplicated> ReplicatedDebugSpheres; // 0xa00(0x10)
	struct TArray<struct FAresDebugLineReplicated> ReplicatedDebugLines; // 0xa10(0x10)
	struct TArray<struct FAresDebugTextReplicated> ReplicatedDebugText; // 0xa20(0x10)
	struct FMulticastInlineDelegate OnMatchBegin; // 0xa30(0x10)
	struct FMulticastInlineDelegate OnMatchEnd; // 0xa40(0x10)
	struct FMulticastInlineDelegate OnRoundBegin; // 0xa50(0x10)
	struct FMulticastInlineDelegate OnInRound; // 0xa60(0x10)
	struct FMulticastInlineDelegate OnRoundEnd; // 0xa70(0x10)
	struct FMulticastInlineDelegate OnGamePhaseChanged; // 0xa80(0x10)
	struct FMulticastInlineDelegate OnAllowedVoteTypesReplicated; // 0xa90(0x10)
	struct UBasePerformanceMonitoringComponent* LocalPerformanceMonitoringComponent; // 0xaa0(0x08)
	enum class EAresGamePhase Phase; // 0xaa8(0x01)
	char pad_AA9[0x7]; // 0xaa9(0x07)
	struct TArray<struct AGameplayVote*> AllowedVoteTypes; // 0xab0(0x10)
	char pad_AC0[0x8]; // 0xac0(0x08)
	struct AAresSoundHandler* SoundHandler; // 0xac8(0x08)
	struct AAresActorSoundPool* ActorSoundPool; // 0xad0(0x08)
	struct UOnGroundEquippableSearchComponent* OnGroundEquippableSearchComponent; // 0xad8(0x08)
	struct AAresDroppedEquippable* DroppedEquippable; // 0xae0(0x08)
	struct AAresOnGroundEquippable* OnGroundEquippable; // 0xae8(0x08)
	int32_t PhaseAllowedGameInput; // 0xaf0(0x04)
	char pad_AF4[0x4]; // 0xaf4(0x04)
	struct URemoteNetworkedGameStateComponent* RemoteNetworkedGameStateComponent; // 0xaf8(0x08)
	struct UFixedMoveTimeStepManagerComponent* FixedMoveTimeStepManagerComponent; // 0xb00(0x08)
	struct URemoteClientMovementComponent* RemoteClientMovementComponent; // 0xb08(0x08)
	struct UGameDataExportComponent* GameDataExportComponent; // 0xb10(0x08)
	struct UOcclusionPathComponent* OcclusionPathComponent; // 0xb18(0x08)
	struct FMulticastInlineDelegate OnModifierManagerCreated; // 0xb20(0x10)
	struct TSoftClassPtr<UObject> ModifierManagerClass; // 0xb30(0x30)
	struct AGameModifierManager* ModifierManager; // 0xb60(0x08)
	struct FDegradedNetworkSimulationPresets DegradedNetworkSimulationPresets; // 0xb68(0x10)
	struct FCurrentNetworkSimulationSettings CurrentNetworkSimulationSettings; // 0xb78(0x18)
	char pad_B90[0x8]; // 0xb90(0x08)
	struct USprayEquipSlotDataAsset* SprayContextSocket; // 0xb98(0x08)
	struct UDebugSubscriptionComponent* DebugSubscriptionComponent; // 0xba0(0x08)
	struct UGameModeDataAsset* GameModeDataAsset; // 0xba8(0x08)
	struct TArray<struct FRoundParticipantsInfo> RoundParticipantsInfos; // 0xbb0(0x10)
	char pad_BC0[0x10]; // 0xbc0(0x10)
	struct UImpactEffectManagerComponent* ImpactEffectManager; // 0xbd0(0x08)
	struct UEffectPoolManagerComponent* EffectPoolManager; // 0xbd8(0x08)

	void WeaponAttachmentSpawned(struct UAresWeaponAttachmentComponent* WeaponAttachment); // Function ShooterGame.ShooterGameState.WeaponAttachmentSpawned // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x30d58e0
	void UpdateGameplayActive(); // Function ShooterGame.ShooterGameState.UpdateGameplayActive // (Final|Native|Protected) // @ game+0x30d58c0
	bool TeamsHaveSwitched(); // Function ShooterGame.ShooterGameState.TeamsHaveSwitched // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x30d5880
	bool ShouldDoGameFlow(); // Function ShooterGame.ShooterGameState.ShouldDoGameFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30c4df0
	void SetSprayContextSocket(struct USprayEquipSlotDataAsset* SprayContext); // Function ShooterGame.ShooterGameState.SetSprayContextSocket // (Final|Native|Public|BlueprintCallable) // @ game+0x30d57f0
	void SetSpectateFocusObject(struct AActor* FocusObject); // Function ShooterGame.ShooterGameState.SetSpectateFocusObject // (Final|Native|Public|BlueprintCallable) // @ game+0x30d5760
	void SetShoppingEnabled(bool Enabled); // Function ShooterGame.ShooterGameState.SetShoppingEnabled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30d56d0
	void SetRoundNumber(int32_t NewRoundNumber); // Function ShooterGame.ShooterGameState.SetRoundNumber // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x30d5640
	void SetManualGarbageCollectionPending(bool InPending); // Function ShooterGame.ShooterGameState.SetManualGarbageCollectionPending // (Final|Native|Protected|BlueprintCallable) // @ game+0x30d55b0
	void SetCurrentGameStateHUDConfig(struct UGameStateHUDConfig* NewConfig); // Function ShooterGame.ShooterGameState.SetCurrentGameStateHUDConfig // (Final|Native|Public|BlueprintCallable) // @ game+0x30d5520
	void SetAllowedVoteTypes(struct TArray<struct AGameplayVote*> Types); // Function ShooterGame.ShooterGameState.SetAllowedVoteTypes // (Final|Native|Public) // @ game+0x30d5420
	void ReceiveTickDebug(); // Function ShooterGame.ShooterGameState.ReceiveTickDebug // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void PlayerListUpdated(); // Function ShooterGame.ShooterGameState.PlayerListUpdated // (Final|Native|Private) // @ game+0x30d5400
	void OnSimulateDegradedNetworkConditionsChanged(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterGameState.OnSimulateDegradedNetworkConditionsChanged // (Final|Native|Protected) // @ game+0x2cdbee0
	void OnRep_TeamComponents(struct TArray<struct FAresTeamInfo>& OldTeamComponents); // Function ShooterGame.ShooterGameState.OnRep_TeamComponents // (Final|Native|Protected|HasOutParms) // @ game+0x30d5350
	void OnRep_TeamAverageLoadoutValue(); // Function ShooterGame.ShooterGameState.OnRep_TeamAverageLoadoutValue // (Final|Native|Protected) // @ game+0x30d5330
	void OnRep_StrategicOutcomes(); // Function ShooterGame.ShooterGameState.OnRep_StrategicOutcomes // (Final|Native|Protected) // @ game+0x30d5310
	void OnRep_RoundResults(); // Function ShooterGame.ShooterGameState.OnRep_RoundResults // (Final|Native|Protected) // @ game+0x30d52f0
	void OnRep_RoundNumber(); // Function ShooterGame.ShooterGameState.OnRep_RoundNumber // (Final|Native|Protected) // @ game+0x30d52d0
	void OnRep_NotificationSystem(); // Function ShooterGame.ShooterGameState.OnRep_NotificationSystem // (Final|Native|Protected) // @ game+0x30d52b0
	void OnRep_NetServerMaxTickRate(); // Function ShooterGame.ShooterGameState.OnRep_NetServerMaxTickRate // (Final|Native|Public) // @ game+0x30d5290
	void OnRep_MatchResults(); // Function ShooterGame.ShooterGameState.OnRep_MatchResults // (Final|Native|Private) // @ game+0x30d5270
	void OnRep_GameStateHUDConfig(); // Function ShooterGame.ShooterGameState.OnRep_GameStateHUDConfig // (Final|Native|Protected) // @ game+0x30d5250
	void OnRep_GameInfo(struct FAresGameInfo& OldGameInfo); // Function ShooterGame.ShooterGameState.OnRep_GameInfo // (Final|Native|Public|HasOutParms) // @ game+0x30d5170
	void OnRep_CurrentNetworkSimulationSettings(); // Function ShooterGame.ShooterGameState.OnRep_CurrentNetworkSimulationSettings // (Final|Native|Protected) // @ game+0x1e6e7b0
	void OnRep_ChosenCeremonyForRound(); // Function ShooterGame.ShooterGameState.OnRep_ChosenCeremonyForRound // (Final|Native|Protected) // @ game+0x30d5150
	void OnRep_BroadcastModifierManagerCreated(); // Function ShooterGame.ShooterGameState.OnRep_BroadcastModifierManagerCreated // (Final|Native|Private) // @ game+0x30d5130
	void OnRep_AllowedVoteTypes(); // Function ShooterGame.ShooterGameState.OnRep_AllowedVoteTypes // (Final|Native|Private) // @ game+0x30d5110
	void OnPreInitGame(); // Function ShooterGame.ShooterGameState.OnPreInitGame // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnCharacterExitedTeamVisibility(struct AShooterCharacter* Character); // Function ShooterGame.ShooterGameState.OnCharacterExitedTeamVisibility // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void OnCharacterEnteredTeamVisibility(struct AShooterCharacter* Character); // Function ShooterGame.ShooterGameState.OnCharacterEnteredTeamVisibility // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void MulticastUpdateServerPerformanceInfoEx(float ServerFrameTimeMs, struct TArray<float> SubsystemFrameTimesMs); // Function ShooterGame.ShooterGameState.MulticastUpdateServerPerformanceInfoEx // (Net|Native|Event|NetMulticast|Protected) // @ game+0x30d5010
	void MulticastUpdateServerPerformanceInfo(float ServerFrameTimeMs); // Function ShooterGame.ShooterGameState.MulticastUpdateServerPerformanceInfo // (Net|Native|Event|NetMulticast|Protected) // @ game+0x30d4f80
	void MulticastSkillTestStartedEvent(); // Function ShooterGame.ShooterGameState.MulticastSkillTestStartedEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30d4f50
	void MulticastSkillTestEndedEvent(); // Function ShooterGame.ShooterGameState.MulticastSkillTestEndedEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30d4f20
	void MulticastSetSpectateFocusObject(struct AActor* FocusObject); // Function ShooterGame.ShooterGameState.MulticastSetSpectateFocusObject // (Net|NetReliableNative|Event|NetMulticast|Public|BlueprintCallable) // @ game+0x30d4e90
	void MulticastSetPhase(enum class EAresGamePhase NewPhase); // Function ShooterGame.ShooterGameState.MulticastSetPhase // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x30d4e00
	void MulticastReceivePlayerTemporaryDeathEvent(struct AShooterPlayerState* DamagerPlayer, struct AShooterPlayerState* DownedPlayer, struct UDamageResponse* DamageResponse, struct AAresEquippable* EquippableUsed, bool bRecoversInstantly); // Function ShooterGame.ShooterGameState.MulticastReceivePlayerTemporaryDeathEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30d4c50
	void MulticastReceivePlayerSpawnEvent(struct AShooterPlayerState* PlayerState, struct APawn* Pawn); // Function ShooterGame.ShooterGameState.MulticastReceivePlayerSpawnEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30d4b70
	void MulticastReceivePlayerResurrectEvent(struct AShooterPlayerState* ResurrectorPlayer, struct AShooterPlayerState* ResurrectedPlayer, int32_t KillNumberInRoundForResurrector, int32_t KillNumberInRoundForResurrected); // Function ShooterGame.ShooterGameState.MulticastReceivePlayerResurrectEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30d4a20
	void MulticastReceivePlayerRecoveryEvent(struct AShooterPlayerState* RecoveredByPlayerState, struct AShooterPlayerState* RecoveredPlayerState); // Function ShooterGame.ShooterGameState.MulticastReceivePlayerRecoveryEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30d4940
	void MulticastNotifyOnNonPlayerActorKilledEvent(struct AShooterPlayerState* KillerPlayer, struct AActor* KilledActor, struct AAresEquippable* UsedEquippable, bool bWasHeadshot); // Function ShooterGame.ShooterGameState.MulticastNotifyOnNonPlayerActorKilledEvent // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x30d47e0
	void MulticastEndRound(int32_t NewRoundNumber); // Function ShooterGame.ShooterGameState.MulticastEndRound // (Net|NetReliableNative|Event|NetMulticast|Public) // @ game+0x30d4750
	bool IsVoteTypeEnabled(struct AGameplayVote* Type); // Function ShooterGame.ShooterGameState.IsVoteTypeEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d46b0
	bool IsShoppingAllowed(); // Function ShooterGame.ShooterGameState.IsShoppingAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d4680
	bool IsRelevantForAnyEnemyTeam(struct AShooterCharacter* ShooterCharacter); // Function ShooterGame.ShooterGameState.IsRelevantForAnyEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d45e0
	bool IsNextRoundOvertime(); // Function ShooterGame.ShooterGameState.IsNextRoundOvertime // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x30d45a0
	bool IsMatchTimerPaused(); // Function ShooterGame.ShooterGameState.IsMatchTimerPaused // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d4570
	bool IsMatchTimeoutActive(); // Function ShooterGame.ShooterGameState.IsMatchTimeoutActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d4540
	bool IsInTeamSelect(); // Function ShooterGame.ShooterGameState.IsInTeamSelect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ced9a0
	bool IsInOvertime(); // Function ShooterGame.ShooterGameState.IsInOvertime // (Native|Event|Public|BlueprintCallable|BlueprintEvent|BlueprintPure|Const) // @ game+0x30d4440
	bool IsInfiniteReserveEnabled(); // Function ShooterGame.ShooterGameState.IsInfiniteReserveEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d4510
	bool IsInfiniteMoneyEnabled(); // Function ShooterGame.ShooterGameState.IsInfiniteMoneyEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d44e0
	bool IsInfiniteAmmoEnabled(); // Function ShooterGame.ShooterGameState.IsInfiniteAmmoEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d44b0
	bool IsInfiniteAbilitiesEnabled(); // Function ShooterGame.ShooterGameState.IsInfiniteAbilitiesEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d4480
	bool IsGameplayActive(); // Function ShooterGame.ShooterGameState.IsGameplayActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d4410
	bool IsDropInEnabled(); // Function ShooterGame.ShooterGameState.IsDropInEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d43e0
	bool HasPassedTimestamp(float Timestamp); // Function ShooterGame.ShooterGameState.HasPassedTimestamp // (Final|Native|Protected|Const) // @ game+0x30d4350
	int32_t GetWinsForTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.GetWinsForTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d42b0
	struct UBaseTeamComponent* GetWinningTeam(); // Function ShooterGame.ShooterGameState.GetWinningTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d4280
	int32_t GetTeamAverageLoadoutValue(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.GetTeamAverageLoadoutValue // (Final|Native|Public|BlueprintCallable) // @ game+0x30d41e0
	struct FStrategicOutcomeOfRound GetStrategicOutcomeForRound(int32_t InRoundNumber); // Function ShooterGame.ShooterGameState.GetStrategicOutcomeForRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d40f0
	struct AActor* GetSpectateFocusObject(); // Function ShooterGame.ShooterGameState.GetSpectateFocusObject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d40c0
	struct AAresSoundHandler* GetSoundHandler(); // Function ShooterGame.ShooterGameState.GetSoundHandler // (Final|Native|Public|Const) // @ game+0x30d4090
	struct TArray<struct AShooterPlayerState*> GetShooterPlayerStatesSortedByCharacterName(); // Function ShooterGame.ShooterGameState.GetShooterPlayerStatesSortedByCharacterName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d4000
	struct TArray<struct AShooterPlayerState*> GetShooterPlayerStates(bool bOmitCoaches); // Function ShooterGame.ShooterGameState.GetShooterPlayerStates // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3f10
	int32_t GetRoundTime(); // Function ShooterGame.ShooterGameState.GetRoundTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0680
	struct TArray<struct FAresRoundResult> GetRoundResults(); // Function ShooterGame.ShooterGameState.GetRoundResults // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3de0
	void GetRoundPenalizedPlayersForTeam(struct TArray<struct AShooterPlayerState*>& OutPlayers, int32_t RoundToGet, struct UBaseTeamComponent* TargetTeam); // Function ShooterGame.ShooterGameState.GetRoundPenalizedPlayersForTeam // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3ca0
	void GetRoundInfo(int32_t& OutRoundNumber, enum class EAresGamePhase& OutGamePhase); // Function ShooterGame.ShooterGameState.GetRoundInfo // (Final|Native|Public|HasOutParms|Const) // @ game+0x30d3bc0
	int32_t GetRoundEndingTime(); // Function ShooterGame.ShooterGameState.GetRoundEndingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ee0680
	enum class EAresTeamRole GetRoleForTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.GetRoleForTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3b20
	struct URemoteNetworkedGameStateComponent* GetRemoteNetworkedGameStateComponent(); // Function ShooterGame.ShooterGameState.GetRemoteNetworkedGameStateComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30d3af0
	int32_t GetPreRoundAddTime(int32_t RoundNumberIn); // Function ShooterGame.ShooterGameState.GetPreRoundAddTime // (Event|Protected|BlueprintEvent|Const) // @ game+0x3520f50
	int32_t GetPointsForTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.GetPointsForTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3a50
	struct TArray<struct AOwnerExclusivePlayerInfo*> GetPlayerInfos(bool bOmitCoaches); // Function ShooterGame.ShooterGameState.GetPlayerInfos // (Final|Native|Public|Const) // @ game+0x30d3960
	int32_t GetPlayerCount(); // Function ShooterGame.ShooterGameState.GetPlayerCount // (Final|Native|Public|Const) // @ game+0x30d3930
	struct AAresOnGroundEquippable* GetOnGroundEquippable(); // Function ShooterGame.ShooterGameState.GetOnGroundEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3910
	struct UOcclusionPathComponent* GetOcclusionPathComponent(); // Function ShooterGame.ShooterGameState.GetOcclusionPathComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d38e0
	int32_t GetNumTeams(); // Function ShooterGame.ShooterGameState.GetNumTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d38b0
	int32_t GetNumPenalizedPlayers(int32_t RoundToGet); // Function ShooterGame.ShooterGameState.GetNumPenalizedPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3810
	float GetMatchTimeoutTimeRemaining(); // Function ShooterGame.ShooterGameState.GetMatchTimeoutTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d37e0
	struct AShooterPlayerState* GetMatchTimeoutCallingPlayer(); // Function ShooterGame.ShooterGameState.GetMatchTimeoutCallingPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d37b0
	struct FStrategicOutcomeOfRound GetLatestStrategicOutcome(); // Function ShooterGame.ShooterGameState.GetLatestStrategicOutcome // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3730
	float GetGameStateMachineStateTotalLength(); // Function ShooterGame.ShooterGameState.GetGameStateMachineStateTotalLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3700
	float GetGameStateMachineStateElapsedTime(); // Function ShooterGame.ShooterGameState.GetGameStateMachineStateElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d36d0
	int32_t GetGameReward(struct FName RewardName, enum class EAresGameReward Type); // Function ShooterGame.ShooterGameState.GetGameReward // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d35d0
	float GetGamePhaseRemainingTime(bool bUsePredictedTime); // Function ShooterGame.ShooterGameState.GetGamePhaseRemainingTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3530
	enum class EAresGamePhase GetGamePhaseName(); // Function ShooterGame.ShooterGameState.GetGamePhaseName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3500
	float GetGamePhaseElapsedTime(); // Function ShooterGame.ShooterGameState.GetGamePhaseElapsedTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d34d0
	struct UGameModeDataAsset* GetGameModeDataAsset(); // Function ShooterGame.ShooterGameState.GetGameModeDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d34b0
	bool GetGameHasWinner(); // Function ShooterGame.ShooterGameState.GetGameHasWinner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3480
	struct UGameDataExportComponent* GetGameDataExportComponent(); // Function ShooterGame.ShooterGameState.GetGameDataExportComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30d3450
	struct UFixedMoveTimeStepManagerComponent* GetFixedMoveTimeStepManagerComponent(); // Function ShooterGame.ShooterGameState.GetFixedMoveTimeStepManagerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30d3420
	struct UBaseTeamComponent* GetFirstTeamForRole(enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameState.GetFirstTeamForRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3390
	struct UBaseTeamComponent* GetEnemyTeam(struct UBaseTeamComponent* AllyTeam); // Function ShooterGame.ShooterGameState.GetEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d32f0
	struct AAresDroppedEquippable* GetDroppedEquippable(); // Function ShooterGame.ShooterGameState.GetDroppedEquippable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d32d0
	bool GetCustomTeamColor(struct UObject* Object, struct FColor& OutCustomColor, bool bHUDColor); // Function ShooterGame.ShooterGameState.GetCustomTeamColor // (Final|Native|Static|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30d31b0
	int32_t GetCurrentRoundNumber(); // Function ShooterGame.ShooterGameState.GetCurrentRoundNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d3180
	struct UGameStateHUDConfig* GetCurrentGameStateHudConfigDefaultObject(); // Function ShooterGame.ShooterGameState.GetCurrentGameStateHudConfigDefaultObject // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30d3150
	struct UGameStateHUDConfig* GetCurrentGameStateHUDConfig(); // Function ShooterGame.ShooterGameState.GetCurrentGameStateHUDConfig // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30d3110
	struct UClientPerformanceMonitoringComponent* GetClientPerformanceMonitoringComponent(); // Function ShooterGame.ShooterGameState.GetClientPerformanceMonitoringComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30d30e0
	struct AAresCeremony* GetChosenCeremonyForEndedRound(); // Function ShooterGame.ShooterGameState.GetChosenCeremonyForEndedRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d30b0
	struct TArray<struct AAresCalloutRegion*> GetCalloutRegions(); // Function ShooterGame.ShooterGameState.GetCalloutRegions // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30d3020
	struct UAresStore* GetAresStore(); // Function ShooterGame.ShooterGameState.GetAresStore // (Final|Native|Public|BlueprintCallable) // @ game+0x30d2ff0
	struct TArray<struct UBaseTeamComponent*> GetAllTeamsForRole(enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameState.GetAllTeamsForRole // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d2e80
	struct TArray<struct UBaseTeamComponent*> GetAllTeamComponentsWithAlliance(struct UObject* Viewer, enum class EAresAlliance Alliance); // Function ShooterGame.ShooterGameState.GetAllTeamComponentsWithAlliance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d2d60
	struct TArray<struct UBaseTeamComponent*> GetAllTeamComponents(); // Function ShooterGame.ShooterGameState.GetAllTeamComponents // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d2cd0
	struct TArray<struct FStrategicOutcomeOfRound> GetAllStrategicOutcomes(); // Function ShooterGame.ShooterGameState.GetAllStrategicOutcomes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d2c10
	struct TArray<struct AGameplayVote*> GetAllowedVoteTypes(); // Function ShooterGame.ShooterGameState.GetAllowedVoteTypes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d2f60
	struct TArray<struct UBaseTeamComponent*> GetAllEnemyTeams(struct UBaseTeamComponent* AllyTeam); // Function ShooterGame.ShooterGameState.GetAllEnemyTeams // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d2b20
	struct AAresActorSoundPool* GetActorSoundPool(); // Function ShooterGame.ShooterGameState.GetActorSoundPool // (Final|Native|Public|Const) // @ game+0x30d2af0
	bool GameModeHidesMinimap(); // Function ShooterGame.ShooterGameState.GameModeHidesMinimap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d2ac0
	void FXCWarmEffectPools(); // Function ShooterGame.ShooterGameState.FXCWarmEffectPools // (Final|Exec|Native|Private) // @ game+0x30d2a90
	void FXCLogEffectPoolUsage(); // Function ShooterGame.ShooterGameState.FXCLogEffectPoolUsage // (Final|Exec|Native|Private|Const) // @ game+0x30d2a60
	void CycleOrbInSlot(int32_t Slot); // Function ShooterGame.ShooterGameState.CycleOrbInSlot // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	int32_t ComputeRoundPointValue(int32_t RoundNum, struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.ComputeRoundPointValue // (Native|Event|Public|BlueprintEvent|Const) // @ game+0x30d2980
	void ClientResetRound(); // Function ShooterGame.ShooterGameState.ClientResetRound // (Net|NetReliableNative|Event|NetMulticast|Public|NetClient) // @ game+0x30d2950
	void AuthUpdateDropInEnabled(bool bIsDropInEnabled); // Function ShooterGame.ShooterGameState.AuthUpdateDropInEnabled // (Final|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetWinsForTeam(struct UBaseTeamComponent* Team, int32_t Wins); // Function ShooterGame.ShooterGameState.AuthSetWinsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2f66720
	void AuthSetTeamRole(struct UBaseTeamComponent* Team, enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameState.AuthSetTeamRole // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d22c60
	void AuthSetPointsForTeam(struct UBaseTeamComponent* Team, int32_t Points); // Function ShooterGame.ShooterGameState.AuthSetPointsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2f66720
	void AuthSetMatchTimeoutState(enum class EAresMatchTimeoutState TimeoutState, float Duration, struct AShooterPlayerState* CallingPlayer); // Function ShooterGame.ShooterGameState.AuthSetMatchTimeoutState // (Final|Native|Public|BlueprintCallable) // @ game+0x30d2830
	void AuthSetMatchTimeout(float Duration); // Function ShooterGame.ShooterGameState.AuthSetMatchTimeout // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AuthResetTeamMoneyValue(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.AuthResetTeamMoneyValue // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthResetGame(); // Function ShooterGame.ShooterGameState.AuthResetGame // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthRemoveTeam(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.AuthRemoveTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthRecordPenalizedPlayerForRound(struct AShooterPlayerState* PenalizedPlayer); // Function ShooterGame.ShooterGameState.AuthRecordPenalizedPlayerForRound // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthPostStrategicOutcome(struct FStrategicOutcomeOfRound& StrategicOutcome); // Function ShooterGame.ShooterGameState.AuthPostStrategicOutcome // (Final|Native|Public|HasOutParms) // @ game+0x30d2750
	void AuthPostChosenCeremonyForRound(struct AAresCeremony* ChosenCeremony); // Function ShooterGame.ShooterGameState.AuthPostChosenCeremonyForRound // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthNotifyOnSkillTestStarted(); // Function ShooterGame.ShooterGameState.AuthNotifyOnSkillTestStarted // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthNotifyOnSkillTestEnded(); // Function ShooterGame.ShooterGameState.AuthNotifyOnSkillTestEnded // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthNotifyNonPlayerActorKilled(struct AShooterPlayerState* KillerPlayer, struct AActor* KilledActor, struct UDamageResponse* DamageResponse); // Function ShooterGame.ShooterGameState.AuthNotifyNonPlayerActorKilled // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2ca3b50
	int32_t AuthGetTeamInventoryAverageValue(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.AuthGetTeamInventoryAverageValue // (Final|Native|Public) // @ game+0x30c5fe0
	void AuthDrawDebugTextOnAllClients(struct FString Text, float LifeTime); // Function ShooterGame.ShooterGameState.AuthDrawDebugTextOnAllClients // (Final|BlueprintAuthorityOnly|Native|Public) // @ game+0x30d2650
	void AuthDrawDebugSphereOnAllClients(struct FVector& Center, float Radius, int32_t Segments, struct FColor& SphereColor, bool bPersistentLines, float LifeTime, char DepthPriority); // Function ShooterGame.ShooterGameState.AuthDrawDebugSphereOnAllClients // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults) // @ game+0x30d2410
	void AuthDrawDebugLineOnAllClients(struct FVector& LineStart, struct FVector& LineEnd, struct FColor& LineColor, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterGameState.AuthDrawDebugLineOnAllClients // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults) // @ game+0x30d21c0
	void AuthCountTeamMoneyValue(struct UBaseTeamComponent* Team); // Function ShooterGame.ShooterGameState.AuthCountTeamMoneyValue // (Final|Native|Public) // @ game+0x2cb4be0
	void AuthCancelMatchTimeout(); // Function ShooterGame.ShooterGameState.AuthCancelMatchTimeout // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthAddWinForTeam(struct UBaseTeamComponent* Team, enum class EAresRoundOutcome RoundResult); // Function ShooterGame.ShooterGameState.AuthAddWinForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d22c60
	void AuthAddPointsForTeam(struct UBaseTeamComponent* Team, int32_t NumPoints); // Function ShooterGame.ShooterGameState.AuthAddPointsForTeam // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2f66720
	void AuthAddNewTeam(struct UBaseTeamComponent* Team, enum class EAresTeamRole TeamRole); // Function ShooterGame.ShooterGameState.AuthAddNewTeam // (Final|Native|Public|BlueprintCallable) // @ game+0x2d22c60
	void ApplyNetworkDegradation(); // Function ShooterGame.ShooterGameState.ApplyNetworkDegradation // (Final|Native|Protected) // @ game+0x1e6e7b0
	bool AllowsMatchTimeouts(); // Function ShooterGame.ShooterGameState.AllowsMatchTimeouts // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d2190
	void AddDebugLine(struct FString Message); // Function ShooterGame.ShooterGameState.AddDebugLine // (Final|Native|Protected|BlueprintCallable) // @ game+0x1e6e9a0
};

// Class ShooterGame.ShooterGameUserSettings
// Size: 0x1d8 (Inherited: 0x130)
struct UShooterGameUserSettings : UGameUserSettings {
	struct FMulticastInlineDelegate OnMonitorInfoChanged; // 0x130(0x10)
	struct FString DefaultMonitorDeviceID; // 0x140(0x10)
	int32_t DefaultMonitorIndex; // 0x150(0x04)
	char pad_154[0x4]; // 0x154(0x04)
	struct FString LastConfirmedDefaultMonitorDeviceID; // 0x158(0x10)
	int32_t LastConfirmedDefaultMonitorIndex; // 0x168(0x04)
	bool bShouldLetterbox; // 0x16c(0x01)
	bool bLastConfirmedShouldLetterbox; // 0x16d(0x01)
	char pad_16E[0x32]; // 0x16e(0x32)
	struct TArray<struct FAresMonitorInfo> AllMonitorInfo; // 0x1a0(0x10)
	char pad_1B0[0x20]; // 0x1b0(0x20)
	struct UAresSettingsManager* AresSettingsManager; // 0x1d0(0x08)

	void ValidateDefaultMonitor(); // Function ShooterGame.ShooterGameUserSettings.ValidateDefaultMonitor // (Final|Native|Public|BlueprintCallable) // @ game+0x30db670
	void SetDefaultMonitorByIndex(int32_t Index); // Function ShooterGame.ShooterGameUserSettings.SetDefaultMonitorByIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x30db000
	void SetDefaultMonitor(struct FString DeviceID, int32_t Index); // Function ShooterGame.ShooterGameUserSettings.SetDefaultMonitor // (Final|Native|Public|BlueprintCallable) // @ game+0x30daf00
	void OnUIQualityChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnUIQualityChanged // (Final|Native|Private) // @ game+0x30dac90
	void OnTextureQualityChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnTextureQualityChanged // (Final|Native|Private) // @ game+0x30dab80
	void OnSettingsInitialized(); // Function ShooterGame.ShooterGameUserSettings.OnSettingsInitialized // (Final|Native|Private) // @ game+0x30dab60
	void OnMouseInvertedChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.ShooterGameUserSettings.OnMouseInvertedChanged // (Final|Native|Private) // @ game+0x30daa40
	void OnIntSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnIntSettingChanged // (Final|Native|Private) // @ game+0x30da930
	void OnIntGraphicsQualityChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnIntGraphicsQualityChanged // (Final|Native|Private) // @ game+0x30da820
	void OnGraphicsQualityChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.ShooterGameUserSettings.OnGraphicsQualityChanged // (Final|Native|Private) // @ game+0x30da680
	void OnBoolSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.ShooterGameUserSettings.OnBoolSettingChanged // (Final|Native|Private) // @ game+0x30da560
	int32_t GetLastConfirmedDefaultMonitorIndex(); // Function ShooterGame.ShooterGameUserSettings.GetLastConfirmedDefaultMonitorIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30da0e0
	struct FString GetLastConfirmedDefaultMonitorDeviceID(); // Function ShooterGame.ShooterGameUserSettings.GetLastConfirmedDefaultMonitorDeviceID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30da0a0
	int32_t GetDefaultMonitorIndex(); // Function ShooterGame.ShooterGameUserSettings.GetDefaultMonitorIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d9fa0
	struct FString GetDefaultMonitorDeviceID(); // Function ShooterGame.ShooterGameUserSettings.GetDefaultMonitorDeviceID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d9f60
};

// Class ShooterGame.ShooterHUD
// Size: 0xa60 (Inherited: 0x4d0)
struct AShooterHUD : AHUD {
	struct FAresHudTuning HudTuning; // 0x4d0(0x04)
	char pad_4D4[0x4]; // 0x4d4(0x04)
	struct FAresDebugHudTuning DebugHudTuning; // 0x4d8(0x80)
	struct FCharacterHUD CharacterDisplay; // 0x558(0x60)
	struct FAnnouncerHUD AnnouncerDisplay; // 0x5b8(0x04)
	char pad_5BC[0x4]; // 0x5bc(0x04)
	struct FCanvasIcon SprayVelocityIndicatorIcon; // 0x5c0(0x18)
	struct FCanvasIcon RemoteActivatableHighlightIcon; // 0x5d8(0x18)
	struct FColor CrossHairDrawColor; // 0x5f0(0x04)
	char pad_5F4[0x14]; // 0x5f4(0x14)
	struct UFont* BigFont; // 0x608(0x08)
	struct UFont* NormalFont; // 0x610(0x08)
	struct UFont* CustomFont; // 0x618(0x08)
	struct UFont* CustomFont2; // 0x620(0x08)
	struct UFont* CustomFont3; // 0x628(0x08)
	struct UFont* EndOfRoundFont; // 0x630(0x08)
	struct UFont* FixedWidthFont; // 0x638(0x08)
	float IntentionPortraitPadding; // 0x640(0x04)
	char pad_644[0x4]; // 0x644(0x04)
	struct UTexture* IntentionHighlightTexture; // 0x648(0x08)
	struct UTexture* MissingIntentionPortraitTexture; // 0x650(0x08)
	char pad_658[0x8]; // 0x658(0x08)
	struct UShooterUICoordinator* Coordinator; // 0x660(0x08)
	struct TWeakObjectPtr<struct UAresWidgetRegistry> CachedWidgetRegistry; // 0x668(0x08)
	struct FColor HUDLight; // 0x670(0x04)
	struct FColor HUDDark; // 0x674(0x04)
	struct FCanvasIcon VictoryIcon; // 0x678(0x18)
	struct FCanvasIcon DefeatIcon; // 0x690(0x18)
	struct FCanvasIcon TieIcon; // 0x6a8(0x18)
	char pad_6C0[0x4]; // 0x6c0(0x04)
	bool bDisableHitNotify; // 0x6c4(0x01)
	char pad_6C5[0x3]; // 0x6c5(0x03)
	float HitNotifyDisplayTime; // 0x6c8(0x04)
	struct FVector HitNotifyCenterOffset; // 0x6cc(0x0c)
	float HitNotifyMinimumAlpha; // 0x6d8(0x04)
	struct FColor HitNotifyHealthColor; // 0x6dc(0x04)
	struct FColor HitNotifyShieldColor; // 0x6e0(0x04)
	float YouHitEnemyFullAlphaTime; // 0x6e4(0x04)
	float YouHitEnemyFadeTime; // 0x6e8(0x04)
	float YouHitEnemyFadeFraction1; // 0x6ec(0x04)
	float YouHitEnemyFadeHeight1; // 0x6f0(0x04)
	float KillConfirmFullAlphaTime; // 0x6f4(0x04)
	float KillConfirmFadeTime; // 0x6f8(0x04)
	float KillConfirmFullAlpha; // 0x6fc(0x04)
	float KillConfirmPulseInTime; // 0x700(0x04)
	float KillConfirmPulseScale; // 0x704(0x04)
	struct FCanvasIcon KillNotifyCrosshair; // 0x708(0x18)
	float GrenadeIndicatorHudRadius; // 0x720(0x04)
	char pad_724[0x8]; // 0x724(0x08)
	float FXEndTime; // 0x72c(0x04)
	float FXStartTime; // 0x730(0x04)
	char pad_734[0x4]; // 0x734(0x04)
	struct UMaterialInstanceDynamic* AbilityFXMaterial; // 0x738(0x08)
	float ParticleSystemEndTime; // 0x740(0x04)
	char pad_744[0x4]; // 0x744(0x04)
	struct UParticleSystemComponent* AbilityParticleSystem; // 0x748(0x08)
	struct FCanvasIcon HitNotifyIcon; // 0x750(0x18)
	struct FCanvasIcon crosshair[0x5]; // 0x768(0x78)
	struct FCanvasIcon HitNotifyCrosshair; // 0x7e0(0x18)
	char pad_7F8[0x30]; // 0x7f8(0x30)
	float OffscreenNameAllowPercentage; // 0x828(0x04)
	float NameOffsetHeight; // 0x82c(0x04)
	struct FColor PlayerNames_AllyTeamColor; // 0x830(0x04)
	struct FColor PlayerNames_EnemyTeamColor; // 0x834(0x04)
	struct FColor PlayerNames_NeutralTeamColor; // 0x838(0x04)
	struct FColor PlayerNames_FullHealthColor; // 0x83c(0x04)
	struct FColor PlayerNames_ZeroHealthColor; // 0x840(0x04)
	float PlayerNames_HealthTextScale; // 0x844(0x04)
	struct UTexture2D* HitNotifyTexture; // 0x848(0x08)
	struct UTexture2D* HUDMainTexture; // 0x850(0x08)
	struct UTexture2D* HUDAssets02Texture; // 0x858(0x08)
	struct UTexture2D* LowHealthOverlayTexture; // 0x860(0x08)
	struct UTexture2D* CrossHairIcon; // 0x868(0x08)
	struct UTexture2D* AllyDownWorldspaceIcon; // 0x870(0x08)
	struct FVector AllyDownWorldspaceIconOffset; // 0x878(0x0c)
	struct FColor UsingBarColor; // 0x884(0x04)
	struct FColor UsingMessageColor; // 0x888(0x04)
	struct FColor UsingIconTint; // 0x88c(0x04)
	float UsingHUD_TextDistanceFromIcon; // 0x890(0x04)
	float UsingHUD_TextHeight; // 0x894(0x04)
	float UsingHUD_PaddingBetweenTextMessages; // 0x898(0x04)
	char pad_89C[0x44]; // 0x89c(0x44)
	struct FMulticastInlineDelegate ShooterHUDElementsFinished; // 0x8e0(0x10)
	struct FMulticastInlineDelegate SetShowBlindOverlayUpdated; // 0x8f0(0x10)
	struct FMulticastInlineDelegate ShowKillBannerUpdated; // 0x900(0x10)
	struct UPanelWidget* AbilityHUDParent; // 0x910(0x08)
	char pad_918[0x1]; // 0x918(0x01)
	bool bShowBlindOverlay; // 0x919(0x01)
	bool bShowKillBanners; // 0x91a(0x01)
	char pad_91B[0x5]; // 0x91b(0x05)
	struct TArray<struct UAresHudElement*> DebugHudElementClasses; // 0x920(0x10)
	struct TArray<struct UAresHudElement*> HUDElements; // 0x930(0x10)
	struct UBaseCrosshairHudElement* CrosshairHUDElement; // 0x940(0x08)
	bool bHudElementsInitCalled; // 0x948(0x01)
	char pad_949[0xef]; // 0x949(0xef)
	struct TArray<struct AActor*> QueuedActorsForDebugDrawName; // 0xa38(0x10)
	struct TArray<struct USceneComponent*> QueuedComponentsForDebugDrawName; // 0xa48(0x10)
	char pad_A58[0x4]; // 0xa58(0x04)
	float LastUpdateTime; // 0xa5c(0x04)

	void StopAbilityHUDParticle(); // Function ShooterGame.ShooterHUD.StopAbilityHUDParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x30db650
	void StopAbilityHUDFX(); // Function ShooterGame.ShooterHUD.StopAbilityHUDFX // (Final|Native|Public|BlueprintCallable) // @ game+0x30db630
	struct UParticleSystemComponent* StartAbilityHUDParticle(struct UParticleSystem* EmitterTemplate, struct USceneComponent* AttachToComponent, struct FName AttachSocket, float EffectDuration, bool bAutoDestoy); // Function ShooterGame.ShooterHUD.StartAbilityHUDParticle // (Final|Native|Public|BlueprintCallable) // @ game+0x30db480
	struct UMaterialInstanceDynamic* StartAbilityHUDFX(struct UMaterialInstance* HUDEffectMaterialMI, float EffectDuration); // Function ShooterGame.ShooterHUD.StartAbilityHUDFX // (Final|Native|Public|BlueprintCallable) // @ game+0x30db3b0
	void ShowClientErrorMessageText(struct FText& Text, float Duration); // Function ShooterGame.ShooterHUD.ShowClientErrorMessageText // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x30db2b0
	void ShowClientErrorMessage(struct FString Text, float Duration); // Function ShooterGame.ShooterHUD.ShowClientErrorMessage // (Final|Native|Public|BlueprintCallable) // @ game+0x30db1b0
	void SetShowCrosshair(bool bInShowCrosshair); // Function ShooterGame.ShooterHUD.SetShowCrosshair // (Final|Native|Public|BlueprintCallable) // @ game+0x30db120
	void SetInformationalScreenVisibility(bool Visible); // Function ShooterGame.ShooterHUD.SetInformationalScreenVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x30db090
	void SetAbilityHUDParent(struct UPanelWidget* NewAbilityHUDParent); // Function ShooterGame.ShooterHUD.SetAbilityHUDParent // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x30dae70
	void RemoveWidgetLookup(struct UUserWidget* Widget, struct UObject* OverrideClassKey); // Function ShooterGame.ShooterHUD.RemoveWidgetLookup // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x30dada0
	void OnPlayerHit(float DamageTaken, struct APawn* PawnInstigator, struct AShooterCharacter* HitPawn); // Function ShooterGame.ShooterHUD.OnPlayerHit // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnPlayerHealed(float HealAmount, struct APawn* PawnInstigator, struct AShooterCharacter* HealedPawn); // Function ShooterGame.ShooterHUD.OnPlayerHealed // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
	void OnHideHUDChanged(bool bHideUI); // Function ShooterGame.ShooterHUD.OnHideHUDChanged // (Final|Native|Public) // @ game+0x30da790
	void OnBlindSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.ShooterHUD.OnBlindSettingChanged // (Final|Native|Protected) // @ game+0x30da440
	void NotifyEnemyKilled(struct AShooterCharacter* KilledCharacter, int32_t MultikillLevel); // Function ShooterGame.ShooterHUD.NotifyEnemyKilled // (Final|Native|Public) // @ game+0x30da370
	void NotifyEnemyHit(); // Function ShooterGame.ShooterHUD.NotifyEnemyHit // (Final|Native|Public|BlueprintCallable) // @ game+0x30da350
	struct UUserWidget* LookupWidget(struct UUserWidget* WidgetClass); // Function ShooterGame.ShooterHUD.LookupWidget // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x30da2b0
	bool IsBehindCamera(struct AActor* TargetActor, struct FVector CameraAimVector, struct FVector CameraLocation); // Function ShooterGame.ShooterHUD.IsBehindCamera // (Final|BlueprintCosmetic|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30da170
	struct UAresWidgetRegistry* GetWidgetRegistry(); // Function ShooterGame.ShooterHUD.GetWidgetRegistry // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30da140
	float GetScaleUI(); // Function ShooterGame.ShooterHUD.GetScaleUI // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30da110
	bool GetInformationalScreenVisibility(); // Function ShooterGame.ShooterHUD.GetInformationalScreenVisibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30da070
	struct UAresHudElement* GetHudElementByClass(struct UAresHudElement* ElementClass); // Function ShooterGame.ShooterHUD.GetHudElementByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d9fd0
	struct UCoordinatedHUDElement* GetCoordinatedHudElementByClass(struct UCoordinatedHUDElement* ElementClass); // Function ShooterGame.ShooterHUD.GetCoordinatedHudElementByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d9ec0
	struct FVector2D GetCanvasExtents(); // Function ShooterGame.ShooterHUD.GetCanvasExtents // (Final|Native|Protected|HasDefaults|BlueprintCallable) // @ game+0x30d9e80
	struct UPanelWidget* GetAbilityHUDParent(struct UObject* WorldContextObject); // Function ShooterGame.ShooterHUD.GetAbilityHUDParent // (Final|BlueprintCosmetic|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x30d9df0
	void DrawWorldspaceText(struct FVector& WorldspaceLocation, struct UFont* InFont, struct FString InText, struct FColor& TextColor, float XScale, float YScale); // Function ShooterGame.ShooterHUD.DrawWorldspaceText // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d9bc0
	void DrawWorldspaceLocalizedText(struct FVector& WorldspaceLocation, struct UFont* InFont, struct FText& InText, struct FColor& TextColor, float XScale, float YScale); // Function ShooterGame.ShooterHUD.DrawWorldspaceLocalizedText // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d9960
	void DrawWorldspaceIndicator(struct FVector& WorldspaceLocation, struct UTexture* IndicatorTexture, float IconScale, enum class EIconJustification IconJustification, struct FColor IconTint); // Function ShooterGame.ShooterHUD.DrawWorldspaceIndicator // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30d97b0
	void AddWidgetLookup(struct UUserWidget* Widget, struct UObject* OverrideClassKey); // Function ShooterGame.ShooterHUD.AddWidgetLookup // (Final|BlueprintCosmetic|Native|Public|BlueprintCallable) // @ game+0x30d96e0
};

// Class ShooterGame.ShooterLocalPlayer
// Size: 0x268 (Inherited: 0x268)
struct UShooterLocalPlayer : ULocalPlayer {
};

// Class ShooterGame.ShooterManifestBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UShooterManifestBlueprintLibrary : UBlueprintFunctionLibrary {
};

// Class ShooterGame.ClickableMapWidget
// Size: 0x2f8 (Inherited: 0x2d8)
struct UClickableMapWidget : UCoordinatedHUDElement {
	struct FMulticastInlineDelegate OnWorldLocationSelected; // 0x2d8(0x10)
	struct FMulticastInlineDelegate OnMultipleWorldLocationsSelected; // 0x2e8(0x10)

	void PointerKeyOutsideWidget(struct FKey Key); // Function ShooterGame.ClickableMapWidget.PointerKeyOutsideWidget // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void InteractionDeactivated(); // Function ShooterGame.ClickableMapWidget.InteractionDeactivated // (Native|Event|Public|BlueprintEvent) // @ game+0x2ee0710
	void InteractionActivated(); // Function ShooterGame.ClickableMapWidget.InteractionActivated // (Native|Event|Public|BlueprintEvent) // @ game+0x2dadfa0
};

// Class ShooterGame.ShooterMinimapDeprecated
// Size: 0x3d0 (Inherited: 0x3d0)
struct AShooterMinimapDeprecated : AInfo {
};

// Class ShooterGame.ShooterPlayerController_Menu
// Size: 0x738 (Inherited: 0x738)
struct AShooterPlayerController_Menu : APlayerController {
};

// Class ShooterGame.ShooterPlayerControllerDebugComponent
// Size: 0xe8 (Inherited: 0xe8)
struct UShooterPlayerControllerDebugComponent : UActorComponent {

	void ServerWatchCurrentCharacterForDebugCharacterNetworking(struct UShooterCharacterDebugComponent* ShooterCharacterDebugComponentToWatch, bool bSet); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerWatchCurrentCharacterForDebugCharacterNetworking // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30edf20
	void ServerToggleTeam(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerToggleTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30edef0
	void ServerToggleDebugSubscription(enum class EDebugSubscription Subscription); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerToggleDebugSubscription // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ede30
	void ServerSuicide(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSuicide // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ede00
	void ServerSetWinsForTeam(int32_t Wins); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetWinsForTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30edd70
	void ServerSetTeam(struct FString TeamName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30edcb0
	void ServerSetRoundNumber(int32_t RoundNum); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetRoundNumber // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30edc20
	void ServerSetPointsForTeam(int32_t Points); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetPointsForTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30edb90
	void ServerSetPlayerName(struct FString NewName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetPlayerName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30edad0
	void ServerSetInfiniteSprays(bool bEnabled); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetInfiniteSprays // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed950
	void ServerSetHealth(int32_t NewHealth); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed8c0
	void ServerSetGameSpeed(float T); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetGameSpeed // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30a93c0
	void ServerSetGameRuleBool(enum class EGameRuleBoolName GameRuleName, bool bEnabled); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetGameRuleBool // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed7e0
	void ServerSetGameFeatureFloatConfig(enum class EGameFeatureFloatConfigName GameFeatureFloatConfigName, float ConfigValue); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetGameFeatureFloatConfig // (Net|NetReliableNative|Event|Public|NetServer|BlueprintCallable) // @ game+0x30ed710
	void ServerSetGameFeatureEnabled(enum class EGameFeatureToggleName GameFeatureToggleName, bool bEnabled); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetGameFeatureEnabled // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed630
	void ServerSetDesiredClassAndRespawn(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetDesiredClassAndRespawn // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed570
	void ServerSetDesiredClass(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetDesiredClass // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed4b0
	void ServerSetDefaultWeapon(struct FString DebugMessage); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetDefaultWeapon // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed3f0
	void ServerSetDebugSubscription(enum class EDebugSubscription Subscription, bool bNewState); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetDebugSubscription // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed310
	void ServerSetCheatInvulnerable(int32_t Enabled); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerSetCheatInvulnerable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed280
	void ServerRespawn(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerRespawn // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed250
	void ServerRefreshInventory(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerRefreshInventory // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed220
	void ServerPlayerControllerCheat(struct FString CheatString); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerPlayerControllerCheat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed160
	void ServerModifySprayLoadoutV2(struct USprayLevelDataAsset* SprayAsset, int32_t SlotIndex); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerModifySprayLoadoutV2 // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ed080
	void ServerModifySprayLoadout(struct USprayEquipSlotDataAsset* SocketAsset, struct USprayLevelDataAsset* SprayAsset); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerModifySprayLoadout // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ecfa0
	void ServerModifyHealth(int32_t Amount); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerModifyHealth // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30a9330
	void ServerGunSkinModifySkinLevel(int32_t Level); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifySkinLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ecf10
	void ServerGunSkinModifySkinByEquippable(struct UEquippableSkinDataAsset* SkinDataAsset, struct UEquippableDataAsset* EquippableDataAsset, struct UEquippableSkinChromaDataAsset* GunSkinChromaAsset, int32_t Level); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifySkinByEquippable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ecdc0
	void ServerGunSkinModifySkin(struct UEquippableSkinDataAsset* SkinDataAsset); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifySkin // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ecd30
	void ServerGunSkinModifyChromaByName(struct FString Chroma); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifyChromaByName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ecc70
	void ServerGunSkinModifyCharmLevel(int32_t Level); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifyCharmLevel // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ecbe0
	void ServerGunSkinModifyCharmByName(struct FString Charm); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifyCharmByName // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30a96b0
	void ServerGunSkinModifyAttachmentByIndex(bool bRemove, int32_t AttachmentIndex); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinModifyAttachmentByIndex // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ecb00
	void ServerGunSkinClearAll(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGunSkinClearAll // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2cc86f0
	void ServerGrantPurchasable(struct AAresItem* ItemToPurchase, enum class EAresPurchasableType Type); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGrantPurchasable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30eca20
	void ServerGrantMoney(int32_t Amount); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGrantMoney // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec990
	void ServerGrantEquippable(struct AAresEquippable* ClassToGrant); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGrantEquippable // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2cb57d0
	void ServerGrantAllAbilities(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGrantAllAbilities // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2d5fc80
	void ServerGiveUltimatePoints(int32_t Amount); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGiveUltimatePoints // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec900
	void ServerGiveUltimate(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGiveUltimate // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec8d0
	void ServerGameModeCheat(struct FString CheatString); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerGameModeCheat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec810
	void ServerForceRefreshPrespawnWeaponCache(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerForceRefreshPrespawnWeaponCache // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec7e0
	void ServerDrawDebugTextOnAllClients(struct FString Text, float LifeTime); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerDrawDebugTextOnAllClients // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec6d0
	void ServerDrawDebugSphereOnAllClients(struct FVector Center, float Radius, int32_t Segments, struct FColor SphereColor, bool bPersistentLines, float LifeTime, char DepthPriority); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerDrawDebugSphereOnAllClients // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x30ec4b0
	void ServerDrawDebugLineOnAllClients(struct FVector LineStart, struct FVector LineEnd, struct FColor LineColor, bool bPersistentLines, float LifeTime, char DepthPriority, float Thickness); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerDrawDebugLineOnAllClients // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x30ec290
	void ServerDamageSelf(float Damage); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerDamageSelf // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec200
	void ServerCycleOrbInSlot(int32_t Slot); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCycleOrbInSlot // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30a9210
	void ServerCheatWinGame(bool ShouldMatchDisablePenalties); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatWinGame // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec080
	void ServerCheatWalk(struct ACharacter* TargetCharacter); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatWalk // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebff0
	void ServerCheatSwapTeams(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSwapTeams // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebfc0
	void ServerCheatSetTickRate(int32_t TickRate); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSetTickRate // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebf30
	void ServerCheatSetTeamForAll(struct FString TeamName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSetTeamForAll // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebe70
	void ServerCheatSetPositionAndRotation(struct ACharacter* TargetCharacter, struct FVector Position, struct FRotator Rotation); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSetPositionAndRotation // (Net|NetReliableNative|Event|Public|NetServer|HasDefaults) // @ game+0x30ebd20
	void ServerCheatSetCompetitiveTier(int32_t NewTier); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatSetCompetitiveTier // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebc90
	void ServerCheatRestartGame(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatRestartGame // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebc60
	void ServerCheatResetCombatStats(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatResetCombatStats // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebc30
	void ServerCheatGhost(struct ACharacter* TargetCharacter); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatGhost // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebba0
	void ServerCheatForceCeremony(struct FString ClassName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatForceCeremony // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ebae0
	void ServerCheatFly(struct ACharacter* TargetCharacter); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatFly // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30eba50
	void ServerCheatEndGamePhase(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatEndGamePhase // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30eba20
	void ServerCheatAssignMission(struct FString MissionName); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatAssignMission // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30eb960
	void ServerCheatAdvanceToOvertime(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheatAdvanceToOvertime // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30eb930
	void ServerCheat(struct FString Msg); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCheat // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30eb870
	void ServerCalculateBehaviorFactors(); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerCalculateBehaviorFactors // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ba730
	void ServerAddVacanciesForTeam(struct FString TeamName, char Count); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerAddVacanciesForTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30eb770
	void ServerActivateRoundRestore(int32_t RoundToRestore); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ServerActivateRoundRestore // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x2f76560
	void ReportNetEmulationSettingsChanged(struct UNetDriver* Driver, struct FPacketSimulationSettings& NewSettings); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ReportNetEmulationSettingsChanged // (Final|Native|Public|HasOutParms) // @ game+0x30eb670
	void ClientErrorMessage(struct FString DebugMessage); // Function ShooterGame.ShooterPlayerControllerDebugComponent.ClientErrorMessage // (Final|Net|NetReliableNative|Event|Private|NetClient) // @ game+0x30eaa50
};

// Class ShooterGame.ShooterPlayerState
// Size: 0x950 (Inherited: 0x670)
struct AShooterPlayerState : AAresPlayerStateBase {
	struct FMulticastInlineDelegate OnDesiredClassDefaultObjectChanged; // 0x670(0x10)
	struct FMulticastInlineDelegate OnSpawnedCharacterChanged; // 0x680(0x10)
	struct FMulticastInlineDelegate OnPossessedCharacterChanged; // 0x690(0x10)
	struct FMulticastInlineDelegate OnPossessedCharacterChangedWithPrevCharacter; // 0x6a0(0x10)
	struct FMulticastInlineDelegate OnNumUltimatePointsChanged; // 0x6b0(0x10)
	struct FMulticastInlineDelegate OnTotalAcquiredUltimatePointsChanged; // 0x6c0(0x10)
	struct FMulticastInlineDelegate OnEquippableChargeInfosChanged; // 0x6d0(0x10)
	struct FMulticastInlineDelegate OnAliveStateChanged; // 0x6e0(0x10)
	struct FMulticastInlineDelegate AuthOnAliveStateChanged; // 0x6f0(0x10)
	char pad_700[0x18]; // 0x700(0x18)
	struct AOwnerExclusivePlayerInfo* PlayerInfo; // 0x718(0x08)
	struct UCombatReportComponent* CombatReportType; // 0x720(0x08)
	struct TArray<struct FGuid> AccessibleCharacterList; // 0x728(0x10)
	struct UBasicCombatStatsComponent* BasicCombatStatsComponent; // 0x738(0x08)
	struct UMoneyManagementComponent* MoneyManagementComponent; // 0x740(0x08)
	struct UPlayerScoreComponent* PlayerScoreComponent; // 0x748(0x08)
	struct UGunRequestComponent* GunRequestComponent; // 0x750(0x08)
	struct UMissionManagerComponent* MissionManagerComponent; // 0x758(0x08)
	struct UBasePlayerStateTelemetryComponent* PlayerStateTelemetryComponent; // 0x760(0x08)
	struct UPlayerDiscrepancyDetectionComponent* PlayerDiscrepancyDetectionComponent; // 0x768(0x08)
	struct UAFKDetectionComponent* AFKDetectionComponent; // 0x770(0x08)
	struct UAFKDetectionComponent* AFKHandlingType; // 0x778(0x08)
	struct FCrosshairSettings CrosshairSettings; // 0x780(0x130)
	struct AShooterCharacter* SpawnedCharacter; // 0x8b0(0x08)
	struct AShooterCharacter* ClientPrevSpawnedCharacter; // 0x8b8(0x08)
	struct AShooterCharacter* PossessedCharacter; // 0x8c0(0x08)
	int32_t NumUltimatePoints; // 0x8c8(0x04)
	int32_t TotalAcquiredUltimatePoints; // 0x8cc(0x04)
	int32_t NumRefundableUltimatePoints; // 0x8d0(0x04)
	char pad_8D4[0x4]; // 0x8d4(0x04)
	struct TArray<struct AShooterPlayerState*> MapPingsMuted; // 0x8d8(0x10)
	struct FGuid DesiredClass; // 0x8e8(0x10)
	struct FGuid AuthNextRoundClass; // 0x8f8(0x10)
	bool bIsCheatInvulnerable; // 0x908(0x01)
	bool bIsCheatAutoResurrect; // 0x909(0x01)
	bool bIsCheatGhost; // 0x90a(0x01)
	char pad_90B[0x1]; // 0x90b(0x01)
	int32_t CombatReportIndex; // 0x90c(0x04)
	struct TArray<struct TSoftClassPtr<UObject>> DebugDefaultWheelSprays; // 0x910(0x10)
	bool bAllowAgentSpecificKeybinds; // 0x920(0x01)
	bool bShouldInitCoach; // 0x921(0x01)
	bool bIsCoach; // 0x922(0x01)
	char pad_923[0x1]; // 0x923(0x01)
	struct FName AuthCoachTeam; // 0x924(0x0c)
	struct FMulticastInlineDelegate OnSuppressRevealed; // 0x930(0x10)
	struct FMulticastInlineDelegate OnCoachInitialized; // 0x940(0x10)

	struct UServerPlayerStateTelemetryComponent* TryGetServerPlayerStateTelemetryComponent(); // Function ShooterGame.ShooterPlayerState.TryGetServerPlayerStateTelemetryComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x23b2e20
	struct UCharacterDataAsset* TryGetDesiredClassDataAsset(); // Function ShooterGame.ShooterPlayerState.TryGetDesiredClassDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30ee130
	struct UClientPlayerStateTelemetryComponent* TryGetClientPlayerStateTelemetryComponent(); // Function ShooterGame.ShooterPlayerState.TryGetClientPlayerStateTelemetryComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30ee100
	struct UBasePlayerStateTelemetryComponent* TryGetBasePlayerStateTelemetryComponent(); // Function ShooterGame.ShooterPlayerState.TryGetBasePlayerStateTelemetryComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30ee0d0
	void Tick(float DeltaSeconds); // Function ShooterGame.ShooterPlayerState.Tick // (Native|Public) // @ game+0x2cee5e0
	void SetMapPingsMuted(struct AShooterPlayerState* ForPlayerState, bool bMuted); // Function ShooterGame.ShooterPlayerState.SetMapPingsMuted // (Final|Native|Public|BlueprintCallable) // @ game+0x30ee000
	void ServerToggleTeam(); // Function ShooterGame.ShooterPlayerState.ServerToggleTeam // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30edec0
	void ServerSetMapPingsMuted(struct AShooterPlayerState* ForPlayerState, bool bMuted); // Function ShooterGame.ShooterPlayerState.ServerSetMapPingsMuted // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x30ed9f0
	void ServerCrosshairSettingsUpdate(struct FCrosshairSettings NewCrosshairSettings); // Function ShooterGame.ShooterPlayerState.ServerCrosshairSettingsUpdate // (Net|NetReliableNative|Event|Public|NetServer) // @ game+0x30ec120
	void OnSpawnedCharacterAliveStateChanged(bool bNewAlive); // Function ShooterGame.ShooterPlayerState.OnSpawnedCharacterAliveStateChanged // (Final|Native|Protected) // @ game+0x30eb5e0
	void OnRep_TotalAcquiredUltimatePoints(); // Function ShooterGame.ShooterPlayerState.OnRep_TotalAcquiredUltimatePoints // (Final|Native|Protected) // @ game+0x30eb5c0
	void OnRep_SpawnedCharacter(struct AShooterCharacter* PreviousSpawnedCharacter); // Function ShooterGame.ShooterPlayerState.OnRep_SpawnedCharacter // (Final|Native|Protected) // @ game+0x30eb530
	void OnRep_ShouldInitCoach(); // Function ShooterGame.ShooterPlayerState.OnRep_ShouldInitCoach // (Final|Native|Protected) // @ game+0x30eb510
	void OnRep_PossessedCharacter(struct AShooterCharacter* PrevCharacter); // Function ShooterGame.ShooterPlayerState.OnRep_PossessedCharacter // (Final|Native|Protected) // @ game+0x30eb480
	void OnRep_NumUltimatePoints(); // Function ShooterGame.ShooterPlayerState.OnRep_NumUltimatePoints // (Final|Native|Protected) // @ game+0x30eb460
	void OnRep_DesiredClass(); // Function ShooterGame.ShooterPlayerState.OnRep_DesiredClass // (Final|Native|Protected) // @ game+0x30eb440
	void OnRep_AFKComponent(); // Function ShooterGame.ShooterPlayerState.OnRep_AFKComponent // (Final|Native|Protected) // @ game+0x30eb420
	void OnCrosshairSettingsReceived(); // Function ShooterGame.ShooterPlayerState.OnCrosshairSettingsReceived // (Final|Native|Protected) // @ game+0x30eb400
	void OnAFKStatusChanged(struct AShooterPlayerState* ShooterPlayerState, bool bIsAFK); // Function ShooterGame.ShooterPlayerState.OnAFKStatusChanged // (Final|Native|Protected) // @ game+0x30eb330
	bool IsUltimateReady(); // Function ShooterGame.ShooterPlayerState.IsUltimateReady // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb300
	bool IsCoach(); // Function ShooterGame.ShooterPlayerState.IsCoach // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb2d0
	bool IsCheatInvulnerable(); // Function ShooterGame.ShooterPlayerState.IsCheatInvulnerable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb2a0
	bool IsCheatGhost(); // Function ShooterGame.ShooterPlayerState.IsCheatGhost // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb270
	bool IsCheatAutoResurrect(); // Function ShooterGame.ShooterPlayerState.IsCheatAutoResurrect // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb240
	bool IsAlive(); // Function ShooterGame.ShooterPlayerState.IsAlive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb210
	void InitCoachModeCommon(); // Function ShooterGame.ShooterPlayerState.InitCoachModeCommon // (Final|Native|Protected) // @ game+0x30eb1f0
	void IncrementCombatReportIndex(); // Function ShooterGame.ShooterPlayerState.IncrementCombatReportIndex // (Final|Native|Public|BlueprintCallable) // @ game+0x30eb1d0
	int32_t GetTotalAcquiredUltimatePoints(); // Function ShooterGame.ShooterPlayerState.GetTotalAcquiredUltimatePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb1a0
	float GetTimeUntilRespawn(); // Function ShooterGame.ShooterPlayerState.GetTimeUntilRespawn // (Final|Native|Public|Const) // @ game+0x2e5f380
	struct AShooterCharacter* GetSpawnedCharacter(); // Function ShooterGame.ShooterPlayerState.GetSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb170
	struct AShooterPlayerController* GetShooterPlayerController(); // Function ShooterGame.ShooterPlayerState.GetShooterPlayerController // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb140
	int32_t GetRespawnTime(); // Function ShooterGame.ShooterPlayerState.GetRespawnTime // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb110
	struct AAresRespawnManager* GetRespawnManager(); // Function ShooterGame.ShooterPlayerState.GetRespawnManager // (Final|Native|Public|BlueprintCallable) // @ game+0x30eb0e0
	struct AShooterCharacter* GetPossessedCharacter(); // Function ShooterGame.ShooterPlayerState.GetPossessedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eb0b0
	struct TArray<struct AAresPlayerStateBase*> GetPlayersSpectating(bool bOmitCoaches); // Function ShooterGame.ShooterPlayerState.GetPlayersSpectating // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eafc0
	struct UPlayerScoreComponent* GetPlayerScoreComponent(); // Function ShooterGame.ShooterPlayerState.GetPlayerScoreComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eaf90
	struct AOwnerExclusivePlayerInfo* GetOwnerExclusivePlayerInfo(); // Function ShooterGame.ShooterPlayerState.GetOwnerExclusivePlayerInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cf60e0
	int32_t GetNumUltimatePoints(); // Function ShooterGame.ShooterPlayerState.GetNumUltimatePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eaf60
	int32_t GetNumRefundableUltimatePoints(); // Function ShooterGame.ShooterPlayerState.GetNumRefundableUltimatePoints // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eaf30
	int32_t GetNumPointsNeededForUltimate(); // Function ShooterGame.ShooterPlayerState.GetNumPointsNeededForUltimate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eaf00
	struct UMoneyManagementComponent* GetMoneyManagementComponent(); // Function ShooterGame.ShooterPlayerState.GetMoneyManagementComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eaed0
	int32_t GetMoney(); // Function ShooterGame.ShooterPlayerState.GetMoney // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eaea0
	struct UMissionManagerComponent* GetMissionManagerComponent(); // Function ShooterGame.ShooterPlayerState.GetMissionManagerComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eae70
	bool GetIsPenalizedForBeingAway(); // Function ShooterGame.ShooterPlayerState.GetIsPenalizedForBeingAway // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eae40
	bool GetIsAFK(); // Function ShooterGame.ShooterPlayerState.GetIsAFK // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eae10
	struct UGunRequestComponent* GetGunRequestComponent(); // Function ShooterGame.ShooterPlayerState.GetGunRequestComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eade0
	struct FGuid GetDesiredClassUuid(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassUuid // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eada0
	struct UCharacterUIData* GetDesiredClassUIData(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassUIData // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30ead70
	struct FText GetDesiredClassText(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassText // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30ead00
	struct FName GetDesiredClassDeveloperName(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassDeveloperName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eacc0
	struct AShooterCharacter* GetDesiredClassDefaultObject(); // Function ShooterGame.ShooterPlayerState.GetDesiredClassDefaultObject // (Final|Native|Public|Const) // @ game+0x30eac90
	struct APawn* GetDesiredClass(); // Function ShooterGame.ShooterPlayerState.GetDesiredClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eac50
	struct UTexture* GetDefaultClassSmallCharacterIcon(); // Function ShooterGame.ShooterPlayerState.GetDefaultClassSmallCharacterIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eac20
	struct UTexture* GetDefaultClassCharacterIcon(); // Function ShooterGame.ShooterPlayerState.GetDefaultClassCharacterIcon // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eabf0
	struct FCrosshairSettings GetCrosshairSettings(); // Function ShooterGame.ShooterPlayerState.GetCrosshairSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x30eabb0
	struct UCombatReportComponent* GetCombatReportType(); // Function ShooterGame.ShooterPlayerState.GetCombatReportType // (Final|Native|Public|BlueprintCallable) // @ game+0x30eab70
	struct UBasicCombatStatsComponent* GetBasicCombatStatsComponent(); // Function ShooterGame.ShooterPlayerState.GetBasicCombatStatsComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eab40
	struct UAFKDetectionComponent* GetAFKDetectionComponent(); // Function ShooterGame.ShooterPlayerState.GetAFKDetectionComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30eab10
	bool CharacterIsUnlocked(struct UCharacterDataAsset* Character); // Function ShooterGame.ShooterPlayerState.CharacterIsUnlocked // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30ea9b0
	bool CanPossessPawns(); // Function ShooterGame.ShooterPlayerState.CanPossessPawns // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30ea980
	void BroadcastEquippableChargeInfosChanged(); // Function ShooterGame.ShooterPlayerState.BroadcastEquippableChargeInfosChanged // (Final|Native|Public) // @ game+0x30ea960
	void AutomationAuthBecomeCoach(); // Function ShooterGame.ShooterPlayerState.AutomationAuthBecomeCoach // (Final|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthToggleTeam(); // Function ShooterGame.ShooterPlayerState.AuthToggleTeam // (Final|Native|Public) // @ game+0x1e6e7b0
	void AuthSetUltimatePoints(int32_t NewUltimatePoints, enum class EIsRefundable Refundable, bool bWasAcquired); // Function ShooterGame.ShooterPlayerState.AuthSetUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30ea850
	bool AuthSetDesiredClassName(struct FString NewDesiredClass); // Function ShooterGame.ShooterPlayerState.AuthSetDesiredClassName // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30ea790
	bool AuthSetDesiredClassByClass(struct UCharacterDataAsset* CharacterClass); // Function ShooterGame.ShooterPlayerState.AuthSetDesiredClassByClass // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2fcfa70
	bool AuthSetDesiredClass(struct FGuid& NewDesiredClass); // Function ShooterGame.ShooterPlayerState.AuthSetDesiredClass // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30ea6e0
	void AuthSetClassForNextRound(struct FGuid& NewNextRoundClass); // Function ShooterGame.ShooterPlayerState.AuthSetClassForNextRound // (Final|BlueprintAuthorityOnly|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x30ea640
	void AuthSetCheatInvulnerable(bool bEnabled); // Function ShooterGame.ShooterPlayerState.AuthSetCheatInvulnerable // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetCheatGhost(bool bEnabled); // Function ShooterGame.ShooterPlayerState.AuthSetCheatGhost // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthSetCheatAutoResurrect(bool bEnabled); // Function ShooterGame.ShooterPlayerState.AuthSetCheatAutoResurrect // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void AuthResetUltimatePoints(); // Function ShooterGame.ShooterPlayerState.AuthResetUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	void AuthRemoveUltimatePoints(int32_t UltimatePointsToRemove, enum class EIsRefundable Refundable); // Function ShooterGame.ShooterPlayerState.AuthRemoveUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30ea4d0
	void AuthInitCoachMode(struct FName& TeamName); // Function ShooterGame.ShooterPlayerState.AuthInitCoachMode // (Final|Native|Protected|HasOutParms) // @ game+0x30ea5a0
	void AuthGiveUltimatePoints(int32_t UltimatePointsToGive, enum class EIsRefundable Refundable); // Function ShooterGame.ShooterPlayerState.AuthGiveUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30ea4d0
	void AuthGiveUltimate(); // Function ShooterGame.ShooterPlayerState.AuthGiveUltimate // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	bool AuthEvaluateDisconnectedSpawnStatus(); // Function ShooterGame.ShooterPlayerState.AuthEvaluateDisconnectedSpawnStatus // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x30c4df0
	void AuthConsumeUltimatePoints(); // Function ShooterGame.ShooterPlayerState.AuthConsumeUltimatePoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
	bool AreMapPingsMuted(struct AShooterPlayerState* ForPlayerState); // Function ShooterGame.ShooterPlayerState.AreMapPingsMuted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x30ea430
};

// Class ShooterGame.ShooterSettingsFacade
// Size: 0x30 (Inherited: 0x30)
struct UShooterSettingsFacade : UObject {

	bool ShouldForceLetterboxForCurrentResolution(); // Function ShooterGame.ShooterSettingsFacade.ShouldForceLetterboxForCurrentResolution // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x31082e0
	void SetSpeakerConfig(int32_t Config); // Function ShooterGame.ShooterSettingsFacade.SetSpeakerConfig // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3108260
	void SetResolution(int32_t ResX, int32_t ResY); // Function ShooterGame.ShooterSettingsFacade.SetResolution // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x31081a0
	void SetLetterboxEnabled(bool bEnabled); // Function ShooterGame.ShooterSettingsFacade.SetLetterboxEnabled // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3108120
	void SetDisplayMode(enum class EAresDisplayMode DisplayMode); // Function ShooterGame.ShooterSettingsFacade.SetDisplayMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x31080b0
	void SetDefaultMonitorIndex(int32_t Index); // Function ShooterGame.ShooterSettingsFacade.SetDefaultMonitorIndex // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3108030
	void SetAntiAliasing(enum class EAresAntiAliasing AntiAliasingMode); // Function ShooterGame.ShooterSettingsFacade.SetAntiAliasing // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3107fc0
	bool SetAKAudioParameter(struct FName RtpcName, float Value); // Function ShooterGame.ShooterSettingsFacade.SetAKAudioParameter // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3107ed0
	void RevertDisplaySettings(); // Function ShooterGame.ShooterSettingsFacade.RevertDisplaySettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3107eb0
	void ResetToCurrentDisplaySettings(); // Function ShooterGame.ShooterSettingsFacade.ResetToCurrentDisplaySettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3107e90
	struct TArray<struct FAresResolutionInfo> GetSupportedResolutions(); // Function ShooterGame.ShooterSettingsFacade.GetSupportedResolutions // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107e00
	struct TArray<enum class EAresDisplayMode> GetSupportedDisplayModes(); // Function ShooterGame.ShooterSettingsFacade.GetSupportedDisplayModes // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107d70
	struct TArray<enum class EAresAntiAliasing> GetSupportedAntiAliasing(); // Function ShooterGame.ShooterSettingsFacade.GetSupportedAntiAliasing // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107ce0
	struct FText GetResolutionText(struct FAresResolutionInfo& ResolutionInfo); // Function ShooterGame.ShooterSettingsFacade.GetResolutionText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3107c00
	float GetPhysicalDeviceWidth(); // Function ShooterGame.ShooterSettingsFacade.GetPhysicalDeviceWidth // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107bd0
	bool GetLetterboxEnabled(); // Function ShooterGame.ShooterSettingsFacade.GetLetterboxEnabled // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107ba0
	struct FString GetDisplayModeText(enum class EAresDisplayMode DisplayMode); // Function ShooterGame.ShooterSettingsFacade.GetDisplayModeText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107ad0
	enum class EAresDisplayMode GetDisplayMode(); // Function ShooterGame.ShooterSettingsFacade.GetDisplayMode // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3107aa0
	int32_t GetDefaultMonitorIndex(); // Function ShooterGame.ShooterSettingsFacade.GetDefaultMonitorIndex // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107a70
	struct FString GetCurrentResolutionText(); // Function ShooterGame.ShooterSettingsFacade.GetCurrentResolutionText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x31079e0
	struct FString GetCurrentAspectRatioText(); // Function ShooterGame.ShooterSettingsFacade.GetCurrentAspectRatioText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107950
	struct FText GetAspectRatioTextFromDimensions(int32_t Width, int32_t Height); // Function ShooterGame.ShooterSettingsFacade.GetAspectRatioTextFromDimensions // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107850
	struct FText GetAspectRatioText(struct FAresResolutionInfo& ResolutionInfo); // Function ShooterGame.ShooterSettingsFacade.GetAspectRatioText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3107770
	struct UAresSettingsManager* GetAresSettingsManager(struct UObject* WorldContextObject); // Function ShooterGame.ShooterSettingsFacade.GetAresSettingsManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x31076e0
	struct FString GetAntiAliasingText(enum class EAresAntiAliasing AntiAliasing); // Function ShooterGame.ShooterSettingsFacade.GetAntiAliasingText // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107610
	struct TArray<struct FAresMonitorInfo> GetAllMonitorInfo(); // Function ShooterGame.ShooterSettingsFacade.GetAllMonitorInfo // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x31075d0
	void ConfirmDisplaySettings(); // Function ShooterGame.ShooterSettingsFacade.ConfirmDisplaySettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x31075b0
	bool CanSupportNvidiaReflexLowLatency(); // Function ShooterGame.ShooterSettingsFacade.CanSupportNvidiaReflexLowLatency // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107580
	bool CanSupportMultithreadedRendering(); // Function ShooterGame.ShooterSettingsFacade.CanSupportMultithreadedRendering // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107550
	bool AreDisplaySettingsUnconfirmed(); // Function ShooterGame.ShooterSettingsFacade.AreDisplaySettingsUnconfirmed // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3107520
	bool AreDisplaySettingsDirty(); // Function ShooterGame.ShooterSettingsFacade.AreDisplaySettingsDirty // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x31074f0
	void ApplyDisplaySettings(); // Function ShooterGame.ShooterSettingsFacade.ApplyDisplaySettings // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x31074d0
};

// Class ShooterGame.ShooterUICoordinator
// Size: 0x90 (Inherited: 0x30)
struct UShooterUICoordinator : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnMinimapVisibilityChanged; // 0x38(0x10)
	struct UMenuStackManager* MenuStackManager; // 0x48(0x08)
	struct UHUDElementCoordinator* HUDElementCoordinator; // 0x50(0x08)
	struct UShopScreenCoordinator* ShopScreenCoordinator; // 0x58(0x08)
	struct UOptionsScreenCoordinator* OptionsScreenCoordinator; // 0x60(0x08)
	struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel; // 0x68(0x08)
	struct UMegamapCoordinator* MegamapCoordinator; // 0x70(0x08)
	struct UMissionSettingsScreenCoordinator* MissionSettingsScreenCoordinator; // 0x78(0x08)
	char pad_80[0x10]; // 0x80(0x10)

	void OnMegamapToggled(bool bVisible); // Function ShooterGame.ShooterUICoordinator.OnMegamapToggled // (Final|Native|Public) // @ game+0x310d960
	bool IsAnyScreenOpen(struct UObject* WorldContextObject, bool bMegamap, bool bOptions, bool bShop); // Function ShooterGame.ShooterUICoordinator.IsAnyScreenOpen // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x310d7e0
	struct UCoordinatedShooterUIModel* GetCoordinatedShooterUIModel(); // Function ShooterGame.ShooterUICoordinator.GetCoordinatedShooterUIModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x310d630
	struct UCoordinatedHUDElement* GetCoordinatedHudElementByClass(struct UCoordinatedHUDElement* ElementClass); // Function ShooterGame.ShooterUICoordinator.GetCoordinatedHudElementByClass // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x310d590
	void CloseMapOnly(struct UObject* WorldContextObject); // Function ShooterGame.ShooterUICoordinator.CloseMapOnly // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x310d330
};

// Class ShooterGame.CoordinatedShooterUIModel
// Size: 0x80 (Inherited: 0x30)
struct UCoordinatedShooterUIModel : UObject {
	struct FMulticastInlineDelegate OnShopVisbilityChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnHudVisbilityChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOptionsVisbilityChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnMegamapVisibilityChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnMinimapVisibilityChanged; // 0x70(0x10)

	void RebroadcastOnShopToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnShopToggled // (Final|Native|Public) // @ game+0x2dd67e0
	void RebroadcastOnOptionsToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnOptionsToggled // (Final|Native|Public) // @ game+0x310de20
	void RebroadcastOnMinimapToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnMinimapToggled // (Final|Native|Public) // @ game+0x310dd90
	void RebroadcastOnMegamapToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnMegamapToggled // (Final|Native|Public) // @ game+0x310dd00
	void RebroadcastOnHudToggled(bool IsVisible); // Function ShooterGame.CoordinatedShooterUIModel.RebroadcastOnHudToggled // (Final|Native|Public) // @ game+0x310dbc0
};

// Class ShooterGame.InventorySlotModel
// Size: 0x90 (Inherited: 0x30)
struct UInventorySlotModel : UObject {
	int32_t Charges; // 0x30(0x04)
	int32_t MaxCharges; // 0x34(0x04)
	int32_t ExtraCharges; // 0x38(0x04)
	char pad_3C[0x4]; // 0x3c(0x04)
	struct UShopPurchasableModel* ItemDetails; // 0x40(0x08)
	struct UShopPurchasableModel* UpgradeDetails; // 0x48(0x08)
	struct UCharacterHudComponent* CurrentItemHudComponent; // 0x50(0x08)
	struct FMulticastInlineDelegate OnModelUpdated; // 0x58(0x10)
	struct TArray<enum class EAresItemSlot> CompatibleSlotTypes; // 0x68(0x10)
	struct AShooterPlayerState* PlayerState; // 0x78(0x08)
	enum class EAresItemSlot ItemSlot; // 0x80(0x01)
	char pad_81[0x7]; // 0x81(0x07)
	struct AAresItem* CurrentItem; // 0x88(0x08)
};

// Class ShooterGame.PurchasableWeaponData
// Size: 0x60 (Inherited: 0x30)
struct UPurchasableWeaponData : UObject {
	float MaxDamage; // 0x30(0x04)
	float MinDamage; // 0x34(0x04)
	float FarthestRangeForMaxDamage; // 0x38(0x04)
	float ClostedRangeForMinDamage; // 0x3c(0x04)
	float HeadshotMultiplier; // 0x40(0x04)
	float MinSpread; // 0x44(0x04)
	float MaxSpread; // 0x48(0x04)
	float FiringRate; // 0x4c(0x04)
	float MagazineSize; // 0x50(0x04)
	float ReloadSpeed; // 0x54(0x04)
	float MovementSpeed; // 0x58(0x04)
	float ReadyTime; // 0x5c(0x04)
};

// Class ShooterGame.ShopPurchasableModel
// Size: 0x190 (Inherited: 0x30)
struct UShopPurchasableModel : UObject {
	int32_t Price; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FText Name; // 0x38(0x18)
	struct TArray<enum class EAresItemSlot> CompatibleSlots; // 0x50(0x10)
	struct FSlateBrush ShopImage; // 0x60(0x90)
	struct FName ShopCategory; // 0xf0(0x0c)
	struct FName ShopSubcategory; // 0xfc(0x0c)
	struct FText ShopCategoryText; // 0x108(0x18)
	struct FShopGridPosition ShopGridPosition; // 0x120(0x08)
	struct FText Description; // 0x128(0x18)
	bool bCanAfford; // 0x140(0x01)
	bool bCanPurchase; // 0x141(0x01)
	bool bCanSell; // 0x142(0x01)
	bool bIsOwned; // 0x143(0x01)
	char pad_144[0x4]; // 0x144(0x04)
	struct TArray<enum class EAresItemSlot> InventorySlotsOwnedIn; // 0x148(0x10)
	bool bCanDrop; // 0x158(0x01)
	bool bCanRemove; // 0x159(0x01)
	bool bCanTrash; // 0x15a(0x01)
	bool bShowInStore; // 0x15b(0x01)
	char pad_15C[0x4]; // 0x15c(0x04)
	struct UPurchasableWeaponData* WeaponDetails; // 0x160(0x08)
	struct FMulticastInlineDelegate OnModelUpdated; // 0x168(0x10)
	bool bWasPurchasedThisRound; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	int32_t SellPrice; // 0x17c(0x04)
	struct AOwnerExclusivePlayerInfo* PlayerInfo; // 0x180(0x08)
	struct UAresPurchasable* Purchasable; // 0x188(0x08)

	bool TrySell(enum class EAresItemSlot TargetSlot); // Function ShooterGame.ShopPurchasableModel.TrySell // (Final|Native|Public|BlueprintCallable) // @ game+0x310e180
	bool TryRemove(enum class EAresItemSlot TargetSlot); // Function ShooterGame.ShopPurchasableModel.TryRemove // (Final|Native|Public|BlueprintCallable) // @ game+0x310e0f0
	bool TryPurchase(enum class EAresItemSlot TargetSlot); // Function ShooterGame.ShopPurchasableModel.TryPurchase // (Final|Native|Public|BlueprintCallable) // @ game+0x310e060
	bool TryMakeGunRequest(); // Function ShooterGame.ShopPurchasableModel.TryMakeGunRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x310e030
	bool TryDrop(enum class EAresItemSlot TargetSlot); // Function ShooterGame.ShopPurchasableModel.TryDrop // (Final|Native|Public|BlueprintCallable) // @ game+0x310df00
	bool TryCancelGunRequest(); // Function ShooterGame.ShopPurchasableModel.TryCancelGunRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x310ded0
	struct AAresItem* GetPurchasableEquippableClass(); // Function ShooterGame.ShopPurchasableModel.GetPurchasableEquippableClass // (Final|Native|Public|BlueprintCallable) // @ game+0x310d660
	struct UAresPurchasable* GetPurchasable(); // Function ShooterGame.ShopPurchasableModel.GetPurchasable // (Final|Native|Public|BlueprintCallable) // @ game+0x2effd30
};

// Class ShooterGame.ShopGameInfoModel
// Size: 0x50 (Inherited: 0x30)
struct UShopGameInfoModel : UObject {
	int32_t CurrentRound; // 0x30(0x04)
	char pad_34[0x4]; // 0x34(0x04)
	struct FMulticastInlineDelegate OnModelUpdated; // 0x38(0x10)
	struct AShooterGameState* GameState; // 0x48(0x08)
};

// Class ShooterGame.ShopPlayerModel
// Size: 0x250 (Inherited: 0x30)
struct UShopPlayerModel : UObject {
	struct FString PlayerName; // 0x30(0x10)
	int32_t LoadoutValue; // 0x40(0x04)
	int32_t PlayerMoney; // 0x44(0x04)
	int32_t PlayerEnergy; // 0x48(0x04)
	int32_t TotalPurchases; // 0x4c(0x04)
	struct APawn* DesiredClass; // 0x50(0x08)
	struct FText ClassName; // 0x58(0x18)
	struct FSlateBrush ClassPortrait; // 0x70(0x90)
	int32_t UltimatePoints; // 0x100(0x04)
	int32_t RefundableUltimatePoints; // 0x104(0x04)
	int32_t ClassUltimatePointsNeeded; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct FSlateBrush ClassUltiamteIcon; // 0x110(0x90)
	struct UInventorySlotModel* PrimarySlot; // 0x1a0(0x08)
	struct UInventorySlotModel* SecondarySlot; // 0x1a8(0x08)
	struct UInventorySlotModel* GrenadeSlot; // 0x1b0(0x08)
	struct UInventorySlotModel* Ability1Slot; // 0x1b8(0x08)
	struct UInventorySlotModel* Ability2Slot; // 0x1c0(0x08)
	struct UInventorySlotModel* UltimateSlot; // 0x1c8(0x08)
	struct UInventorySlotModel* ArmorSlot; // 0x1d0(0x08)
	struct UInventorySlotModel* PassiveSlot; // 0x1d8(0x08)
	struct TArray<struct FAresPlayerRoundInfo> RoundInfos; // 0x1e0(0x10)
	struct FMulticastInlineDelegate OnModelUpdated; // 0x1f0(0x10)
	struct FMulticastInlineDelegate OnSlotCompatibilityUpdated; // 0x200(0x10)
	float PreviousPurchaseTime; // 0x210(0x04)
	char pad_214[0x4]; // 0x214(0x04)
	struct FMulticastInlineDelegate OnFulfillGunRequest; // 0x218(0x10)
	struct FMulticastInlineDelegate OnMakeGunRequest; // 0x228(0x10)
	struct FMulticastInlineDelegate OnCancelGunRequest; // 0x238(0x10)
	struct AShooterPlayerState* PlayerState; // 0x248(0x08)

	bool TryFulfillOtherPlayerGunRequest(struct AShooterPlayerState* FulfilleePlayerState); // Function ShooterGame.ShopPlayerModel.TryFulfillOtherPlayerGunRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x310df90
	void RebroadcastOnMakeGunRequest(struct FAresGunRequest UpdatedGunRequest); // Function ShooterGame.ShopPlayerModel.RebroadcastOnMakeGunRequest // (Final|Native|Public) // @ game+0x310dc50
	void RebroadcastOnFulfillGunRequest(struct FAresGunRequest UpdatedGunRequest, struct AShooterPlayerState* FulfillerPlayerState); // Function ShooterGame.ShopPlayerModel.RebroadcastOnFulfillGunRequest // (Final|Native|Public) // @ game+0x310dac0
	void RebroadcastOnCancelGunRequest(struct FAresGunRequest UpdatedGunRequest); // Function ShooterGame.ShopPlayerModel.RebroadcastOnCancelGunRequest // (Final|Native|Public) // @ game+0x310da10
	struct FAresPlayerRoundInfo GetRoundInfoForRound(int32_t RoundNumber); // Function ShooterGame.ShopPlayerModel.GetRoundInfoForRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x310d6a0
	struct FRoundReports GetCombatReportForRound(int32_t RoundNumber); // Function ShooterGame.ShopPlayerModel.GetCombatReportForRound // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x310d3f0
	struct FAresGunRequest GetActiveGunRequest(); // Function ShooterGame.ShopPlayerModel.GetActiveGunRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x310d3b0
};

// Class ShooterGame.ShopAbilitiesContainer
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopAbilitiesContainer : UUserWidget {

	void ClearChildren(); // Function ShooterGame.ShopAbilitiesContainer.ClearChildren // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void AddChild(struct UUserWidget* Content, bool bForceFillSize); // Function ShooterGame.ShopAbilitiesContainer.AddChild // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopItemCategoryContainer
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopItemCategoryContainer : UDesignableUserWidget {

	void ClearChildren(); // Function ShooterGame.ShopItemCategoryContainer.ClearChildren // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopArmorCategoryContainer
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopArmorCategoryContainer : UUserWidget {

	void ClearChildren(); // Function ShooterGame.ShopArmorCategoryContainer.ClearChildren // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopSidearmsCategoryContainer
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopSidearmsCategoryContainer : UUserWidget {

	void ClearChildren(); // Function ShooterGame.ShopSidearmsCategoryContainer.ClearChildren // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopItemDetailPanel
// Size: 0x2d8 (Inherited: 0x2c8)
struct UShopItemDetailPanel : UUserWidget {
	struct FMulticastInlineDelegate OnItemPreviewReset; // 0x2c8(0x10)

	void UpdatePreview(struct UShopPurchasableModel* SelectedWeapon); // Function ShooterGame.ShopItemDetailPanel.UpdatePreview // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void ResetPreview(struct UShopPurchasableModel* SelectedWeapon); // Function ShooterGame.ShopItemDetailPanel.ResetPreview // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void OnItemPreviewReset__DelegateSignature(); // DelegateFunction ShooterGame.ShopItemDetailPanel.OnItemPreviewReset__DelegateSignature // (MulticastDelegate|Public|Delegate) // @ game+0x3520f50
};

// Class ShooterGame.ShopSlotHeader
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopSlotHeader : UUserWidget {

	void Refresh(); // Function ShooterGame.ShopSlotHeader.Refresh // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopTeamLoadout
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopTeamLoadout : UUserWidget {

	void SetLocalPlayer(struct UShopPlayerModel* PlayerModel); // Function ShooterGame.ShopTeamLoadout.SetLocalPlayer // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void CreateTeammateWidgets(struct TArray<struct UShopPlayerModel*>& TeammatePlayerModels, struct UShopPlayerModel* PlayerModel); // Function ShooterGame.ShopTeamLoadout.CreateTeammateWidgets // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopConfirmationToast
// Size: 0x2c8 (Inherited: 0x2c8)
struct UShopConfirmationToast : UUserWidget {

	void FireFeedback(struct FText& TextToDisplay); // Function ShooterGame.ShopConfirmationToast.FireFeedback // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopScreen
// Size: 0x2d0 (Inherited: 0x2c8)
struct UShopScreen : UUserWidget {
	int32_t ZOrder; // 0x2c8(0x04)
	char pad_2CC[0x4]; // 0x2cc(0x04)

	void SetTeammatePlayers(struct TArray<struct UShopPlayerModel*>& Teammates); // Function ShooterGame.ShopScreen.SetTeammatePlayers // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void SetShopScreenCoordinator(struct UShopScreenCoordinator* Coordinator); // Function ShooterGame.ShopScreen.SetShopScreenCoordinator // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void SetSelfPlayer(struct UShopPlayerModel* Player); // Function ShooterGame.ShopScreen.SetSelfPlayer // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void SetPurchasables(struct TArray<struct UShopPurchasableModel*>& Purchasables); // Function ShooterGame.ShopScreen.SetPurchasables // (Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void SetGameInfo(struct UShopGameInfoModel* GameInfo); // Function ShooterGame.ShopScreen.SetGameInfo // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void SetDirty(); // Function ShooterGame.ShopScreen.SetDirty // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void SetCoordinatedShooterUIModel(struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel); // Function ShooterGame.ShopScreen.SetCoordinatedShooterUIModel // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void Open(); // Function ShooterGame.ShopScreen.Open // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void OnOpened(); // Function ShooterGame.ShopScreen.OnOpened // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void OnClosed(); // Function ShooterGame.ShopScreen.OnClosed // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
	void Close(); // Function ShooterGame.ShopScreen.Close // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopContentWidget
// Size: 0x340 (Inherited: 0x2c8)
struct UShopContentWidget : UUserWidget {
	struct UHorizontalBox* RankUpWidgetContainer; // 0x2c8(0x08)
	struct UShopAbilitiesContainer* AbilitiesContainer; // 0x2d0(0x08)
	struct UShopArmorCategoryContainer* ArmorContainer; // 0x2d8(0x08)
	struct UShopSidearmsCategoryContainer* SidearmsContainer; // 0x2e0(0x08)
	struct UShopItemCategoryContainer* HeavyWeaponsContainer; // 0x2e8(0x08)
	struct UShopItemCategoryContainer* ShotgunsContainer; // 0x2f0(0x08)
	struct UShopItemCategoryContainer* SMGsContainer; // 0x2f8(0x08)
	struct UShopItemCategoryContainer* SniperRiflesContainer; // 0x300(0x08)
	struct UShopItemCategoryContainer* RiflesContainer; // 0x308(0x08)
	struct UShopItemDetailPanel* ItemDetailPanel; // 0x310(0x08)
	struct UShopTeamLoadout* TeamLoadoutRecap; // 0x318(0x08)
	struct UShopConfirmationToast* Toast; // 0x320(0x08)
	struct UShopSlotHeader* ShopSlotHeaderArmor; // 0x328(0x08)
	struct UShopSlotHeader* ShopSlotHeaderPrimary; // 0x330(0x08)
	struct UShopSlotHeader* ShopSlotHeaderSidearm; // 0x338(0x08)

	struct UUserWidget* CreateShopWidgetFromData(struct APlayerController* OwningPlayer, struct UShopItemDetailPanel* ItemDetailPreview, struct UShopPurchasableModel* Model, struct UShopPlayerModel* PlayerModel, struct UInventorySlotModel* InventorySlotModel, struct UShopConfirmationToast* ShopConfirmationToast, enum class EAresItemSlot TargetSlot, bool bIsFavorite); // Function ShooterGame.ShopContentWidget.CreateShopWidgetFromData // (Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.ShopScreenCoordinator
// Size: 0xa8 (Inherited: 0x30)
struct UShopScreenCoordinator : UObject {
	char pad_30[0x28]; // 0x30(0x28)
	struct UCoordinatedShooterUIModel* CoordinatedShooterUIModel; // 0x58(0x08)
	struct UMenuStackManager* MenuStackManager; // 0x60(0x08)
	struct AShooterPlayerController* PlayerController; // 0x68(0x08)
	struct UMenuStackEntry* ShopMenuStackEntry; // 0x70(0x08)
	struct TArray<struct UShopPurchasableModel*> CurrentPurchasablesModel; // 0x78(0x10)
	struct TArray<struct UShopPlayerModel*> CurrentTeammateModel; // 0x88(0x10)
	struct UShopPlayerModel* CurrentPlayerModel; // 0x98(0x08)
	struct UShopGameInfoModel* CurrentGameInfoModel; // 0xa0(0x08)

	void ToggleVisibility(); // Function ShooterGame.ShopScreenCoordinator.ToggleVisibility // (Final|Native|Public|BlueprintCallable) // @ game+0x310deb0
	void OnOpenedShopScreen(); // Function ShooterGame.ShopScreenCoordinator.OnOpenedShopScreen // (Final|Native|Private) // @ game+0x310d9f0
	void OnClosedShopScreen(); // Function ShooterGame.ShopScreenCoordinator.OnClosedShopScreen // (Final|Native|Private) // @ game+0x310d940
	void HandleLocalPlayerStateChanged(struct AShooterPlayerState* NewState); // Function ShooterGame.ShopScreenCoordinator.HandleLocalPlayerStateChanged // (Final|Native|Private) // @ game+0x310d750
	struct TArray<struct UShopPlayerModel*> BuildTeammatesModel(struct APlayerController* PlayerController); // Function ShooterGame.ShopScreenCoordinator.BuildTeammatesModel // (Final|Native|Static|Private|BlueprintCallable|BlueprintPure) // @ game+0x310d250
	void BuildPurchasablesModel(struct AOwnerExclusivePlayerInfo* PlayerInfo, struct TArray<struct UShopPurchasableModel*>& OutPurchasables); // Function ShooterGame.ShopScreenCoordinator.BuildPurchasablesModel // (Final|Native|Static|Private|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x310d160
};

// Class ShooterGame.ShopScreenImplementation
// Size: 0x2f0 (Inherited: 0x2d0)
struct UShopScreenImplementation : UShopScreen {
	bool bIsUsingGamepad; // 0x2d0(0x01)
	char pad_2D1[0x1]; // 0x2d1(0x01)
	bool bGamepadCanClose; // 0x2d2(0x01)
	bool bShopIsOpen; // 0x2d3(0x01)
	char pad_2D4[0x4]; // 0x2d4(0x04)
	struct UWidget* GamepadFirstFocusWidget; // 0x2d8(0x08)
	struct TArray<struct UUserWidget*> GamepadChildWidgets; // 0x2e0(0x10)

	void OnInputDeviceSwapped(bool bUsingGamepad, bool bRefreshWidgetsOnly); // Function ShooterGame.ShopScreenImplementation.OnInputDeviceSwapped // (Final|Native|Public|BlueprintCallable) // @ game+0x31158d0
	void GamepadChangeAresInputMode(bool bIsUIOnly); // Function ShooterGame.ShopScreenImplementation.GamepadChangeAresInputMode // (Final|Native|Public|BlueprintCallable) // @ game+0x3115270
};

// Class ShooterGame.SignatureAbilityResourceComponent
// Size: 0x170 (Inherited: 0x168)
struct USignatureAbilityResourceComponent : UEquipmentChargeComponent {
	int32_t NumSignatureChargesPerUse; // 0x168(0x04)
	int32_t AuthSignatureChargeAmount; // 0x16c(0x04)

	void OnRep_AuthSignatureChargeAmount(); // Function ShooterGame.SignatureAbilityResourceComponent.OnRep_AuthSignatureChargeAmount // (Final|Native|Private) // @ game+0x2cb54e0
	int32_t GetSignatureChargeAmount(); // Function ShooterGame.SignatureAbilityResourceComponent.GetSignatureChargeAmount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3115560
};

// Class ShooterGame.SimpleLifecycleWidget
// Size: 0x2e8 (Inherited: 0x2c8)
struct USimpleLifecycleWidget : UUserWidget {
	struct FMulticastInlineDelegate OnShowCompleted; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnHideCompleted; // 0x2d8(0x10)

	void Show(); // Function ShooterGame.SimpleLifecycleWidget.Show // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2dc33c0
	void Hide(); // Function ShooterGame.SimpleLifecycleWidget.Hide // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2dc3390
};

// Class ShooterGame.SimpleReplicationSleepComponent
// Size: 0x118 (Inherited: 0x118)
struct USimpleReplicationSleepComponent : UReplicationSleepComponent {
};

// Class ShooterGame.SimpleSectionHeadersListModelBase
// Size: 0x70 (Inherited: 0x58)
struct USimpleSectionHeadersListModelBase : UWrapperListModel {
	struct TArray<struct FSimpleSectionHeadersListModelBase_HeaderInfo> HeaderList; // 0x58(0x10)
	char pad_68[0x8]; // 0x68(0x08)

	void SetIgnoreReplacedEvents(bool bNewValue); // Function ShooterGame.SimpleSectionHeadersListModelBase.SetIgnoreReplacedEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x3115b40
	bool MatchHeaderKey(struct FWildcard& item, struct FWildcard& Key); // Function ShooterGame.SimpleSectionHeadersListModelBase.MatchHeaderKey // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x3115750
	struct FSimpleSectionHeadersListModelBase_Location MapIndexOuterToInner(int32_t OuterIndex); // Function ShooterGame.SimpleSectionHeadersListModelBase.MapIndexOuterToInner // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31156c0
	int32_t MapIndexInnerToOuter(struct FSimpleSectionHeadersListModelBase_Location InnerLocation); // Function ShooterGame.SimpleSectionHeadersListModelBase.MapIndexInnerToOuter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3115620
	int32_t GetNumHeaders(); // Function ShooterGame.SimpleSectionHeadersListModelBase.GetNumHeaders // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3115530
	void GenerateHeaders(struct FWildcard& ItemBefore, struct FWildcard& ItemAfter, struct TArray<struct FWildcard>& OutNewHeaders); // Function ShooterGame.SimpleSectionHeadersListModelBase.GenerateHeaders // (Native|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x3115300
};

// Class ShooterGame.SimpleSectionHeadersListModel
// Size: 0x90 (Inherited: 0x70)
struct USimpleSectionHeadersListModel : USimpleSectionHeadersListModelBase {
	char pad_70[0x20]; // 0x70(0x20)

	void SetHeaderKeyMatchFunction(struct FDelegate& Delegate); // Function ShooterGame.SimpleSectionHeadersListModel.SetHeaderKeyMatchFunction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3115a80
	void SetGenerateHeadersDelegate(struct FDelegate& Delegate); // Function ShooterGame.SimpleSectionHeadersListModel.SetGenerateHeadersDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x31159c0
	void RebuildHeaders(); // Function ShooterGame.SimpleSectionHeadersListModel.RebuildHeaders // (Final|Native|Public|BlueprintCallable) // @ game+0x31159a0
	bool KeyMatchDynamicDelegate__DelegateSignature(struct FWildcard& item, struct FWildcard& Key); // DelegateFunction ShooterGame.SimpleSectionHeadersListModel.KeyMatchDynamicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x3520f50
	struct TArray<struct FWildcard> GenerateHeadersDynamicDelegate__DelegateSignature(struct FWildcard& ItemBefore, struct FWildcard& ItemAfter); // DelegateFunction ShooterGame.SimpleSectionHeadersListModel.GenerateHeadersDynamicDelegate__DelegateSignature // (Public|Delegate|HasOutParms) // @ game+0x3520f50
	struct USimpleSectionHeadersListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, struct FDelegate& GenerateHeadersDelegate, struct UObject* Outer); // Function ShooterGame.SimpleSectionHeadersListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x31150f0
};

// Class ShooterGame.SingleItemListModel
// Size: 0xa0 (Inherited: 0x48)
struct USingleItemListModel : UOrderedListModelBase {
	struct FWildcard ContentItem; // 0x48(0x40)
	char pad_88[0x18]; // 0x88(0x18)

	void SetItemCount(int32_t NewValue); // Function ShooterGame.SingleItemListModel.SetItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0x3115cf0
	void SetItem(struct FWildcard NewValue); // Function ShooterGame.SingleItemListModel.SetItem // (Final|Native|Public|BlueprintCallable) // @ game+0x3115bd0
	void NotifyItemModified(); // Function ShooterGame.SingleItemListModel.NotifyItemModified // (Final|Native|Public|BlueprintCallable) // @ game+0x31158b0
	void BP_SetKeyMatchFunction(struct FDelegate& NewValue); // Function ShooterGame.SingleItemListModel.BP_SetKeyMatchFunction // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3115030
};

// Class ShooterGame.SnapshotRewinderComponent
// Size: 0x100 (Inherited: 0xe8)
struct USnapshotRewinderComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	bool bSampleEveryFrame; // 0xf0(0x01)
	char pad_F1[0x3]; // 0xf1(0x03)
	float TimeBetweenRewindSnapshots; // 0xf4(0x04)
	float MaxRewindTime; // 0xf8(0x04)
	float LastSnapshotCreatedTimeStamp; // 0xfc(0x04)
};

// Class ShooterGame.SkeletalPoseRewinderComponent
// Size: 0x140 (Inherited: 0x100)
struct USkeletalPoseRewinderComponent : USnapshotRewinderComponent {
	struct USkeletalMeshComponent* SkeletalMeshComponent; // 0x100(0x08)
	struct TArray<struct FSkeletalPoseSnapshot> Snapshots; // 0x108(0x10)
	char pad_118[0x28]; // 0x118(0x28)
};

// Class ShooterGame.SkinUpgradeButton
// Size: 0x2f8 (Inherited: 0x2c8)
struct USkinUpgradeButton : UUserWidget {
	struct FGuid ProgressionDefinitionID; // 0x2c8(0x10)
	enum class ESkinUpgradeState UpgradeState; // 0x2d8(0x01)
	char pad_2D9[0x3]; // 0x2d9(0x03)
	int32_t CurrentTier; // 0x2dc(0x04)
	int32_t NextTier; // 0x2e0(0x04)
	int32_t Cost; // 0x2e4(0x04)
	struct UCurrencyDataAsset* CurrencyDataAsset; // 0x2e8(0x08)
	struct USidegradeModel* CurrentSidegradeModel; // 0x2f0(0x08)

	void UpdateStateForVariantSelect(struct UEquippableSkinHandle* SkinHandle, struct UEquippableSkinChromaHandle* ChromaHandle, struct UInventoryManager* InventoryManager, struct UWorld* World); // Function ShooterGame.SkinUpgradeButton.UpdateStateForVariantSelect // (Final|Native|Protected) // @ game+0x3115ff0
	void UpdateStateForNextLevel(struct UEquippableSkinHandle* SkinHandle, struct UWorld* World); // Function ShooterGame.SkinUpgradeButton.UpdateStateForNextLevel // (Final|Native|Protected) // @ game+0x3115f20
	void UpdateButtonState(struct UEquippableSkinHandle* SkinHandle, struct UEquippableSkinChromaHandle* ChromaHandle); // Function ShooterGame.SkinUpgradeButton.UpdateButtonState // (Final|Native|Public|BlueprintCallable) // @ game+0x3115e50
	void SetStateForAvailableVariant(struct UEquippableSkinChromaHandle* ChromaHandle, struct UWorld* World); // Function ShooterGame.SkinUpgradeButton.SetStateForAvailableVariant // (Final|Native|Protected) // @ game+0x3115d80
	void InitButtonState(struct UEquippableSkinHandle* SkinHandle); // Function ShooterGame.SkinUpgradeButton.InitButtonState // (Final|Native|Public|BlueprintCallable) // @ game+0x3115590
	bool AllChromasUnlockedForSkin(struct UEquippableSkinHandle* SkinHandle); // Function ShooterGame.SkinUpgradeButton.AllChromasUnlockedForSkin // (Final|Native|Protected) // @ game+0x3114f90
};

// Class ShooterGame.SlashCommandHandler
// Size: 0x30 (Inherited: 0x30)
struct USlashCommandHandler : UInterface {
};

// Class ShooterGame.SlotModifierComponent
// Size: 0xf8 (Inherited: 0xe8)
struct USlotModifierComponent : UActorComponent {
	enum class EAresItemSlot TargetSlot; // 0xe8(0x01)
	enum class EAresItemSlot AddedCompatibility; // 0xe9(0x01)
	char pad_EA[0x6]; // 0xea(0x06)
	struct UAresInventory* Inventory; // 0xf0(0x08)
};

// Class ShooterGame.SniperCrosshairHudElement
// Size: 0x190 (Inherited: 0x178)
struct USniperCrosshairHudElement : UBaseCrosshairHudElement {
	struct TArray<struct FSniperCrosshairMaterial> SniperCrosshairMaterialsToDraw; // 0x178(0x10)
	struct UCurveFloat* SpreadToDistortionCurve; // 0x188(0x08)

	void PreDrawCrosshairMaterial(struct UMaterialInstanceDynamic* MaterialInstanceDynamic, struct AAresEquippable* CurrentEquippable); // Function ShooterGame.SniperCrosshairHudElement.PreDrawCrosshairMaterial // (Event|Protected|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.SocialPartyTeam
// Size: 0x88 (Inherited: 0x30)
struct USocialPartyTeam : UObject {
	struct TArray<struct USocialPlayer*> Players; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPlayerAdded; // 0x40(0x10)
	struct FMulticastInlineDelegate OnPlayerRemoved; // 0x50(0x10)
	char pad_60[0x28]; // 0x60(0x28)

	void RemovePlayerIfPresent(struct USocialPlayer* Player); // Function ShooterGame.SocialPartyTeam.RemovePlayerIfPresent // (Final|Native|Public) // @ game+0x311c750
	struct TScriptInterface<IOrderedListModel> GetPlayersModel(); // Function ShooterGame.SocialPartyTeam.GetPlayersModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bc40
	struct TArray<struct USocialPlayer*> GetPlayers(); // Function ShooterGame.SocialPartyTeam.GetPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bc10
	void AddPlayerIfNeeded(struct USocialPlayer* Player); // Function ShooterGame.SocialPartyTeam.AddPlayerIfNeeded // (Final|Native|Public) // @ game+0x311af60
};

// Class ShooterGame.SocialPartyModel
// Size: 0x1d0 (Inherited: 0x30)
struct USocialPartyModel : UObject {
	struct FString PartyID; // 0x30(0x10)
	struct FMulticastInlineDelegate OnOwnerProvisioningFlowChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOwnerSessionLoopStateChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnOwnerMatchMapChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnOwnerMatchScoreChanged; // 0x70(0x10)
	struct FMulticastInlineDelegate OnPartyClientVersionChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnPartyStateChanged; // 0x90(0x10)
	struct FMulticastInlineDelegate OnPartyAccessibilityChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnIsPartyOpenChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnIsJoinableChanged; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnIsMyPartyChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnMaxPartySizeChanged; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnPartySizeChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnVersionChanged; // 0x100(0x10)
	struct FMulticastInlineDelegate OnQueueEntryTimeChanged; // 0x110(0x10)
	struct FMulticastInlineDelegate OnPendingRequestChanged; // 0x120(0x10)
	struct USocialPartyTeam* AllMembers; // 0x130(0x08)
	enum class EProvisioningFlowID OwnerProvisioningFlow; // 0x138(0x01)
	enum class ESessionLoopState OwnerSessionLoopState; // 0x139(0x01)
	char pad_13A[0x6]; // 0x13a(0x06)
	struct FString OwnerMatchMap; // 0x140(0x10)
	struct FString OwnerMatchCurrentTeam; // 0x150(0x10)
	int32_t OwnerMatchScoreAllyTeam; // 0x160(0x04)
	int32_t OwnerMatchScoreEnemyTeam; // 0x164(0x04)
	bool bIsCustomGame; // 0x168(0x01)
	char pad_169[0x7]; // 0x169(0x07)
	struct USocialPlayer* PartyLeader; // 0x170(0x08)
	struct FString PartyClientVersion; // 0x178(0x10)
	enum class EAresPartyState PartyState; // 0x188(0x01)
	enum class EAresPartyAccessibility PartyAccessibility; // 0x189(0x01)
	bool bIsPartyOpen; // 0x18a(0x01)
	bool bIsJoinable; // 0x18b(0x01)
	bool bIsMyParty; // 0x18c(0x01)
	bool bHasPendingRequest; // 0x18d(0x01)
	char pad_18E[0x2]; // 0x18e(0x02)
	int32_t MaxPartySize; // 0x190(0x04)
	int32_t PartySize; // 0x194(0x04)
	int32_t Version; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)
	struct FDateTime QueueEntryTime; // 0x1a0(0x08)
	bool bHasInvite; // 0x1a8(0x01)
	char pad_1A9[0x7]; // 0x1a9(0x07)
	struct FDateTime LastInviteSent; // 0x1b0(0x08)
	bool bHasRequest; // 0x1b8(0x01)
	char pad_1B9[0x7]; // 0x1b9(0x07)
	struct FDateTime LastRequestSent; // 0x1c0(0x08)
	char pad_1C8[0x8]; // 0x1c8(0x08)

	void RemovePlayer(struct USocialPlayer* Player); // Function ShooterGame.SocialPartyModel.RemovePlayer // (Final|Native|Public) // @ game+0x311c6c0
	bool IsPartyOpen(); // Function ShooterGame.SocialPartyModel.IsPartyOpen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c4b0
	bool IsJoinable(); // Function ShooterGame.SocialPartyModel.IsJoinable // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c490
	bool HasPendingRequest(); // Function ShooterGame.SocialPartyModel.HasPendingRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c2c0
	int32_t GetVersion(); // Function ShooterGame.SocialPartyModel.GetVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bcc0
	struct FDateTime GetQueueEntryTime(); // Function ShooterGame.SocialPartyModel.GetQueueEntryTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bc80
	enum class EAresPartyState GetPartyState(); // Function ShooterGame.SocialPartyModel.GetPartyState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bbf0
	int32_t GetPartySize(); // Function ShooterGame.SocialPartyModel.GetPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bbd0
	struct FString GetPartyClientVersion(); // Function ShooterGame.SocialPartyModel.GetPartyClientVersion // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bad0
	enum class EAresPartyAccessibility GetPartyAccessibility(); // Function ShooterGame.SocialPartyModel.GetPartyAccessibility // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bab0
	enum class ESessionLoopState GetOwnerSessionLoopState(); // Function ShooterGame.SocialPartyModel.GetOwnerSessionLoopState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311ba90
	enum class EProvisioningFlowID GetOwnerProvisioningFlow(); // Function ShooterGame.SocialPartyModel.GetOwnerProvisioningFlow // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311ba70
	int32_t GetOwnerMatchScoreEnemyTeam(); // Function ShooterGame.SocialPartyModel.GetOwnerMatchScoreEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311ba50
	int32_t GetOwnerMatchScoreAllyTeam(); // Function ShooterGame.SocialPartyModel.GetOwnerMatchScoreAllyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb5380
	struct FString GetOwnerMatchMap(); // Function ShooterGame.SocialPartyModel.GetOwnerMatchMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8290
	struct FString GetOwnerMatchCurrentTeam(); // Function ShooterGame.SocialPartyModel.GetOwnerMatchCurrentTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b970
	int32_t GetMaxPartySize(); // Function ShooterGame.SocialPartyModel.GetMaxPartySize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b810
	bool GetIsMyParty(); // Function ShooterGame.SocialPartyModel.GetIsMyParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b7b0
};

// Class ShooterGame.SocialPlayer
// Size: 0xe8 (Inherited: 0x30)
struct USocialPlayer : UObject {
	struct FMulticastInlineDelegate OnInviteChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnRequestChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnNotificationAdded; // 0x50(0x10)
	struct FMulticastInlineDelegate OnNotificationRemoved; // 0x60(0x10)
	struct FMulticastInlineDelegate OnPartyMembersChanged; // 0x70(0x10)
	struct UPlatformPlayer* PlatformPlayer; // 0x80(0x08)
	struct UPartyMessageModel* Invite; // 0x88(0x08)
	struct UPartyMessageModel* Request; // 0x90(0x08)
	struct FDateTime LastInteraction; // 0x98(0x08)
	struct TArray<struct UNotification*> NotificationsForPlayer; // 0xa0(0x10)
	char pad_B0[0x10]; // 0xb0(0x10)
	struct USocialPartyModel* AssociatedSocialParty; // 0xc0(0x08)
	struct USocialPartyModel* LastAssociatedSocialParty; // 0xc8(0x08)
	char pad_D0[0x18]; // 0xd0(0x18)

	bool HasRequest(); // Function ShooterGame.SocialPlayer.HasRequest // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c2f0
	bool HasNotifications(); // Function ShooterGame.SocialPlayer.HasNotifications // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c290
	bool HasInvite(); // Function ShooterGame.SocialPlayer.HasInvite // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c1a0
	bool HasAssociatedSocialParty(); // Function ShooterGame.SocialPlayer.HasAssociatedSocialParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c170
	enum class EAresSocialPlayerCategory GetSocialCategory(); // Function ShooterGame.SocialPlayer.GetSocialCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bca0
	struct UPartyMessageModel* GetRequest(); // Function ShooterGame.SocialPlayer.GetRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x2dcbd90
	struct UPlatformPlayer* GetPlatformPlayer(); // Function ShooterGame.SocialPlayer.GetPlatformPlayer // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2301cb0
	struct TArray<struct UNotification*> GetNotifications(); // Function ShooterGame.SocialPlayer.GetNotifications // (Final|Native|Public|BlueprintCallable) // @ game+0x311b830
	enum class EAresSocialPlayerCategory GetLastSocialCategory(); // Function ShooterGame.SocialPlayer.GetLastSocialCategory // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b7f0
	struct UPartyMessageModel* GetInvite(bool& HasInvite); // Function ShooterGame.SocialPlayer.GetInvite // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x311b710
	struct USocialPartyModel* GetAssociatedSocialParty(); // Function ShooterGame.SocialPlayer.GetAssociatedSocialParty // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3ad60
};

// Class ShooterGame.SocialViewControllerV3
// Size: 0x358 (Inherited: 0x80)
struct USocialViewControllerV3 : UInitSystem {
	struct FMulticastInlineDelegate OnCurrentPartyChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnFriendPartyListWasReset; // 0x90(0x10)
	struct FMulticastInlineDelegate OnNumFriendPartiesOnlineChanged; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnNumFriendsOnlineInPartiesChanged; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnFriendsOnlineInOtherGamesListWasReset; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnNumFriendsOnlineInOtherGamesChanged; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnFriendsOfflineListWasReset; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnNumFriendsOfflineChanged; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnSocialPartyAdded; // 0x100(0x10)
	struct FMulticastInlineDelegate OnSocialPartyExpired; // 0x110(0x10)
	struct FMulticastInlineDelegate OnSocialPlayerCategoryChanged; // 0x120(0x10)
	struct FMulticastInlineDelegate OnSocialPlayerAdded; // 0x130(0x10)
	struct FMulticastInlineDelegate OnSocialPlayerExpired; // 0x140(0x10)
	struct FMulticastInlineDelegate OnAllModelsConsistent; // 0x150(0x10)
	struct FMulticastInlineDelegate OnPartyMessageAdded; // 0x160(0x10)
	struct FMulticastInlineDelegate OnPartyMessageRemoved; // 0x170(0x10)
	struct FMulticastInlineDelegate OnSocialPanelOpenStateChanged; // 0x180(0x10)
	char pad_190[0x10]; // 0x190(0x10)
	struct UPartyManager* PartyManager; // 0x1a0(0x08)
	struct UPartyViewController* PartyViewController; // 0x1a8(0x08)
	struct UNotificationManager* NotificationManager; // 0x1b0(0x08)
	struct UPartyModel* PartyModel; // 0x1b8(0x08)
	struct UPresenceManager* PresenceManager; // 0x1c0(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0x1c8(0x08)
	struct UConfigManager* ConfigManager; // 0x1d0(0x08)
	struct UPlayerListingManager* PlayerListingManager; // 0x1d8(0x08)
	struct UFriendsManager* FriendsManager; // 0x1e0(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x1e8(0x08)
	char pad_1F0[0x10]; // 0x1f0(0x10)
	struct USocialPartyModel* CurrentParty; // 0x200(0x08)
	char pad_208[0x10]; // 0x208(0x10)
	struct TArray<struct USocialPartyModel*> FriendParties_Backing; // 0x218(0x10)
	char pad_228[0x30]; // 0x228(0x30)
	struct TArray<struct USocialPlayer*> FriendsOnlineInOtherGames; // 0x258(0x10)
	char pad_268[0x8]; // 0x268(0x08)
	struct TArray<struct USocialPlayer*> FriendsOffline; // 0x270(0x10)
	char pad_280[0x8]; // 0x280(0x08)
	struct TMap<struct FString, struct USocialPartyModel*> AllSocialPartiesByID; // 0x288(0x50)
	struct TMap<struct FString, struct USocialPlayer*> AllSocialPlayersBySubject; // 0x2d8(0x50)
	struct TArray<struct UPartyMessageModel*> PartyMessages; // 0x328(0x10)
	struct TArray<struct UPartyMessageModel*> HiddenPartyMessages; // 0x338(0x10)
	char pad_348[0x8]; // 0x348(0x08)
	struct FTimerHandle ScheduledUpdateTimerHandle; // 0x350(0x08)

	void UpdatePartyMessageVisibility(); // Function ShooterGame.SocialViewControllerV3.UpdatePartyMessageVisibility // (Final|Native|Private) // @ game+0x311cae0
	void UpdateInvalidProperties(); // Function ShooterGame.SocialViewControllerV3.UpdateInvalidProperties // (Final|Native|Private) // @ game+0x311cac0
	void SetUpdatePolicy(enum class ESocialViewControllerUpdatePolicy NewPolicy); // Function ShooterGame.SocialViewControllerV3.SetUpdatePolicy // (Final|Native|Public|BlueprintCallable) // @ game+0x311ca40
	void SendFriendRequest(struct FString Name, struct FString TagLine); // Function ShooterGame.SocialViewControllerV3.SendFriendRequest // (Final|Native|Public|BlueprintCallable) // @ game+0x311c930
	void RequestToJoin(struct USocialPartyModel* SocialParty, struct FDelegate CompletedCallback, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.RequestToJoin // (Final|Native|Public|BlueprintCallable) // @ game+0x311c7e0
	void NotifySocialPanelChangedOpenState(bool bIsOpen); // Function ShooterGame.SocialViewControllerV3.NotifySocialPanelChangedOpenState // (Final|Native|Public|BlueprintCallable) // @ game+0x311c630
	bool JoinPartySolo(struct USocialPartyModel* SocialParty, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.JoinPartySolo // (Final|Native|Public|BlueprintCallable) // @ game+0x311c4d0
	void InvitePlayer(struct UPlatformPlayer* Player, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.InvitePlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x311c340
	void InvalidatePlayersAndParties(); // Function ShooterGame.SocialViewControllerV3.InvalidatePlayersAndParties // (Final|Native|Private) // @ game+0x311c320
	bool HasInviteFromSubject(struct FString Subject); // Function ShooterGame.SocialViewControllerV3.HasInviteFromSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c1d0
	void HandleRequestRemoved(struct UPartyMessageModel* MessageModel); // Function ShooterGame.SocialViewControllerV3.HandleRequestRemoved // (Final|Native|Private) // @ game+0x311c0e0
	void HandleRequestAdded(struct UPartyMessageModel* MessageModel); // Function ShooterGame.SocialViewControllerV3.HandleRequestAdded // (Final|Native|Private) // @ game+0x311c050
	void HandleReceivedInviteRemoved(struct UPartyMessageModel* MessageModel); // Function ShooterGame.SocialViewControllerV3.HandleReceivedInviteRemoved // (Final|Native|Private) // @ game+0x311bfc0
	void HandleReceivedInviteAdded(struct UPartyMessageModel* MessageModel); // Function ShooterGame.SocialViewControllerV3.HandleReceivedInviteAdded // (Final|Native|Private) // @ game+0x311bf30
	void HandlePartyPlayerUpdated(); // Function ShooterGame.SocialViewControllerV3.HandlePartyPlayerUpdated // (Final|Native|Private) // @ game+0x311bf10
	void HandlePartyInvitesSettingChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.SocialViewControllerV3.HandlePartyInvitesSettingChanged // (Final|Native|Private) // @ game+0x311bdf0
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.SocialViewControllerV3.HandleGameFlowStateChanged // (Final|Native|Private) // @ game+0x311bd70
	void HandleFriendRemoved(struct UFriendModel* FriendModel); // Function ShooterGame.SocialViewControllerV3.HandleFriendRemoved // (Final|Native|Private) // @ game+0x311bce0
	void HandleFriendAdded(struct UFriendModel* FriendModel); // Function ShooterGame.SocialViewControllerV3.HandleFriendAdded // (Final|Native|Private) // @ game+0x311bce0
	struct TArray<struct UPartyMessageModel*> GetPartyMessages(); // Function ShooterGame.SocialViewControllerV3.GetPartyMessages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bb00
	int32_t GetNumFriendsOnlineInParties(); // Function ShooterGame.SocialViewControllerV3.GetNumFriendsOnlineInParties // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b920
	int32_t GetNumFriendsOnlineInOtherGames(); // Function ShooterGame.SocialViewControllerV3.GetNumFriendsOnlineInOtherGames // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b900
	int32_t GetNumFriendsOffline(); // Function ShooterGame.SocialViewControllerV3.GetNumFriendsOffline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b8e0
	int32_t GetNumFriendPartiesOnline(); // Function ShooterGame.SocialViewControllerV3.GetNumFriendPartiesOnline // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b8c0
	int32_t GetNumberOfOutstandingInvites(); // Function ShooterGame.SocialViewControllerV3.GetNumberOfOutstandingInvites // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b940
	bool GetLastKnownSocialPanelOpenState(); // Function ShooterGame.SocialViewControllerV3.GetLastKnownSocialPanelOpenState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b7d0
	struct TArray<struct USocialPlayer*> GetFriendsOnlineInOtherGames(); // Function ShooterGame.SocialViewControllerV3.GetFriendsOnlineInOtherGames // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x311b640
	struct TArray<struct USocialPlayer*> GetFriendsOffline(); // Function ShooterGame.SocialViewControllerV3.GetFriendsOffline // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x311b570
	struct TScriptInterface<IOrderedListModel> GetFriendPartiesModel(); // Function ShooterGame.SocialViewControllerV3.GetFriendPartiesModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b530
	struct TArray<struct USocialPartyModel*> GetFriendParties(); // Function ShooterGame.SocialViewControllerV3.GetFriendParties // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b460
	struct USocialPartyModel* GetCurrentParty(); // Function ShooterGame.SocialViewControllerV3.GetCurrentParty // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x311b440
	struct TMap<struct FString, struct USocialPlayer*> GetAllPlayers(); // Function ShooterGame.SocialViewControllerV3.GetAllPlayers // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x311b410
	struct USocialPlayer* FindSocialPlayerBySubject(struct FString Subject); // Function ShooterGame.SocialViewControllerV3.FindSocialPlayerBySubject // (Final|Native|Public|BlueprintCallable) // @ game+0x311b350
	struct USocialPartyModel* FindSocialPartyByPartyID(struct FString PartyID); // Function ShooterGame.SocialViewControllerV3.FindSocialPartyByPartyID // (Final|Native|Public|BlueprintCallable) // @ game+0x311b290
	void DismissRequestOnPlayer(struct USocialPlayer* Player, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.DismissRequestOnPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x311b140
	void DismissInviteOnPlayer(struct USocialPlayer* Player, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.SocialViewControllerV3.DismissInviteOnPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x311aff0
};

// Class ShooterGame.SortedListModelBase
// Size: 0x68 (Inherited: 0x68)
struct USortedListModelBase : UIndexedWrapperListModelBase {

	bool IsStableSort(); // Function ShooterGame.SortedListModelBase.IsStableSort // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x2cee740
	bool IsSortingActive(); // Function ShooterGame.SortedListModelBase.IsSortingActive // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x2dc37f0
	bool CompareLessThan(struct FWildcard& ItemA, struct FWildcard& ItemB); // Function ShooterGame.SortedListModelBase.CompareLessThan // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x31218c0
	void BP_Resort(); // Function ShooterGame.SortedListModelBase.BP_Resort // (Final|Native|Protected|BlueprintCallable) // @ game+0x3121850
};

// Class ShooterGame.SortedListModel
// Size: 0x78 (Inherited: 0x68)
struct USortedListModel : USortedListModelBase {
	char pad_68[0x10]; // 0x68(0x10)

	void SetComparisonDelegate(struct FDelegate& Delegate); // Function ShooterGame.SortedListModel.SetComparisonDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3122a20
	void Resort(); // Function ShooterGame.SortedListModel.Resort // (Final|Native|Public|BlueprintCallable) // @ game+0x3121850
	struct USortedListModel* Create(struct TScriptInterface<IOrderedListModel> ListModel, struct FDelegate& ComparisonDelegate, struct UObject* Outer); // Function ShooterGame.SortedListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3121b80
};

// Class ShooterGame.SortedMapToListModelBase
// Size: 0xb8 (Inherited: 0x48)
struct USortedMapToListModelBase : UOrderedListModelBase {
	struct TArray<struct FWildcard> Items; // 0x48(0x10)
	struct TMap<struct FWildcard, int32_t> KeyToIndexMap; // 0x58(0x50)
	struct TScriptInterface<IUnorderedMapModel> WrappedMapModel; // 0xa8(0x10)

	void SetMapModel(struct TScriptInterface<IUnorderedMapModel> NewValue); // Function ShooterGame.SortedMapToListModelBase.SetMapModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3122ba0
	bool IsSortingActive(); // Function ShooterGame.SortedMapToListModelBase.IsSortingActive // (Native|Event|Protected|BlueprintEvent|Const) // @ game+0x2e0b720
	void HandleMapChanged(struct UObject* Source, struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.SortedMapToListModelBase.HandleMapChanged // (Final|Native|Private|HasOutParms) // @ game+0x3122220
	bool CompareLessThan(struct FWildcard& ItemA, struct FWildcard& ItemB); // Function ShooterGame.SortedMapToListModelBase.CompareLessThan // (Native|Event|Protected|HasOutParms|BlueprintEvent|Const) // @ game+0x3121a20
	void BP_Resort(); // Function ShooterGame.SortedMapToListModelBase.BP_Resort // (Final|Native|Protected|BlueprintCallable) // @ game+0x3121870
};

// Class ShooterGame.SortedMapToListModel
// Size: 0xc8 (Inherited: 0xb8)
struct USortedMapToListModel : USortedMapToListModelBase {
	char pad_B8[0x10]; // 0xb8(0x10)

	void SetComparisonDelegate(struct FDelegate& Delegate); // Function ShooterGame.SortedMapToListModel.SetComparisonDelegate // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3122ae0
	void Resort(); // Function ShooterGame.SortedMapToListModel.Resort // (Final|Native|Public|BlueprintCallable) // @ game+0x3121870
	struct USortedMapToListModel* Create(struct TScriptInterface<IUnorderedMapModel> MapModel, struct FDelegate& ComparisonDelegate, struct UObject* Outer); // Function ShooterGame.SortedMapToListModel.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x3121d00
};

// Class ShooterGame.SoundNodeConstParamCrossFade
// Size: 0x80 (Inherited: 0x60)
struct USoundNodeConstParamCrossFade : USoundNode {
	struct TArray<struct FDistanceDatum> CrossFadeInput; // 0x60(0x10)
	struct FName ParamName; // 0x70(0x0c)
	char pad_7C[0x4]; // 0x7c(0x04)
};

// Class ShooterGame.SoundNodeLocalPlayer
// Size: 0x60 (Inherited: 0x60)
struct USoundNodeLocalPlayer : USoundNode {
};

// Class ShooterGame.SpawnActorProjectileEffectComponent
// Size: 0x128 (Inherited: 0xf8)
struct USpawnActorProjectileEffectComponent : UBaseProjectileEffectComponent {
	struct FMulticastInlineDelegate OnSpawnActor; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnSpawnActorFailed; // 0x108(0x10)
	enum class ESpawnActorCollisionHandlingMethod SpawnCollision; // 0x118(0x01)
	char pad_119[0x7]; // 0x119(0x07)
	struct AActor* ActorSpawned; // 0x120(0x08)

	struct FTransform GetSpawnTransform(); // Function ShooterGame.SpawnActorProjectileEffectComponent.GetSpawnTransform // (BlueprintAuthorityOnly|Native|Event|Public|HasDefaults|BlueprintEvent) // @ game+0x31221b0
};

// Class ShooterGame.SpawnActorStateComponent
// Size: 0x350 (Inherited: 0x2c8)
struct USpawnActorStateComponent : UScriptStateComponent {
	struct FMulticastInlineDelegate OnSetSpawnVariables; // 0x2c8(0x10)
	struct FMulticastInlineDelegate OnSpawnActor; // 0x2d8(0x10)
	struct TArray<struct FSpawnActorInfo> SpawnedActors; // 0x2e8(0x10)
	enum class ESpawnActorCollisionHandlingMethod SpawnMethod; // 0x2f8(0x01)
	bool bWaitForClientSpawn; // 0x2f9(0x01)
	char pad_2FA[0x6]; // 0x2fa(0x06)
	struct AActor* SpawnedActorType; // 0x300(0x08)
	bool bCosmeticActor; // 0x308(0x01)
	bool bPossessablePawn; // 0x309(0x01)
	char pad_30A[0x46]; // 0x30a(0x46)

	void MulticastConfirmActorSpawned(bool bValidActor, struct AActor* SpawnedActor); // Function ShooterGame.SpawnActorStateComponent.MulticastConfirmActorSpawned // (Final|Net|NetReliableNative|Event|NetMulticast|Private) // @ game+0x3122320
	bool CanSpawn(); // Function ShooterGame.SpawnActorStateComponent.CanSpawn // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3121890
};

// Class ShooterGame.SpawnPointGeneratorComponent
// Size: 0xf8 (Inherited: 0xe8)
struct USpawnPointGeneratorComponent : UActorComponent {
	struct FMulticastInlineDelegate OnSpawnPointsGenerated; // 0xe8(0x10)

	struct TArray<struct AShooterTeamStart*> GetGeneratedSpawnPoints(); // Function ShooterGame.SpawnPointGeneratorComponent.GetGeneratedSpawnPoints // (BlueprintAuthorityOnly|Event|Public|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.SpawnPointPlayerSpawner
// Size: 0x30 (Inherited: 0x30)
struct USpawnPointPlayerSpawner : UPlayerSpawner {

	struct USpawnPointPlayerSpawner* CreateSpawnPointSpawner(); // Function ShooterGame.SpawnPointPlayerSpawner.CreateSpawnPointSpawner // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3121e80
};

// Class ShooterGame.SpawnPointScorerComponent
// Size: 0x1a8 (Inherited: 0xe8)
struct USpawnPointScorerComponent : UActorComponent {
	struct FMulticastInlineDelegate OnSpawnPointDataInitialized; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnSpawnPointUsed; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnSpawnPointUpdated; // 0x108(0x10)
	float FFACharacterLookAheadTimeSeconds; // 0x118(0x04)
	float TwoTeamCharacterLookAheadTimeSeconds; // 0x11c(0x04)
	float FFASpawnPointLookAheadTimeSeconds; // 0x120(0x04)
	float TwoTeamSpawnPointLookAheadTimeSeconds; // 0x124(0x04)
	float SpawnPointLookAheadBoxEnabledMultiplier; // 0x128(0x04)
	int32_t DesiredNumZeroVisibilitySpawnPoints; // 0x12c(0x04)
	float MinDynamicAdjustmentMultiplier; // 0x130(0x04)
	float MaxDynamicAdjustmentMultiplier; // 0x134(0x04)
	float DynamicAdjustmentIncrementAmount; // 0x138(0x04)
	int32_t NumSpawnPointsToReservePerAdditionalDeadCharacter; // 0x13c(0x04)
	float InvalidationDistance; // 0x140(0x04)
	float DefaultCharacterEyeHeight; // 0x144(0x04)
	float DefaultCharacterRunSpeed; // 0x148(0x04)
	float DefaultCharacterJumpSpeed; // 0x14c(0x04)
	struct TArray<struct AShooterCharacter*> RegisteredShooterCharacters; // 0x150(0x10)
	struct TArray<struct FSpawnPointData> SpawnPoints; // 0x160(0x10)
	struct TArray<int32_t> InitialSpawnPointIndices; // 0x170(0x10)
	struct TArray<enum class EAresTeamRole> RegisteredTeamRoles; // 0x180(0x10)
	char pad_190[0x18]; // 0x190(0x18)

	void UpdateTeamList(); // Function ShooterGame.SpawnPointScorerComponent.UpdateTeamList // (Final|Native|Private) // @ game+0x1e6e7b0
	void SetSpawnPointScoringPaused(bool Paused); // Function ShooterGame.SpawnPointScorerComponent.SetSpawnPointScoringPaused // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3122d60
	void SetSpawnPointScore(int32_t SpawnPointIndex, enum class EAresTeamRole TeamRole, float NewScore); // Function ShooterGame.SpawnPointScorerComponent.SetSpawnPointScore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3122c40
	void ResetSpawnPointScoringData(); // Function ShooterGame.SpawnPointScorerComponent.ResetSpawnPointScoringData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x31228e0
	void OnSpawnPointsGenerated(struct TArray<struct AShooterTeamStart*>& GeneratedSpawnPoints); // Function ShooterGame.SpawnPointScorerComponent.OnSpawnPointsGenerated // (Final|Native|Private|HasOutParms) // @ game+0x2e5ed60
	float GetSpawnPointScore(int32_t SpawnPointIndex, enum class EAresTeamRole TeamRole); // Function ShooterGame.SpawnPointScorerComponent.GetSpawnPointScore // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x3121fa0
	struct TArray<struct FSpawnPointData> GetSpawnPoints(); // Function ShooterGame.SpawnPointScorerComponent.GetSpawnPoints // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3122070
	struct TArray<struct FSpawnPointData> GetSpawnPointData(); // Function ShooterGame.SpawnPointScorerComponent.GetSpawnPointData // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3121ee0
	float GetLookAheadDynamicAdjustmentMultiplier(); // Function ShooterGame.SpawnPointScorerComponent.GetLookAheadDynamicAdjustmentMultiplier // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311b810
	struct TArray<int32_t> GetInitialSpawnPointIndices(); // Function ShooterGame.SpawnPointScorerComponent.GetInitialSpawnPointIndices // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3121eb0
	struct TMap<enum class EAresTeamRole, float> CalculateSpawnPointScore(struct FSpawnPointData& SpawnPointData, struct TArray<enum class EAresTeamRole>& TeamRoles); // Function ShooterGame.SpawnPointScorerComponent.CalculateSpawnPointScore // (BlueprintAuthorityOnly|Event|Protected|HasOutParms|BlueprintEvent) // @ game+0x3520f50
};

// Class ShooterGame.SpawnPointScorerDebugComponent
// Size: 0x108 (Inherited: 0xe8)
struct USpawnPointScorerDebugComponent : UActorComponent {
	struct TArray<struct FSpawnPointDebugData> SpawnPointDebugData; // 0xe8(0x10)
	int32_t LastUsedSpawnPointDebugDataIndex; // 0xf8(0x04)
	int32_t LastUpdatedSpawnPointDebugDataIndex; // 0xfc(0x04)
	float LookAheadDynamicAdjustmentMultiplier; // 0x100(0x04)
	char pad_104[0x4]; // 0x104(0x04)

	void PauseSpawnPointScoringFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.SpawnPointScorerDebugComponent.PauseSpawnPointScoringFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void OnSpawnPointUsed(struct FSpawnPointData& SpawnPointData, enum class EAresTeamRole TeamRole); // Function ShooterGame.SpawnPointScorerDebugComponent.OnSpawnPointUsed // (Final|Native|Private|HasOutParms) // @ game+0x3122720
	void OnSpawnPointUpdated(struct FSpawnPointData& SpawnPointData); // Function ShooterGame.SpawnPointScorerDebugComponent.OnSpawnPointUpdated // (Final|Native|Private|HasOutParms) // @ game+0x31225e0
	void MulticastSpawnPointDebugData(struct TArray<struct FSpawnPointDebugData> ServerSpawnPointDebugData, int32_t ServerLastUsedSpawnPointDebugDataIndex, int32_t ServerLastUpdatedSpawnPointDebugDataIndex, float ServerLookAheadDynamicAdjustmentMultiplier); // Function ShooterGame.SpawnPointScorerDebugComponent.MulticastSpawnPointDebugData // (Final|Net|Native|Event|NetMulticast|Private) // @ game+0x3122400
	void FakeSpawnInPointFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.SpawnPointScorerDebugComponent.FakeSpawnInPointFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
};

// Class ShooterGame.SpectateInOrderActionComponent
// Size: 0x128 (Inherited: 0x108)
struct USpectateInOrderActionComponent : USpectateActionComponent {
	char pad_108[0x20]; // 0x108(0x20)

	void ServerSpectateInOrder(enum class EViewTargetSearchDirection Direction, bool bFromPlayerInput, int32_t AckIndex); // Function ShooterGame.SpectateInOrderActionComponent.ServerSpectateInOrder // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x3122900
	void RequestSpectatePrev(); // Function ShooterGame.SpectateInOrderActionComponent.RequestSpectatePrev // (Final|Native|Private) // @ game+0x31228c0
	void RequestSpectateNext(); // Function ShooterGame.SpectateInOrderActionComponent.RequestSpectateNext // (Final|Native|Private) // @ game+0x31228a0
};

// Class ShooterGame.SpectateSpecificActionComponent
// Size: 0x140 (Inherited: 0x108)
struct USpectateSpecificActionComponent : USpectateActionComponent {
	char pad_108[0x38]; // 0x108(0x38)

	void ServerSpectatePlayer(struct AShooterPlayerState* Target, int32_t AckIndex); // Function ShooterGame.SpectateSpecificActionComponent.ServerSpectatePlayer // (Final|Net|NetReliableNative|Event|Private|NetServer) // @ game+0x312c4f0
	void RequestSpectatePlayer(uint16_t PlayerIndex); // Function ShooterGame.SpectateSpecificActionComponent.RequestSpectatePlayer // (Final|Native|Private) // @ game+0x312c460
	struct FText GetActionNameToSpectate(struct AShooterCharacter* ViewedCharacter); // Function ShooterGame.SpectateSpecificActionComponent.GetActionNameToSpectate // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312b950
};

// Class ShooterGame.SpectatorWidgetBaseNative
// Size: 0x300 (Inherited: 0x2d8)
struct USpectatorWidgetBaseNative : UCoordinatedHUDElement {
	struct UImage* CharacterPortrait; // 0x2d8(0x08)
	struct UImage* ObjectiveIcon; // 0x2e0(0x08)
	struct UImage* objectiveIconbg; // 0x2e8(0x08)
	struct UTextBlock* PlayerName; // 0x2f0(0x08)
	struct UImage* teamBackground; // 0x2f8(0x08)
};

// Class ShooterGame.SplineMovementComponent
// Size: 0x160 (Inherited: 0x128)
struct USplineMovementComponent : UMovementComponent {
	struct USplineComponent* SplineComponent; // 0x128(0x08)
	struct TArray<struct FVector> Trajectory; // 0x130(0x10)
	float SpeedAlongSpline; // 0x140(0x04)
	enum class ESplineMovementSpeedUnit SpeedUnit; // 0x144(0x01)
	char pad_145[0x3]; // 0x145(0x03)
	float ClientPosition; // 0x148(0x04)
	float ServerPosition; // 0x14c(0x04)
	float ClientMovementTime; // 0x150(0x04)
	float ServerMovementTime; // 0x154(0x04)
	bool bClientReceivedNewServerMovementTime; // 0x158(0x01)
	char pad_159[0x3]; // 0x159(0x03)
	float ServerTeleportTime; // 0x15c(0x04)

	void TickClientMovement(float DeltaTime); // Function ShooterGame.SplineMovementComponent.TickClientMovement // (Final|Native|Protected) // @ game+0x312c7f0
	void SetPositionOnSpline(float SplineInputKey); // Function ShooterGame.SplineMovementComponent.SetPositionOnSpline // (Final|Native|Protected) // @ game+0x312c660
	void OnRep_Trajectory(); // Function ShooterGame.SplineMovementComponent.OnRep_Trajectory // (Final|Native|Protected) // @ game+0x312c2f0
	void OnRep_ServerMovementTime(float OldServerMovementTime); // Function ShooterGame.SplineMovementComponent.OnRep_ServerMovementTime // (Final|Native|Protected) // @ game+0x312c250
	void InitializeSplineComponent(); // Function ShooterGame.SplineMovementComponent.InitializeSplineComponent // (Final|Native|Protected) // @ game+0x312c0d0
	float GetPositionAlongSpline(); // Function ShooterGame.SplineMovementComponent.GetPositionAlongSpline // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x312bd00
	int32_t GetNumPoints(); // Function ShooterGame.SplineMovementComponent.GetNumPoints // (Final|Native|Protected|BlueprintCallable|BlueprintPure) // @ game+0x312bca0
	void AuthSetSpeedAlongSpline(float SpeedAlongSpline, enum class ESplineMovementSpeedUnit NewSpeedUnit); // Function ShooterGame.SplineMovementComponent.AuthSetSpeedAlongSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x312b880
	void AuthSetPositionOnSpline(float NewPosition); // Function ShooterGame.SplineMovementComponent.AuthSetPositionOnSpline // (Final|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AuthAddPoints(struct TArray<struct FVector>& Positions); // Function ShooterGame.SplineMovementComponent.AuthAddPoints // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2e5ed60
	void AuthAddPoint(struct FVector Position); // Function ShooterGame.SplineMovementComponent.AuthAddPoint // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x2d52e10
	void AdvanceSimulation(float DeltaTime); // Function ShooterGame.SplineMovementComponent.AdvanceSimulation // (Final|Native|Protected) // @ game+0x312b800
};

// Class ShooterGame.SplitBodyRotationBaseComponent
// Size: 0x168 (Inherited: 0xe8)
struct USplitBodyRotationBaseComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float TurnRateScale; // 0xf0(0x04)
	float TurnRateScaleBlendOut; // 0xf4(0x04)
	float TurnRateScaleSpecialTurnState; // 0xf8(0x04)
	float TurnAtAngle; // 0xfc(0x04)
	float MaxTurnAtAngle; // 0x100(0x04)
	float UpdateTurnAngleMinPercent; // 0x104(0x04)
	float UpdateTurnAngleMaxPercent; // 0x108(0x04)
	float StationaryRecenterTime; // 0x10c(0x04)
	float StationaryRecenterMinimumAngle; // 0x110(0x04)
	bool bEnableSpecialTurnState; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	float SpecialTurnStateDelayTime; // 0x118(0x04)
	float SpecialTurnStateDeltaYawTriggerValue; // 0x11c(0x04)
	float SpecialTurnStateAlphaBlendTriggerValue; // 0x120(0x04)
	char pad_124[0x14]; // 0x124(0x14)
	float LowerBodyTurnAngle; // 0x138(0x04)
	float LowerBodyAlphaBlend; // 0x13c(0x04)
	char pad_140[0x28]; // 0x140(0x28)
};

// Class ShooterGame.SplitBodyRotationComponent
// Size: 0x168 (Inherited: 0x168)
struct USplitBodyRotationComponent : USplitBodyRotationBaseComponent {
};

// Class ShooterGame.SplitBodyRotationGroundComponent
// Size: 0x168 (Inherited: 0x168)
struct USplitBodyRotationGroundComponent : USplitBodyRotationBaseComponent {
};

// Class ShooterGame.SplitBodyRotationRopeComponent
// Size: 0x168 (Inherited: 0x168)
struct USplitBodyRotationRopeComponent : USplitBodyRotationBaseComponent {
};

// Class ShooterGame.SprayUIData
// Size: 0x90 (Inherited: 0x90)
struct USprayUIData : UBaseContentUIData {
};

// Class ShooterGame.SprayDataAsset
// Size: 0xc8 (Inherited: 0x50)
struct USprayDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> Theme; // 0x80(0x30)
	struct TArray<struct TSoftClassPtr<UObject>> Levels; // 0xb0(0x10)
	enum class EAresSprayCategory Category; // 0xc0(0x01)
	char pad_C1[0x7]; // 0xc1(0x07)

	struct USprayLevelDataAsset* GetSprayLevel(int32_t LevelNumber); // Function ShooterGame.SprayDataAsset.GetSprayLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bd60
};

// Class ShooterGame.SprayEquipSlotUIData
// Size: 0x90 (Inherited: 0x90)
struct USprayEquipSlotUIData : UBaseContentUIData {
};

// Class ShooterGame.SprayEquipSlotDataAsset
// Size: 0x88 (Inherited: 0x50)
struct USprayEquipSlotDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	int32_t SprayCategoriesAllowed; // 0x80(0x04)
	char pad_84[0x4]; // 0x84(0x04)

	bool IsSprayCategoryAllowed(enum class EAresSprayCategory Category); // Function ShooterGame.SprayEquipSlotDataAsset.IsSprayCategoryAllowed // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312c0f0
};

// Class ShooterGame.SprayLevelDataAsset
// Size: 0xe8 (Inherited: 0x50)
struct USprayLevelDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TSoftClassPtr<UObject> SprayData; // 0x80(0x30)
	struct TSoftClassPtr<UObject> Spray; // 0xb0(0x30)
	int32_t SprayLevel; // 0xe0(0x04)
	char pad_E4[0x4]; // 0xe4(0x04)

	struct USprayDataAsset* GetSpray(); // Function ShooterGame.SprayLevelDataAsset.GetSpray // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bd30
};

// Class ShooterGame.SprayLevelUIData
// Size: 0x90 (Inherited: 0x90)
struct USprayLevelUIData : UBaseContentUIData {
};

// Class ShooterGame.SprayLoadoutComponent
// Size: 0x168 (Inherited: 0xe8)
struct USprayLoadoutComponent : UActorComponent {
	struct TMap<struct USprayEquipSlotDataAsset*, struct AAresSpray*> SprayLoadout; // 0xe8(0x50)
	struct FMulticastInlineDelegate OnRepLoadoutDelegate; // 0x138(0x10)
	struct TArray<struct AAresSpray*> SprayLoadoutV2; // 0x148(0x10)
	struct TArray<struct FGuid> SprayLoadoutLevelIDs; // 0x158(0x10)

	void OnRep_SprayLoadoutLevelIDs(); // Function ShooterGame.SprayLoadoutComponent.OnRep_SprayLoadoutLevelIDs // (Final|Native|Private) // @ game+0x312c2d0
	struct TArray<struct USprayLevelDataAsset*> GetSprayLoadoutLevelAssets(); // Function ShooterGame.SprayLoadoutComponent.GetSprayLoadoutLevelAssets // (Final|Native|Public|BlueprintCallable) // @ game+0x312bf50
	struct USprayLevelDataAsset* GetSprayLevelDataAsset(struct FGuid& LevelID); // Function ShooterGame.SprayLoadoutComponent.GetSprayLevelDataAsset // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x312bea0
	struct USprayLevelDataAsset* GetSprayLevelDataAsseAt(int32_t SlotIndex); // Function ShooterGame.SprayLoadoutComponent.GetSprayLevelDataAsseAt // (Final|Native|Public|BlueprintCallable) // @ game+0x312be00
};

// Class ShooterGame.StabilityComponent
// Size: 0x1c40 (Inherited: 0xe8)
struct UStabilityComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float InProgressCrouchPenalty; // 0xf0(0x04)
	char pad_F4[0x4]; // 0xf4(0x04)
	struct FRuntimeFloatCurve LandingPenaltyCurve; // 0xf8(0x88)
	bool bRecoveryEnabled; // 0x180(0x01)
	char pad_181[0x7]; // 0x181(0x07)
	struct FStabilityVariable Error; // 0x188(0x7c8)
	struct FFixedRateDecayForStability MovementDecayRate; // 0x950(0xa0)
	struct FFixedRateDecayForStability PitchRecoilStabilityDecayRate; // 0x9f0(0xa0)
	struct FFixedRateDecayForStability YawRecoilStabilityDecayRate; // 0xa90(0xa0)
	struct FStabilityVariable PitchRecoil; // 0xb30(0x7c8)
	struct FStabilityVariable YawRecoil; // 0x12f8(0x7c8)
	enum class EStabilityInterpolationType StabilityIncreaseInterpolationType; // 0x1ac0(0x01)
	enum class EStabilityInterpolationType StabilityRecoveryInterpolationType; // 0x1ac1(0x01)
	char pad_1AC2[0x6]; // 0x1ac2(0x06)
	struct FRuntimeFloatCurve RecoveryTimeCurve; // 0x1ac8(0x88)
	struct FYawDirectionManipulator YawDirectionManipulator; // 0x1b50(0x2c)
	float GunRecoveryTimeRemainingInSeconds; // 0x1b7c(0x04)
	float GunRecoveryTimeInSeconds; // 0x1b80(0x04)
	float TapEfficiency; // 0x1b84(0x04)
	float InstabilityAccrualBank; // 0x1b88(0x04)
	float InstabilityDeductionPerShot; // 0x1b8c(0x04)
	struct FStabilityInterpolation StabilityInterpolation; // 0x1b90(0x64)
	struct FStabilityInterpolationVariable YawSwitchMultiplierInterpVariable; // 0x1bf4(0x14)
	struct UNetworkedRandomNumberGeneratorComponent* NetworkedRandomNumberGeneratorComponent; // 0x1c08(0x08)
	float ScopedStabilityMultiplier; // 0x1c10(0x04)
	float WalkingDelayTime; // 0x1c14(0x04)
	float RunningTimeToTriggerWalkingDelay; // 0x1c18(0x04)
	char pad_1C1C[0x20]; // 0x1c1c(0x20)
	float MinTaggingOverrideSpeedPercent; // 0x1c3c(0x04)

	void UpdateStabilityMultiplier(enum class EStabilityType Type, float NewMultiplier); // Function ShooterGame.StabilityComponent.UpdateStabilityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x312c870
	void SetScopedStabilityMultiplier(float NewScopedStabilityMultiplier); // Function ShooterGame.StabilityComponent.SetScopedStabilityMultiplier // (Final|Native|Public|BlueprintCallable) // @ game+0x312c770
	void SetRecoveryExternalCurve(struct UCurveFloat* NewCurve); // Function ShooterGame.StabilityComponent.SetRecoveryExternalCurve // (Final|Native|Public|BlueprintCallable) // @ game+0x312c6e0
	void SetErrorExternalCurve(struct UCurveFloat* NewCurve); // Function ShooterGame.StabilityComponent.SetErrorExternalCurve // (Final|Native|Public|BlueprintCallable) // @ game+0x312c5d0
	void OverrideErrorCurve(struct FRuntimeFloatCurve NewCurve); // Function ShooterGame.StabilityComponent.OverrideErrorCurve // (Final|Native|Public|BlueprintCallable) // @ game+0x312c310
	void OnOwningEquippableSetOwner(struct AAresEquippable* Equippable, struct AActor* NewOwner); // Function ShooterGame.StabilityComponent.OnOwningEquippableSetOwner // (Final|Native|Private) // @ game+0x312c180
	float GetZoomAlpha(); // Function ShooterGame.StabilityComponent.GetZoomAlpha // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312c0a0
	float GetYawRecoil(); // Function ShooterGame.StabilityComponent.GetYawRecoil // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312c070
	float GetTotalErrorPercent(); // Function ShooterGame.StabilityComponent.GetTotalErrorPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312c040
	float GetTotalError(); // Function ShooterGame.StabilityComponent.GetTotalError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312c010
	float GetStabilityIndex(); // Function ShooterGame.StabilityComponent.GetStabilityIndex // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bfe0
	float GetPitchRecoil(); // Function ShooterGame.StabilityComponent.GetPitchRecoil // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bcd0
	float GetMovementErrorPercent(); // Function ShooterGame.StabilityComponent.GetMovementErrorPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bc70
	float GetMovementError(); // Function ShooterGame.StabilityComponent.GetMovementError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bc40
	float GetFiringErrorPercent(); // Function ShooterGame.StabilityComponent.GetFiringErrorPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bc10
	float GetFiringError(); // Function ShooterGame.StabilityComponent.GetFiringError // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bbe0
	float GetExampleFiringErrorValue(bool bUseADS); // Function ShooterGame.StabilityComponent.GetExampleFiringErrorValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x312bb40
	struct FRuntimeFloatCurve GetErrorCurve(); // Function ShooterGame.StabilityComponent.GetErrorCurve // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x312ba20
};

// Class ShooterGame.StabilityVisualizationComponent
// Size: 0x3c8 (Inherited: 0xe8)
struct UStabilityVisualizationComponent : UActorComponent {
	struct FCameraTuning CameraTuning; // 0xe8(0x250)
	struct UStabilityComponent* ActiveStabilityComponent; // 0x338(0x08)
	struct FRuntimeFloatCurve PitchToCrosshairAlphaCurve; // 0x340(0x88)

	void SetStabilityComponent(struct UStabilityComponent* StabilityComponentToVisualize); // Function ShooterGame.StabilityVisualizationComponent.SetStabilityComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3132e70
	bool IsAdsAnimationEnabled(); // Function ShooterGame.StabilityVisualizationComponent.IsAdsAnimationEnabled // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132860
	float GetYawRecoilFollowCameraValue(); // Function ShooterGame.StabilityVisualizationComponent.GetYawRecoilFollowCameraValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132640
	float GetYawRecoilFiringOffsetFromCamera(); // Function ShooterGame.StabilityVisualizationComponent.GetYawRecoilFiringOffsetFromCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132610
	struct UStabilityComponent* GetStabilityComponent(); // Function ShooterGame.StabilityVisualizationComponent.GetStabilityComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31325b0
	float GetPitchRecoilFollowCameraValue(); // Function ShooterGame.StabilityVisualizationComponent.GetPitchRecoilFollowCameraValue // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132580
	float GetPitchRecoilFiringOffsetFromCamera(); // Function ShooterGame.StabilityVisualizationComponent.GetPitchRecoilFiringOffsetFromCamera // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132550
	float GetAdsForwardOffset(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsForwardOffset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132270
	float GetAdsCameraShakeTranslationPercent(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsCameraShakeTranslationPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132240
	float GetAdsCameraShakeRotationPercent(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsCameraShakeRotationPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132210
	float GetAdsCameraPopYawPercent(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsCameraPopYawPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31321e0
	float GetAdsCameraPopPitchPercent(); // Function ShooterGame.StabilityVisualizationComponent.GetAdsCameraPopPitchPercent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31321b0
};

// Class ShooterGame.StabilityVisualizationManagerComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UStabilityVisualizationManagerComponent : UActorComponent {
	struct UStabilityVisualizationComponent* ActiveStabilityVisualizationComponent; // 0xe8(0x08)

	void SetActiveStabilityVisualizationComponent(struct UStabilityVisualizationComponent* StabilityVisualizationComponent); // Function ShooterGame.StabilityVisualizationManagerComponent.SetActiveStabilityVisualizationComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3132d50
	struct UStabilityVisualizationComponent* GetActiveStabilityVisualizationComponent(); // Function ShooterGame.StabilityVisualizationManagerComponent.GetActiveStabilityVisualizationComponent // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3132180
};

// Class ShooterGame.StandardAresStringListSetting
// Size: 0x88 (Inherited: 0x30)
struct UStandardAresStringListSetting : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct UArrayListModel* StringListModel; // 0x38(0x08)
	char pad_40[0x48]; // 0x40(0x48)

	void HandleStringSettingChanged(enum class EAresStringSettingName InSettingName, struct FString OldValue, struct FString NewValue); // Function ShooterGame.StandardAresStringListSetting.HandleStringSettingChanged // (Final|Native|Private) // @ game+0x3132670
};

// Class ShooterGame.StandUpAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UStandUpAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.StandUpAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UStandUpAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.TransformTransitionContext
// Size: 0x60 (Inherited: 0x30)
struct UTransformTransitionContext : UStateTransitionContext {
	struct FTransform Transform; // 0x30(0x30)

	void SetTransform(struct FTransform NewTransform); // Function ShooterGame.TransformTransitionContext.SetTransform // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3132f90
};

// Class ShooterGame.ActorListTransitionContext
// Size: 0x40 (Inherited: 0x30)
struct UActorListTransitionContext : UStateTransitionContext {
	struct TArray<struct AActor*> Actors; // 0x30(0x10)

	bool GetFirstActorTransform(struct FTransform& OutTransform); // Function ShooterGame.ActorListTransitionContext.GetFirstActorTransform // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3132410
	struct AActor* GetFirstActor(struct AActor* NewActor); // Function ShooterGame.ActorListTransitionContext.GetFirstActor // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3132360
	void AddActor(struct AActor* NewActor); // Function ShooterGame.ActorListTransitionContext.AddActor // (Final|Native|Public|BlueprintCallable) // @ game+0x3132040
};

// Class ShooterGame.StealthComponent
// Size: 0x288 (Inherited: 0xe8)
struct UStealthComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	float StealthRange; // 0xf0(0x04)
	float RevealTime; // 0xf4(0x04)
	float HideTime; // 0xf8(0x04)
	bool bInitialStealthState; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	struct AEffectContainer* StealthVisualizerEffect; // 0x100(0x08)
	struct AEffectContainer* WhileVisibleEffect; // 0x108(0x08)
	struct AEffectContainer* RevealedEffect; // 0x110(0x08)
	struct AEffectContainer* StartHideTimeEffect; // 0x118(0x08)
	struct AEffectContainer* HiddenEffect; // 0x120(0x08)
	struct FMulticastInlineDelegate OnRevealedFromStealth; // 0x128(0x10)
	struct FMulticastInlineDelegate OnHiddenByStealth; // 0x138(0x10)
	struct FMulticastInlineDelegate OnStartHide; // 0x148(0x10)
	struct FMulticastInlineDelegate OnStealthActiveChanged; // 0x158(0x10)
	struct FMulticastInlineDelegate OnSubscribedStealthUpdate; // 0x168(0x10)
	struct FMulticastInlineDelegate OnViewerLeaveStealthRange; // 0x178(0x10)
	struct FMulticastInlineDelegate OnViewerEnterStealthRange; // 0x188(0x10)
	char pad_198[0x80]; // 0x198(0x80)
	bool bStealthIsActive; // 0x218(0x01)
	char pad_219[0x7]; // 0x219(0x07)
	struct TMap<struct TWeakObjectPtr<struct AActor>, struct FRevealInfo> RevealHistory; // 0x220(0x50)
	struct UPrimitiveComponent* OverlapTestComponent; // 0x270(0x08)
	struct UPrimitiveComponent* PendingOverlapTestComponent; // 0x278(0x08)
	struct UStealthComponent* SubscribedToComponent; // 0x280(0x08)

	void SubscribedStealthUpdate(struct UStealthComponent* OtherComponent, bool bInRange); // Function ShooterGame.StealthComponent.SubscribedStealthUpdate // (Final|Native|Private) // @ game+0x3133340
	void SubscribedStealthActiveChanged(struct UStealthComponent* OtherComponent); // Function ShooterGame.StealthComponent.SubscribedStealthActiveChanged // (Final|Native|Private) // @ game+0x31332b0
	void StartOverlapRevealComponent(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function ShooterGame.StealthComponent.StartOverlapRevealComponent // (Final|Native|Private|HasOutParms) // @ game+0x3133080
	void SetStealthedForSnapping(bool Val); // Function ShooterGame.StealthComponent.SetStealthedForSnapping // (Final|Native|Public|BlueprintCallable) // @ game+0x2d67650
	void SetRevealOverlapComponent(struct UPrimitiveComponent* OverlapComponent); // Function ShooterGame.StealthComponent.SetRevealOverlapComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3132de0
	void PerspectiveChanged(struct AShooterCharacter* Character); // Function ShooterGame.StealthComponent.PerspectiveChanged // (Final|Native|Private) // @ game+0x3132c30
	void OnStealthAttributeChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.StealthComponent.OnStealthAttributeChanged // (Final|Native|Private|HasOutParms) // @ game+0x3132a60
	void OnRep_SubscribedToComponent(struct UStealthComponent* PrevComponent); // Function ShooterGame.StealthComponent.OnRep_SubscribedToComponent // (Final|Native|Private) // @ game+0x31329d0
	void OnRep_StealthIsActive(); // Function ShooterGame.StealthComponent.OnRep_StealthIsActive // (Final|Native|Private) // @ game+0x31329b0
	bool IsStealthedForActor(struct AActor* Actor, bool ShouldUpdateStealthVisibility); // Function ShooterGame.StealthComponent.IsStealthedForActor // (Final|Native|Public|BlueprintCallable) // @ game+0x31328c0
	bool GetStealthedForSnapping(); // Function ShooterGame.StealthComponent.GetStealthedForSnapping // (Final|Native|Public|BlueprintCallable) // @ game+0x2ced9a0
	void BeginRevealOverlaps(); // Function ShooterGame.StealthComponent.BeginRevealOverlaps // (Final|Native|Private) // @ game+0x3132160
	void AuthSubscribeToOtherComponent(struct UStealthComponent* OtherComponent); // Function ShooterGame.StealthComponent.AuthSubscribeToOtherComponent // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cb4be0
	void AuthSetStealthIsActive(bool NewStealth); // Function ShooterGame.StealthComponent.AuthSetStealthIsActive // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2d67650
};

// Class ShooterGame.StopLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UStopLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.StopUpperBody3P
// Size: 0x38 (Inherited: 0x38)
struct UStopUpperBody3P : UAnimSlotUpperBody3P {
};

// Class ShooterGame.StorefrontItemUIData
// Size: 0x108 (Inherited: 0x90)
struct UStorefrontItemUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
	struct FText CustomDisplayNameSubtext; // 0xa8(0x18)
	struct UTexture* DisplayIcon2; // 0xc0(0x08)
	struct UTexture* VerticalPromoImage; // 0xc8(0x08)
	bool UseAdditionalContext; // 0xd0(0x01)
	char pad_D1[0x7]; // 0xd1(0x07)
	struct FText PromoExtraDescription; // 0xd8(0x18)
	struct FText BundleExtraDescription; // 0xf0(0x18)
};

// Class ShooterGame.StorefrontItemDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UStorefrontItemDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.StoreManager
// Size: 0x408 (Inherited: 0x80)
struct UStoreManager : UInitSystem {
	struct FMulticastInlineDelegate OnIsBonusShopActiveChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnIsEligibleForJuiceChanged; // 0x90(0x10)
	char pad_A0[0x30]; // 0xa0(0x30)
	struct FMulticastInlineDelegate OnPlayerStoreError; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnWalletUpdated; // 0xe0(0x10)
	struct FMulticastInlineDelegate OnWalletOfTypeUpdated; // 0xf0(0x10)
	char pad_100[0x18]; // 0x100(0x18)
	struct FMulticastInlineDelegate OnOrderSuccess; // 0x118(0x10)
	struct FMulticastInlineDelegate OnOrderError; // 0x128(0x10)
	char pad_138[0x38]; // 0x138(0x38)
	struct FGetWalletResponse Wallet; // 0x170(0x50)
	struct FGetWalletResponse JuiceWallet; // 0x1c0(0x50)
	struct URewardGrantModelFactory* RewardGrantModelFactory; // 0x210(0x08)
	struct UStoreService* StoreService; // 0x218(0x08)
	struct URSOManager* RSOManager; // 0x220(0x08)
	struct URMSManager* RMSManager; // 0x228(0x08)
	struct UContentIndex* ContentIndex; // 0x230(0x08)
	struct UConfigManager* ConfigManager; // 0x238(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x240(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x248(0x08)
	struct UContentManager* ContentManager; // 0x250(0x08)
	struct UStorefrontModelV2* PlayerStorefrontV2; // 0x258(0x08)
	struct TMap<struct FGuid, struct UStoreOffer*> OffersByID; // 0x260(0x50)
	struct TMap<struct FGuid, struct UStoreOffer*> OffersByItemID; // 0x2b0(0x50)
	struct TMap<struct FGuid, struct FStorefrontBundleItem> BundleItemsByItemID; // 0x300(0x50)
	struct TArray<struct UUpgradeCurrencyOffer*> UpgradeCurrencyOffers; // 0x350(0x10)
	struct TMap<enum class EAresContentType, struct FEntitlementTypeInfo> EntitlementTypeInfos; // 0x360(0x50)
	struct TSet<struct FGuid> EquippableSkinIDs; // 0x3b0(0x50)
	char pad_400[0x8]; // 0x400(0x08)

	bool SubmitOrder(struct FGuid& XID, struct FGuid& OfferId, struct FGuid& CurrencyID, int32_t PaymentAmount, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.SubmitOrder // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x313a2d0
	bool SubmitOpenJuiceBox(struct FGuid& XID, struct FGuid& JuiceBoxID, int32_t OpenQuantity, int32_t ExpectedInInventory, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.SubmitOpenJuiceBox // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x313a050
	bool SubmitJuiceCraftOrder(struct FGuid& XID, enum class EJuiceOrderRequestType JuiceOrderType, struct TMap<struct FGuid, int32_t> ExpectedCosts, struct FItemProgressionDTO ExpectedProgression, struct TArray<struct FEntitlementReward> ExpectedEntitlementRewards, struct TArray<struct FWalletReward> ExpectedWalletRewards, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.SubmitJuiceCraftOrder // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3139b80
	bool SubmitBundleOrder(struct FGuid& XID, struct FGuid& BundleID, struct TMap<struct FGuid, int32_t> ExpectedCosts, struct TArray<struct FEntitlementReward> ExpectedEntitlementRewards, struct TArray<struct FWalletReward> ExpectedWalletRewards, enum class EPurchaseSource PurchaseSource, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.SubmitBundleOrder // (Final|Native|Public|HasOutParms|HasDefaults) // @ game+0x3139700
	bool ShouldUseCachedStorefront(); // Function ShooterGame.StoreManager.ShouldUseCachedStorefront // (Final|Native|Public) // @ game+0x31396d0
	void RevealNightMarketOffers(struct TArray<struct FGuid>& RevealedOfferIDs); // Function ShooterGame.StoreManager.RevealNightMarketOffers // (Final|Native|Public|HasOutParms) // @ game+0x3139620
	void RefreshWalletByType(enum class EWalletType TypeOfWallet); // Function ShooterGame.StoreManager.RefreshWalletByType // (Final|Native|Public|BlueprintCallable) // @ game+0x31395a0
	void RefreshWallet(); // Function ShooterGame.StoreManager.RefreshWallet // (Final|Native|Public|BlueprintCallable) // @ game+0x3139580
	void RefreshLoyaltyRewardEntitlements(); // Function ShooterGame.StoreManager.RefreshLoyaltyRewardEntitlements // (Final|Native|Public) // @ game+0x3139560
	void RefreshEntitlements(); // Function ShooterGame.StoreManager.RefreshEntitlements // (Final|Native|Public|BlueprintCallable) // @ game+0x3139540
	bool PollOrderCompletion(struct FGuid& OrderID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.PollOrderCompletion // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x31393d0
	void OnBugCommand(struct UWorld* World, struct FString CommandName, struct FString CommandArgument); // Function ShooterGame.StoreManager.OnBugCommand // (Final|Native|Private) // @ game+0x3139270
	bool IsOfferCostValid(struct UStoreOffer* Offer); // Function ShooterGame.StoreManager.IsOfferCostValid // (Final|Native|Private) // @ game+0x31391d0
	bool IsJuiceCurrency(struct FGuid& CurrencyID); // Function ShooterGame.StoreManager.IsJuiceCurrency // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3139120
	bool IsInitialized(); // Function ShooterGame.StoreManager.IsInitialized // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31390f0
	bool IsEligibleForJuice(); // Function ShooterGame.StoreManager.IsEligibleForJuice // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2cb5310
	bool IsCostValid(struct TMap<struct FGuid, int32_t> Cost); // Function ShooterGame.StoreManager.IsCostValid // (Final|Native|Private) // @ game+0x3138fc0
	bool IsBonusShopActive(); // Function ShooterGame.StoreManager.IsBonusShopActive // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3138fa0
	void HandleUpdatedStorefrontV2(struct FGetStorefrontResponseV2& GetStorefrontResponse); // Function ShooterGame.StoreManager.HandleUpdatedStorefrontV2 // (Final|Native|Public|HasOutParms) // @ game+0x3138e70
	struct FGetWalletResponse GetWallet(); // Function ShooterGame.StoreManager.GetWallet // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3138e30
	struct FGuid GetUpgradeTokenUUID(); // Function ShooterGame.StoreManager.GetUpgradeTokenUUID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3138df0
	struct TArray<struct UUpgradeCurrencyOffer*> GetUpgradeCurrencyOffers(); // Function ShooterGame.StoreManager.GetUpgradeCurrencyOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3138d10
	struct UStoreManager* GetStoreManager(struct UObject* WorldContextObject); // Function ShooterGame.StoreManager.GetStoreManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3138c80
	struct URewardModel* GetRewardModelForOffer(struct UStoreOffer* Offer); // Function ShooterGame.StoreManager.GetRewardModelForOffer // (Final|Native|Private) // @ game+0x3138be0
	struct FGuid GetRecruitmentTokenUUID(); // Function ShooterGame.StoreManager.GetRecruitmentTokenUUID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3138ba0
	bool GetOrder(struct FGuid& OrderID, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.StoreManager.GetOrder // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3138a30
	struct UStoreOffer* GetOfferByInventoryItemDataAsset(struct UAresBasePrimaryDataAsset* ItemAsset); // Function ShooterGame.StoreManager.GetOfferByInventoryItemDataAsset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3138990
	int32_t GetJuiceVariantCost(); // Function ShooterGame.StoreManager.GetJuiceVariantCost // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3138970
	struct FGuid GetJuiceMaxEnergyUUID(); // Function ShooterGame.StoreManager.GetJuiceMaxEnergyUUID // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3138930
	int32_t GetJuiceLevelCost(); // Function ShooterGame.StoreManager.GetJuiceLevelCost // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3138910
	struct FGuid GetJuiceEnergyUUID(); // Function ShooterGame.StoreManager.GetJuiceEnergyUUID // (Final|Native|Static|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x31388d0
	struct TArray<struct FGuid> GetJuiceBoxUUIDs(); // Function ShooterGame.StoreManager.GetJuiceBoxUUIDs // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3138830
	int32_t GetCurrencyBalance(struct FGuid& CurrencyID); // Function ShooterGame.StoreManager.GetCurrencyBalance // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3138780
	struct FStorefrontBundleItem GetBundleItemByInventoryItemID(struct FGuid& ItemId); // Function ShooterGame.StoreManager.GetBundleItemByInventoryItemID // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x31386a0
	struct FGuid GetAresPointsUUID(); // Function ShooterGame.StoreManager.GetAresPointsUUID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure) // @ game+0x3138660
	int32_t GetAresPointsBalance(); // Function ShooterGame.StoreManager.GetAresPointsBalance // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3138630
	struct FGuid GetActPointsSeasonalID(); // Function ShooterGame.StoreManager.GetActPointsSeasonalID // (Final|Native|Public|HasDefaults|Const) // @ game+0x31385f0
	int32_t GetActPointsBalance(); // Function ShooterGame.StoreManager.GetActPointsBalance // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x31385c0
	struct FGuid GetActPointsAssetUUID(); // Function ShooterGame.StoreManager.GetActPointsAssetUUID // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3138580
	void FinalizeInit(enum class EPlatformInitErrorReason ErrorReason); // Function ShooterGame.StoreManager.FinalizeInit // (Final|Native|Private) // @ game+0x3138500
	void FetchStoreForPlayer(); // Function ShooterGame.StoreManager.FetchStoreForPlayer // (Final|Native|Private) // @ game+0x31384e0
	void FetchOffersAndStoreForPlayer(); // Function ShooterGame.StoreManager.FetchOffersAndStoreForPlayer // (Final|Native|Public) // @ game+0x31384c0
};

// Class ShooterGame.StoreOffer
// Size: 0xa8 (Inherited: 0x30)
struct UStoreOffer : UObject {
	struct FGuid OfferId; // 0x30(0x10)
	bool IsDirectPurchase; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	struct TArray<struct FStoreOfferReward> Rewards; // 0x48(0x10)
	struct TMap<struct FGuid, int32_t> Cost; // 0x58(0x50)
};

// Class ShooterGame.BonusStoreOfferViewModel
// Size: 0xb8 (Inherited: 0x30)
struct UBonusStoreOfferViewModel : UObject {
	struct FGuid BonusOfferID; // 0x30(0x10)
	struct UStoreOffer* Offer; // 0x40(0x08)
	int32_t DiscountPercent; // 0x48(0x04)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct TMap<struct FGuid, int32_t> DiscountedCost; // 0x50(0x50)
	struct FString DiscountPercentDescription; // 0xa0(0x10)
	bool IsSeen; // 0xb0(0x01)
	char pad_B1[0x7]; // 0xb1(0x07)
};

// Class ShooterGame.UpgradeCurrencyOffer
// Size: 0x58 (Inherited: 0x30)
struct UUpgradeCurrencyOffer : UObject {
	struct UCurrencyDataAsset* PurchaseCurrency; // 0x30(0x08)
	int32_t Cost; // 0x38(0x04)
	struct FGuid OfferId; // 0x3c(0x10)
	char pad_4C[0x4]; // 0x4c(0x04)
	struct UStorefrontItemDataAsset* StorefrontItem; // 0x50(0x08)
};

// Class ShooterGame.StorefrontModelV2
// Size: 0x90 (Inherited: 0x30)
struct UStorefrontModelV2 : UObject {
	struct UStorefrontBundleModel* FeaturedBundle; // 0x30(0x08)
	struct TArray<struct UStorefrontBundleModel*> FeaturedBundles; // 0x38(0x10)
	struct FDateTime FeaturedExpirationTime; // 0x48(0x08)
	struct FDateTime ExpirationTime; // 0x50(0x08)
	struct TArray<struct UStoreOffer*> SingleItemOffers; // 0x58(0x10)
	struct TArray<struct UBonusStoreOfferViewModel*> BonusStoreOffers; // 0x68(0x10)
	struct TArray<struct UJuiceBoxOfferModel*> JuiceBoxOffers; // 0x78(0x10)
	struct FDateTime BonusStoreExpirationTime; // 0x88(0x08)
};

// Class ShooterGame.StorefrontBundleModel
// Size: 0x70 (Inherited: 0x30)
struct UStorefrontBundleModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct UStorefrontItemDataAsset* StorefrontItemDataAsset; // 0x40(0x08)
	struct UCurrencyDataAsset* PurchaseCurrencyDataAsset; // 0x48(0x08)
	struct TArray<struct FStorefrontBundleItem> BundleItems; // 0x50(0x10)
	struct FDateTime BundleExpirationTime; // 0x60(0x08)
	bool WholesaleOnly; // 0x68(0x01)
	char pad_69[0x7]; // 0x69(0x07)
};

// Class ShooterGame.JuiceBoxOfferModel
// Size: 0x68 (Inherited: 0x30)
struct UJuiceBoxOfferModel : UObject {
	struct FGuid JuiceBoxOfferID; // 0x30(0x10)
	struct UStorefrontItemDataAsset* StorefrontItemDataAsset; // 0x40(0x08)
	struct UJuiceBoxDataAsset* JuiceBoxDataAsset; // 0x48(0x08)
	int32_t Amount; // 0x50(0x04)
	int32_t BonusAmount; // 0x54(0x04)
	struct UCurrencyDataAsset* PurchaseCurrencyDataAsset; // 0x58(0x08)
	int32_t PurchaseCost; // 0x60(0x04)
	char pad_64[0x4]; // 0x64(0x04)

	struct UStoreOffer* ConvertToStoreOffer(); // Function ShooterGame.JuiceBoxOfferModel.ConvertToStoreOffer // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3138490
};

// Class ShooterGame.StoreService
// Size: 0x38 (Inherited: 0x30)
struct UStoreService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.StoreUITelemetryManager
// Size: 0x60 (Inherited: 0x30)
struct UStoreUITelemetryManager : UObject {
	char pad_30[0x10]; // 0x30(0x10)
	struct URSOManager* RSOManager; // 0x40(0x08)
	struct UPlatformSessionManager* SessionManager; // 0x48(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x50(0x08)
	struct UConfigManager* ConfigManager; // 0x58(0x08)

	void SendStoreInteractionEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType, enum class EEventType EventType); // Function ShooterGame.StoreUITelemetryManager.SendStoreInteractionEvent // (Final|Native|Private|HasDefaults) // @ game+0x3141f60
	void SendRevealOfferEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendRevealOfferEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3141e20
	void SendPurchaseStartEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendPurchaseStartEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3141ce0
	void SendPurchaseConfirmEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendPurchaseConfirmEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3141ba0
	void SendPurchaseCompleteEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendPurchaseCompleteEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3141a60
	void SendPurchaseCancelEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendPurchaseCancelEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3141920
	void SendInspectItemLevelsEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendInspectItemLevelsEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x31417e0
	void SendInspectItemEvent(struct FGuid OfferId, struct FGuid ItemId, enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.SendInspectItemEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x31416a0
	void SendInspectItemChromaEvent(struct FGuid OfferId, struct FGuid ItemId, struct FGuid ChromaID, enum class EPurchaseSource PurchaseSource); // Function ShooterGame.StoreUITelemetryManager.SendInspectItemChromaEvent // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3141510
	struct UStoreUITelemetryManager* Make(struct URSOManager* RSOManager, struct UPlatformSessionManager* SessionManager, struct UTelemetryManager* TelemetryManager, struct UConfigManager* ConfigManager); // Function ShooterGame.StoreUITelemetryManager.Make // (Final|Native|Static|Public) // @ game+0x31413c0
	struct UStoreUITelemetryManager* GetStoreUITelemetryManager(struct UObject* WorldContextObject); // Function ShooterGame.StoreUITelemetryManager.GetStoreUITelemetryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3141330
	enum class EOfferType GetOfferTypeForPurchaseSource(enum class EPurchaseSource PurchaseSource); // Function ShooterGame.StoreUITelemetryManager.GetOfferTypeForPurchaseSource // (Final|Native|Static|Public) // @ game+0x31412b0
	struct FString GetNameForOfferType(enum class EOfferType OfferType); // Function ShooterGame.StoreUITelemetryManager.GetNameForOfferType // (Final|Native|Static|Private) // @ game+0x3141200
	struct FString GetNameForEventType(enum class EEventType EventType); // Function ShooterGame.StoreUITelemetryManager.GetNameForEventType // (Final|Native|Static|Private) // @ game+0x3141150
	struct UStoreUITelemetryManager* Get(struct UWorld* FromWorld); // Function ShooterGame.StoreUITelemetryManager.Get // (Final|Native|Static|Public) // @ game+0x31410c0
};

// Class ShooterGame.StoreViewControllerV2
// Size: 0x168 (Inherited: 0x30)
struct UStoreViewControllerV2 : UObject {
	struct FMulticastInlineDelegate OnStorefrontNeedsRefresh; // 0x30(0x10)
	struct FMulticastInlineDelegate OnBonusStoreEnabledUpdated; // 0x40(0x10)
	struct FMulticastInlineDelegate OnOpenJuiceBoxOrderSubmitted; // 0x50(0x10)
	struct FMulticastInlineDelegate OnOpenJuiceBoxOrderComplete; // 0x60(0x10)
	struct FMulticastInlineDelegate OnOpenJuiceBoxOrderError; // 0x70(0x10)
	struct FMulticastInlineDelegate OnGetOpenJuiceBoxRewardsComplete; // 0x80(0x10)
	struct FMulticastInlineDelegate OnGetOpenJuiceBoxRewardsError; // 0x90(0x10)
	struct FMulticastInlineDelegate OnJuiceBoxAnimationCompleted; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnJuiceBoxAnimationCanceled; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnStorePopupOpened; // 0xc0(0x10)
	struct FMulticastInlineDelegate OnStorePopupClosed; // 0xd0(0x10)
	struct FMulticastInlineDelegate OnJuiceRewardsClosed; // 0xe0(0x10)
	struct UStoreViewModelV2* ViewModel; // 0xf0(0x08)
	char pad_F8[0x30]; // 0xf8(0x30)
	struct UConfigManager* ConfigManager; // 0x128(0x08)
	struct UStoreManager* StoreManager; // 0x130(0x08)
	struct UInventoryManager* InventoryManager; // 0x138(0x08)
	struct UPlatformSessionManager* PlatformSessionManager; // 0x140(0x08)
	char pad_148[0x11]; // 0x148(0x11)
	bool IsNightMarketRevealInitialized; // 0x159(0x01)
	char pad_15A[0x6]; // 0x15a(0x06)
	struct UDeferredOperation* RevealNightMarketOffersOperation; // 0x160(0x08)

	void UpdatePersistNightMarketOfferState(); // Function ShooterGame.StoreViewControllerV2.UpdatePersistNightMarketOfferState // (Final|Native|Private) // @ game+0x3148070
	void UpdateBonusStoreStatus(); // Function ShooterGame.StoreViewControllerV2.UpdateBonusStoreStatus // (Final|Native|Public) // @ game+0x3148050
	bool ShouldUseMultipleBundleTimers(); // Function ShooterGame.StoreViewControllerV2.ShouldUseMultipleBundleTimers // (Final|Native|Public|BlueprintCallable) // @ game+0x3148020
	bool ShouldUseCachedStoreViewModel(); // Function ShooterGame.StoreViewControllerV2.ShouldUseCachedStoreViewModel // (Final|Native|Public|BlueprintCallable) // @ game+0x3147ff0
	void ScheduleRevealNightMarketOffers(); // Function ShooterGame.StoreViewControllerV2.ScheduleRevealNightMarketOffers // (Final|Native|Public) // @ game+0x3147730
	void RevealNightMarketOffers(); // Function ShooterGame.StoreViewControllerV2.RevealNightMarketOffers // (Final|Native|Private) // @ game+0x3147710
	void OpenJuiceBox(struct FGuid& JuiceBoxID, int32_t OpenQuantity); // Function ShooterGame.StoreViewControllerV2.OpenJuiceBox // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x3147620
	void OnRetrieveOpenJuiceBoxOrderErrorInternal(); // Function ShooterGame.StoreViewControllerV2.OnRetrieveOpenJuiceBoxOrderErrorInternal // (Final|Native|Protected) // @ game+0x2f9ff20
	void OnOpenJuiceBoxSubmittedInternal(struct FOrderResponse& OrderResponse); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxSubmittedInternal // (Final|Native|Protected|HasOutParms) // @ game+0x3147470
	void OnOpenJuiceBoxSubmitErrorInternal(); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxSubmitErrorInternal // (Final|Native|Protected) // @ game+0x3147450
	void OnOpenJuiceBoxOrderRetrievedInternal(struct FOrderResponse& OrderResponse); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxOrderRetrievedInternal // (Final|Native|Protected|HasOutParms) // @ game+0x3147330
	void OnOpenJuiceBoxOrderFailedInternal(struct FGuid& FailedOrderID); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxOrderFailedInternal // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x3147290
	void OnOpenJuiceBoxCompleteInternal(struct FGuid& CompletedOpenOrderID); // Function ShooterGame.StoreViewControllerV2.OnOpenJuiceBoxCompleteInternal // (Final|Native|Protected|HasOutParms|HasDefaults) // @ game+0x31471f0
	void JuiceBoxAnimationComplete(enum class EJuiceBoxAnimation JuiceBoxAnimation); // Function ShooterGame.StoreViewControllerV2.JuiceBoxAnimationComplete // (Final|Native|Public|BlueprintCallable) // @ game+0x3147170
	void JuiceBoxAnimationCanceled(enum class EJuiceBoxAnimation JuiceBoxAnimation); // Function ShooterGame.StoreViewControllerV2.JuiceBoxAnimationCanceled // (Final|Native|Public|BlueprintCallable) // @ game+0x3147170
	void Init(); // Function ShooterGame.StoreViewControllerV2.Init // (Final|Native|Public) // @ game+0x31470b0
	void HandleStorefrontTimerComplete(); // Function ShooterGame.StoreViewControllerV2.HandleStorefrontTimerComplete // (Final|Native|Protected) // @ game+0x3147090
	void HandleRevealNightMarketOffersError(struct FAmbassadorError& AmbassadorError); // Function ShooterGame.StoreViewControllerV2.HandleRevealNightMarketOffersError // (Final|Native|Private|HasOutParms) // @ game+0x3146fa0
	void HandlePlayerStoreChangedV2(struct UStorefrontModelV2* UpdatedStore); // Function ShooterGame.StoreViewControllerV2.HandlePlayerStoreChangedV2 // (Final|Native|Public) // @ game+0x3146f10
	void FetchOffersAndStoreForPlayer(); // Function ShooterGame.StoreViewControllerV2.FetchOffersAndStoreForPlayer // (Final|Native|Public|BlueprintCallable) // @ game+0x31469f0
	void CallStorePopupOpened(); // Function ShooterGame.StoreViewControllerV2.CallStorePopupOpened // (Final|Native|Public|BlueprintCallable) // @ game+0x31469d0
	void CallStorePopupClosed(); // Function ShooterGame.StoreViewControllerV2.CallStorePopupClosed // (Final|Native|Public|BlueprintCallable) // @ game+0x31469b0
	void CallJuiceRewardsClosed(); // Function ShooterGame.StoreViewControllerV2.CallJuiceRewardsClosed // (Final|Native|Public|BlueprintCallable) // @ game+0x3146990
};

// Class ShooterGame.BundleItemViewModel
// Size: 0x50 (Inherited: 0x30)
struct UBundleItemViewModel : UObject {
	int32_t BasePrice; // 0x30(0x04)
	float DiscountPercent; // 0x34(0x04)
	int32_t DiscountedPrice; // 0x38(0x04)
	enum class ESpecialItemStatus SpecialItemStatus; // 0x3c(0x01)
	char pad_3D[0x3]; // 0x3d(0x03)
	struct UStoreOffer* StoreOffer; // 0x40(0x08)
	struct UBaseInventoryModel* InventoryModel; // 0x48(0x08)
};

// Class ShooterGame.BundleViewModel
// Size: 0x80 (Inherited: 0x30)
struct UBundleViewModel : UObject {
	struct FGuid ID; // 0x30(0x10)
	struct UStorefrontItemDataAsset* StorefrontItemDataAsset; // 0x40(0x08)
	struct UCurrencyDataAsset* PurchaseCurrencyDataAsset; // 0x48(0x08)
	int32_t TotalBaseCost; // 0x50(0x04)
	int32_t TotalDiscountedCost; // 0x54(0x04)
	float TotalDiscountPercent; // 0x58(0x04)
	char pad_5C[0x4]; // 0x5c(0x04)
	struct TArray<struct UBundleItemViewModel*> ItemViewModels; // 0x60(0x10)
	struct FDateTime BundleExpirationTime; // 0x70(0x08)
	bool IsValid; // 0x78(0x01)
	bool WholesaleOnly; // 0x79(0x01)
	char pad_7A[0x6]; // 0x7a(0x06)

	bool IsEqual(struct UBundleViewModel* OtherBundleModel); // Function ShooterGame.BundleViewModel.IsEqual // (Final|Native|Public) // @ game+0x31470d0
};

// Class ShooterGame.OpenJuiceViewModel
// Size: 0x50 (Inherited: 0x30)
struct UOpenJuiceViewModel : UObject {
	struct FGuid OpenJuiceBoxOrderID; // 0x30(0x10)
	struct TArray<struct URewardModel*> OpenJuiceBoxRewards; // 0x40(0x10)
};

// Class ShooterGame.StoreViewModelV2
// Size: 0x150 (Inherited: 0x30)
struct UStoreViewModelV2 : UObject {
	struct FMulticastInlineDelegate OnPersonalizedOffersChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnBonusStoreOffersChanged; // 0x40(0x10)
	struct FMulticastInlineDelegate OnJuiceBoxOffersChanged; // 0x50(0x10)
	struct FMulticastInlineDelegate OnFeaturedThemeChanged; // 0x60(0x10)
	struct FMulticastInlineDelegate OnFeaturedBundle; // 0x70(0x10)
	struct FMulticastInlineDelegate OnFeaturedBundles; // 0x80(0x10)
	char pad_90[0x18]; // 0x90(0x18)
	struct FMulticastInlineDelegate OnExpirationTimeChanged; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnFeaturedExpirationTimeChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnBonusStoreExpirationTimeChanged; // 0xc8(0x10)
	struct UThemeDataAsset* FeaturedTheme; // 0xd8(0x08)
	struct FDateTime ExpirationTime; // 0xe0(0x08)
	struct FDateTime FeaturedExpirationTime; // 0xe8(0x08)
	struct FDateTime BonusStoreExpirationTime; // 0xf0(0x08)
	struct TArray<struct UStoreOffer*> PersonalizedOffers; // 0xf8(0x10)
	struct TArray<struct UBonusStoreOfferViewModel*> BonusStoreOffers; // 0x108(0x10)
	struct TArray<struct UJuiceBoxOfferModel*> JuiceBoxOffers; // 0x118(0x10)
	struct UBundleViewModel* FeaturedThemeBundleViewModel; // 0x128(0x08)
	struct TArray<struct UBundleViewModel*> FeaturedThemeBundleViewModels; // 0x130(0x10)
	struct UOpenJuiceViewModel* OpenJuiceViewModel; // 0x140(0x08)
	char pad_148[0x8]; // 0x148(0x08)

	bool ShouldShowBonusStore(); // Function ShooterGame.StoreViewModelV2.ShouldShowBonusStore // (Final|Native|Public|BlueprintCallable) // @ game+0x3147fd0
	void SetPersonalizedOffers(struct TArray<struct UStoreOffer*>& NewPersonalizedOffers); // Function ShooterGame.StoreViewModelV2.SetPersonalizedOffers // (Final|Native|Public|HasOutParms) // @ game+0x3147f20
	void SetOpenJuiceViewModel(struct UOpenJuiceViewModel* NewOpenJuiceViewModel); // Function ShooterGame.StoreViewModelV2.SetOpenJuiceViewModel // (Final|Native|Public) // @ game+0x3147e90
	void SetJuiceBoxOffers(struct TArray<struct UJuiceBoxOfferModel*>& NewJuiceBoxOffers); // Function ShooterGame.StoreViewModelV2.SetJuiceBoxOffers // (Final|Native|Public|HasOutParms) // @ game+0x3147de0
	void SetIsPopulated(bool NewIsPopulated); // Function ShooterGame.StoreViewModelV2.SetIsPopulated // (Final|Native|Public) // @ game+0x3147d50
	void SetIsBonusStoreEnabled(bool BonusStoreEnabled); // Function ShooterGame.StoreViewModelV2.SetIsBonusStoreEnabled // (Final|Native|Public) // @ game+0x3147cc0
	void SetIsBonusShopSeen(bool IsSeen); // Function ShooterGame.StoreViewModelV2.SetIsBonusShopSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x3147c30
	void SetFeaturedThemeBundles(struct TArray<struct UBundleViewModel*>& NewBundleModels); // Function ShooterGame.StoreViewModelV2.SetFeaturedThemeBundles // (Final|Native|Public|HasOutParms) // @ game+0x3147b80
	void SetFeaturedThemeBundle(struct UBundleViewModel* NewBundleModel); // Function ShooterGame.StoreViewModelV2.SetFeaturedThemeBundle // (Final|Native|Public) // @ game+0x3147af0
	void SetFeaturedTheme(struct UThemeDataAsset* NewFeaturedTheme); // Function ShooterGame.StoreViewModelV2.SetFeaturedTheme // (Final|Native|Public) // @ game+0x3147a60
	void SetFeaturedExpirationTime(struct FDateTime NewFeaturedExpirationTime); // Function ShooterGame.StoreViewModelV2.SetFeaturedExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x31479e0
	void SetExpirationTime(struct FDateTime ExpirationTime); // Function ShooterGame.StoreViewModelV2.SetExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x3147960
	void SetBonusStoreOffers(struct TArray<struct UBonusStoreOfferViewModel*>& NewBonusStoreOffers); // Function ShooterGame.StoreViewModelV2.SetBonusStoreOffers // (Final|Native|Public|HasOutParms) // @ game+0x31478b0
	void SetBonusStoreOfferIsSeen(struct FGuid BonusStoreOfferID, bool IsSeen); // Function ShooterGame.StoreViewModelV2.SetBonusStoreOfferIsSeen // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x31477d0
	void SetBonusStoreExpirationTime(struct FDateTime NewBonusStoreExpirationTime); // Function ShooterGame.StoreViewModelV2.SetBonusStoreExpirationTime // (Final|Native|Public|HasDefaults) // @ game+0x3147750
	bool IsPopulated(); // Function ShooterGame.StoreViewModelV2.IsPopulated // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2d9c850
	struct TArray<struct UStoreOffer*> GetPersonalizedOffers(); // Function ShooterGame.StoreViewModelV2.GetPersonalizedOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3146e40
	struct UOpenJuiceViewModel* GetOpenJuiceViewModel(); // Function ShooterGame.StoreViewModelV2.GetOpenJuiceViewModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3146c40
	struct FDateTime GetOffersExpirationTime(); // Function ShooterGame.StoreViewModelV2.GetOffersExpirationTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66170
	struct TArray<struct UJuiceBoxOfferModel*> GetJuiceBoxOffers(); // Function ShooterGame.StoreViewModelV2.GetJuiceBoxOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f11f90
	bool GetIsBonusShopSeen(); // Function ShooterGame.StoreViewModelV2.GetIsBonusShopSeen // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3146c20
	struct FDateTime GetFeaturedThemeExpirationTime(); // Function ShooterGame.StoreViewModelV2.GetFeaturedThemeExpirationTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x3146c00
	struct TArray<struct UBundleViewModel*> GetFeaturedThemeBundles(); // Function ShooterGame.StoreViewModelV2.GetFeaturedThemeBundles // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3146b30
	struct UBundleViewModel* GetFeaturedThemeBundle(); // Function ShooterGame.StoreViewModelV2.GetFeaturedThemeBundle // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3146b10
	struct TArray<struct UBonusStoreOfferViewModel*> GetBonusStoreOffers(); // Function ShooterGame.StoreViewModelV2.GetBonusStoreOffers // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3146a40
	struct FDateTime GetBonusStoreExpirationTime(); // Function ShooterGame.StoreViewModelV2.GetBonusStoreExpirationTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48a50
	bool GetAllBonusOffersSeen(); // Function ShooterGame.StoreViewModelV2.GetAllBonusOffersSeen // (Final|Native|Public|BlueprintCallable) // @ game+0x3146a10
};

// Class ShooterGame.StrategicOutcomesComponent
// Size: 0xf8 (Inherited: 0xe8)
struct UStrategicOutcomesComponent : UActorComponent {
	struct TArray<struct FStrategicOutcomeOfRound> RoundOutcomes; // 0xe8(0x10)

	void OnRoundEnd(int32_t RoundNumberEnding); // Function ShooterGame.StrategicOutcomesComponent.OnRoundEnd // (Final|Native|Public) // @ game+0x3147590
};

// Class ShooterGame.StreamedVideoUIData
// Size: 0x90 (Inherited: 0x90)
struct UStreamedVideoUIData : UBaseContentUIData {
};

// Class ShooterGame.StreamedVideoDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UStreamedVideoDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
	struct TArray<struct FStreamedVideoFile> Files; // 0x80(0x10)

	bool GetPath(struct UObject* WorldContextObject, struct FString& OutPath, struct FString Culture, enum class EStreamedVideoQuality DesiredQuality); // Function ShooterGame.StreamedVideoDataAsset.GetPath // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x3146c60
};

// Class ShooterGame.SubDataBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct USubDataBlueprintLibrary : UBlueprintFunctionLibrary {

	void TryGetSubDataPure(int32_t Data, int32_t& SubData, bool& Succeeded); // Function ShooterGame.SubDataBlueprintLibrary.TryGetSubDataPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2b8cf30
	void TryGetSubData(int32_t Data, int32_t& SubData, enum class ESubDataBlueprintLibrary_CastResult& Result); // Function ShooterGame.SubDataBlueprintLibrary.TryGetSubData // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2b8ce10
};

// Class ShooterGame.SubDataContainer
// Size: 0x30 (Inherited: 0x30)
struct USubDataContainer : UInterface {
};

// Class ShooterGame.SubDataWrapper
// Size: 0x78 (Inherited: 0x30)
struct USubDataWrapper : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FWildcard Data; // 0x38(0x40)
};

// Class ShooterGame.SubRangeListModel
// Size: 0x68 (Inherited: 0x68)
struct USubRangeListModel : USubRangeListModelBase {

	void SetSubRange(struct FIndexRange NewValue); // Function ShooterGame.SubRangeListModel.SetSubRange // (Final|Native|Public|BlueprintCallable) // @ game+0x3150d50
	void SetListModelAndSubRange(struct TScriptInterface<IOrderedListModel> NewModel, struct FIndexRange& NewSubRange); // Function ShooterGame.SubRangeListModel.SetListModelAndSubRange // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3150c40
	struct USubRangeListModel* Make(struct TScriptInterface<IOrderedListModel> ListModel, struct FIndexRange SubRange, struct UObject* Outer); // Function ShooterGame.SubRangeListModel.Make // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x31502c0
};

// Class ShooterGame.SubscriptionUIData
// Size: 0xa8 (Inherited: 0x90)
struct USubscriptionUIData : UBaseContentUIData {
	struct FText Description; // 0x90(0x18)
};

// Class ShooterGame.SubscriptionDataAsset
// Size: 0xc0 (Inherited: 0x50)
struct USubscriptionDataAsset : UAresBasePrimaryDataAsset {
	int32_t XPBoostAmount; // 0x50(0x04)
	enum class EXPBoostType XPBoostType; // 0x54(0x01)
	char pad_55[0x3]; // 0x55(0x03)
	struct TSoftClassPtr<UObject> UIData; // 0x58(0x30)
	struct FGuid EntitlementTypeID; // 0x88(0x10)
	struct FGuid AuthoringSubscriptionID; // 0x98(0x10)
	int32_t DisplayPriority; // 0xa8(0x04)
	bool bBenefitsAuthoredInEditor; // 0xac(0x01)
	bool bUnlocksAllAgents; // 0xad(0x01)
	char pad_AE[0x2]; // 0xae(0x02)
	struct TArray<struct UEditableRewardCharacter*> AgentBenefits; // 0xb0(0x10)

	bool GetUnlocksAllAgents(); // Function ShooterGame.SubscriptionDataAsset.GetUnlocksAllAgents // (Final|Native|Public) // @ game+0x31502a0
	bool GetAuthoredInEditor(); // Function ShooterGame.SubscriptionDataAsset.GetAuthoredInEditor // (Final|Native|Public) // @ game+0x314f850
	struct TArray<struct UEditableRewardCharacter*> GetAgentBenefits(); // Function ShooterGame.SubscriptionDataAsset.GetAgentBenefits // (Final|Native|Public) // @ game+0x314f780
};

// Class ShooterGame.LoadoutPipsContainerWidget
// Size: 0x2d8 (Inherited: 0x2c8)
struct ULoadoutPipsContainerWidget : UShopItemCategoryContainer {
	struct UImage* hover; // 0x2c8(0x08)
	struct UHorizontalBox* itemContainer; // 0x2d0(0x08)
};

// Class ShooterGame.SyncedTimerComponent
// Size: 0x118 (Inherited: 0xe8)
struct USyncedTimerComponent : UActorComponent {
	bool bStartWithTimerEnabled; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float TimerDuration; // 0xec(0x04)
	struct FMulticastInlineDelegate OnTimerExpired; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnTimerStarted; // 0x100(0x10)
	float NetExpireTime; // 0x110(0x04)
	char pad_114[0x4]; // 0x114(0x04)

	void MulticastSetNetExpireTime(float NewNetExpireTime); // Function ShooterGame.SyncedTimerComponent.MulticastSetNetExpireTime // (Net|NetReliableNative|Event|NetMulticast|Protected) // @ game+0x31506e0
	float GetTimeRemaining(); // Function ShooterGame.SyncedTimerComponent.GetTimeRemaining // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3150270
	void AuthStartTimer(); // Function ShooterGame.SyncedTimerComponent.AuthStartTimer // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x1e6e7b0
};

// Class ShooterGame.SyncStateMachineStateComponent
// Size: 0x388 (Inherited: 0x368)
struct USyncStateMachineStateComponent : URespondToEventStateComponent {
	bool bMustBeInState; // 0x368(0x01)
	bool bMustObserveTransition; // 0x369(0x01)
	char pad_36A[0x6]; // 0x36a(0x06)
	struct TArray<struct UStateComponent*> TriggeringStates; // 0x370(0x10)
	bool bHasEverFailedStateCondition; // 0x380(0x01)
	char pad_381[0x7]; // 0x381(0x07)

	void SetSyncState(struct UStateComponent* SyncState); // Function ShooterGame.SyncStateMachineStateComponent.SetSyncState // (Final|Native|Public|BlueprintCallable) // @ game+0x3150de0
	bool MeetsStateCondition(); // Function ShooterGame.SyncStateMachineStateComponent.MeetsStateCondition // (Final|Native|Private) // @ game+0x31506b0
};

// Class ShooterGame.TaggingComponent
// Size: 0x120 (Inherited: 0xf8)
struct UTaggingComponent : UBaseProjectileEffectComponent {
	int32_t TaggingLevel; // 0xf8(0x04)
	char pad_FC[0x4]; // 0xfc(0x04)
	struct UForceModule* ShortRangeTagModule; // 0x100(0x08)
	float LongRangeDistanceThresold; // 0x108(0x04)
	char pad_10C[0x4]; // 0x10c(0x04)
	struct UForceModule* LongRangeTagModule; // 0x110(0x08)
	struct UForceModule* WallPenTagModule; // 0x118(0x08)
};

// Class ShooterGame.TaggingLevelComponent
// Size: 0xf0 (Inherited: 0xe8)
struct UTaggingLevelComponent : UActorComponent {
	int32_t TaggingLevel; // 0xe8(0x04)
	char pad_EC[0x4]; // 0xec(0x04)

	void SetTaggingLevel(int32_t NewTaggingLevel); // Function ShooterGame.TaggingLevelComponent.SetTaggingLevel // (Final|Native|Public|BlueprintCallable) // @ game+0x3150e70
	int32_t GetTaggingLevel(); // Function ShooterGame.TaggingLevelComponent.GetTaggingLevel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31501b0
};

// Class ShooterGame.TeamRoleComponent
// Size: 0x100 (Inherited: 0xf8)
struct UTeamRoleComponent : UBaseTeamComponent {
	enum class EAresTeamRole TeamRole; // 0xf8(0x01)
	char pad_F9[0x7]; // 0xf9(0x07)

	void OnRep_RoleChanged(); // Function ShooterGame.TeamRoleComponent.OnRep_RoleChanged // (Final|Native|Protected) // @ game+0x2deb6b0
};

// Class ShooterGame.TelemetryManager
// Size: 0xf0 (Inherited: 0x80)
struct UTelemetryManager : UInitSystem {
	char pad_80[0x1]; // 0x80(0x01)
	bool bIsLoadTest; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	char pad_98[0x58]; // 0x98(0x58)

	bool TryGetPlayerInfoSubject(struct AAresPlayerStateBase* PlayerState, struct FString& OutSubject); // Function ShooterGame.TelemetryManager.TryGetPlayerInfoSubject // (Final|Native|Static|Public|HasOutParms) // @ game+0x3150f50
	void SetGameUIFlag(enum class EGameUIFlag Flag, bool bEnabled); // Function ShooterGame.TelemetryManager.SetGameUIFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x31509d0
	void SetGameplayFlag(enum class EGameplayFlag Flag, bool bEnabled); // Function ShooterGame.TelemetryManager.SetGameplayFlag // (Final|Native|Public|BlueprintCallable) // @ game+0x3150aa0
	void OnRoundEnd(struct UWorld* World, struct FString MatchID, int32_t RoundNumberEnding); // Function ShooterGame.TelemetryManager.OnRoundEnd // (Final|Native|Public) // @ game+0x3150890
	void OnMatchEnd(struct UWorld* World, struct FString MatchID); // Function ShooterGame.TelemetryManager.OnMatchEnd // (Final|Native|Public) // @ game+0x3150790
	void OnInRound(); // Function ShooterGame.TelemetryManager.OnInRound // (Final|Native|Public) // @ game+0x3150770
	struct UTelemetryManager* GetTelemetryManager(struct UObject* WorldContextObject); // Function ShooterGame.TelemetryManager.GetTelemetryManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x31501e0
	struct FGameEventRoundInfo GetRoundInfo(struct AShooterGameState* GameState); // Function ShooterGame.TelemetryManager.GetRoundInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x31500b0
	struct FGameEventPlayerInfo GetPlayerInfoManual(struct FString ActorName); // Function ShooterGame.TelemetryManager.GetPlayerInfoManual // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x314ff80
	struct FGameEventPlayerInfo GetPlayerInfo(struct AAresPlayerStateBase* PlayerState); // Function ShooterGame.TelemetryManager.GetPlayerInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x314fe70
	struct FTelemetryPlatformInfo GetPlatformInfo(); // Function ShooterGame.TelemetryManager.GetPlatformInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x314fda0
	struct FGameEventMatchInfo GetMatchInfo(struct AShooterGameMode* GameMode); // Function ShooterGame.TelemetryManager.GetMatchInfo // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x314fc90
	struct FString GetMatchID(struct AShooterGameMode* GameMode); // Function ShooterGame.TelemetryManager.GetMatchID // (Final|Native|Static|Public) // @ game+0x314fbb0
	int64_t GetGameId(struct AShooterGameMode* GameMode); // Function ShooterGame.TelemetryManager.GetGameId // (Final|Native|Static|Public) // @ game+0x314fb20
	struct FGameEventCharacterState GetCharacterState(struct AShooterCharacter* Character); // Function ShooterGame.TelemetryManager.GetCharacterState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x314f900
	struct FGameEventHpState GetCharacterHpState(struct AShooterCharacter* Character); // Function ShooterGame.TelemetryManager.GetCharacterHpState // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x314f870
};

// Class ShooterGame.TelemetrySampler
// Size: 0xa0 (Inherited: 0x80)
struct UTelemetrySampler : UInitSystem {
	bool bIsServerTelemetrySampled; // 0x80(0x01)
	bool bIsDetailedClientTelemetrySampled; // 0x81(0x01)
	char pad_82[0x6]; // 0x82(0x06)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UConfigManager* ConfigManager; // 0x90(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x98(0x08)

	bool ShouldSampleServerTelemetry(); // Function ShooterGame.TelemetrySampler.ShouldSampleServerTelemetry // (Final|Native|Public|Const) // @ game+0x3150f30
	bool ShouldSampleDetailedClientTelemetry(); // Function ShooterGame.TelemetrySampler.ShouldSampleDetailedClientTelemetry // (Final|Native|Public|Const) // @ game+0x3150f00
	void SetIsServerTelemetrySampled(struct FString MatchID); // Function ShooterGame.TelemetrySampler.SetIsServerTelemetrySampled // (Final|Native|Public) // @ game+0x3150b90
	void SetIsClientTelemetrySampled(); // Function ShooterGame.TelemetrySampler.SetIsClientTelemetrySampled // (Final|Native|Private) // @ game+0x3150b70
	struct FString CreateSamplingLogMessage(struct FString ID, struct FString IDType, bool WasSampled); // Function ShooterGame.TelemetrySampler.CreateSamplingLogMessage // (Final|Native|Private) // @ game+0x314f5c0
};

// Class ShooterGame.TeleportLocationCheckStateComponent
// Size: 0x330 (Inherited: 0x2c8)
struct UTeleportLocationCheckStateComponent : UScriptStateComponent {
	struct TArray<struct FTeleportLocationCheckRing> LocationRings; // 0x2c8(0x10)
	float MaxDistanceToFloor; // 0x2d8(0x04)
	float NavMeshCastThickness; // 0x2dc(0x04)
	bool bRunOnClient; // 0x2e0(0x01)
	char pad_2E1[0x4f]; // 0x2e1(0x4f)
};

// Class ShooterGame.TeleportStateComponent
// Size: 0x2d0 (Inherited: 0x2c8)
struct UTeleportStateComponent : UScriptStateComponent {
	bool bSetControlRotation; // 0x2c8(0x01)
	bool bClearRewindHistory; // 0x2c9(0x01)
	bool bCancelMomentum; // 0x2ca(0x01)
	char pad_2CB[0x5]; // 0x2cb(0x05)
};

// Class ShooterGame.TestAccountsManager
// Size: 0x48 (Inherited: 0x30)
struct UTestAccountsManager : UObject {
	struct TArray<struct FGeneratedAccount> GeneratedAccounts; // 0x30(0x10)
	struct UTestAccountsService* AccountsService; // 0x40(0x08)
};

// Class ShooterGame.TestAccountsService
// Size: 0x30 (Inherited: 0x30)
struct UTestAccountsService : UObject {
};

// Class ShooterGame.TestAresHudElement
// Size: 0x1a8 (Inherited: 0x58)
struct UTestAresHudElement : UAresHudElement {
	char pad_58[0x8]; // 0x58(0x08)
	float TextStateDuration[0x3]; // 0x60(0x0c)
	float TextGrowSize; // 0x6c(0x04)
	struct FVector2D TextPos; // 0x70(0x08)
	enum class EAresDrawOrigin TextDrawOrigin; // 0x78(0x01)
	enum class EAresHudTextExtentsMode TextExtentsMode; // 0x79(0x01)
	char pad_7A[0x2]; // 0x7a(0x02)
	struct FVector2D TextBaseScale; // 0x7c(0x08)
	struct FLinearColor TextColorMask; // 0x84(0x10)
	char pad_94[0x4]; // 0x94(0x04)
	struct FAresHudFontParams FontParams; // 0x98(0x70)
	struct TArray<struct UTexture*> ImagesToCycle; // 0x108(0x10)
	float ImageCycleTime; // 0x118(0x04)
	struct FVector2D ImagePos; // 0x11c(0x08)
	enum class EAresDrawOrigin ImageDrawOrigin; // 0x124(0x01)
	char pad_125[0x3]; // 0x125(0x03)
	struct FVector2D ImageScale; // 0x128(0x08)
	struct FLinearColor ImageColorMask; // 0x130(0x10)
	struct FAresHudImageParams ImageParams; // 0x140(0x10)
	struct UMaterialInterface* Material; // 0x150(0x08)
	struct FName MaterialParameterName; // 0x158(0x0c)
	float MaterialRampUpAndDownTime; // 0x164(0x04)
	struct UMaterialInstanceDynamic* MaterialInstanceDynamic; // 0x168(0x08)
	struct FVector2D MaterialPos; // 0x170(0x08)
	enum class EAresDrawOrigin MaterialDrawOrigin; // 0x178(0x01)
	char pad_179[0x3]; // 0x179(0x03)
	struct FVector2D MaterialExtents; // 0x17c(0x08)
	struct FVector2D MaterialUvCoordinateStartPosition; // 0x184(0x08)
	struct FVector2D MaterialUvCoordinateEndPosition; // 0x18c(0x08)
	float MaterialRotation; // 0x194(0x04)
	struct FVector2D MaterialPivotPoint; // 0x198(0x08)
	struct FVector2D MaterialScale; // 0x1a0(0x08)
};

// Class ShooterGame.UnifiedChatMessageWrapper
// Size: 0x108 (Inherited: 0x30)
struct UUnifiedChatMessageWrapper : UObject {
	struct FUnifiedChatMessage Message; // 0x30(0xd8)
};

// Class ShooterGame.TextChatConversation
// Size: 0x30 (Inherited: 0x30)
struct UTextChatConversation : UInterface {

	void UnbindOnOtherUserInfoChanged(struct FDelegate& Event); // Function ShooterGame.TextChatConversation.UnbindOnOtherUserInfoChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f76eb0
	void UnbindOnNumUnreadMessagesChanged(struct FDelegate& Event); // Function ShooterGame.TextChatConversation.UnbindOnNumUnreadMessagesChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3158dc0
	void SetDraftTextInfo(struct FTextChatDraftTextInfo NewValue); // Function ShooterGame.TextChatConversation.SetDraftTextInfo // (Native|Public|BlueprintCallable) // @ game+0x31589d0
	bool SendMessage(struct FText& Message); // Function ShooterGame.TextChatConversation.SendMessage // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x31587d0
	void RemoveChatMessageObserver(struct UObject* Observer); // Function ShooterGame.TextChatConversation.RemoveChatMessageObserver // (Native|Public|BlueprintCallable) // @ game+0x3158740
	void MarkConversationReadToLatest(); // Function ShooterGame.TextChatConversation.MarkConversationReadToLatest // (Native|Public|BlueprintCallable) // @ game+0x3158710
	struct TScriptInterface<IProgressModel> GetPersistentChatHistoryProgressModel(); // Function ShooterGame.TextChatConversation.GetPersistentChatHistoryProgressModel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3158500
	struct FMUCParticipant GetOtherUserInfo(); // Function ShooterGame.TextChatConversation.GetOtherUserInfo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3158050
	int32_t GetNumUnreadMessages(); // Function ShooterGame.TextChatConversation.GetNumUnreadMessages // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3158010
	struct FTextChatDraftTextInfo GetDraftTextInfo(); // Function ShooterGame.TextChatConversation.GetDraftTextInfo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3157f80
	enum class EChatRoomType GetConversationType(); // Function ShooterGame.TextChatConversation.GetConversationType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eeeb50
	struct TScriptInterface<IOrderedListModel> GetChatHistoryModel(); // Function ShooterGame.TextChatConversation.GetChatHistoryModel // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3157f00
	void BindOnOtherUserInfoChanged(struct FDelegate& Event); // Function ShooterGame.TextChatConversation.BindOnOtherUserInfoChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f1a880
	void BindOnNumUnreadMessagesChanged(struct FDelegate& Event); // Function ShooterGame.TextChatConversation.BindOnNumUnreadMessagesChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3157d80
	void AddChatMessageObserver(struct UObject* Observer); // Function ShooterGame.TextChatConversation.AddChatMessageObserver // (Native|Public|BlueprintCallable) // @ game+0x3157cf0
};

// Class ShooterGame.TextChatManagerV2
// Size: 0x170 (Inherited: 0x80)
struct UTextChatManagerV2 : UInitSystem {
	struct FMulticastInlineDelegate OnRoomListChanged; // 0x80(0x10)
	struct FMulticastInlineDelegate OnChatFilterUpdated; // 0x90(0x10)
	struct FMulticastInlineDelegate OnGlobalUnreadMessageCountUpdated; // 0xa0(0x10)
	struct FMUCInfos MUCInfos; // 0xb0(0x10)
	struct TArray<struct UTextChatRoomV2*> RegisteredRooms_Backing; // 0xc0(0x10)
	char pad_D0[0x28]; // 0xd0(0x28)
	struct UTextChatService* ChatService; // 0xf8(0x08)
	struct UChatSessionManager* ChatSessionManager; // 0x100(0x08)
	struct URSOManager* RSOManager; // 0x108(0x08)
	char pad_110[0x8]; // 0x110(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x118(0x08)
	struct UTextChatRoomV2* ActiveConversation; // 0x120(0x08)
	char pad_128[0x48]; // 0x128(0x48)

	void SetUpSubscriptions(); // Function ShooterGame.TextChatManagerV2.SetUpSubscriptions // (Final|Native|Private) // @ game+0x3158aa0
	void SetChatFiltered(bool IsChatFiltered); // Function ShooterGame.TextChatManagerV2.SetChatFiltered // (Final|Native|Public|BlueprintCallable) // @ game+0x3158940
	void HandleSessionUnloaded(); // Function ShooterGame.TextChatManagerV2.HandleSessionUnloaded // (Final|Native|Private) // @ game+0x31586f0
	struct UTextChatManagerV2* GetTextChatManager(struct UObject* WorldContextObject); // Function ShooterGame.TextChatManagerV2.GetTextChatManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3158660
	struct TScriptInterface<IOrderedListModel> GetRegisteredRoomsModel(); // Function ShooterGame.TextChatManagerV2.GetRegisteredRoomsModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31585e0
	struct TArray<struct UTextChatRoomV2*> GetRegisteredRooms(); // Function ShooterGame.TextChatManagerV2.GetRegisteredRooms // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3158550
	enum class ETextChatInitializationState GetInitializationState(); // Function ShooterGame.TextChatManagerV2.GetInitializationState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3157ff0
	int32_t GetGlobalUnreadMessageCount(); // Function ShooterGame.TextChatManagerV2.GetGlobalUnreadMessageCount // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311ba50
	bool GetChatFiltered(); // Function ShooterGame.TextChatManagerV2.GetChatFiltered // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3157ee0
};

// Class ShooterGame.TextChatPanelViewController
// Size: 0x50 (Inherited: 0x30)
struct UTextChatPanelViewController : UObject {
	struct FMulticastInlineDelegate OnActiveTextChatConversationChanged; // 0x30(0x10)
	struct TScriptInterface<ITextChatConversation> ActiveTextChatConversation; // 0x40(0x10)

	void SetActiveTextChatConversation(struct TScriptInterface<ITextChatConversation> NewValue); // Function ShooterGame.TextChatPanelViewController.SetActiveTextChatConversation // (Final|Native|Public|BlueprintCallable) // @ game+0x31588a0
	struct TScriptInterface<ITextChatConversation> GetActiveTextChatConversation(); // Function ShooterGame.TextChatPanelViewController.GetActiveTextChatConversation // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3157ea0
};

// Class ShooterGame.TextChatRoomV2
// Size: 0x1a0 (Inherited: 0x30)
struct UTextChatRoomV2 : UObject {
	char pad_30[0x8]; // 0x30(0x08)
	struct FMulticastInlineDelegate OnParticipantChange; // 0x38(0x10)
	struct FMulticastInlineDelegate OnDisconnected; // 0x48(0x10)
	char pad_58[0x10]; // 0x58(0x10)
	struct FString RoomID; // 0x68(0x10)
	bool bIsRestricted; // 0x78(0x01)
	char pad_79[0x7]; // 0x79(0x07)
	struct UTextChatService* ChatService; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	char pad_90[0x8]; // 0x90(0x08)
	struct TArray<struct FMUCParticipant> Participants; // 0x98(0x10)
	struct TArray<struct UUnifiedChatMessageWrapper*> Messages_Backing; // 0xa8(0x10)
	char pad_B8[0x28]; // 0xb8(0x28)
	struct UManualNumericProgressModel* HistoryLoadProgressModel; // 0xe0(0x08)
	struct FTextChatDraftTextInfo DraftInfo; // 0xe8(0x18)
	struct FMUCParticipant OtherUserInfo; // 0x100(0x60)
	char pad_160[0x40]; // 0x160(0x40)

	void TextChatUnmuteUser(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.TextChatRoomV2.TextChatUnmuteUser // (Final|Native|Public|BlueprintCallable) // @ game+0x3158c40
	void TextChatMuteUser(struct FString Subject, struct FDelegate OnSuccess, struct FDelegate OnError); // Function ShooterGame.TextChatRoomV2.TextChatMuteUser // (Final|Native|Public|BlueprintCallable) // @ game+0x3158ac0
	bool IsRestricted(); // Function ShooterGame.TextChatRoomV2.IsRestricted // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66390
	enum class ETextChatRoomType GetRoomType(); // Function ShooterGame.TextChatRoomV2.GetRoomType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311c4b0
	struct FString GetRoomId(); // Function ShooterGame.TextChatRoomV2.GetRoomId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3158620
	struct TArray<struct FMUCParticipant> GetParticipants(); // Function ShooterGame.TextChatRoomV2.GetParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31584c0
	struct FText GetParticipantName(struct FString Pid); // Function ShooterGame.TextChatRoomV2.GetParticipantName // (Final|Native|Public|BlueprintCallable) // @ game+0x3158380
	bool GetParticipant(struct FString Subject, struct FMUCParticipant& OutParticipant); // Function ShooterGame.TextChatRoomV2.GetParticipant // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3158200
	enum class ETextChatRoomConnectionState GetConnectionState(); // Function ShooterGame.TextChatRoomV2.GetConnectionState // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3157f50
	bool ConnectionWasInitiated(); // Function ShooterGame.TextChatRoomV2.ConnectionWasInitiated // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3157e70
	bool ConnectionWasConfirmed(); // Function ShooterGame.TextChatRoomV2.ConnectionWasConfirmed // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3157e40
};

// Class ShooterGame.TextChatService
// Size: 0x1f0 (Inherited: 0x30)
struct UTextChatService : UObject {
	char pad_30[0x1b0]; // 0x30(0x1b0)
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x1e0(0x08)
	int64_t StartupTime; // 0x1e8(0x08)
};

// Class ShooterGame.ThemeUIData
// Size: 0x98 (Inherited: 0x90)
struct UThemeUIData : UBaseContentUIData {
	struct UTexture* StoreFeaturedImage; // 0x90(0x08)
};

// Class ShooterGame.ThemeFeaturesDataAsset
// Size: 0x90 (Inherited: 0x50)
struct UThemeFeaturesDataAsset : UAresBasePrimaryDataAsset {
	struct FDateTime ReleaseDate; // 0x50(0x08)
	enum class EThematicCategory ThematicCategory; // 0x58(0x01)
	bool Promo; // 0x59(0x01)
	char pad_5A[0x6]; // 0x5a(0x06)
	struct TSoftClassPtr<UObject> Theme; // 0x60(0x30)
};

// Class ShooterGame.ThemeDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UThemeDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.ThreadedChatManager
// Size: 0x1a0 (Inherited: 0x80)
struct UThreadedChatManager : UInitSystem {
	struct FMulticastInlineDelegate OnMessagesAdded; // 0x80(0x10)
	struct FMulticastInlineDelegate OnRoomsUpdated; // 0x90(0x10)
	struct FMulticastInlineDelegate OnInGameMessageSent; // 0xa0(0x10)
	struct FMulticastInlineDelegate OnInitiateWhisperMessageToPlayer; // 0xb0(0x10)
	struct FMulticastInlineDelegate OnMessageBodyUpdated; // 0xc0(0x10)
	struct UTextChatService* ChatService; // 0xd0(0x08)
	struct TArray<struct FUnifiedChatMessage> Messages; // 0xd8(0x10)
	struct TSet<struct FString> KnownMessageIds; // 0xe8(0x50)
	struct UTextChatRoomV2* PartyRoom; // 0x138(0x08)
	struct UTextChatRoomV2* PregameRoom; // 0x140(0x08)
	struct UTextChatRoomV2* AllRoom; // 0x148(0x08)
	struct UTextChatRoomV2* TeamRoom; // 0x150(0x08)
	struct UPartyManager* PartyManager; // 0x158(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x160(0x08)
	struct UPregameManager* PregameManager; // 0x168(0x08)
	struct UWhisperChatManager* WhisperChatManager; // 0x170(0x08)
	struct UMutedPatternsManager* MutedPatternsManager; // 0x178(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0x180(0x08)
	struct UEmojiMapping* EmojiMapping; // 0x188(0x08)
	struct URSOManager* RSOManager; // 0x190(0x08)
	char pad_198[0x8]; // 0x198(0x08)

	void SendChatMessageV2(enum class EChatRoomType RoomType, struct FText Message); // Function ShooterGame.ThreadedChatManager.SendChatMessageV2 // (Final|Native|Public|BlueprintCallable) // @ game+0x3160000
	void OnTextChatMuted(bool IsMuted); // Function ShooterGame.ThreadedChatManager.OnTextChatMuted // (Final|Native|Private) // @ game+0x315fe00
	void NewMessagesArrived(struct FMUCMessages& AddedMessages); // Function ShooterGame.ThreadedChatManager.NewMessagesArrived // (Final|Native|Private|HasOutParms) // @ game+0x315fd50
	void MarkNotificationsShown(struct TSet<struct FString>& MessageIds); // Function ShooterGame.ThreadedChatManager.MarkNotificationsShown // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x315fc20
	void MarkConversationsRead(struct TSet<struct FString>& Conversations); // Function ShooterGame.ThreadedChatManager.MarkConversationsRead // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x315faf0
	void InitiateWhisperMessageToSubject(struct FString Subject); // Function ShooterGame.ThreadedChatManager.InitiateWhisperMessageToSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x315f9a0
	void HandleWhisperError(enum class EMessageSendErrorType ErrorType); // Function ShooterGame.ThreadedChatManager.HandleWhisperError // (Final|Native|Private) // @ game+0x315f900
	void HandleRoomsUpdated(); // Function ShooterGame.ThreadedChatManager.HandleRoomsUpdated // (Final|Native|Private) // @ game+0x315f8e0
	struct UThreadedChatManager* GetThreadedChatManager(struct UObject* WorldContextObject); // Function ShooterGame.ThreadedChatManager.GetThreadedChatManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x315f600
	struct UTextChatRoomV2* GetTeamRoom(); // Function ShooterGame.ThreadedChatManager.GetTeamRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f5d0
	struct UTextChatRoomV2* GetPregameRoom(); // Function ShooterGame.ThreadedChatManager.GetPregameRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f3d0
	struct UTextChatRoomV2* GetPartyRoom(); // Function ShooterGame.ThreadedChatManager.GetPartyRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5c7d0
	struct TArray<struct FUnifiedChatMessage> GetMessages(); // Function ShooterGame.ThreadedChatManager.GetMessages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f2c0
	struct FName GetCurrentPlayerTeam(); // Function ShooterGame.ThreadedChatManager.GetCurrentPlayerTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315ef60
	struct UTextChatRoomV2* GetAllRoom(); // Function ShooterGame.ThreadedChatManager.GetAllRoom // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315ef30
};

// Class ShooterGame.TimeGameStateComponent
// Size: 0x1d0 (Inherited: 0x170)
struct UTimeGameStateComponent : UBaseGameStateComponent {
	struct FMulticastInlineDelegate OnTimeChanged; // 0x170(0x10)
	struct FMulticastInlineDelegate OnPhaseEndedEarly; // 0x180(0x10)
	struct UBaseGameStateComponent* NextGameState; // 0x190(0x08)
	float StateLengthSeconds; // 0x198(0x04)
	char pad_19C[0x4]; // 0x19c(0x04)
	struct FTimerHandle StateTransitionTimerHandle; // 0x1a0(0x08)
	struct TArray<struct FTimedEvent> StateEvents; // 0x1a8(0x10)
	struct TArray<struct FTimedEvent> PendingStateEvents; // 0x1b8(0x10)
	bool bIsTimeGameStatePausedForMatchTimer; // 0x1c8(0x01)
	bool bIsTimeGameStateLocallyPaused; // 0x1c9(0x01)
	bool bIsTimerExpired; // 0x1ca(0x01)
	char pad_1CB[0x5]; // 0x1cb(0x05)

	void UpdatePauseState(); // Function ShooterGame.TimeGameStateComponent.UpdatePauseState // (Final|Native|Public|BlueprintCallable) // @ game+0x31604a0
	void UnqueueEvent(struct FDelegate& DelegateToRemove); // Function ShooterGame.TimeGameStateComponent.UnqueueEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x31603e0
	void Unpause(); // Function ShooterGame.TimeGameStateComponent.Unpause // (Final|Native|Public|BlueprintCallable) // @ game+0x31603c0
	void TimerExpired(); // Function ShooterGame.TimeGameStateComponent.TimerExpired // (Final|Native|Protected) // @ game+0x31603a0
	void SetStateLength(float Length); // Function ShooterGame.TimeGameStateComponent.SetStateLength // (Final|Native|Public|BlueprintCallable) // @ game+0x3160210
	void SetNextState(struct UBaseGameStateComponent* NextState); // Function ShooterGame.TimeGameStateComponent.SetNextState // (Final|Native|Public|BlueprintCallable) // @ game+0x3160180
	void SetNewTimeoutTime(float NewTimeOutTime); // Function ShooterGame.TimeGameStateComponent.SetNewTimeoutTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3160100
	void QueueEvent(enum class EAresTimerDirection TimeDirectionSetting, float TimeOffset, struct FDelegate& DelegateToCall); // Function ShooterGame.TimeGameStateComponent.QueueEvent // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x315feb0
	void Pause(); // Function ShooterGame.TimeGameStateComponent.Pause // (Final|Native|Public|BlueprintCallable) // @ game+0x315fe90
	bool IsPaused(); // Function ShooterGame.TimeGameStateComponent.IsPaused // (Final|Native|Public|BlueprintCallable) // @ game+0x315fac0
	void GoToStateAndSkipTimedEvents(struct UStateComponent* NewState, float TimeUntilTransition); // Function ShooterGame.TimeGameStateComponent.GoToStateAndSkipTimedEvents // (Final|Native|Public|BlueprintCallable) // @ game+0x315f810
	float GetStateLength(); // Function ShooterGame.TimeGameStateComponent.GetStateLength // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x311bcc0
	float GetRemainingTime(); // Function ShooterGame.TimeGameStateComponent.GetRemainingTime // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f400
};

// Class ShooterGame.TouchInputDebugWidget
// Size: 0x328 (Inherited: 0x2c8)
struct UTouchInputDebugWidget : UUserWidget {
	char pad_2C8[0x60]; // 0x2c8(0x60)
};

// Class ShooterGame.TournamentModel
// Size: 0x178 (Inherited: 0x30)
struct UTournamentModel : UObject {
	struct FMulticastInlineDelegate OnCurrentStageChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnIsLoadedChanged; // 0x40(0x10)
	struct FString ID; // 0x50(0x10)
	struct FString Name; // 0x60(0x10)
	int32_t TournamentSize; // 0x70(0x04)
	char pad_74[0x4]; // 0x74(0x04)
	int64_t CurrentStage; // 0x78(0x08)
	struct TMap<int64_t, struct UTournamentStageModel*> Stages; // 0x80(0x50)
	struct TMap<struct FString, struct UTournamentMatchupModel*> Matchups; // 0xd0(0x50)
	struct TMap<struct FString, struct UTournamentParticipantModel*> TournamentParticipants; // 0x120(0x50)
	bool bIsLoaded; // 0x170(0x01)
	char pad_171[0x7]; // 0x171(0x07)

	bool IsLoaded(); // Function ShooterGame.TournamentModel.IsLoaded // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315faa0
	int32_t GetTournamentSize(); // Function ShooterGame.TournamentModel.GetTournamentSize // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2feb9c0
	struct TMap<struct FString, struct UTournamentParticipantModel*> GetTournamentParticipants(); // Function ShooterGame.TournamentModel.GetTournamentParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f6f0
	struct TMap<int64_t, struct UTournamentStageModel*> GetStages(); // Function ShooterGame.TournamentModel.GetStages // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f4b0
	struct FString GetName(); // Function ShooterGame.TournamentModel.GetName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb88d0
	struct TMap<struct FString, struct UTournamentMatchupModel*> GetMatchups(); // Function ShooterGame.TournamentModel.GetMatchups // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f1a0
	struct UTournamentMatchupModel* GetLatestMatchupModel(struct FString RosterID); // Function ShooterGame.TournamentModel.GetLatestMatchupModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x315efc0
	struct FString GetID(); // Function ShooterGame.TournamentModel.GetID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7ff0
	int64_t GetCurrentStage(); // Function ShooterGame.TournamentModel.GetCurrentStage // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34f70
};

// Class ShooterGame.TournamentStageModel
// Size: 0x78 (Inherited: 0x30)
struct UTournamentStageModel : UObject {
	struct FMulticastInlineDelegate OnTournamentStageStatusUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnStageStartScheduled; // 0x40(0x10)
	struct TArray<struct UTournamentMatchupModel*> MatchupModels; // 0x50(0x10)
	int64_t ScheduledStageStartDateInSeconds; // 0x60(0x08)
	struct FDateTime ScheduledStageStartDate; // 0x68(0x08)
	enum class ETournamentStageStatus StatusEnum; // 0x70(0x01)
	char pad_71[0x7]; // 0x71(0x07)

	enum class ETournamentStageStatus GetStatus(); // Function ShooterGame.TournamentStageModel.GetStatus // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bd00
	int64_t GetScheduledStageStartDateInSeconds(); // Function ShooterGame.TournamentStageModel.GetScheduledStageStartDateInSeconds // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0e10
	struct FDateTime GetScheduledStageStartDate(); // Function ShooterGame.TournamentStageModel.GetScheduledStageStartDate // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x303c150
	struct TArray<struct UTournamentMatchupModel*> GetMatchupModels(); // Function ShooterGame.TournamentStageModel.GetMatchupModels // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f0d0
};

// Class ShooterGame.TournamentMatchupModel
// Size: 0x68 (Inherited: 0x30)
struct UTournamentMatchupModel : UObject {
	struct FString MatchupID; // 0x30(0x10)
	int64_t MatchupNumber; // 0x40(0x08)
	bool Complete; // 0x48(0x01)
	char pad_49[0x7]; // 0x49(0x07)
	int64_t ScheduledStartDateInEpochSeconds; // 0x50(0x08)
	struct TArray<struct UMatchupParticipantModel*> Participants; // 0x58(0x10)

	struct FDateTime GetScheduledStartDateTime(); // Function ShooterGame.TournamentMatchupModel.GetScheduledStartDateTime // (Final|Native|Public|HasDefaults|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f440
	struct TArray<struct UMatchupParticipantModel*> GetParticipants(); // Function ShooterGame.TournamentMatchupModel.GetParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f300
	int64_t GetMatchupNumber(); // Function ShooterGame.TournamentMatchupModel.GetMatchupNumber // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e3a960
	struct FString GetMatchupID(); // Function ShooterGame.TournamentMatchupModel.GetMatchupID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb81b0
	bool GetIsComplete(); // Function ShooterGame.TournamentMatchupModel.GetIsComplete // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315efa0
};

// Class ShooterGame.MatchupParticipantModel
// Size: 0xc8 (Inherited: 0x30)
struct UMatchupParticipantModel : UObject {
	struct FString ParticipantID; // 0x30(0x10)
	bool IsBye; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)
	int64_t Points; // 0x48(0x08)
	int64_t Seed; // 0x50(0x08)
	struct FString Name; // 0x58(0x10)
	struct FString Tag; // 0x68(0x10)
	int32_t Score; // 0x78(0x04)
	char pad_7C[0x4]; // 0x7c(0x04)
	int64_t PreviousMatchupNumber; // 0x80(0x08)
	struct FUnverifiedMetadataPersonalization Personalization; // 0x88(0x40)

	bool HasScores(); // Function ShooterGame.MatchupParticipantModel.HasScores // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f980
};

// Class ShooterGame.TournamentParticipantModel
// Size: 0x50 (Inherited: 0x30)
struct UTournamentParticipantModel : UObject {
	struct FString ParticipantID; // 0x30(0x10)
	struct FString CurrentMatchupID; // 0x40(0x10)

	struct FString GetParticipantID(); // Function ShooterGame.TournamentParticipantModel.GetParticipantID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb81b0
	struct FString GetCurrentMatchupID(); // Function ShooterGame.TournamentParticipantModel.GetCurrentMatchupID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb8630
};

// Class ShooterGame.TournamentsManager
// Size: 0x68 (Inherited: 0x30)
struct UTournamentsManager : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct URSOManager* RSOManager; // 0x50(0x08)
	struct URMSManager* RMSManager; // 0x58(0x08)
	struct UTournamentsService* TournamentsService; // 0x60(0x08)

	struct UTournamentsManager* Get(struct UWorld* FromWorld); // Function ShooterGame.TournamentsManager.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3167780
};

// Class ShooterGame.TournamentsScreenV1
// Size: 0x2e0 (Inherited: 0x2c8)
struct UTournamentsScreenV1 : UUserWidget {
	struct UTournamentViewController* TournamentViewController; // 0x2c8(0x08)
	struct FString TournamentID; // 0x2d0(0x10)

	void SubscribeToCurrentTournament(); // Function ShooterGame.TournamentsScreenV1.SubscribeToCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3167f30
	void SetTournamentId(struct FString NewValue); // Function ShooterGame.TournamentsScreenV1.SetTournamentId // (Final|Native|Public|BlueprintCallable) // @ game+0x3167e60
	void RefreshCurrentTournament(); // Function ShooterGame.TournamentsScreenV1.RefreshCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3167d90
};

// Class ShooterGame.TournamentsService
// Size: 0x38 (Inherited: 0x30)
struct UTournamentsService : UObject {
	struct UConfigManager* ConfigManager; // 0x30(0x08)
};

// Class ShooterGame.TournamentsTeamIconUIData
// Size: 0x90 (Inherited: 0x90)
struct UTournamentsTeamIconUIData : UBaseContentUIData {
};

// Class ShooterGame.TournamentsTeamIconDataAsset
// Size: 0x80 (Inherited: 0x50)
struct UTournamentsTeamIconDataAsset : UAresBasePrimaryDataAsset {
	struct TSoftClassPtr<UObject> UIData; // 0x50(0x30)
};

// Class ShooterGame.TournamentViewController
// Size: 0x80 (Inherited: 0x30)
struct UTournamentViewController : UObject {
	struct FMulticastInlineDelegate OnTournamentsModelUpdated; // 0x30(0x10)
	struct FMulticastInlineDelegate OnMatchupStartTimeUpdated; // 0x40(0x10)
	struct UTournamentModel* TournamentsModel; // 0x50(0x08)
	struct UTournamentsManager* TournamentsManager; // 0x58(0x08)
	bool IsSubscribed; // 0x60(0x01)
	char pad_61[0x1f]; // 0x61(0x1f)

	void UnsubscribeFromCurrentTournament(); // Function ShooterGame.TournamentViewController.UnsubscribeFromCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3168000
	void SubscribeToRosterMatchupUpdates(struct FString RosterID); // Function ShooterGame.TournamentViewController.SubscribeToRosterMatchupUpdates // (Final|Native|Public|BlueprintCallable) // @ game+0x3167f50
	void SubscribeToCurrentTournament(); // Function ShooterGame.TournamentViewController.SubscribeToCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3167f10
	void SetTournamentId(struct FString NewTournamentID); // Function ShooterGame.TournamentViewController.SetTournamentId // (Final|Native|Public|BlueprintCallable) // @ game+0x3167db0
	void RefreshCurrentTournament(); // Function ShooterGame.TournamentViewController.RefreshCurrentTournament // (Final|Native|Public|BlueprintCallable) // @ game+0x3167d70
	void HandleUpdatesToRosterMatchup(); // Function ShooterGame.TournamentViewController.HandleUpdatesToRosterMatchup // (Final|Native|Private) // @ game+0x3167c70
	void HandleTournamentsUpdated(struct FTournamentOverview& UpdatedTournamentOverview); // Function ShooterGame.TournamentViewController.HandleTournamentsUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3167b40
	void HandleMatchupScheduledStartTimeUpdated(int64_t& ScheduledStartTime); // Function ShooterGame.TournamentViewController.HandleMatchupScheduledStartTimeUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3167ab0
	struct UTournamentModel* GetTournamentModel(); // Function ShooterGame.TournamentViewController.GetTournamentModel // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x303bce0
};

// Class ShooterGame.TracerProjectileEffectComponent
// Size: 0x170 (Inherited: 0xf8)
struct UTracerProjectileEffectComponent : UBaseProjectileEffectComponent {
	struct FTracerEffects TracerEffects[0x2]; // 0xf8(0x10)
	struct FName StartBoneName; // 0x108(0x0c)
	bool bEnabled; // 0x114(0x01)
	char pad_115[0x3]; // 0x115(0x03)
	struct FEffectData TracerEffectData; // 0x118(0x58)

	void OnStop(); // Function ShooterGame.TracerProjectileEffectComponent.OnStop // (Final|Native|Private) // @ game+0x3167cc0
};

// Class ShooterGame.TransformRewinderComponent
// Size: 0x170 (Inherited: 0x100)
struct UTransformRewinderComponent : USnapshotRewinderComponent {
	struct TArray<struct FTransformSnapshot> Snapshots; // 0x100(0x10)
	char pad_110[0x60]; // 0x110(0x60)

	void OnTeleported(struct AShooterCharacter* Character); // Function ShooterGame.TransformRewinderComponent.OnTeleported // (Final|Native|Protected) // @ game+0x3167ce0
};

// Class ShooterGame.TransitionGameFlowState
// Size: 0xb0 (Inherited: 0x88)
struct UTransitionGameFlowState : UGameFlowState {
	char pad_88[0x28]; // 0x88(0x28)
};

// Class ShooterGame.TransitionManagerWidget
// Size: 0x2e0 (Inherited: 0x2c8)
struct UTransitionManagerWidget : UCrossWorldUserWidget {
	bool bTransitionIsActive; // 0x2c8(0x01)
	bool bTransitionIsEnding; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
	struct UPanelWidget* ContainerWidget; // 0x2d0(0x08)
	struct USimpleLifecycleWidget* CurrentTransitionWidget; // 0x2d8(0x08)

	void HandleWidgetAddedToContainerWidget(struct USimpleLifecycleWidget* TransitionWidget, struct UPanelSlot* LayoutSlot); // Function ShooterGame.TransitionManagerWidget.HandleWidgetAddedToContainerWidget // (Event|Public|BlueprintEvent) // @ game+0x3520f50
	void HandleEndTransitionCompleted(); // Function ShooterGame.TransitionManagerWidget.HandleEndTransitionCompleted // (Final|Native|Private) // @ game+0x3167a70
};

// Class ShooterGame.TransitionModelManager
// Size: 0xb0 (Inherited: 0x30)
struct UTransitionModelManager : UObject {
	struct FString CurrentMatchID; // 0x30(0x10)
	struct FString LastMatchID; // 0x40(0x10)
	struct UTransitionToPregameModel* TransitionToPregameModel; // 0x50(0x08)
	struct UTransitionToInGameModel* TransitionToInGameModel; // 0x58(0x08)
	struct UTransitionToMainMenuModel* TransitionToMainMenuModel; // 0x60(0x08)
	struct UContentIndex* ContentIndex; // 0x68(0x08)
	struct UPartyManager* PartyManager; // 0x70(0x08)
	struct UPregameManager* PregameManager; // 0x78(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x80(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x88(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x90(0x08)
	struct URSOManager* RSOManager; // 0x98(0x08)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct UPersonalizationManagerV2* PersonalizationManager; // 0xa8(0x08)

	void UpdateModels(); // Function ShooterGame.TransitionModelManager.UpdateModels // (Final|Native|Private) // @ game+0x3168020
	void HandleMainMenu(); // Function ShooterGame.TransitionModelManager.HandleMainMenu // (Final|Native|Private) // @ game+0x3167a90
	struct UTransitionToPregameModel* GetTransitionToPregameModel(); // Function ShooterGame.TransitionModelManager.GetTransitionToPregameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x303bce0
	struct UTransitionToMainMenuModel* GetTransitionToMainMenuModel(); // Function ShooterGame.TransitionModelManager.GetTransitionToMainMenuModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ec0e10
	struct UTransitionToInGameModel* GetTransitionToInGameModel(); // Function ShooterGame.TransitionModelManager.GetTransitionToInGameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e48a90
};

// Class ShooterGame.TransitionScreenModel
// Size: 0x48 (Inherited: 0x30)
struct UTransitionScreenModel : UObject {
	struct FMulticastInlineDelegate OnCurrentStateChanged; // 0x30(0x10)
	enum class ETransitionScreenState CurrentState; // 0x40(0x01)
	char pad_41[0x7]; // 0x41(0x07)

	enum class ETransitionScreenState GetCurrentState(); // Function ShooterGame.TransitionScreenModel.GetCurrentState // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e66150
};

// Class ShooterGame.TransitionToInGameModel
// Size: 0xe0 (Inherited: 0x48)
struct UTransitionToInGameModel : UTransitionScreenModel {
	struct UMapDataAsset* Map; // 0x48(0x08)
	struct UGameModeDataAsset* Mode; // 0x50(0x08)
	struct FString QueueID; // 0x58(0x10)
	struct FName AllyTeamID; // 0x68(0x0c)
	char pad_74[0x4]; // 0x74(0x04)
	struct TMap<struct FName, struct FLoadingScreenTeam> Teams; // 0x78(0x50)
	bool IsCustomGame; // 0xc8(0x01)
	char pad_C9[0x7]; // 0xc9(0x07)
	struct FString GamePodID; // 0xd0(0x10)

	bool IsSinglePlayerMatch(); // Function ShooterGame.TransitionToInGameModel.IsSinglePlayerMatch // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3167c90
	struct FString GetQueueID(); // Function ShooterGame.TransitionToInGameModel.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3167990
	struct UGameModeDataAsset* GetMode(); // Function ShooterGame.TransitionToInGameModel.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3167960
	struct UMapDataAsset* GetMap(); // Function ShooterGame.TransitionToInGameModel.GetMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5ccc0
	bool GetIsCustomGame(); // Function ShooterGame.TransitionToInGameModel.GetIsCustomGame // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x20347d0
	struct FString GetGamePodId(); // Function ShooterGame.TransitionToInGameModel.GetGamePodId // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3167930
	struct FLoadingScreenTeam GetEnemyTeam(); // Function ShooterGame.TransitionToInGameModel.GetEnemyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31678a0
	struct FLoadingScreenTeam GetAllyTeam(); // Function ShooterGame.TransitionToInGameModel.GetAllyTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3167810
};

// Class ShooterGame.TransitionToInGameStateV2
// Size: 0xc0 (Inherited: 0xb0)
struct UTransitionToInGameStateV2 : UTransitionGameFlowState {
	struct UCoreGameManager* CoreGameManager; // 0xb0(0x08)
	struct UPingManager* PingManager; // 0xb8(0x08)
};

// Class ShooterGame.TransitionToMainMenuModel
// Size: 0x50 (Inherited: 0x48)
struct UTransitionToMainMenuModel : UTransitionScreenModel {
	struct UTransitionToPregameModel* TransitionToPregameModel; // 0x48(0x08)

	bool HasTransitionToPregameModel(); // Function ShooterGame.TransitionToMainMenuModel.HasTransitionToPregameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x316ece0
	struct UTransitionToPregameModel* GetTransitionToPregameModel(); // Function ShooterGame.TransitionToMainMenuModel.GetTransitionToPregameModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e34f50
};

// Class ShooterGame.TransitionToMainMenuStateV2
// Size: 0xb0 (Inherited: 0xb0)
struct UTransitionToMainMenuStateV2 : UTransitionGameFlowState {
};

// Class ShooterGame.TransitionToPlatformFaultedStateV2
// Size: 0xb0 (Inherited: 0xb0)
struct UTransitionToPlatformFaultedStateV2 : UTransitionGameFlowState {
};

// Class ShooterGame.TransitionToPregameModel
// Size: 0x158 (Inherited: 0x48)
struct UTransitionToPregameModel : UTransitionScreenModel {
	struct UMapDataAsset* Map; // 0x48(0x08)
	struct UGameModeDataAsset* Mode; // 0x50(0x08)
	enum class EAresTeam Team; // 0x58(0x01)
	char pad_59[0x3]; // 0x59(0x03)
	struct FName TeamID; // 0x5c(0x0c)
	struct FString QueueID; // 0x68(0x10)
	struct FString TournamentID; // 0x78(0x10)
	struct FTournamentMetadata TournamentMetadata; // 0x88(0x80)
	struct FTournamentRosterMetadata RosterMetadata; // 0x108(0x50)

	struct FTournamentRosterMetadata GetTournamentRosterMetadata(); // Function ShooterGame.TransitionToPregameModel.GetTournamentRosterMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x316e8d0
	struct FTournamentMetadata GetTournamentMetadata(); // Function ShooterGame.TransitionToPregameModel.GetTournamentMetadata // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x316e860
	struct FName GetTeamID(); // Function ShooterGame.TransitionToPregameModel.GetTeamID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x316e830
	enum class EAresTeam GetTeam(); // Function ShooterGame.TransitionToPregameModel.GetTeam // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2da2d60
	struct FString GetQueueID(); // Function ShooterGame.TransitionToPregameModel.GetQueueID // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x316e750
	struct UGameModeDataAsset* GetMode(); // Function ShooterGame.TransitionToPregameModel.GetMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3167960
	struct UMapDataAsset* GetMap(); // Function ShooterGame.TransitionToPregameModel.GetMap // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5ccc0
};

// Class ShooterGame.TransitionToPregameStateV2
// Size: 0xb8 (Inherited: 0xb0)
struct UTransitionToPregameStateV2 : UTransitionGameFlowState {
	struct UPregameManager* PregameManager; // 0xb0(0x08)
};

// Class ShooterGame.TravelManager
// Size: 0x90 (Inherited: 0x30)
struct UTravelManager : UObject {
	bool bInitialized; // 0x30(0x01)
	char pad_31[0x3]; // 0x31(0x03)
	float TimeWaitedToTravel; // 0x34(0x04)
	struct FName TravelInProgressDestination; // 0x38(0x0c)
	char pad_44[0x4]; // 0x44(0x04)
	struct URSOManager* RSOManager; // 0x48(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x50(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0x58(0x08)
	char pad_60[0x8]; // 0x60(0x08)
	struct UConfigManager* ConfigManager; // 0x68(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x70(0x08)
	char pad_78[0x8]; // 0x78(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x80(0x08)
	struct UMapLoadModel* MapLoadModel; // 0x88(0x08)

	void TravelCompleted(); // Function ShooterGame.TravelManager.TravelCompleted // (Final|Native|Private) // @ game+0x316f670
	bool Tick(float DeltaTime); // Function ShooterGame.TravelManager.Tick // (Final|Native|Private) // @ game+0x316f5e0
	bool IsTravelInProgress(); // Function ShooterGame.TravelManager.IsTravelInProgress // (Final|Native|Private|Const) // @ game+0x316ed10
	void HandleTravelFailure(struct UWorld* World, enum class ETravelFailure FailureType, struct FString Message); // Function ShooterGame.TravelManager.HandleTravelFailure // (Final|Native|Private) // @ game+0x316eba0
	void HandleNetworkFailure(struct UWorld* World, struct UNetDriver* NetDriver, enum class ENetworkFailure FailureType, struct FString Message); // Function ShooterGame.TravelManager.HandleNetworkFailure // (Final|Native|Private) // @ game+0x316ea20
	struct UTravelManager* GetTravelManager(struct UObject* WorldContextObject); // Function ShooterGame.TravelManager.GetTravelManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x316e970
};

// Class ShooterGame.TurnLeftLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UTurnLeftLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.TurnRightLowerBody3P
// Size: 0x38 (Inherited: 0x38)
struct UTurnRightLowerBody3P : UAnimSlotLowerBody3P {
};

// Class ShooterGame.TutorialManager
// Size: 0x70 (Inherited: 0x30)
struct UTutorialManager : UObject {
	struct UAresSettingsManager* AresSettingsManager; // 0x30(0x08)
	struct URoamingSettingsManager* RoamingSettingsManager; // 0x38(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x40(0x08)
	struct UPartyManager* PartyManager; // 0x48(0x08)
	struct UStoreManager* StoreManager; // 0x50(0x08)
	struct UContractsViewController* ContractsViewController; // 0x58(0x08)
	struct UInventoryManager* InventoryManager; // 0x60(0x08)
	struct UConfigManager* ConfigManager; // 0x68(0x08)

	bool ShouldShowWelcomeScreen(); // Function ShooterGame.TutorialManager.ShouldShowWelcomeScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f5b0
	bool ShouldShowUPWTutorial(); // Function ShooterGame.TutorialManager.ShouldShowUPWTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f580
	bool ShouldShowTournamentsScreen(); // Function ShooterGame.TutorialManager.ShouldShowTournamentsScreen // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f550
	bool ShouldShowSettingsTutorial(); // Function ShooterGame.TutorialManager.ShouldShowSettingsTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f520
	bool ShouldShowPlayButtonTutorial(); // Function ShooterGame.TutorialManager.ShouldShowPlayButtonTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f4f0
	bool ShouldShowPhotoSensitivityWarning(); // Function ShooterGame.TutorialManager.ShouldShowPhotoSensitivityWarning // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f4c0
	bool ShouldShowNPEContractTutorial(); // Function ShooterGame.TutorialManager.ShouldShowNPEContractTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f460
	bool ShouldShowNewPlayerSettings(); // Function ShooterGame.TutorialManager.ShouldShowNewPlayerSettings // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f490
	bool ShouldShowMenuTutorial(); // Function ShooterGame.TutorialManager.ShouldShowMenuTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f430
	bool ShouldShowCodeOfConduct(); // Function ShooterGame.TutorialManager.ShouldShowCodeOfConduct // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f400
	bool ShouldShowActivateContractTutorial(); // Function ShooterGame.TutorialManager.ShouldShowActivateContractTutorial // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x316f3d0
	void HandleCurrentMatchUpdated(); // Function ShooterGame.TutorialManager.HandleCurrentMatchUpdated // (Final|Native|Protected) // @ game+0x316ea00
	void DismissWelcomeScreen(); // Function ShooterGame.TutorialManager.DismissWelcomeScreen // (Final|Native|Public|BlueprintCallable) // @ game+0x316e580
	void DismissUPWTutorial(); // Function ShooterGame.TutorialManager.DismissUPWTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x316e560
	void DismissTournamentsScreen(); // Function ShooterGame.TutorialManager.DismissTournamentsScreen // (Final|Native|Public|BlueprintCallable) // @ game+0x316e540
	void DismissSettingsTutorial(); // Function ShooterGame.TutorialManager.DismissSettingsTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x316e520
	void DismissPlayButtonTutorial(); // Function ShooterGame.TutorialManager.DismissPlayButtonTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x316e500
	void DismissPhotoSensitivityWarning(); // Function ShooterGame.TutorialManager.DismissPhotoSensitivityWarning // (Final|Native|Public|BlueprintCallable) // @ game+0x316e4e0
	void DismissNPEContractTutorial(); // Function ShooterGame.TutorialManager.DismissNPEContractTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x316e4a0
	void DismissNewPlayerSettings(); // Function ShooterGame.TutorialManager.DismissNewPlayerSettings // (Final|Native|Public|BlueprintCallable) // @ game+0x316e4c0
	void DismissMenuTutorial(); // Function ShooterGame.TutorialManager.DismissMenuTutorial // (Final|Native|Public|BlueprintCallable) // @ game+0x316e480
	void AcceptCodeOfConduct(); // Function ShooterGame.TutorialManager.AcceptCodeOfConduct // (Final|Native|Public|BlueprintCallable) // @ game+0x316e460
};

// Class ShooterGame.MainMenuAutomationBase
// Size: 0x38 (Inherited: 0x30)
struct UMainMenuAutomationBase : UObject {
	char pad_30[0x8]; // 0x30(0x08)

	void WaitForMenuScreenByType(struct UUserWidget* Type, float MaxWaitSeconds, struct UUserWidget*& Result, struct FLatentActionInfo LatentInfo); // Function ShooterGame.MainMenuAutomationBase.WaitForMenuScreenByType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x316f690
	void WaitForMainMenuParentWidget(struct UMainMenuParentWidget* MainMenuClass, float MaxWaitSeconds, struct UMainMenuParentWidget*& OutMainMenu, struct FLatentActionInfo LatentInfo); // Function ShooterGame.MainMenuAutomationBase.WaitForMainMenuParentWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x316f690
	void GetMenuScreenByType(struct UUserWidget*& OutWidget, struct UUserWidget* WidgetClass); // Function ShooterGame.MainMenuAutomationBase.GetMenuScreenByType // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x316e680
	void GetMainMenuParentWidget(struct UMainMenuParentWidget* MainMenuClass, struct UMainMenuParentWidget*& OutMainMenu); // Function ShooterGame.MainMenuAutomationBase.GetMainMenuParentWidget // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x316e5a0
};

// Class ShooterGame.HUDAutomationBase
// Size: 0x38 (Inherited: 0x30)
struct UHUDAutomationBase : UObject {
	struct AHUD* HUD; // 0x30(0x08)
};

// Class ShooterGame.PlayerUIAutomationBase
// Size: 0x40 (Inherited: 0x30)
struct UPlayerUIAutomationBase : UObject {
	struct UMainMenuAutomationBase* MainMenuAutomation; // 0x30(0x08)
	struct UHUDAutomationBase* HUDAutomation; // 0x38(0x08)
};

// Class ShooterGame.UISettings
// Size: 0x110 (Inherited: 0x30)
struct UUISettings : UObject {
	struct FSoftClassPath EmojiMappingClass; // 0x30(0x20)
	struct FSoftClassPath TransitionManagerWidgetClass; // 0x50(0x20)
	struct FSoftClassPath DefaultTransitionWidgetClass; // 0x70(0x20)
	struct FSoftClassPath TransitionToPregameWidgetClass; // 0x90(0x20)
	struct FSoftClassPath TransitionToInGameWidgetClass; // 0xb0(0x20)
	struct FSoftClassPath TransitionToMainMenuWidgetClass; // 0xd0(0x20)
	struct FSoftClassPath PregameToInGameTransitionWidgetClass; // 0xf0(0x20)
};

// Class ShooterGame.UITelemetryManager
// Size: 0x98 (Inherited: 0x80)
struct UUITelemetryManager : UInitSystem {
	struct URSOManager* RSOManager; // 0x80(0x08)
	struct UTelemetrySampler* TelemetrySampler; // 0x88(0x08)
	struct UTelemetryManager* TelemetryManager; // 0x90(0x08)

	void RecordUIAction(struct UObject* WorldContextObject, enum class EUIActionType ActionType, struct FString ActionTarget); // Function ShooterGame.UITelemetryManager.RecordUIAction // (Final|Native|Public|BlueprintCallable) // @ game+0x316eea0
};

// Class ShooterGame.TelemetryButton
// Size: 0x4b0 (Inherited: 0x498)
struct UTelemetryButton : UButton {
	bool bSendTelemetry; // 0x498(0x01)
	char pad_499[0x7]; // 0x499(0x07)
	struct FString ActionTarget; // 0x4a0(0x10)
};

// Class ShooterGame.ModalNotificationWidget
// Size: 0x2c8 (Inherited: 0x2c8)
struct UModalNotificationWidget : UDesignableUserWidget {

	void SetNotificationConfig(struct UGenericNotification* ModalNotification); // Function ShooterGame.ModalNotificationWidget.SetNotificationConfig // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2cb57d0
};

// Class ShooterGame.UnequipStateComponent
// Size: 0x2d0 (Inherited: 0x2c8)
struct UUnequipStateComponent : UScriptStateComponent {
	enum class EEquipSpeed EquipSpeed; // 0x2c8(0x01)
	bool bIgnorePlayerSettingsAndReequipMostRecent; // 0x2c9(0x01)
	char pad_2CA[0x6]; // 0x2ca(0x06)
};

// Class ShooterGame.UniformGridListSlot
// Size: 0x68 (Inherited: 0x40)
struct UUniformGridListSlot : UOrderedListSimpleWidgetContainerSlot {
	enum class EHorizontalAlignment HorizontalAlignment; // 0x40(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x41(0x01)
	char pad_42[0x2]; // 0x42(0x02)
	int32_t Row; // 0x44(0x04)
	int32_t Column; // 0x48(0x04)
	char pad_4C[0x1c]; // 0x4c(0x1c)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.UniformGridListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x316f350
	void SetRow(int32_t InRow); // Function ShooterGame.UniformGridListSlot.SetRow // (Final|Native|Public|BlueprintCallable) // @ game+0x316f230
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.UniformGridListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x316f0b0
	void SetColumn(int32_t InColumn); // Function ShooterGame.UniformGridListSlot.SetColumn // (Final|Native|Public|BlueprintCallable) // @ game+0x316f020
};

// Class ShooterGame.UniformGridPanelList
// Size: 0x2c0 (Inherited: 0x298)
struct UUniformGridPanelList : UOrderedListSimpleWidgetContainerBase {
	struct FMargin SlotPadding; // 0x298(0x10)
	float MinDesiredSlotWidth; // 0x2a8(0x04)
	float MinDesiredSlotHeight; // 0x2ac(0x04)
	char pad_2B0[0x10]; // 0x2b0(0x10)

	void SetSlotPadding(struct FMargin InSlotPadding); // Function ShooterGame.UniformGridPanelList.SetSlotPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x316f2c0
	void SetMinDesiredSlotWidth(float InMinDesiredSlotWidth); // Function ShooterGame.UniformGridPanelList.SetMinDesiredSlotWidth // (Final|Native|Public|BlueprintCallable) // @ game+0x316f1b0
	void SetMinDesiredSlotHeight(float InMinDesiredSlotHeight); // Function ShooterGame.UniformGridPanelList.SetMinDesiredSlotHeight // (Final|Native|Public|BlueprintCallable) // @ game+0x316f130
};

// Class ShooterGame.UniformGridSlotConfigurer
// Size: 0x58 (Inherited: 0x50)
struct UUniformGridSlotConfigurer : UListEntrySlotConfigurerBase {
	enum class EHorizontalAlignment HorizontalAlignment; // 0x50(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x51(0x01)
	enum class EGridAxis2D MajorAxis; // 0x52(0x01)
	char pad_53[0x1]; // 0x53(0x01)
	int32_t MaxMinorItemCount; // 0x54(0x04)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.UniformGridSlotConfigurer.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x31753c0
	void SetMaxMinorItemCount(int32_t InMaxMinorItemCount); // Function ShooterGame.UniformGridSlotConfigurer.SetMaxMinorItemCount // (Final|Native|Public|BlueprintCallable) // @ game+0x3175330
	void SetMajorAxis(enum class EGridAxis2D InMajorAxis); // Function ShooterGame.UniformGridSlotConfigurer.SetMajorAxis // (Final|Native|Public|BlueprintCallable) // @ game+0x31752b0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.UniformGridSlotConfigurer.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x31751a0
};

// Class ShooterGame.UnorderedMapModel
// Size: 0x30 (Inherited: 0x30)
struct UUnorderedMapModel : UInterface {

	void UnbindOnChange(struct FDelegate& Delegate); // Function ShooterGame.UnorderedMapModel.UnbindOnChange // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d95860
	int32_t GetNum(); // Function ShooterGame.UnorderedMapModel.GetNum // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f7c5e0
	void BindOnChange(struct FDelegate& Delegate); // Function ShooterGame.UnorderedMapModel.BindOnChange // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x2d96a30
};

// Class ShooterGame.UnorderedMapModelBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UUnorderedMapModelBlueprintLibrary : UBlueprintFunctionLibrary {

	struct TArray<struct FWildcard> GetReplacedItemValues(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetReplacedItemValues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3174540
	struct TMap<struct FWildcard, struct FWildcard> GetReplacedItems(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetReplacedItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3174640
	struct TArray<struct FWildcard> GetReplacedItemKeys(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetReplacedItemKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3174440
	struct TArray<struct FWildcard> GetRemovedKeys(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetRemovedKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3174340
	void GetKeys(struct TArray<struct FWildcard>& Keys, struct TScriptInterface<IUnorderedMapModel> Target); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x31740c0
	bool GetItemByKey(int32_t& Value, struct TScriptInterface<IUnorderedMapModel> Target, int32_t& Key); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetItemByKey // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2c9bee0
	struct TArray<struct FWildcard> GetAddedItemValues(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetAddedItemValues // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3173dc0
	struct TMap<struct FWildcard, struct FWildcard> GetAddedItems(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetAddedItems // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3173ec0
	struct TArray<struct FWildcard> GetAddedItemKeys(struct FUnorderedMapModelChangeEventData& EventData); // Function ShooterGame.UnorderedMapModelBlueprintLibrary.GetAddedItemKeys // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3173cc0
};

// Class ShooterGame.UrlParser
// Size: 0x30 (Inherited: 0x30)
struct UUrlParser : UBlueprintFunctionLibrary {

	struct FString GetQueryParameter(struct FString URL, struct FString ParameterName); // Function ShooterGame.UrlParser.GetQueryParameter // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3174210
};

// Class ShooterGame.UsableCollisionVolume
// Size: 0x570 (Inherited: 0x570)
struct UUsableCollisionVolume : USphereComponent {
};

// Class ShooterGame.UsableComponent
// Size: 0x458 (Inherited: 0xe8)
struct UUsableComponent : UActorComponent {
	enum class EUsablePriority UsePriority; // 0xe8(0x01)
	char pad_E9[0x3]; // 0xe9(0x03)
	float ScoringBonus; // 0xec(0x04)
	bool bAllowMultipleUsers; // 0xf0(0x01)
	bool bCanBeSpedUp; // 0xf1(0x01)
	bool bDistanceLimitedUsable; // 0xf2(0x01)
	char pad_F3[0x1]; // 0xf3(0x01)
	float UseDistance; // 0xf4(0x04)
	bool bMustBeFullyInside; // 0xf8(0x01)
	bool bRequireLineOfSight; // 0xf9(0x01)
	enum class ECollisionChannel LineOfSightChannel; // 0xfa(0x01)
	bool bUseComplexForLineOfSight; // 0xfb(0x01)
	bool bClampCameraWhileUsing; // 0xfc(0x01)
	char pad_FD[0x3]; // 0xfd(0x03)
	float PitchClampWhileUsing; // 0x100(0x04)
	float YawClampWhileUsing; // 0x104(0x04)
	float AdditionalScoringAngle; // 0x108(0x04)
	float AdditionalScoringYaw; // 0x10c(0x04)
	float AdditionalScoringPitch; // 0x110(0x04)
	float TouchAdditionalScoringYaw; // 0x114(0x04)
	float TouchAdditionalScoringPitch; // 0x118(0x04)
	char pad_11C[0x4]; // 0x11c(0x04)
	struct FString UseMessage; // 0x120(0x10)
	struct FString UseMessage2; // 0x130(0x10)
	struct FText UseMessageText; // 0x140(0x18)
	struct FText UseMessage2Text; // 0x158(0x18)
	struct FColor UseMessage2Color; // 0x170(0x04)
	char pad_174[0x4]; // 0x174(0x04)
	struct FString UsingMessage; // 0x178(0x10)
	struct FText UsingMessageText; // 0x188(0x18)
	float UsingMessageScale; // 0x1a0(0x04)
	char pad_1A4[0x4]; // 0x1a4(0x04)
	struct FText CannotUseMessageText; // 0x1a8(0x18)
	struct FCanvasIcon UseIcon; // 0x1c0(0x18)
	struct FCanvasIcon UsingIcon; // 0x1d8(0x18)
	float UseIconScale; // 0x1f0(0x04)
	bool bConsumesInteraction; // 0x1f4(0x01)
	enum class EUseKeyType UseKey; // 0x1f5(0x01)
	char pad_1F6[0x2]; // 0x1f6(0x02)
	struct UAresGameplayBuff* CharacterUsingBuff; // 0x1f8(0x08)
	struct AAresEquippable* EquippableToSwitchTo; // 0x200(0x08)
	struct AEffectContainer* EquippableEquippedEffect; // 0x208(0x08)
	float EquippableCompleteTime; // 0x210(0x04)
	char pad_214[0x4]; // 0x214(0x04)
	struct AEffectContainer* EquippableCompleteEffect; // 0x218(0x08)
	float EquippableCancelTime; // 0x220(0x04)
	char pad_224[0x4]; // 0x224(0x04)
	struct AEffectContainer* EquippableCancelEffect; // 0x228(0x08)
	enum class EEquipSpeed EquippableUnequipSpeed; // 0x230(0x01)
	char pad_231[0x7]; // 0x231(0x07)
	struct FGameplayAttribute PreventUsingAttribute; // 0x238(0x38)
	struct FMulticastInlineDelegate OnCanUse; // 0x270(0x10)
	bool bCanUseResult; // 0x280(0x01)
	char pad_281[0x7]; // 0x281(0x07)
	struct FMulticastInlineDelegate OnCanSelect; // 0x288(0x10)
	bool bCanSelectResult; // 0x298(0x01)
	char pad_299[0x3]; // 0x299(0x03)
	float GetUseTimeResult; // 0x29c(0x04)
	struct FMulticastInlineDelegate OnUseRejected; // 0x2a0(0x10)
	struct FMulticastInlineDelegate OnUseStarted; // 0x2b0(0x10)
	struct FMulticastInlineDelegate OnUseSuccessful; // 0x2c0(0x10)
	struct FMulticastInlineDelegate OnUseCanceled; // 0x2d0(0x10)
	struct FMulticastInlineDelegate OnGetUseTime; // 0x2e0(0x10)
	struct FMulticastInlineDelegate OnBecomeLocalTargettedUsable; // 0x2f0(0x10)
	struct FMulticastInlineDelegate OnStopBeingLocalTargettedUsable; // 0x300(0x10)
	struct FMulticastInlineDelegate OnUsabilityUpdated; // 0x310(0x10)
	struct FMulticastInlineDelegate OnTextUpdated; // 0x320(0x10)
	bool bAreaInteraction; // 0x330(0x01)
	char pad_331[0x7]; // 0x331(0x07)
	struct AActor* UsableScoringActor; // 0x338(0x08)
	struct TArray<struct UPrimitiveComponent*> CollisionVolumes; // 0x340(0x10)
	float UseTime; // 0x350(0x04)
	bool bInsideCanUse; // 0x354(0x01)
	bool bIsUsable; // 0x355(0x01)
	bool bAllowClientPrediction; // 0x356(0x01)
	bool bInsideCanSelect; // 0x357(0x01)
	bool bIsSelectable; // 0x358(0x01)
	char pad_359[0x3]; // 0x359(0x03)
	float HighestProgress; // 0x35c(0x04)
	bool bIsContinuous; // 0x360(0x01)
	char pad_361[0x7]; // 0x361(0x07)
	struct TArray<struct UInteractableUserComponent*> OverlappingCharacters; // 0x368(0x10)
	struct TArray<struct UInteractableUserComponent*> NotifiedCharacters; // 0x378(0x10)
	struct TMap<struct UInteractableUserComponent*, float> AuthUsingCharactersUseTime; // 0x388(0x50)
	struct TMap<struct UInteractableUserComponent*, struct FActiveGameplayEffectHandle> UsingBuffMap; // 0x3d8(0x50)
	char pad_428[0x10]; // 0x428(0x10)
	struct TArray<struct FAuthUsableUser> AuthUsingCharacters; // 0x438(0x10)
	char pad_448[0x10]; // 0x448(0x10)

	void UsingCharactersRemove(struct UInteractableUserComponent* Character); // Function ShooterGame.UsableComponent.UsingCharactersRemove // (Final|Native|Private) // @ game+0x3175780
	void UsingCharactersAdd(struct UInteractableUserComponent* Character); // Function ShooterGame.UsableComponent.UsingCharactersAdd // (Final|Native|Private) // @ game+0x31756f0
	void UseStart(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.UseStart // (Final|Native|Public) // @ game+0x3175660
	void UseInstant(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.UseInstant // (Final|Native|Public) // @ game+0x31755d0
	void UseComplete(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.UseComplete // (Final|Native|Public) // @ game+0x3175540
	void UseCancel(struct UInteractableUserComponent* User, enum class EUsableCancelReason CancelReason); // Function ShooterGame.UsableComponent.UseCancel // (Final|Native|Public) // @ game+0x3175470
	bool TickShouldBeEnabled(); // Function ShooterGame.UsableComponent.TickShouldBeEnabled // (Final|Native|Private) // @ game+0x3175440
	void SetIsUsable(bool bNewIsUsable); // Function ShooterGame.UsableComponent.SetIsUsable // (Final|Native|Public|BlueprintCallable) // @ game+0x3175220
	void ReplaceUsableVolumes(struct TArray<struct UPrimitiveComponent*>& NewVolumes); // Function ShooterGame.UsableComponent.ReplaceUsableVolumes // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x31750f0
	void RejectUse(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.RejectUse // (Final|Native|Public) // @ game+0x3175060
	void OverrideUseTime(struct UInteractableUserComponent* User, float NewUseTime); // Function ShooterGame.UsableComponent.OverrideUseTime // (Final|Native|Public|BlueprintCallable) // @ game+0x3174f90
	void OnShooterCharacterDied(struct AShooterCharacter* Character, struct UDamageResponse* Response); // Function ShooterGame.UsableComponent.OnShooterCharacterDied // (Final|Native|Public) // @ game+0x3174ec0
	void OnRep_UsingCharacters(); // Function ShooterGame.UsableComponent.OnRep_UsingCharacters // (Final|Native|Public) // @ game+0x3174ea0
	void OnComponentDestroyed(bool bDestroyingHierarchy); // Function ShooterGame.UsableComponent.OnComponentDestroyed // (Final|Native|Private) // @ game+0x3174e00
	void OnCollisionVolumeBeingDestroyed(struct AActor* DestroyedActor); // Function ShooterGame.UsableComponent.OnCollisionVolumeBeingDestroyed // (Final|Native|Public) // @ game+0x3174d70
	void OnCharacterSpawn(struct APawn* Pawn); // Function ShooterGame.UsableComponent.OnCharacterSpawn // (Final|Native|Private) // @ game+0x3174ce0
	void OnActorEndOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex); // Function ShooterGame.UsableComponent.OnActorEndOverlap // (Final|Native|Public) // @ game+0x3174b80
	void OnActorBeginOverlap(struct UPrimitiveComponent* OverlappedComponent, struct AActor* OtherActor, struct UPrimitiveComponent* OtherComp, int32_t OtherBodyIndex, bool bFromSweep, struct FHitResult& SweepResult); // Function ShooterGame.UsableComponent.OnActorBeginOverlap // (Final|Native|Public|HasOutParms) // @ game+0x3174950
	bool IsInUse(); // Function ShooterGame.UsableComponent.IsInUse // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3174920
	bool IsCharacterUsing(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.IsCharacterUsing // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3174880
	struct AActor* GetWorldObjectForScoring(); // Function ShooterGame.UsableComponent.GetWorldObjectForScoring // (Final|Native|Public|Const) // @ game+0x3174850
	float GetUseTime(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.GetUseTime // (Final|Native|Public|BlueprintCallable) // @ game+0x31747b0
	float GetHighestProgress(); // Function ShooterGame.UsableComponent.GetHighestProgress // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3174090
	struct UInteractableUserComponent* GetCharacterWithMostUseProgress(); // Function ShooterGame.UsableComponent.GetCharacterWithMostUseProgress // (Final|Native|Public|BlueprintCallable) // @ game+0x23b2e20
	float GetAdditionalScoringYaw(); // Function ShooterGame.UsableComponent.GetAdditionalScoringYaw // (Final|Native|Public) // @ game+0x3174060
	float GetAdditionalScoringPitch(); // Function ShooterGame.UsableComponent.GetAdditionalScoringPitch // (Final|Native|Public) // @ game+0x3174030
	void EnableTickIfNeeded(); // Function ShooterGame.UsableComponent.EnableTickIfNeeded // (Final|Native|Private) // @ game+0x3173ca0
	bool CanUse(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.CanUse // (Final|Native|Public|BlueprintCallable) // @ game+0x3173c00
	bool CanSelect(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.CanSelect // (Final|Native|Public|BlueprintCallable) // @ game+0x3173b60
	void CallTextUpdated(); // Function ShooterGame.UsableComponent.CallTextUpdated // (Final|Native|Public|BlueprintCallable) // @ game+0x3173b20
	void AuthSetUseTime(float NewUseTime); // Function ShooterGame.UsableComponent.AuthSetUseTime // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable) // @ game+0x2cee3b0
	void AuthOverrideUseTime(struct UInteractableUserComponent* User, float NewUseTime); // Function ShooterGame.UsableComponent.AuthOverrideUseTime // (Final|Native|Public|BlueprintCallable) // @ game+0x2e6e120
	float AuthGetCharacterUseTime(struct UInteractableUserComponent* User); // Function ShooterGame.UsableComponent.AuthGetCharacterUseTime // (Final|BlueprintAuthorityOnly|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3173a80
};

// Class ShooterGame.UserAction
// Size: 0x30 (Inherited: 0x30)
struct UUserAction : UInterface {

	void UnbindOnActionStateChanged(struct FDelegate& Delegate); // Function ShooterGame.UserAction.UnbindOnActionStateChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x317d6c0
	void UnbindOnActionDisplayInfoChanged(struct FDelegate& Delegate); // Function ShooterGame.UserAction.UnbindOnActionDisplayInfoChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f1a880
	enum class EUserActionTriggerResponse Trigger(struct FWildcard& Data); // Function ShooterGame.UserAction.Trigger // (Native|Public|HasOutParms|BlueprintCallable) // @ game+0x317d5e0
	enum class EUserActionState GetActionState(); // Function ShooterGame.UserAction.GetActionState // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317ca30
	struct FUserActionDisplayInfo GetActionDisplayInfo(); // Function ShooterGame.UserAction.GetActionDisplayInfo // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317c930
	void BindOnActionStateChanged(struct FDelegate& Delegate); // Function ShooterGame.UserAction.BindOnActionStateChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2ff3dd0
	void BindOnActionDisplayInfoChanged(struct FDelegate& Delegate); // Function ShooterGame.UserAction.BindOnActionDisplayInfoChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2d95860
};

// Class ShooterGame.UserActionTarget
// Size: 0x30 (Inherited: 0x30)
struct UUserActionTarget : UInterface {

	void SetUserAction(struct TScriptInterface<IUserAction>& NewValue); // Function ShooterGame.UserActionTarget.SetUserAction // (Native|Event|Public|HasOutParms|BlueprintCallable|BlueprintEvent) // @ game+0x317d540
};

// Class ShooterGame.UserInfoNotificationManager
// Size: 0x90 (Inherited: 0x80)
struct UUserInfoNotificationManager : UInitSystem {
	struct UNotificationManager* NotificationManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)

	void HandleVoiceChatMutedChanged(bool NewValue); // Function ShooterGame.UserInfoNotificationManager.HandleVoiceChatMutedChanged // (Final|Native|Private) // @ game+0x317d000
	void HandleTextChatMutedChanged(bool NewValue); // Function ShooterGame.UserInfoNotificationManager.HandleTextChatMutedChanged // (Final|Native|Private) // @ game+0x317cf70
};

// Class ShooterGame.UserObservableWidget
// Size: 0x30 (Inherited: 0x30)
struct UUserObservableWidget : UInterface {

	void SetObservedByUser(bool bNewValue); // Function ShooterGame.UserObservableWidget.SetObservedByUser // (Native|Event|Public|BlueprintCallable|BlueprintEvent) // @ game+0x2db8490
};

// Class ShooterGame.ValueDisagreementTimer
// Size: 0xb0 (Inherited: 0x30)
struct UValueDisagreementTimer : UObject {
	bool bIsEnabled; // 0x30(0x01)
	char pad_31[0x67]; // 0x31(0x67)
	float ValueUnchangedTimeDuration; // 0x98(0x04)
	bool bValueChangedSinceLastTick; // 0x9c(0x01)
	char pad_9D[0x3]; // 0x9d(0x03)
	float ConsiderStablePingTimeMultiplier; // 0xa0(0x04)
	float ConsiderStableBufferTimeDurationMilliseconds; // 0xa4(0x04)
	float ConsiderStableMaxWaitTimeDurationMilliseconds; // 0xa8(0x04)
	char pad_AC[0x4]; // 0xac(0x04)

	void OnOwnerClientRoleChanged(struct AActor* Owner, enum class ENetRole NewRole); // Function ShooterGame.ValueDisagreementTimer.OnOwnerClientRoleChanged // (Final|Native|Private) // @ game+0x317d3e0
};

// Class ShooterGame.VanguardManager
// Size: 0xf0 (Inherited: 0x80)
struct UVanguardManager : UInitSystem {
	struct URMSManager* RMSManager; // 0x80(0x08)
	struct URSOManager* RSOManager; // 0x88(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x90(0x08)
	struct UAresClientEvents* AresClientEvents; // 0x98(0x08)
	struct UConfigManager* ConfigManager; // 0xa0(0x08)
	struct FString CurrentMatchID; // 0xa8(0x10)
	struct FString VanguardServer; // 0xb8(0x10)
	char pad_C8[0x28]; // 0xc8(0x28)

	void HandleCurrentMatchUpdated(); // Function ShooterGame.VanguardManager.HandleCurrentMatchUpdated // (Final|Native|Public) // @ game+0x317cf50
};

// Class ShooterGame.VerticalBoxList
// Size: 0x2a8 (Inherited: 0x298)
struct UVerticalBoxList : UOrderedListSimpleWidgetContainerBase {
	char pad_298[0x10]; // 0x298(0x10)
};

// Class ShooterGame.VerticalBoxListSlot
// Size: 0x68 (Inherited: 0x40)
struct UVerticalBoxListSlot : UOrderedListSimpleWidgetContainerSlot {
	struct FMargin Padding; // 0x40(0x10)
	struct FSlateChildSize Size; // 0x50(0x08)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x58(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x59(0x01)
	char pad_5A[0xe]; // 0x5a(0x0e)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.VerticalBoxListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0fd0
	void SetSize(struct FSlateChildSize InSize); // Function ShooterGame.VerticalBoxListSlot.SetSize // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0f40
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.VerticalBoxListSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0eb0
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.VerticalBoxListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2ef0e30
};

// Class ShooterGame.ViewerFogOfWarComponent
// Size: 0x118 (Inherited: 0xe8)
struct UViewerFogOfWarComponent : UActorComponent {
	char pad_E8[0x18]; // 0xe8(0x18)
	struct UBaseTeamComponent* CachedTeamComponent; // 0x100(0x08)
	struct UFogOfWarComponent* CachedFirstPersonComponent; // 0x108(0x08)
	char pad_110[0x1]; // 0x110(0x01)
	bool bAllActorsAreRelevant; // 0x111(0x01)
	char pad_112[0x6]; // 0x112(0x06)

	void OnViewTargetChanged(struct AActor* NewViewTarget); // Function ShooterGame.ViewerFogOfWarComponent.OnViewTargetChanged // (Final|Native|Public) // @ game+0x2cb4be0
	void OnTeamChanged(); // Function ShooterGame.ViewerFogOfWarComponent.OnTeamChanged // (Final|Native|Public) // @ game+0x1e6e7b0
	void OnPlayerViewTargetModeChanged(struct FViewTargetInfo& Info); // Function ShooterGame.ViewerFogOfWarComponent.OnPlayerViewTargetModeChanged // (Final|Native|Public|HasOutParms) // @ game+0x2e5ecd0
};

// Class ShooterGame.ViewTargetComponent
// Size: 0x190 (Inherited: 0xe8)
struct UViewTargetComponent : UActorComponent {
	struct FMulticastInlineDelegate OnInfoReplicated; // 0xe8(0x10)
	struct FMulticastInlineDelegate OnModeChanged; // 0xf8(0x10)
	struct FMulticastInlineDelegate OnTargetReplicated; // 0x108(0x10)
	struct FMulticastInlineDelegate OnPreApplyPendingTarget; // 0x118(0x10)
	char pad_128[0x40]; // 0x128(0x40)
	bool bTickModeEnabled; // 0x168(0x01)
	bool bRequestedViewTargetUpdate; // 0x169(0x01)
	char pad_16A[0x1]; // 0x16a(0x01)
	enum class EAresPlayerViewTargetMode DefaultMode; // 0x16b(0x01)
	char pad_16C[0x4]; // 0x16c(0x04)
	struct FViewTargetInfo ViewTargetInfo; // 0x170(0x10)
	struct AActor* LocalPlayerViewTarget; // 0x180(0x08)
	struct AActor* LastTargetBeforeFreeCam; // 0x188(0x08)

	void OnRep_ViewTargetInfo(struct FViewTargetInfo PreviousViewTargetInfo); // Function ShooterGame.ViewTargetComponent.OnRep_ViewTargetInfo // (Final|Native|Private) // @ game+0x317d4b0
	bool IsViewingLocal(struct AShooterPlayerState* InPlayerState); // Function ShooterGame.ViewTargetComponent.IsViewingLocal // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317d340
	bool IsSpectating(struct AActor* InActor); // Function ShooterGame.ViewTargetComponent.IsSpectating // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317d2a0
	bool IsInSpectatorMode(); // Function ShooterGame.ViewTargetComponent.IsInSpectatorMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317d210
	bool IsInPlayerSpectatingMode(); // Function ShooterGame.ViewTargetComponent.IsInPlayerSpectatingMode // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317d1e0
	struct AShooterCharacter* GetTargetCharacter(); // Function ShooterGame.ViewTargetComponent.GetTargetCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cdf0
	struct AShooterCharacter* GetSpectatedSpawnedCharacter(); // Function ShooterGame.ViewTargetComponent.GetSpectatedSpawnedCharacter // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cdc0
	struct FViewTargetInfo GetInfo(); // Function ShooterGame.ViewTargetComponent.GetInfo // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cb00
};

// Class ShooterGame.VNGManager
// Size: 0xa0 (Inherited: 0x80)
struct UVNGManager : UInitSystem {
	struct UConfigManager* ConfigManager; // 0x80(0x08)
	struct UVNGService* VNGService; // 0x88(0x08)
	struct FString WebURL; // 0x90(0x10)

	struct UVNGManager* GetVNGManager(struct UObject* WorldContextObject); // Function ShooterGame.VNGManager.GetVNGManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x317ce70
	struct FString GetEditVNGDataURL(); // Function ShooterGame.VNGManager.GetEditVNGDataURL // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317ca70
};

// Class ShooterGame.VNGService
// Size: 0x38 (Inherited: 0x30)
struct UVNGService : UObject {
	struct URiotGamesApiClient* RiotGamesApiClient; // 0x30(0x08)
};

// Class ShooterGame.VoiceSessionParticipantModelInterfaceBase
// Size: 0x98 (Inherited: 0x30)
struct UVoiceSessionParticipantModelInterfaceBase : UObject {
	char pad_30[0x68]; // 0x30(0x68)
};

// Class ShooterGame.VoiceSessionParticipantModel
// Size: 0x120 (Inherited: 0x98)
struct UVoiceSessionParticipantModel : UVoiceSessionParticipantModelInterfaceBase {
	struct FMulticastInlineDelegate OnIsMutedChanged; // 0x98(0x10)
	struct FMulticastInlineDelegate OnIsRestrictedChanged; // 0xa8(0x10)
	struct FMulticastInlineDelegate OnIsSpeakingChanged; // 0xb8(0x10)
	struct FMulticastInlineDelegate OnVolumeChanged; // 0xc8(0x10)
	struct FMulticastInlineDelegate OnEnergyChanged; // 0xd8(0x10)
	char pad_E8[0x38]; // 0xe8(0x38)

	bool IsSpeaking(); // Function ShooterGame.VoiceSessionParticipantModel.IsSpeaking // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317d260
	bool IsRestricted(); // Function ShooterGame.VoiceSessionParticipantModel.IsRestricted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2e481d0
	bool IsMuted(); // Function ShooterGame.VoiceSessionParticipantModel.IsMuted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317d240
	int32_t GetVolume(); // Function ShooterGame.VoiceSessionParticipantModel.GetVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cf30
	struct FString GetSubject(); // Function ShooterGame.VoiceSessionParticipantModel.GetSubject // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb7f10
	enum class EVoiceSessionType GetSessionType(); // Function ShooterGame.VoiceSessionParticipantModel.GetSessionType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cda0
	struct FPlatformPlayerSubject GetPlayerSubject(); // Function ShooterGame.VoiceSessionParticipantModel.GetPlayerSubject // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x317cbf0
	int32_t GetEnergy(); // Function ShooterGame.VoiceSessionParticipantModel.GetEnergy // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f9fa00
	struct FString GetDisplayName(); // Function ShooterGame.VoiceSessionParticipantModel.GetDisplayName // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eb87f0
};

// Class ShooterGame.VoiceModel
// Size: 0xf8 (Inherited: 0x30)
struct UVoiceModel : UObject {
	struct FMulticastInlineDelegate OnSessionParticipantAdded; // 0x30(0x10)
	struct FMulticastInlineDelegate OnSessionParticipantRemoved; // 0x40(0x10)
	struct TMap<struct FString, struct UVoiceSessionParticipantModel*> TeamSessionParticipants; // 0x50(0x50)
	struct TMap<struct FString, struct UVoiceSessionParticipantModel*> PartySessionParticipants; // 0xa0(0x50)
	char pad_F0[0x8]; // 0xf0(0x08)

	struct TMap<struct FString, struct UVoiceSessionParticipantModel*> GetTeamSessionParticipants(); // Function ShooterGame.VoiceModel.GetTeamSessionParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x317ce20
	struct UVoiceSessionParticipantModel* GetSessionParticipantForType(enum class EVoiceSessionType SessionType, struct FString Subject); // Function ShooterGame.VoiceModel.GetSessionParticipantForType // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x317cc90
	struct TMap<struct FString, struct UVoiceSessionParticipantModel*> GetPartySessionParticipants(); // Function ShooterGame.VoiceModel.GetPartySessionParticipants // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x317cbc0
};

// Class ShooterGame.VoicePreferencesManager
// Size: 0x50 (Inherited: 0x30)
struct UVoicePreferencesManager : UObject {
	struct URNetVoiceManager* RNetVoiceManager; // 0x30(0x08)
	struct UVoiceModel* VoiceModel; // 0x38(0x08)
	struct UPartyModel* PartyModel; // 0x40(0x08)
	struct UVoicePreferencesModel* VoicePreferencesModel; // 0x48(0x08)

	void ReconcilePartyMemberPreferenceWithParticipant(struct UPartyMemberVoicePreference* MemberPreference, struct UVoiceSessionParticipantModel* ParticipantModel); // Function ShooterGame.VoicePreferencesManager.ReconcilePartyMemberPreferenceWithParticipant // (Final|Native|Private) // @ game+0x3183d30
	void HandleSessionParticipantAdded(struct UVoiceSessionParticipantModel* VoiceSessionParticipant); // Function ShooterGame.VoicePreferencesManager.HandleSessionParticipantAdded // (Final|Native|Private) // @ game+0x31830c0
	struct UPartyMemberVoicePreference* GetOrCreatePartyMemberVoicePreference(struct FString Subject); // Function ShooterGame.VoicePreferencesManager.GetOrCreatePartyMemberVoicePreference // (Final|Native|Private) // @ game+0x3182a20
};

// Class ShooterGame.PartyMemberVoicePreference
// Size: 0x68 (Inherited: 0x30)
struct UPartyMemberVoicePreference : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct FString Subject; // 0x50(0x10)
	char pad_60[0x8]; // 0x60(0x08)
};

// Class ShooterGame.VoicePreferencesModel
// Size: 0xa0 (Inherited: 0x30)
struct UVoicePreferencesModel : UObject {
	char pad_30[0x20]; // 0x30(0x20)
	struct TMap<struct FString, struct UPartyMemberVoicePreference*> PartyMemberPreferences; // 0x50(0x50)
};

// Class ShooterGame.VoiceRoomManager
// Size: 0xc0 (Inherited: 0x80)
struct UVoiceRoomManager : UInitSystem {
	struct URNetVoiceManager* RNetVoiceManager; // 0x80(0x08)
	struct UPartyManager* PartyManager; // 0x88(0x08)
	struct UCoreGameManager* CoreGameManager; // 0x90(0x08)
	struct UPregameManager* PregameManager; // 0x98(0x08)
	struct UGameFlowStateManager* GameFlowStateManager; // 0xa0(0x08)
	struct UAresSettingsManager* SettingsManager; // 0xa8(0x08)
	struct UContentIndexManager* ContentIndexManager; // 0xb0(0x08)
	struct UContentIndex* ContentIndex; // 0xb8(0x08)

	void UpdateVoiceRoom(); // Function ShooterGame.VoiceRoomManager.UpdateVoiceRoom // (Final|Native|Private) // @ game+0x31847b0
	void OnCustomPartyVoiceEnableChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.VoiceRoomManager.OnCustomPartyVoiceEnableChanged // (Final|Native|Private) // @ game+0x3183830
	void HandleGameFlowStateChanged(enum class EGameFlowStateType NewState); // Function ShooterGame.VoiceRoomManager.HandleGameFlowStateChanged // (Final|Native|Private) // @ game+0x3182e00
	struct UVoiceRoomManager* GetVoiceRoomManager(struct UObject* WorldContextObject); // Function ShooterGame.VoiceRoomManager.GetVoiceRoomManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3182bd0
};

// Class ShooterGame.VoiceSessionParticipantModelInterface
// Size: 0x30 (Inherited: 0x30)
struct UVoiceSessionParticipantModelInterface : UInterface {

	void UnbindOnVolumeChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnVolumeChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x31846f0
	void UnbindOnIsSpeakingChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsSpeakingChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3184630
	void UnbindOnIsRestrictedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsRestrictedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3184570
	void UnbindOnIsMutedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsMutedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x31844b0
	void UnbindOnIsInRoomChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnIsInRoomChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2ff3dd0
	void UnbindOnEnergyChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.UnbindOnEnergyChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x31843f0
	bool IsSpeaking(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsSpeaking // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31835d0
	bool IsRestricted(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsRestricted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3183590
	bool IsMuted(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsMuted // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3183550
	bool IsInRoom(); // Function ShooterGame.VoiceSessionParticipantModelInterface.IsInRoom // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2ef7d60
	int32_t GetVolume(); // Function ShooterGame.VoiceSessionParticipantModelInterface.GetVolume // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3182c60
	enum class EVoiceSessionType GetSessionType(); // Function ShooterGame.VoiceSessionParticipantModelInterface.GetSessionType // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3182b70
	struct FPlatformPlayerSubject GetPlayerSubject(); // Function ShooterGame.VoiceSessionParticipantModelInterface.GetPlayerSubject // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3182ae0
	int32_t GetEnergy(); // Function ShooterGame.VoiceSessionParticipantModelInterface.GetEnergy // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31829e0
	void BindOnVolumeChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnVolumeChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x31825d0
	void BindOnIsSpeakingChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsSpeakingChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3158dc0
	void BindOnIsRestrictedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsRestrictedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3182510
	void BindOnIsMutedChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsMutedChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3182450
	void BindOnIsInRoomChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnIsInRoomChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x2f76eb0
	void BindOnEnergyChanged(struct FDelegate& Event); // Function ShooterGame.VoiceSessionParticipantModelInterface.BindOnEnergyChanged // (Native|Public|HasOutParms|BlueprintCallable|Const) // @ game+0x3182390
};

// Class ShooterGame.VoiceSessionParticipantModelWrapperBase
// Size: 0xa8 (Inherited: 0x98)
struct UVoiceSessionParticipantModelWrapperBase : UVoiceSessionParticipantModelInterfaceBase {
	struct TScriptInterface<IVoiceSessionParticipantModelInterface> WrappedModel; // 0x98(0x10)

	void HandleVolumeChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleVolumeChanged // (Native|Protected) // @ game+0x3183490
	void HandleIsSpeakingChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsSpeakingChanged // (Native|Protected) // @ game+0x3182fa0
	void HandleIsRestrictedChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsRestrictedChanged // (Native|Protected) // @ game+0x3182f10
	void HandleIsMutedChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsMutedChanged // (Native|Protected) // @ game+0x3182e80
	void HandleIsInRoomChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleIsInRoomChanged // (Native|Protected) // @ game+0x2d965a0
	void HandleEnergyChanged(struct UObject* Source); // Function ShooterGame.VoiceSessionParticipantModelWrapperBase.HandleEnergyChanged // (Native|Protected) // @ game+0x3182d70
};

// Class ShooterGame.VoiceSessionParticipantModelSelector
// Size: 0xd8 (Inherited: 0xa8)
struct UVoiceSessionParticipantModelSelector : UVoiceSessionParticipantModelWrapperBase {
	struct UVoiceModel* VoiceModel; // 0xa8(0x08)
	char pad_B0[0x28]; // 0xb0(0x28)

	void SetVoiceModel(struct UVoiceModel* NewValue); // Function ShooterGame.VoiceSessionParticipantModelSelector.SetVoiceModel // (Final|Native|Public|BlueprintCallable) // @ game+0x31840a0
	void SetSubject(struct FPlatformPlayerSubject NewValue); // Function ShooterGame.VoiceSessionParticipantModelSelector.SetSubject // (Final|Native|Public|BlueprintCallable) // @ game+0x3183fe0
	void SetSessionType(enum class EVoiceSessionType NewValue); // Function ShooterGame.VoiceSessionParticipantModelSelector.SetSessionType // (Final|Native|Public|BlueprintCallable) // @ game+0x3183f60
	struct UVoiceSessionParticipantModelSelector* MakeStandard(enum class EVoiceSessionType VoiceSessionType, struct UObject* WorldContextObject, struct UObject* Outer); // Function ShooterGame.VoiceSessionParticipantModelSelector.MakeStandard // (Final|Native|Static|Private|BlueprintCallable) // @ game+0x3183710
	struct UVoiceSessionParticipantModelSelector* Make(enum class EVoiceSessionType VoiceSessionType, struct UVoiceModel* VoiceModel, struct UObject* Outer); // Function ShooterGame.VoiceSessionParticipantModelSelector.Make // (Final|Native|Static|Private|BlueprintCallable) // @ game+0x3183610
	void HandleVoiceSessionParticipantRemoved(struct UVoiceSessionParticipantModel* VoiceSessionParticipant); // Function ShooterGame.VoiceSessionParticipantModelSelector.HandleVoiceSessionParticipantRemoved // (Final|Native|Private) // @ game+0x3183400
	void HandleVoiceSessionParticipantAdded(struct UVoiceSessionParticipantModel* VoiceSessionParticipant); // Function ShooterGame.VoiceSessionParticipantModelSelector.HandleVoiceSessionParticipantAdded // (Final|Native|Private) // @ game+0x3183370
};

// Class ShooterGame.VoiceViewController
// Size: 0xd0 (Inherited: 0x80)
struct UVoiceViewController : UInitSystem {
	struct URNetVoiceManager* RNetVoiceManager; // 0x80(0x08)
	struct UDisplayNameManager* DisplayNameManager; // 0x88(0x08)
	struct UVoicePreferencesManager* VoicePreferencesManager; // 0x90(0x08)
	struct UVoiceModel* VoiceModel; // 0x98(0x08)
	struct URSOManager* RSOManager; // 0xa0(0x08)
	char pad_A8[0x28]; // 0xa8(0x28)

	void ToggleMuteForSubject(struct FPlatformPlayerSubject& Subject); // Function ShooterGame.VoiceViewController.ToggleMuteForSubject // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3184340
	void ToggleMuteForParticipant(struct UVoiceSessionParticipantModel* Participant); // Function ShooterGame.VoiceViewController.ToggleMuteForParticipant // (Final|Native|Public|BlueprintCallable) // @ game+0x31842b0
	void SetVolumeForParticipant(struct UVoiceSessionParticipantModel* Participant, int32_t Volume); // Function ShooterGame.VoiceViewController.SetVolumeForParticipant // (Final|Native|Public|BlueprintCallable) // @ game+0x3184130
	void PreventPTTActivationsByTagAndSessionType(struct FString Tag, enum class EVoiceSessionType SessionType); // Function ShooterGame.VoiceViewController.PreventPTTActivationsByTagAndSessionType // (Final|Native|Public|BlueprintCallable) // @ game+0x3183c30
	void PreventPTTActivationsByTag(struct FString Tag); // Function ShooterGame.VoiceViewController.PreventPTTActivationsByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x3183b80
	void OnPartyPTTEnabledChanged(enum class EAresBoolSettingName SettingName, bool OldValue, bool NewValue); // Function ShooterGame.VoiceViewController.OnPartyPTTEnabledChanged // (Final|Native|Private) // @ game+0x3183a20
	void HandleVoiceParticipantUpdated(enum class EVoiceSessionType SessionType, struct FVoiceSessionParticipant& Participant); // Function ShooterGame.VoiceViewController.HandleVoiceParticipantUpdated // (Final|Native|Private|HasOutParms) // @ game+0x3183260
	void HandleVoiceParticipantRemoved(enum class EVoiceSessionType SessionType, struct FVoiceSessionParticipant& Participant); // Function ShooterGame.VoiceViewController.HandleVoiceParticipantRemoved // (Final|Native|Private|HasOutParms) // @ game+0x3183150
	struct UVoiceModel* GetVoiceModel(); // Function ShooterGame.VoiceViewController.GetVoiceModel // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3182bb0
	void CancelPreventPTTActivationsByTagAndSessionType(struct FString Tag, enum class EVoiceSessionType SessionType); // Function ShooterGame.VoiceViewController.CancelPreventPTTActivationsByTagAndSessionType // (Final|Native|Public|BlueprintCallable) // @ game+0x3182740
	void CancelPreventPTTActivationsByTag(struct FString Tag); // Function ShooterGame.VoiceViewController.CancelPreventPTTActivationsByTag // (Final|Native|Public|BlueprintCallable) // @ game+0x3182690
};

// Class ShooterGame.VoteControllerComponent
// Size: 0x1c0 (Inherited: 0xe8)
struct UVoteControllerComponent : UActorComponent {
	char pad_E8[0x8]; // 0xe8(0x08)
	struct FMulticastInlineDelegate OnDebugQueueVoteCalled; // 0xf0(0x10)
	struct FMulticastInlineDelegate OnDebugParticipateVoteCalled; // 0x100(0x10)
	struct FMulticastInlineDelegate OnActiveVoteUpdated; // 0x110(0x10)
	struct FMulticastInlineDelegate OnLocallySelectedOptionUpdated; // 0x120(0x10)
	float VoteQueueRateLimit; // 0x130(0x04)
	char pad_134[0x4]; // 0x134(0x04)
	struct UGameplayVoteOptionComponent* LocallySelectedOption; // 0x138(0x08)
	char pad_140[0x8]; // 0x140(0x08)
	struct UVoteManagerComponent* AuthVoteManagerComponent; // 0x148(0x08)
	struct AGameplayVote* ActiveVote; // 0x150(0x08)
	enum class EVoteState CachedActiveVoteState; // 0x158(0x01)
	char pad_159[0x7]; // 0x159(0x07)
	struct UNotificationManager* NotificationManager; // 0x160(0x08)
	char pad_168[0x58]; // 0x168(0x58)

	void ShowNotification(struct FText& Text); // Function ShooterGame.VoteControllerComponent.ShowNotification // (Final|Native|Private|HasOutParms|Const) // @ game+0x3184200
	void SetLocallySelectedOption(struct UGameplayVoteOptionComponent* Option); // Function ShooterGame.VoteControllerComponent.SetLocallySelectedOption // (Final|Native|Public|BlueprintCallable) // @ game+0x3183ed0
	void ServerMakeQueueVoteRequest(struct TSoftClassPtr<UObject> VoteType); // Function ShooterGame.VoteControllerComponent.ServerMakeQueueVoteRequest // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x3183e00
	void ServerMakeParticipateVoteRequest(struct UGameplayVoteOptionComponent* Option); // Function ShooterGame.VoteControllerComponent.ServerMakeParticipateVoteRequest // (Net|NetReliableNative|Event|Public|NetServer|Const) // @ game+0x2fdaed0
	void OnRep_LocallySelectedOption(); // Function ShooterGame.VoteControllerComponent.OnRep_LocallySelectedOption // (Final|Native|Private) // @ game+0x3183b60
	void OnRep_ActiveVote(); // Function ShooterGame.VoteControllerComponent.OnRep_ActiveVote // (Final|Native|Private) // @ game+0x3183b40
	void OnEnableVotingChanged(enum class EGameFeatureToggleName Toggle, bool NewValue); // Function ShooterGame.VoteControllerComponent.OnEnableVotingChanged // (Final|Native|Private) // @ game+0x3183950
	void OnAllowedVoteTypesReplicated(); // Function ShooterGame.VoteControllerComponent.OnAllowedVoteTypesReplicated // (Final|Native|Private) // @ game+0x3183810
	bool HasValidLocallySelectedOption(); // Function ShooterGame.VoteControllerComponent.HasValidLocallySelectedOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3183520
	void HandlePlayerVoteInput(int32_t OptionIndex); // Function ShooterGame.VoteControllerComponent.HandlePlayerVoteInput // (Final|Native|Private) // @ game+0x3183030
	void HandleActiveVoteStatusChanged(struct AGameplayVote* Vote, enum class EVoteState NewState); // Function ShooterGame.VoteControllerComponent.HandleActiveVoteStatusChanged // (Final|Native|Private) // @ game+0x3182ca0
	struct UGameplayVoteOptionComponent* GetLocallySelectedOption(); // Function ShooterGame.VoteControllerComponent.GetLocallySelectedOption // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2f5c7d0
	struct AGameplayVote* GetActiveVote(); // Function ShooterGame.VoteControllerComponent.GetActiveVote // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x315f5d0
	void DebugAttemptQueueExampleVoteNonStaticFunc(); // Function ShooterGame.VoteControllerComponent.DebugAttemptQueueExampleVoteNonStaticFunc // (Final|Native|Public) // @ game+0x31829c0
	void DebugAttemptQueueExampleVoteFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.VoteControllerComponent.DebugAttemptQueueExampleVoteFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void DebugAttemptDoVoteNonStaticFunc(int32_t Index, struct UWorld* World); // Function ShooterGame.VoteControllerComponent.DebugAttemptDoVoteNonStaticFunc // (Final|Native|Public) // @ game+0x31828f0
	void DebugAttemptDoVoteFunc(struct TArray<struct FString>& Args, struct UWorld* World); // Function ShooterGame.VoteControllerComponent.DebugAttemptDoVoteFunc // (Final|Native|Static|Public|HasOutParms) // @ game+0x2d54a70
	void ClientShowNotification(struct FText Text); // Function ShooterGame.VoteControllerComponent.ClientShowNotification // (Net|NetReliableNative|Event|Public|NetClient|BlueprintCallable|Const) // @ game+0x3182840
	void AuthSetActiveVote(struct AGameplayVote* NewVote); // Function ShooterGame.VoteControllerComponent.AuthSetActiveVote // (Final|Native|Public) // @ game+0x2cb4be0
	void AttemptQueueVote(struct TSoftClassPtr<UObject>& VoteType, bool bShouldRateLimit); // Function ShooterGame.VoteControllerComponent.AttemptQueueVote // (Final|Native|Public|HasOutParms|BlueprintCallable) // @ game+0x3182270
	void AttemptParticipateVote(struct UGameplayVoteOptionComponent* Option); // Function ShooterGame.VoteControllerComponent.AttemptParticipateVote // (Final|Native|Public|BlueprintCallable) // @ game+0x31821e0
};

// Class ShooterGame.VoteManagerComponent
// Size: 0x138 (Inherited: 0xe8)
struct UVoteManagerComponent : UActorComponent {
	struct TArray<struct AGameplayVote*> AllowedVoteTypes; // 0xe8(0x10)
	struct UServerVoteTelemetryComponent* ServerVoteTelemetryComponent; // 0xf8(0x08)
	char pad_100[0x8]; // 0x100(0x08)
	struct FVoteQueue VoteQueue; // 0x108(0x18)
	struct TArray<struct FVoteRecord> PreviousVotes; // 0x120(0x10)
	char pad_130[0x8]; // 0x130(0x08)

	struct AGameplayVote* SpawnVote(struct AGameplayVote* VoteType); // Function ShooterGame.VoteManagerComponent.SpawnVote // (Final|Native|Public|BlueprintCallable) // @ game+0x318bb40
	void HandleGamePhase(enum class EAresGamePhase NewPhase); // Function ShooterGame.VoteManagerComponent.HandleGamePhase // (Final|Native|Private) // @ game+0x318b730
	int32_t GetStartRoundForVote(struct AGameplayVote* Vote); // Function ShooterGame.VoteManagerComponent.GetStartRoundForVote // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x318b2b0
	struct TArray<struct FVoteRecord> GetPreviousVotes(); // Function ShooterGame.VoteManagerComponent.GetPreviousVotes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x318b160
	struct TArray<struct AGameplayVote*> GetAllowedVoteTypes(); // Function ShooterGame.VoteManagerComponent.GetAllowedVoteTypes // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x318ae10
	void AuthCancelActiveVotesOfType(struct AGameplayVote* VoteType); // Function ShooterGame.VoteManagerComponent.AuthCancelActiveVotesOfType // (Final|Native|Public|BlueprintCallable) // @ game+0x318a6b0
	void AttemptStartNewVote(); // Function ShooterGame.VoteManagerComponent.AttemptStartNewVote // (Final|Native|Public|BlueprintCallable) // @ game+0x318a690
	enum class EAttemptQueueVoteResult AttemptQueueVote(struct AShooterPlayerState* Requester, struct AGameplayVote* Vote); // Function ShooterGame.VoteManagerComponent.AttemptQueueVote // (Final|Native|Public|BlueprintCallable) // @ game+0x318a5c0
	bool AttemptCastVote(struct AShooterPlayerState* Player, struct AShooterGameState* State, struct UGameplayVoteOptionComponent* Vote); // Function ShooterGame.VoteManagerComponent.AttemptCastVote // (Final|Native|Public|BlueprintCallable) // @ game+0x318a4b0
};

// Class ShooterGame.WaitForEquipStateComponent
// Size: 0x2d0 (Inherited: 0x2c8)
struct UWaitForEquipStateComponent : UScriptStateComponent {
	bool bTriggersAbilityExecution; // 0x2c8(0x01)
	char pad_2C9[0x7]; // 0x2c9(0x07)
};

// Class ShooterGame.WaitForProgressModelCompleted_AsyncAction
// Size: 0x58 (Inherited: 0x38)
struct UWaitForProgressModelCompleted_AsyncAction : UBlueprintAsyncActionBase {
	struct FMulticastInlineDelegate Completed; // 0x38(0x10)
	struct TScriptInterface<IProgressModel> ProgressModel; // 0x48(0x10)

	struct UWaitForProgressModelCompleted_AsyncAction* WaitForSingleProgressCompleted(struct TScriptInterface<IProgressModel>& Target); // Function ShooterGame.WaitForProgressModelCompleted_AsyncAction.WaitForSingleProgressCompleted // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x318bd20
	struct UWaitForProgressModelCompleted_AsyncAction* WaitForMultipleProgressCompleted(struct TArray<struct TScriptInterface<IProgressModel>>& Targets); // Function ShooterGame.WaitForProgressModelCompleted_AsyncAction.WaitForMultipleProgressCompleted // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x318bc70
	void HandleProgressStateChanged(struct UObject* Source); // Function ShooterGame.WaitForProgressModelCompleted_AsyncAction.HandleProgressStateChanged // (Final|Native|Private) // @ game+0x318b7b0
	void Cancel(); // Function ShooterGame.WaitForProgressModelCompleted_AsyncAction.Cancel // (Final|Native|Public|BlueprintCallable) // @ game+0x318a770
};

// Class ShooterGame.WaitForResourcesStateComponent
// Size: 0x2c8 (Inherited: 0x2c8)
struct UWaitForResourcesStateComponent : UScriptStateComponent {
};

// Class ShooterGame.WaitForUsingUsableStateComponent
// Size: 0x2d0 (Inherited: 0x2c8)
struct UWaitForUsingUsableStateComponent : UScriptStateComponent {
	struct UUsableComponent* EquipRequestingComponent; // 0x2c8(0x08)
};

// Class ShooterGame.WalkAnimSlot1P
// Size: 0x38 (Inherited: 0x38)
struct UWalkAnimSlot1P : UAnimSlot1P {
};

// Class ShooterGame.WalkAnimSlotGun1P
// Size: 0x38 (Inherited: 0x38)
struct UWalkAnimSlotGun1P : UAnimSlotGun1P {
};

// Class ShooterGame.WallMesh
// Size: 0x6b0 (Inherited: 0x5f0)
struct UWallMesh : UProceduralMeshComponent {
	float WallHeight; // 0x5f0(0x04)
	float MaxWallHeightOffset; // 0x5f4(0x04)
	float MaxAnchorSeparation; // 0x5f8(0x04)
	float WallEndPadding; // 0x5fc(0x04)
	float WallBottomOffset; // 0x600(0x04)
	float ClientTargetEdgeLength; // 0x604(0x04)
	int32_t ClientNumSubdivisions; // 0x608(0x04)
	bool bClientGenerateCollision; // 0x60c(0x01)
	bool bServerGenerateCollision; // 0x60d(0x01)
	char pad_60E[0x2]; // 0x60e(0x02)
	float MaskedSideOffset; // 0x610(0x04)
	bool bUsePreciseMaskedSideOffset; // 0x614(0x01)
	char pad_615[0x3]; // 0x615(0x03)
	float MaskedTopOffset; // 0x618(0x04)
	char pad_61C[0x84]; // 0x61c(0x84)
	struct FMulticastInlineDelegate OnWallMeshGenerated; // 0x6a0(0x10)

	struct FVector WallSectionStartLocation(int32_t Section); // Function ShooterGame.WallMesh.WallSectionStartLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x318c250
	struct FVector WallSectionEndLocation(int32_t Section); // Function ShooterGame.WallMesh.WallSectionEndLocation // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x318c1a0
	bool MeshBuilt(); // Function ShooterGame.WallMesh.MeshBuilt // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x318b860
	struct FVector2D DistanceToWall(struct FVector& Position, float OpenStartTime, float OpenDistancePerSecond, float PointDuration, struct FVector2D MaxThresholds); // Function ShooterGame.WallMesh.DistanceToWall // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x318ab10
	void BeginBuildingMesh(); // Function ShooterGame.WallMesh.BeginBuildingMesh // (Final|Native|Public|BlueprintCallable) // @ game+0x318a740
	void AddWallAnchor(struct FVector& AnchorLocation, struct FVector& AnchorTangent); // Function ShooterGame.WallMesh.AddWallAnchor // (Final|Native|Public|HasOutParms|HasDefaults|BlueprintCallable) // @ game+0x318a3d0
};

// Class ShooterGame.WallPenetrationComponent
// Size: 0x178 (Inherited: 0xf8)
struct UWallPenetrationComponent : UProjectileCollisionResponseComponent {
	float StoppingDistanceMultiplier; // 0xf8(0x04)
	float PenetrationPowerMultiplier; // 0xfc(0x04)
	bool bApplyPostPenetrationAirDropoff; // 0x100(0x01)
	char pad_101[0x3]; // 0x101(0x03)
	float PostPenetrationAirDropoffDistance; // 0x104(0x04)
	struct FImpactEffects ImpactEffects[0x2]; // 0x108(0x50)
	char pad_158[0x2]; // 0x158(0x02)
	bool bImpactEffectsEnabled; // 0x15a(0x01)
	char pad_15B[0x1d]; // 0x15b(0x1d)

	void SetPostPenetrationAirDropoff(bool bEnablePostPenetrationAirDropoff); // Function ShooterGame.WallPenetrationComponent.SetPostPenetrationAirDropoff // (Final|Native|Public|BlueprintCallable) // @ game+0x318b8d0
	void OnStop(); // Function ShooterGame.WallPenetrationComponent.OnStop // (Final|Native|Public) // @ game+0x318b8b0
	void OnMaximumRangeReached(); // Function ShooterGame.WallPenetrationComponent.OnMaximumRangeReached // (Final|Native|Public) // @ game+0x318b890
	bool GetPostPenetrationAirDropoff(); // Function ShooterGame.WallPenetrationComponent.GetPostPenetrationAirDropoff // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x318b130
};

// Class ShooterGame.WallPenetrationDamageQuery
// Size: 0x30 (Inherited: 0x30)
struct UWallPenetrationDamageQuery : UInterface {

	bool IsWallPenetration(); // Function ShooterGame.WallPenetrationDamageQuery.IsWallPenetration // (Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x2eeeb50
};

// Class ShooterGame.WallPenetrationTargetingStateComponent
// Size: 0x560 (Inherited: 0x458)
struct UWallPenetrationTargetingStateComponent : ULineTargetingStateComponent {
	float WallAngle; // 0x458(0x04)
	bool bUseAimVector; // 0x45c(0x01)
	char pad_45D[0x3]; // 0x45d(0x03)
	float MaximumPenetrationDepth; // 0x460(0x04)
	float MaximumAirGap; // 0x464(0x04)
	float EncroachRadius; // 0x468(0x04)
	float EncroachOffset; // 0x46c(0x04)
	enum class ECollisionChannel EncroachChannel; // 0x470(0x01)
	char pad_471[0x7]; // 0x471(0x07)
	struct FClassInclusionExclusionFilter EncroachFilter; // 0x478(0x50)
	char pad_4C8[0x98]; // 0x4c8(0x98)

	void GetWallPointsValid(bool& Entrance, bool& Exit); // Function ShooterGame.WallPenetrationTargetingStateComponent.GetWallPointsValid // (Final|Native|Public|HasOutParms|BlueprintCallable|BlueprintPure|Const) // @ game+0x318b3e0
	struct FHitResult GetWallExitResult(); // Function ShooterGame.WallPenetrationTargetingStateComponent.GetWallExitResult // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x318b350
};

// Class ShooterGame.WhileDisarmedStateComponent
// Size: 0x2c8 (Inherited: 0x2c8)
struct UWhileDisarmedStateComponent : UScriptStateComponent {
};

// Class ShooterGame.WhileUsingUsableStateComponent
// Size: 0x340 (Inherited: 0x2c8)
struct UWhileUsingUsableStateComponent : UScriptStateComponent {
	struct UStateComponent* CancelState; // 0x2c8(0x08)
	struct FScriptStateEffectInfo CancelEffectInfo; // 0x2d0(0x38)
	struct FScriptStateEffectInfo CompleteEffectInfo; // 0x308(0x38)

	void SetCancelState(struct UStateComponent* State); // Function ShooterGame.WhileUsingUsableStateComponent.SetCancelState // (Final|Native|Public|BlueprintCallable) // @ game+0x3019440
};

// Class ShooterGame.WhisperChatManager
// Size: 0x1a8 (Inherited: 0x80)
struct UWhisperChatManager : UInitSystem {
	struct FMulticastInlineDelegate OnWhisperEnabledUpdated; // 0x80(0x10)
	char pad_90[0x8]; // 0x90(0x08)
	struct UConfigManager* ConfigManager; // 0x98(0x08)
	struct UTextChatManagerV2* TextChatManager; // 0xa0(0x08)
	struct UFriendsModel* FriendsModel; // 0xa8(0x08)
	struct UPlatformPlayerManager* PlatformPlayerManager; // 0xb0(0x08)
	struct TMap<struct FString, struct UTextChatRoomV2*> Rooms; // 0xb8(0x50)
	struct TMap<struct FString, struct FDateTime> RecentSentWhispersTimes; // 0x108(0x50)
	struct TMap<struct FString, struct FDateTime> RecentReceivedWhispersTimes; // 0x158(0x50)

	void UpdateDependencyBindings(bool Enabled); // Function ShooterGame.WhisperChatManager.UpdateDependencyBindings // (Final|Native|Private) // @ game+0x318bbe0
	void HandleRoomListChanged(); // Function ShooterGame.WhisperChatManager.HandleRoomListChanged // (Final|Native|Private) // @ game+0x318b840
	struct UWhisperChatManager* GetWhisperChatManager(struct UObject* WorldContextObject); // Function ShooterGame.WhisperChatManager.GetWhisperChatManager // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x318b4c0
	struct UTextChatRoomV2* GetRoomByDisplayName(struct FString DisplayName); // Function ShooterGame.WhisperChatManager.GetRoomByDisplayName // (Final|Native|Public|BlueprintCallable) // @ game+0x318b1f0
	struct TArray<struct FString> GetActiveWhisperTargets(); // Function ShooterGame.WhisperChatManager.GetActiveWhisperTargets // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x318ad80
	struct TArray<struct FString> GetActiveWhisperSenders(); // Function ShooterGame.WhisperChatManager.GetActiveWhisperSenders // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x318acf0
};

// Class ShooterGame.WidgetAnimationConductorNode
// Size: 0xf8 (Inherited: 0xa8)
struct UWidgetAnimationConductorNode : UAnimationConductorNodeBase {
	struct UUserWidget* Widget; // 0xa8(0x08)
	struct UWidgetAnimation* Animation; // 0xb0(0x08)
	struct FWidgetAnimationSettings Settings; // 0xb8(0x18)
	struct FName CueScopeName; // 0xd0(0x0c)
	bool bAllowUnscopedCues; // 0xdc(0x01)
	char pad_DD[0x3]; // 0xdd(0x03)
	struct UUMGSequencePlayer* SequencePlayer; // 0xe0(0x08)
	char pad_E8[0x8]; // 0xe8(0x08)
	struct UObject* CueSource; // 0xf0(0x08)

	void HandleCueSourceScopedCue(struct UObject* Source, struct FScopedAnimationCueSource_ScopedCueEventData EventData); // Function ShooterGame.WidgetAnimationConductorNode.HandleCueSourceScopedCue // (Final|Native|Private) // @ game+0x318b630
	void HandleCueSourceCue(struct UObject* Source, struct FAnimationCueSource_CueEventData EventData); // Function ShooterGame.WidgetAnimationConductorNode.HandleCueSourceCue // (Final|Native|Private) // @ game+0x318b550
	struct UWidgetAnimationConductorNode* Create(struct UObject* Outer, struct UWidgetAnimation* Animation, struct FWidgetAnimationSettings& Settings, struct FName CueScopeName, bool bAllowUnscopedCues, struct UUserWidget* Widget); // Function ShooterGame.WidgetAnimationConductorNode.Create // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x318a8f0
};

// Class ShooterGame.UIAutomationHelpers
// Size: 0x30 (Inherited: 0x30)
struct UUIAutomationHelpers : UObject {

	void WaitForWidgetByType(struct UObject* WorldContextObject, struct UUserWidget* Type, float MaxWaitSeconds, struct UUserWidget*& FoundWidget, struct FLatentActionInfo LatentInfo); // Function ShooterGame.UIAutomationHelpers.WaitForWidgetByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x318bfe0
	void WaitForWidgetByTag(struct UObject* WorldContextObject, struct FName& Tag, struct UUserWidget* Type, float MaxWaitSeconds, struct UUserWidget*& FoundWidget, struct FLatentActionInfo LatentInfo); // Function ShooterGame.UIAutomationHelpers.WaitForWidgetByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x318bdc0
	void GetFirstWidgetByType(struct UObject* WorldContextObject, struct UUserWidget*& FoundWidget, struct UUserWidget* WidgetType); // Function ShooterGame.UIAutomationHelpers.GetFirstWidgetByType // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x318b010
	void GetFirstWidgetByTag(struct UObject* WorldContextObject, struct UUserWidget*& FoundWidget, struct UUserWidget* WidgetType, struct FName& Tag); // Function ShooterGame.UIAutomationHelpers.GetFirstWidgetByTag // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x318aea0
};

// Class ShooterGame.WidgetAutomationExtensions
// Size: 0x30 (Inherited: 0x30)
struct UWidgetAutomationExtensions : UObject {

	void SetText(struct UWidget* Widget, struct FText& Text, float MaxWaitSeconds, float DelayAfterAction, struct FLatentActionInfo LatentInfo); // Function ShooterGame.WidgetAutomationExtensions.SetText // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x318b960
	void Click(struct UWidget* Widget, float MaxWaitSeconds, float DelayAfterAction, struct FLatentActionInfo LatentInfo); // Function ShooterGame.WidgetAutomationExtensions.Click // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x318a790
};

// Class ShooterGame.WidgetLayoutManager
// Size: 0x60 (Inherited: 0x30)
struct UWidgetLayoutManager : UObject {
	struct FMulticastInlineDelegate OnWidgetSelectionChanged; // 0x30(0x10)
	struct FMulticastInlineDelegate OnPresetIndexChanged; // 0x40(0x10)
	char pad_50[0x8]; // 0x50(0x08)
	struct UCustomWidgetLayoutData* CustomLayoutData; // 0x58(0x08)

	void SetSelectedWidget(struct UAresTouchWidget* InSelectedWidget); // Function ShooterGame.WidgetLayoutManager.SetSelectedWidget // (Final|Native|Public|BlueprintCallable) // @ game+0x3195fd0
	void SetCurrentPlayerPreset(enum class EWidgetLayoutPresetType InPreset); // Function ShooterGame.WidgetLayoutManager.SetCurrentPlayerPreset // (Final|Native|Public|BlueprintCallable) // @ game+0x3195b00
	void HandlePresetIndexSettingChanged(enum class EAresIntSettingName SettingName, int32_t OldValue, int32_t NewValue); // Function ShooterGame.WidgetLayoutManager.HandlePresetIndexSettingChanged // (Final|Native|Protected) // @ game+0x3195510
	struct UAresTouchWidget* GetSelectedWidget(); // Function ShooterGame.WidgetLayoutManager.GetSelectedWidget // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x3195470
	struct UCustomWidgetLayoutData* GetCustomLayoutData(); // Function ShooterGame.WidgetLayoutManager.GetCustomLayoutData // (Final|Native|Public|BlueprintCallable|BlueprintPure) // @ game+0x2e48a90
	enum class EWidgetLayoutPresetType GetCurrentPreset(); // Function ShooterGame.WidgetLayoutManager.GetCurrentPreset // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31953d0
	struct UWidgetLayoutManager* Get(struct UObject* WorldContextObject); // Function ShooterGame.WidgetLayoutManager.Get // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3195340
};

// Class ShooterGame.WidgetPoolComponent
// Size: 0x138 (Inherited: 0xe8)
struct UWidgetPoolComponent : UActorComponent {
	struct TMap<struct UUserWidget*, struct FWidgetPool> WidgetPoolsByClass; // 0xe8(0x50)

	struct UUserWidget* TakePooledWidget(struct UObject* WorldContext, struct UUserWidget* WidgetClass); // Function ShooterGame.WidgetPoolComponent.TakePooledWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x31963f0
	struct UUserWidget* TakeOrCreatePooledWidget(struct UObject* WorldContext, struct UUserWidget* WidgetClass); // Function ShooterGame.WidgetPoolComponent.TakeOrCreatePooledWidget // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3196320
	void ReturnWidgetToPool(struct UObject* WorldContext, struct UUserWidget* Widget); // Function ShooterGame.WidgetPoolComponent.ReturnWidgetToPool // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3195a40
};

// Class ShooterGame.WildcardBlueprintLibrary
// Size: 0x30 (Inherited: 0x30)
struct UWildcardBlueprintLibrary : UBlueprintFunctionLibrary {

	void TryBreakWildcardPure(struct FWildcard& Wildcard, int32_t& Value, bool& Succeeded); // Function ShooterGame.WildcardBlueprintLibrary.TryBreakWildcardPure // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2c9c350
	void TryBreakWildcard(struct FWildcard& Wildcard, int32_t& Value, enum class EWildcardBlueprintLibrary_CastResult& Result); // Function ShooterGame.WildcardBlueprintLibrary.TryBreakWildcard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable) // @ game+0x2c9c1e0
	bool NotEqual_Wildcard(struct FWildcard& ValueA, struct FWildcard& ValueB); // Function ShooterGame.WildcardBlueprintLibrary.NotEqual_Wildcard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x3195870
	void MakeWildcard(int32_t& Value, struct FWildcard& Wildcard); // Function ShooterGame.WildcardBlueprintLibrary.MakeWildcard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x2c9c0e0
	bool Equal_Wildcard(struct FWildcard& ValueA, struct FWildcard& ValueB); // Function ShooterGame.WildcardBlueprintLibrary.Equal_Wildcard // (Final|Native|Static|Public|HasOutParms|BlueprintCallable|BlueprintPure) // @ game+0x31951f0
	struct FWildcard EmptyWildcard(); // Function ShooterGame.WildcardBlueprintLibrary.EmptyWildcard // (Final|Native|Static|Public|BlueprintCallable|BlueprintPure) // @ game+0x3195100
};

// Class ShooterGame.WrapBoxList
// Size: 0x2b8 (Inherited: 0x298)
struct UWrapBoxList : UOrderedListSimpleWidgetContainerBase {
	struct FVector2D InnerSlotPadding; // 0x298(0x08)
	float WrapWidth; // 0x2a0(0x04)
	bool bExplicitWrapWidth; // 0x2a4(0x01)
	char pad_2A5[0x13]; // 0x2a5(0x13)

	void SetInnerSlotPadding(struct FVector2D InPadding); // Function ShooterGame.WrapBoxList.SetInnerSlotPadding // (Final|Native|Public|HasDefaults|BlueprintCallable) // @ game+0x3195e20
};

// Class ShooterGame.WrapBoxListSlot
// Size: 0x68 (Inherited: 0x40)
struct UWrapBoxListSlot : UOrderedListSimpleWidgetContainerSlot {
	struct FMargin Padding; // 0x40(0x10)
	bool bFillEmptySpace; // 0x50(0x01)
	char pad_51[0x3]; // 0x51(0x03)
	float FillSpanWhenLessThan; // 0x54(0x04)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x58(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x59(0x01)
	char pad_5A[0xe]; // 0x5a(0x0e)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.WrapBoxListSlot.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3196100
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.WrapBoxListSlot.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x3195f40
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.WrapBoxListSlot.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x3195da0
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan); // Function ShooterGame.WrapBoxListSlot.SetFillSpanWhenLessThan // (Final|Native|Public|BlueprintCallable) // @ game+0x3195ca0
	void SetFillEmptySpace(bool InbFillEmptySpace); // Function ShooterGame.WrapBoxListSlot.SetFillEmptySpace // (Final|Native|Public|BlueprintCallable) // @ game+0x3195b80
};

// Class ShooterGame.WrapBoxSlotConfigurer
// Size: 0x70 (Inherited: 0x50)
struct UWrapBoxSlotConfigurer : UListEntrySlotConfigurerBase {
	struct FMargin Padding; // 0x50(0x10)
	bool bFillEmptySpace; // 0x60(0x01)
	char pad_61[0x3]; // 0x61(0x03)
	float FillSpanWhenLessThan; // 0x64(0x04)
	enum class EHorizontalAlignment HorizontalAlignment; // 0x68(0x01)
	enum class EVerticalAlignment VerticalAlignment; // 0x69(0x01)
	char pad_6A[0x6]; // 0x6a(0x06)

	void SetVerticalAlignment(enum class EVerticalAlignment InVerticalAlignment); // Function ShooterGame.WrapBoxSlotConfigurer.SetVerticalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2debba0
	void SetPadding(struct FMargin InPadding); // Function ShooterGame.WrapBoxSlotConfigurer.SetPadding // (Final|Native|Public|BlueprintCallable) // @ game+0x2deb960
	void SetHorizontalAlignment(enum class EHorizontalAlignment InHorizontalAlignment); // Function ShooterGame.WrapBoxSlotConfigurer.SetHorizontalAlignment // (Final|Native|Public|BlueprintCallable) // @ game+0x2deb8c0
	void SetFillSpanWhenLessThan(float InFillSpanWhenLessThan); // Function ShooterGame.WrapBoxSlotConfigurer.SetFillSpanWhenLessThan // (Final|Native|Public|BlueprintCallable) // @ game+0x3195d20
	void SetFillEmptySpace(bool bInFillEmptySpace); // Function ShooterGame.WrapBoxSlotConfigurer.SetFillEmptySpace // (Final|Native|Public|BlueprintCallable) // @ game+0x3195c10
};

// Class ShooterGame.WrapperUserAction
// Size: 0x70 (Inherited: 0x58)
struct UWrapperUserAction : UUserActionBase {
	char pad_58[0x8]; // 0x58(0x08)
	struct TScriptInterface<IUserAction> UserAction; // 0x60(0x10)

	void HandleActionStateChanged(struct UObject* Source); // Function ShooterGame.WrapperUserAction.HandleActionStateChanged // (Native|Protected) // @ game+0x3182f10
	void HandleActionDisplayInfoChanged(struct UObject* Source); // Function ShooterGame.WrapperUserAction.HandleActionDisplayInfoChanged // (Native|Protected) // @ game+0x3182fa0
	struct TScriptInterface<IUserAction> GetUserAction(); // Function ShooterGame.WrapperUserAction.GetUserAction // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x31954d0
};

// Class ShooterGame.XRayTarget
// Size: 0x3e8 (Inherited: 0x3d0)
struct AXRayTarget : AActor {
	struct URoundPersistenceComponent* Persistence; // 0x3d0(0x08)
	struct USceneComponent* SceneRoot; // 0x3d8(0x08)
	float Radius; // 0x3e0(0x04)
	char pad_3E4[0x4]; // 0x3e4(0x04)
};

// Class ShooterGame.ZoomFovComponent
// Size: 0x528 (Inherited: 0x528)
struct UZoomFovComponent : UZoomComponent {
};

// Class ShooterGame.ZoomManagerComponent
// Size: 0x110 (Inherited: 0xe8)
struct UZoomManagerComponent : UActorComponent {
	struct UZoomComponent* ZoomComponent; // 0xe8(0x08)
	struct FZoomTransitionSettings ZoomTransitionSettings; // 0xf0(0x14)
	char pad_104[0x4]; // 0x104(0x04)
	struct AShooterCharacter* CurrentOwningCharacter; // 0x108(0x08)

	void UpdateAttributeBinding(struct AActor* NewOwner); // Function ShooterGame.ZoomManagerComponent.UpdateAttributeBinding // (Final|Native|Private) // @ game+0x3199350
	void UnZoom(struct AAresEquippable* Equippable, float TimeDuration); // Function ShooterGame.ZoomManagerComponent.UnZoom // (Final|Native|Static|Public|BlueprintCallable) // @ game+0x3199290
	void SetZoomComponent(struct UZoomComponent* ZoomComponent); // Function ShooterGame.ZoomManagerComponent.SetZoomComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x3132d50
	void OnZoomDisabledChanged(struct UAresAbilitySystemComponent* AbilitySystem, struct FGameplayAttribute& Attribute, float OldValue, float NewValue); // Function ShooterGame.ZoomManagerComponent.OnZoomDisabledChanged // (Final|Native|Private|HasOutParms) // @ game+0x3198d10
	void OnOwningEquippableUnequipped(); // Function ShooterGame.ZoomManagerComponent.OnOwningEquippableUnequipped // (Final|Native|Private) // @ game+0x3198cf0
	void OnOwningEquippableSetOwner(struct AAresEquippable* Equippable, struct AActor* NewOwner); // Function ShooterGame.ZoomManagerComponent.OnOwningEquippableSetOwner // (Final|Native|Private) // @ game+0x3198c20
	struct UZoomComponent* GetZoomComponent(); // Function ShooterGame.ZoomManagerComponent.GetZoomComponent // (Final|Native|Public|BlueprintCallable) // @ game+0x2cec9b0
};

// Class ShooterGame.ZoomMultiplierComponent
// Size: 0x530 (Inherited: 0x528)
struct UZoomMultiplierComponent : UZoomComponent {
	enum class EZoomMultiplierType ZoomMultiplierType; // 0x528(0x01)
	char pad_529[0x7]; // 0x529(0x07)

	enum class EZoomMultiplierType GetZoomMultiplierType(); // Function ShooterGame.ZoomMultiplierComponent.GetZoomMultiplierType // (Final|Native|Public|BlueprintCallable|BlueprintPure|Const) // @ game+0x3198b70
};

